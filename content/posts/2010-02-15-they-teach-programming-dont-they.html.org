---
title: "They teach programming, don't they?"
date: "2010-02-15"
tags:
- csed
draft: false
---
<!DOCTYPE html>

One evening, many years ago, when I was in college, I had an epiphany. Maybe not as enlightening as the epiphany I had while watching "The Mummy Returns"&nbsp; many years later, but that's a story for another day.<br /><br />While working on some class project, I realized that soon, within a couple of&nbsp; years, I'd be working for a real company and I'd actually have to write code that <b>REALLY</b> works. Not just something that gets past the grader, or answers all the test cases. Something well designed, well written, maintainable, and reliable.&nbsp; Scary thought.<br /><br />I've thought about this a lot since I started teaching computer science. We teach programming languages, algorithms, and assign projects. Maybe the students hear something like "comment your code," or "use good variable names," but we never really give them the tools to take a project from description to completion.<br /><br />Too often young programmers rush to the keyboards and write copious amounts of code without any plan and with little discipline. In short they do everything they can to set themselves up for a difficult road ahead.<br /><div style="text-align: left;"><br /></div>There are probably a number of reasons for this. When we teach introductory&nbsp; programming, assignments are so short and simple that we can't easily model good programming techniques, and if we do, it's difficult to get students to "buy in" since it's hard for them to see the value. As complexity increases, we're faced with limited time to actually cover the prescribed course content, leaving little room for a protracted unit on "program development."<br /><br />I'm certainly not going to be so bold as to say that I have the answer to the problem, but I've tried some things to help address it.<br /><br />We'll take a few class days to take a project from beginning to end. Something that can be done incrementally but isn't particularly difficult. <br /><br />This semester, I attempted this with my AP students. We wrote a series of text filters in Java. I lifted the topic from Kernighan and Plauger's "Software Tools." We wrote versions of character count, word count, detabbing a file, run length encoding and a simple version of tr. Nothing too heavy, but it allowed us to focus on the development piece rather than coming up with clever algorithms and data structures (which is what the rest of the class is for). The problem may be a little contrived, but I hope the benefits outweighed any issues with the choice of problem.<br /><br />We start by talking about the importance of understanding the problem, which includes finding out what "the client" wants and not making our own assumptions. Some times, I try to leave a little ambiguity to give us a platform to discuss the "what the client wants" issue.<br /><br />From there comes design, which might be mixed with writing some code to make sure we understand certain aspects of the problem and the environment we'll be working in.<br /><br />Once we have a design and a plan we can start incremental development. This is what I think is most important for the youngsters. I try to model and emphasize the idea of coding one "concept" at a time. Frequently testing that concept and only moving on once it's completed. <br /><br />I'll also talk about things that have worked for me along the way. I always like to put consistent comment blocks at the top of my functions, trying to keep functions a "screen length" or shorter, my preferences for naming, indentation, etc. Of course, I'm careful to emphasize that my way works for me, but it's just one approach. I try to present alternatives when possible.<br /><br />Other ideas I try to emphasize is actually reading ones code and having others read it. Last semester I experimented with "pair programming" and while I have no idea how good it is as a professional development technique, I like it from a pedagogical point of view.<br /><br />I think presenting these ideas while actually developing the project helps to drive in the concepts.<br /><br />I'd like to think adding units like this helps to develop stronger programmers. Any teachers out there -- your thoughts?<br /><br /><br /><center><br /><br /><br /><table style="width: auto;"><tbody><tr><td><a href="http://picasaweb.google.com/lh/photo/ljE9q55t6ltZzZVKwTzA9g?authkey=Gv1sRgCOSJ5YGwwb7e_AE&amp;feat=embedwebsite"><img src="http://lh3.ggpht.com/_7YN3bkG0cSc/S3m2eJx5aiI/AAAAAAAAFj4/I57gKwaFxzQ/s144/2010-02-15%2008.49.59.jpg" /></a></td></tr></tbody></table></center><br /><br />In an unrelated note, yesterday was valentines day. We don't really do anything to celebrate it, but in anticipation of her new loom, Devorah had to clear off some room in the apartment. She stumbled upon love letters sent between my parents back in the fifties. If you'd like a small taste of the past, you can see here post on squidknits <a href="http://squid-knits.blogspot.com/2010/02/love-letters.html">here</a>.<br /><br />Although we have gained all this immediacy with the electronics age, it sometimes feels that somethings been lost.<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/468689896075458340-3365288827630860097?l=cestlaz.blogspot.com' alt='' /></div>
