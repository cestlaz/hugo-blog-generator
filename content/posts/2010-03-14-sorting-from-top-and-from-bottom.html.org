---
title: "Sorting from the top and from the bottom"
date: "2010-03-14"
tags:
- pedagogy
-  algorithms
draft: false
---

<div id="content"><h1 class="title">Sorting from the top and from the bottom</h1> <p>I've been meaning to write this post for a couple of weeks, but some times life just gets in the way. </p><p>I've always thought it important to arm students with as many different tools with which to attack problems as possible. As such, the courses I teach use a number of different languages, each highlighting a different paradigm and thought process. The hope is that by the end of the sequence, they can look at problems from many different angles. </p><p>In my advanced placement classes, we recently studied sorting algorithms.  It think the quicksort is a good example of a problem that can be looked at from multiple points of view. </p><p>In my experiences talking to teachers and students who cut there teeth using languages like Java, C, or C++, much of the discussion deals with the actual partitioning of the array. Comparing elements, swapping them and arriving in the middle. One might end up with something like this as a first cut: </p>   <pre class="src src-java"><br /><span class="linenr"> 1:  </span><span style="color: #a020f0;">public</span> <span style="color: #228b22;">void</span> <span style="color: #0000ff;">qsort</span>(<span style="color: #228b22;">int</span>[] <span style="color: #a0522d;">a</span>,<span style="color: #228b22;">int</span> <span style="color: #a0522d;">l</span>, <span style="color: #228b22;">int</span> <span style="color: #a0522d;">h</span>)<br /><span class="linenr"> 2:  </span>{<br /><span class="linenr"> 3:  </span><span style="color: #a020f0;">if</span> (l&gt;=h)<br /><span class="linenr"> 4:  </span>  <span style="color: #a020f0;">return</span>;<br /><span class="linenr"> 5:  </span><br /><span class="linenr"> 6:  </span><span style="color: #b22222;">/* </span><span style="color: #b22222;">Just use lowest index as pivot for now */</span><br /><span class="linenr"> 7:  </span><span style="color: #228b22;">int</span> <span style="color: #a0522d;">pivot</span> = a[l];<br /><span class="linenr"> 8:  </span><span style="color: #228b22;">int</span> <span style="color: #a0522d;">low</span>=l;<br /><span class="linenr"> 9:  </span><span style="color: #228b22;">int</span> <span style="color: #a0522d;">high</span>=h;<br /><span class="linenr">10:  </span><br /><span class="linenr">11:  </span><span style="color: #b22222;">/* </span><span style="color: #b22222;">partition the data set around the pivot value */</span><br /><span class="linenr">12:  </span><span style="color: #a020f0;">while</span> (l&lt;=h)<br /><span class="linenr">13:  </span>{<br /><span class="linenr">14:  </span>  <span style="color: #a020f0;">while</span> (a[l]&lt;pivot)<br /><span class="linenr">15:  </span>    l++;<br /><span class="linenr">16:  </span>  <span style="color: #a020f0;">while</span> (a[h]&gt;pivot)<br /><span class="linenr">17:  </span>    h--;<br /><span class="linenr">18:  </span>  <span style="color: #a020f0;">if</span> (l&lt;=h)<br /><span class="linenr">19:  </span>  {<br /><span class="linenr">20:  </span>    <span style="color: #228b22;">int</span> <span style="color: #a0522d;">tmp</span>=a[l];<br /><span class="linenr">21:  </span>    a[l]=a[h];<br /><span class="linenr">22:  </span>    a[h]=tmp;<br /><span class="linenr">23:  </span>    l++;<br /><span class="linenr">24:  </span>    h--; <br /><span class="linenr">25:  </span>  }<br /><span class="linenr">26:  </span>}<br /><span class="linenr">27:  </span><br /><span class="linenr">28:  </span><span style="color: #b22222;">/* </span><span style="color: #b22222;">sort items below and above the pivot */</span><br /><span class="linenr">29:  </span>qsort(a,low,l-1);<br /><span class="linenr">30:  </span>qsort(a,l,high);<br /><span class="linenr">31:  </span><br /><span class="linenr">32:  </span>}<br /></pre>    <p>A fair amount of time and detail is spent dealing with the low level movement of data within the array . This is important &ndash; good stuff, but it takes the emphasis away from the higher level elegance of the algorithm. </p><p>The quicksort can be described as: </p>  <ol><li> If the size of the list is <= 1, return.</li><li><ol><li> Select a pivot element</li><li> Generate the list L of items smaller than the pivot</li><li> Generate the list H of items larger than the pivot</li><li> the sorted list is qsort(L)+pivot+qsort(R)</li></ol></ol> <p>Having seen some scheme in their intro class, our students have a tool with which we can describe the quicksort in terms much closer to the description (allowing for the fact that this doesn't deal with multiple values equal to the pivot correctly): </p>    <pre class="src src-scheme"><br /><span class="linenr"> 1:  </span>(<span style="color: #a020f0;">define</span> <span style="color: #0000ff;">makefilter</span><br /><span class="linenr"> 2:  </span>  (<span style="color: #a020f0;">lambda</span> (op x)<br /><span class="linenr"> 3:  </span>    (<span style="color: #a020f0;">lambda</span> (n) (op x n))))<br /><span class="linenr"> 4:  </span><br /><span class="linenr"> 5:  </span>(<span style="color: #a020f0;">define</span> <span style="color: #0000ff;">qsort</span> <br /><span class="linenr"> 6:  </span>  (<span style="color: #a020f0;">lambda</span> (l)<br /><span class="linenr"> 7:  </span>    (<span style="color: #a020f0;">cond</span> ((null? l) '())<br /><span class="linenr"> 8:  </span>          (<span style="color: #a020f0;">else</span> (append (qsort (filter (makefilter &gt; (car l)) l))<br /><span class="linenr"> 9:  </span>                        (list (car l))<br /><span class="linenr">10:  </span>                        (qsort (filter (makefilter &lt; (car l)) l)))))))<br /></pre>    <p>This allows us to discuss the quicksort at a much higher level and focus on things like selecting a good pivot or the analysis of the run time. I believe this makes it much easier to really understand what's going on. </p><p>Having discussed it in this functional context, we can also look at the same thing in a scripting language such as python: </p>   <pre class="src src-python"><br /><span class="linenr">1:  </span><span style="color: #a020f0;">def</span> <span style="color: #0000ff;">qsort</span>(l):<br /><span class="linenr">2:  </span>    <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">len</span>(l)&lt;=1:<br /><span class="linenr">3:  </span>        <span style="color: #a020f0;">return</span> l<br /><span class="linenr">4:  </span>    <span style="color: #a020f0;">else:</span><br /><span class="linenr">5:  </span>        <span style="color: #a020f0;">return</span> qsort([x <span style="color: #a020f0;">for</span> x <span style="color: #a020f0;">in</span> l[1:] <span style="color: #a020f0;">if</span> x &lt;= l[0]]) + [l[0]]+\<br /><span class="linenr">6:  </span>            qsort([x <span style="color: #a020f0;">for</span> x <span style="color: #a020f0;">in</span> l[1:] <span style="color: #a020f0;">if</span> x &gt; l[0]])<br /><span class="linenr">7:  </span><br /></pre>    <p>Again, the focus is on the algorithm, not the array or list manipulation. </p><p>Looking at the problem from both the more abstract side, which in this case functional languages allow, and the more concrete, as we did in Java gives our students more tools with which to attack problems. </p><p>Just some food for thought. </p>       </div><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/468689896075458340-2070280110494147035?l=cestlaz.blogspot.com' alt='' /></div>
