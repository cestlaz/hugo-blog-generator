---
title: "How it all began"
date: "2015-10-09"
tags:
- misc
draft: false
---


<style>
div.center {text-align:center;}
</style>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"></h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
This past week, Garth Flint wrote a couple of posts on how he
got to be a CS teacher and on being a CS teacher. You can find them here:
</p>
<ul class="org-ul">
<li><a href="https://gflint.wordpress.com/2015/10/07/so-you-want-to-be-a-cs-teacher-part-1/">Part 1</a></li>
<li><a href="https://gflint.wordpress.com/2015/10/08/so-you-want-to-be-a-cs-teacher-part-2/">Part 2</a></li>
</ul>

<p>
They're both well worth a read.
</p>

<p>
It got me thinking about how I got my start.
</p>

<p>
I never planned on being a teacher. I figured I'd just work in
tech. After working my way through college, fresh CS degree in hand, I
landed at Goldman Sachs. I had other opportunities but the tech scene
was very different. You could (basically):
</p>
<ul class="org-ul">
<li>Work for a financial house or insurance company</li>
<li>Do niche consulting</li>
<li>travel out of the city to Bellcore, AT&amp;T or IBM.</li>
</ul>

<p>
Well, I didn't drive and wasn't going to do consulting so I ended up
on Wall Street. I worked there for a bit but it didn't do it for me,
then tried a consulting gig. No better. Wall street never appealed to
me and at the time, more programming type jobs involved you working
alone on a computer in an office or a cube all day.
</p>

<p>
So, for no particular reason, I decided to give teaching a go.
</p>

<p>
I always wonder, if I had come along a few years later if I would have
stayed in pure tech.
</p>

<p>
I had zero teaching credentials but there was a math teacher shortage
at the time. By taking a couple of CS classes as math classes
(numerical methods, algorithms) they justified giving me temporary
license. I would have to take a handful of Ed credits within a couple
of years and later get a masters (which I knew would be in CS, no way
was I getting an Education degree).
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2"></h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
So, I started at Seward Park High School as a math teacher. Best thing
that could have happened to me. I was working with an incredibly
diverse population - high achieving kids, low achieving kids,
immigrants, multi-generational Americans, delightful kids and kids on
parole. That's where I developed my chops.
</p>

<p>
Knowing that I was a CS guy the math chairman started having me teach
the basic programming course and later APCS.
</p>

<p>
A couple of years later, I was bumped to Stuy. Taught math and the
rest of my history can be seen <a href="http://cestlaz.github.io/2014/09/17/stuycs-spectator.html#.VhfhBt8qcbw">here</a>.
</p>

<p>
Garth talks about requirements and Alfred Thompson, in his <a href="http://blog.acthompson.net/2015/10/an-inside-look-at-being-computer.html">link to
Garth's posts</a> talks about the problems of CS teacher isolation. It
took a long time and it was hard work, but I started in a school with
no CS to speak and no CS teachers and now we have a required course,
between six and 10 CS teachers depending on the year, and a thoroughly
oversubscribed program. Of course, if you're at a small school, you
can't really do that. I remember in the early years, when it came to
course signup time, I'd have to visit every math class in the building
on one day to hock my courses. I'm glad those days are gone.
</p>

<p>
Garth also makes a great point about all there is to learn as a real
CS teacher. The best math teachers I know love doing math and love
solving problems but by and large, they're not learning new subfields
every year. Over my time as a teacher I've learned, either by choice
or necessity:
</p>

<ul class="org-ul">
<li>new fields such as
<ul class="org-ul">
<li>relearning AI, which is radically different then when I was in
college</li>
<li>Data mining</li>
<li>Stats</li>
<li>OOP</li>
<li>Machine Learning</li>
<li>UX</li>
<li>HCI</li>
</ul></li>
<li>new languages
<ul class="org-ul">
<li>Java</li>
<li>C++</li>
<li>Javascript</li>
<li>Haskell (a bit)</li>
<li>Python</li>
<li>Perl</li>
</ul></li>
<li>And tons of technologies
<ul class="org-ul">
<li>Unix as a toolset</li>
<li>system administration</li>
<li>network administration.</li>
<li><p>
Git
</p>

<p>
and many more.
</p></li>
</ul></li>
</ul>

<p>
On the other hand, since I do work with many other CS teachers, I
might be a little bit of an outlier. Some of my colleagues also work
to keep current and learn new things while others are content with
their knowledge base and are happy to teach what they're currently
teaching. That's not to say that they don't work on their craft, but
rather, they're in a comfort zone of knowledge.
</p>

<p>
So what's next? As initiatives like CS4All progress, CS education will
become more formalized. You all know my fear about the current
efforts - CS Ed will go the way of Math Ed and we'll be left with Meh
CS education for all. If that's the case, and I hope I'm wrong, many
of Garth's issues will disappear. CS across the nation will become
more generic but more accessible and CS teachers will hopefully know
how to teach their courses but maybe not too much more.
</p>

<p>
Even if that is the case, there will hopefully still be places for us
old time gluttons for punishment.
</p>
</div>
</div>
