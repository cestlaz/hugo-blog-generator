---
title: "Forty minutes to the punch line or \"we'll never look at functions the same way again\""
date: "2014-11-12"
tags:
- pedagogy
draft: false
---


<style>
div.center {text-align:center;}
</style>

<div id="outline-container-unnumbered-1" class="outline-2">
<h2 id="unnumbered-1"></h2>
<div class="outline-text-2" id="text-unnumbered-1">
<p>
How many times do we teach something and leave the kids thinking:
</p>

<p>
"what's the point of this?" "When will I use this?" or even just the
plain old fashioned "that's weird."
</p>

<p>
It's pretty cool when a lesson starts out that way but you get to the
payoff by the end of the class.
</p>

<p>
Today we started exploring some advanced python.
</p>

<p>
We started by showing that you can assign functions to variables or
pass them as parameters:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #a020f0;">def</span> <span style="color: #0000ff;">inc</span>(x):
<span style="color: #a020f0;">return</span> x+1
<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">dec</span>(x):
<span style="color: #a020f0;">return</span> x-1

<span style="color: #a0522d;">f</span> = inc
<span style="color: #a020f0;">print</span> f(5)

<span style="color: #a0522d;">flist</span> = [inc,dec]

<span style="color: #a020f0;">print</span> flist[1](5)
</pre>
</div>

<p>
We then looked at closures in python:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #a020f0;">def</span> <span style="color: #0000ff;">makeAdder</span>(n):
<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">inner</span>(x):
<span style="color: #a020f0;">return</span> x+n
<span style="color: #a020f0;">return</span> inner

<span style="color: #a0522d;">add3</span> = makeAdder(3)
<span style="color: #a0522d;">add5</span> = makeAdder(5)

<span style="color: #a020f0;">print</span> add3(10)
<span style="color: #a020f0;">print</span> add5(10)
</pre>
</div>

<p>
The idea that we can make a function that builds and returns a
function. When we call <b><b>makeAdder(3)</b></b>, the 3 is passed as parameter
n so the inner function reduces to <b><b>return x+3</b></b> and then we return
that inner function. When we later run it: add3(10) it adds
10+3. makeAdder(5) works similarly but passing a 5 in for n instead
of a 3.
</p>

<p>
Even a somewhat clunky way of doing class type abstractions:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #a020f0;">def</span> <span style="color: #0000ff;">make_counter</span>():
<span style="color: #b22222;"># </span><span style="color: #b22222;">private "instance" data</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">has to be a list due to weird python scoping rules</span>
<span style="color: #a0522d;">count</span> = [0]

<span style="color: #b22222;"># </span><span style="color: #b22222;">public methods</span>
<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">inc</span>():
<span style="color: #a0522d;">count</span>[0]=count[0]+1
<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">dec</span>():
<span style="color: #a0522d;">count</span>[0]=count[0]-1
<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">reset</span>():
<span style="color: #a0522d;">count</span>[0]=0
<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">get</span>():
<span style="color: #a020f0;">return</span> count[0]

<span style="color: #b22222;"># </span><span style="color: #b22222;">send back a dictionary so we have access to all the methods</span>
<span style="color: #a020f0;">return</span> {<span style="color: #8b2252;">'inc'</span>: inc, <span style="color: #8b2252;">'dec'</span>: dec, <span style="color: #8b2252;">'reset'</span>: reset, <span style="color: #8b2252;">'get'</span>: get}

<span style="color: #a0522d;">c1</span> = make_counter()
<span style="color: #a0522d;">c2</span> = make_counter()

<span style="color: #b22222;"># </span><span style="color: #b22222;">we've got to use the clunky list notation </span>
c1[<span style="color: #8b2252;">'inc'</span>]()
c1[<span style="color: #8b2252;">'inc'</span>]()
c1[<span style="color: #8b2252;">'inc'</span>]()
<span style="color: #a020f0;">print</span> c1[<span style="color: #8b2252;">'get'</span>]()
c2[<span style="color: #8b2252;">'inc'</span>]()
<span style="color: #a020f0;">print</span> c2[<span style="color: #8b2252;">'get'</span>]()
c1[<span style="color: #8b2252;">'reset'</span>]()
<span style="color: #a020f0;">print</span> c1[<span style="color: #8b2252;">'get'</span>]()
</pre>
</div>

<p>
Up to now the students are able to see how this works but the why is
unclear.
</p>

<p>
So now we'll look at where this is useful.
</p>

<p>
Let's suppose we have routines like the following. It returns a
string:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #a020f0;">import</span> random
<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">get_name</span>():
<span style="color: #a0522d;">names</span> = [<span style="color: #8b2252;">'tom'</span>,<span style="color: #8b2252;">'sue'</span>,<span style="color: #8b2252;">'harry'</span>,<span style="color: #8b2252;">'lisa'</span>,<span style="color: #8b2252;">'sarah'</span>,<span style="color: #8b2252;">'horatio'</span>]
<span style="color: #a020f0;">return</span> random.choice(names)
</pre>
</div>

<p>
get<sub>name</sub> and routines like it might be scattered throughout our
code. Let's suppose, for some strange reason, we want to double the
name every time we use it. A "traditional" way of doing this might be:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #a020f0;">def</span> <span style="color: #0000ff;">dble</span>(f):
<span style="color: #a0522d;">name</span> = f()
<span style="color: #a020f0;">return</span> name+name

<span style="color: #a020f0;">print</span> dble(get_name) <span style="color: #b22222;"># </span><span style="color: #b22222;">returns something like tomtom</span>
</pre>
</div>

<p>
Here, we pass a function which returns a string and then dble returns
that string repeated twice. The problem here is that if we've got
get<sub>name</sub> all over our code base, we have to find it and change each
instance to <b><b>dble(get<sub>name</sub>)</b></b>
</p>

<p>
What if we write it as a function that returns a function:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #a020f0;">def</span> <span style="color: #0000ff;">doubler</span>(f):
<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">inner</span>():
<span style="color: #a0522d;">name</span>=f()
<span style="color: #a020f0;">return</span> name+name
<span style="color: #a020f0;">return</span> inner
</pre>
</div>

<p>
Now, in this case, we can do something like:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #b22222;"># </span><span style="color: #b22222;">make a new function that wraps get_name in "inner"</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">when we call inner, it returns the string twice</span>
<span style="color: #a0522d;">f</span> = doubler(get_name)
<span style="color: #b22222;"># </span><span style="color: #b22222;">and then later</span>
<span style="color: #a020f0;">print</span> f() <span style="color: #b22222;"># </span><span style="color: #b22222;">will print something like tomtom</span>
</pre>
</div>

<p>
The cool part is that we can also do this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #a0522d;">get_name</span> = double(get_name)
</pre>
</div>

<p>
And then whenever we call our new <b><b>get<sub>name</sub></b></b> we end up calling the
wrapped function.
</p>

<p>
This was the first A-ha. We don't have to change get<sub>name</sub> all over our
code base - we only have to change it once.
</p>

<p>
Once we write a function like doubler, instead of re-assigning
get<sub>name</sub> as we did above, we can do the following:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #228b22;">@doubler</span>
<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">get_name</span>():
<span style="color: #b22222;"># </span><span style="color: #b22222;">rest of code as defined above</span>

<span style="color: #228b22;">@doubler</span>():
<span style="color: #a020f0;">def</span> <span style="color: #0000ff;">demo</span>():
<span style="color: #a020f0;">return</span> <span style="color: #8b2252;">"hello"</span>
</pre>
</div>

<p>
The second example will have demo return "hellohello" whenever we
invoke it.
</p>

<p>
A Python decorator is merely shorthand for calling a wrapper type
function like doubler.
</p>

<p>
This was the second A-ha moment &#x2013; we can write functions that
transform functions.
</p>

<p>
We'll cover more decorator and closure plumbing tomorrow and then
start doing some fun stuff with these concepts.
</p>
</div>
</div>
