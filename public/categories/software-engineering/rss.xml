<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software engineering on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/categories/software-engineering/</link>
    <description>C&#39;est la Z (software engineering)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 07 Aug 2019 19:20:17 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/categories/software-engineering/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Exploring Complex Projects</title>
      <link>https://cestlaz.github.io/post/exploring-complex-projects/</link>
      <pubDate>Wed, 07 Aug 2019 19:20:17 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/exploring-complex-projects/</guid>
      <description>
&lt;p&gt;
A couple of weeks ago there were some discussions about students
working on and in larger projects. Most CS educators think it&amp;#39;s a good
idea to expose students to large projects even if we don&amp;#39;t all agree
as to what the best time is.
&lt;/p&gt;
&lt;p&gt;
Regardless of when, figuring out a large project can be a bear and
that&amp;#39;s not just true for students. I saw this on my Tweetstream about
onboarding software engineers:
&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Leaving them alone with their laptop and telling them to look at the codebase. No purpose, directionless, no assistance or context or perspective. Show me a codebase that is documented exstensively enough to support that and Iâ€™ll be stunned. &lt;a href=&#34;https://twitter.com/hashtag/devdiscuss?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#devdiscuss&lt;/a&gt;&lt;/p&gt;&amp;mdash; Laurie (@laurieontech) &lt;a href=&#34;https://twitter.com/laurieontech/status/1158911795341529088?ref_src=twsrc%5Etfw&#34;&gt;August 7, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
If we&amp;#39;re lucky enough to use a large project specifically designed for
students there might be sufficient documentation but don&amp;#39;t count on
it so here are some suggestions and tools that might be helpful in
figuring out a complex project. 
&lt;/p&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Description and Documentation
&lt;/h3&gt;
&lt;p&gt;
Even if there isn&amp;#39;t a huge amount of documentation the project might
have a description or a Readme file. There also might be a build file -
something like a Makefile that could give some indication as to the
lay of the land. With a Readme or description you at least know what
the project is supposed to do and if the build file isn&amp;#39;t too complex
you might get some clue as to code organization. 
&lt;/p&gt;
&lt;p&gt;
Another thing to look at is if there&amp;#39;s consistent documentation. A
Java project might follow the &lt;a href=&#34;http://www.mcs.csueastbay.edu/~billard/se/cs3340/ex7/javadoctutorial.html&#34;&gt;Javadoc&lt;/a&gt; specification and if so, the
build system can probably build a web site that allows you to navigate
through all the classes. Other languages support similar tools. Check
out Doxygen which is like Javadoc but sypports a wide range of languages.
&lt;/p&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Tests
&lt;/h3&gt;
&lt;p&gt;
Another thing to look for are a project&amp;#39;s unit tests. If they exist
they can give you some good insights into the project. You&amp;#39;ll see how
aspects of the code are used and also entry points to start looking at
the code. 
&lt;/p&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Logging
&lt;/h3&gt;
&lt;p&gt;
Next up - logging. You can add logging statements using your languages
logging facilities or just print to stderr or a file. Put in a bunch
of output statements along with time and location stamps and run the
program. Then use one of the tools mentioned below to help parse the
output. This can give an idea of what&amp;#39;s running when and can
eventually help you to understand the code. 
&lt;/p&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Debugging 
&lt;/h3&gt;
&lt;p&gt;
Last up here is using a debugger. Load the project up in a debugger,
set a breakpoint somewhere and let-er-rip. When you hit the breakpoint
you can check the state of the application. Another idea is to set
watchpoints. When you set a watchpoint you tell the debugger to watch
until a variable is set to a particular value (or is greater or less
than) and it breaks your program when that happens. Set a watchpoint
and you can likewise check the programs state when your program
breaks.
&lt;/p&gt;
&lt;p&gt;
Another think to look at is the stack trace under the debugger when
you hit those watchpoint breaks. That will tell you the sequence of
function calls when the watchpoint tripped.
&lt;/p&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Tools 
&lt;/h2&gt;
&lt;p&gt;
Most programming environments also have some tools to make all of the
above explorations a bit easier. Here are a few of my favorites.
&lt;/p&gt;
&lt;p&gt;
For the examples, we&amp;#39;ll work in small three file project I set up. A
small linked list in Java. It has three files:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Node.java
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
myLinkedList.java
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Driver.java
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
but it could have any number of files in any number of directories.
&lt;/p&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
Ctags
&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Ctags&#34;&gt;Ctags&lt;/a&gt; goes way back. I first used ctags for C programs. Now there are
a bunch of implementations for a bunch of languages. The idea is you
run ctags (or etags or gtags etc.) and it creates an index if all your
functions, classes, methods or whatever. Your editor can then easily
jump from a call to a definition and back. Most editors support some
version of ctags and some don&amp;#39;t even need the ctags indexing
engine. Here&amp;#39;s an example of dumb-jump in Emacs which performs tag
like searching without the indexing. We move our cursor to the add
method, hit the magic key and we&amp;#39;re taken to the definition:
&lt;/p&gt;
&lt;p&gt;
&lt;figure class=&#34;z_image_center&#34;&gt;
    &lt;img src=&#34;https://cestlaz.github.io/img/dumb-jump.gif&#34;/&gt; 
&lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;
This can be HUGE in understanding code.
&lt;/p&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
Grep
&lt;/h3&gt;
&lt;p&gt;
Grep is a pretty ancient tool going back to the 1970s.
&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/NTfOnGZUZDk&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Bascially, it can search through a file or files for text. Most
versions can use &lt;a href=&#34;https://www.janmeppe.com/blog/regex-for-noobs/&#34;&gt;Regular Expressions&lt;/a&gt; for wild card searches. 
&lt;/p&gt;
&lt;p&gt;
While ctags is great for navigating function and method calls
sometimes you&amp;#39;re just looking for a string. For example, if you&amp;#39;re
looking for the string &amp;#34;hello world&amp;#34; in your code  you can run &lt;code&gt;grep
&amp;#34;hello world&amp;#34; *java&lt;/code&gt;. The problem here is that it will only work in
one directory. That brings us to:
&lt;/p&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
Ripgrep
&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;Ripgrep&lt;/a&gt; is grep on steroids. There are a number of similar programs -
Silver Searcher, Ack, and Git Grep to name three. They all are much
faster than grep, can focus on files based on type, omit files based
on various criteria, and more. Currently I&amp;#39;ve been using Ripgrep.
&lt;/p&gt;
&lt;p&gt;
I wanted to find the code I used in my blog to embed an code sample
but couldn&amp;#39;t remember exactly how to do it. Here&amp;#39;s how I used ripgrep
to help:
&lt;/p&gt;
&lt;p&gt;
&lt;figure class=&#34;z_image_center&#34;&gt;
    &lt;img src=&#34;https://cestlaz.github.io/img/rg.gif&#34;/&gt; 
&lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;
First I typed &lt;code&gt;rg -t org python&lt;/code&gt;. This looks at all the .org files in
the project hierarchy for lines with the word &lt;code&gt;python&lt;/code&gt;. From there I
saw that what the highlight code started with so I ran ripgrep
again this time adding the &lt;code&gt;-A5&lt;/code&gt; which printed out 5 lines after each
match so I could see a complete example.
&lt;/p&gt;
&lt;p&gt;
This just scratches the surface but I&amp;#39;m hoping you get the idea. The
other cool thing is that most editors integrate in ripgrep/silver
searcher/ack functionality so you can do the search right in your
editor and jump right over to the code in question.
&lt;/p&gt;
&lt;p&gt;
&lt;figure class=&#34;z_image_center&#34;&gt;
    &lt;img src=&#34;https://cestlaz.github.io/img/rg-emacs.gif&#34;/&gt; 
&lt;/figure&gt;

&lt;/p&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
There&amp;#39;s more
&lt;/h2&gt;
&lt;p&gt;
I&amp;#39;m sure there are more tips out there but these are my go to
techniques. Hope some of you find them helpful either for your own
work of for your students.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Compile Each Concept</title>
      <link>https://cestlaz.github.io/post/compile-each-concept/</link>
      <pubDate>Tue, 09 Oct 2018 14:46:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/compile-each-concept/</guid>
      <description>
&lt;p&gt;
We&amp;#39;ve all been there:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Student: Teacher, I need help
Teacher (comes over)
Student (shows screen listing three bazillion errors)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The student has just written pages of code and finally decided to try
to run it only to end up with pages of errors.
&lt;/p&gt;
&lt;p&gt;
Error messages can at times be hard to read for beginners but to see
and truth be told, they frequently don&amp;#39;t even read them but over the
years I&amp;#39;ve developed a practice that I&amp;#39;ve found helpful as a software
developer and if students adopt the same practice it can save them a
lot of time and effort.
&lt;/p&gt;
&lt;p&gt;
The idea is very simple. 
&lt;/p&gt;
&lt;p&gt;
Compile and test one concept at a time.
&lt;/p&gt;
&lt;p&gt;
It might seem silly, but if I&amp;#39;m writing a a program, my first compile
might be code that looks like this:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  using std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout;
  using std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
  {
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
or 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloWorld&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

      &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
	
      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
This might seem silly but it really doesn&amp;#39;t take any effort. I have a
key sequence to do this under Emacs and if I&amp;#39;m using an interactive
language like Python or Clojure I just have to hit &lt;code&gt;c-c c-c&lt;/code&gt; 
&lt;/p&gt;
&lt;p&gt;
This might seem silly but I do it out of muscle memory and it
immediately tells me I don&amp;#39;t have any syntax errors and my build system
works.
&lt;/p&gt;
&lt;p&gt;
Going further, I compile and test every time I code up what I call a
concept. What&amp;#39;s a concept? Let&amp;#39;s look at some code. A student might
write something like this to find prime number up to n:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a lot going on there. To me, a concept is
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
A loop
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A complex calculation
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
a conditional
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
All of these can have other concepts within.
&lt;/p&gt;
&lt;p&gt;
In the above code, I&amp;#39;d probable write it as follows, adding in tests
and print statements throughout the process:
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Step 1:
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Step 2
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i,j)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Step 3
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is not prime&amp;#34;&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Step 4 
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i,i_isPrime)
  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Step 5
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
It might not play out exactly this way but if not it would be something
similar. The idea is that if you test every time you add one concept
or construct there are fewer places where you can introduce an error.
&lt;/p&gt;
&lt;p&gt;
If you enter 100 lines before you test there are 100 places where
things can go wrong. If you type 10, there are only 10. On top of
that, if you&amp;#39;ve added 100 lines, conecptually you&amp;#39;ve probably added a
lot and the error can be anywhere. While it&amp;#39;s not always the case,
most of the time, if you just added an &lt;strong&gt;if&lt;/strong&gt;, the problem will be in the
&lt;strong&gt;if&lt;/strong&gt; or as a result of the if. Same with a &lt;strong&gt;loop&lt;/strong&gt; or any other construct.
&lt;/p&gt;
&lt;p&gt;
Once you get in the habit, it&amp;#39;s easy and doesn&amp;#39;t really take any
time. A couple of keystrokes to compile and a couple more to run. 
&lt;/p&gt;
&lt;p&gt;
All too often students try to write everything at once and it&amp;#39;s so
rare that it works. If we can get them to develop incrementally
they&amp;#39;ll be able to write much more complex systems and write them with
much less frustration.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>