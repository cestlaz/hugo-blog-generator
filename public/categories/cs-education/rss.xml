<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS Education on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/categories/cs-education/</link>
    <description>C&#39;est la Z (CS Education)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Feb 2020 18:50:11 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/categories/cs-education/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Hunter Launches CS Teacher Certification Programs</title>
      <link>https://cestlaz.github.io/post/cs-ed-programs/</link>
      <pubDate>Wed, 26 Feb 2020 18:50:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-ed-programs/</guid>
      <description>&lt;p&gt;
It took a while but we&amp;#39;re finally here. Hunter College is launching
it&amp;#39;s &lt;a href=&#34;https://education.hunter.cuny.edu/admissions/graduate-programs/computer-science/&#34;&gt;Computer Science Teacher Certification&lt;/a&gt; programs. This was the
second big initiative I&amp;#39;ve been working on at Hunter. The first was
the Daedalus undergraduate CS scholars program. The Daedalus program
started my first year and is now providing the best value (and in my
opinion best) undergraduate CS opportunity in New York. 
&lt;/p&gt;
&lt;p&gt;
CS Certification took longer. I had to design the programs, they had to
make it through the whole CUNY governance process which even under
ideal circumstances takes around a year and then up through NYSED. Oh,
and we had to convince the state to create a certification area in the
meantime.
&lt;/p&gt;
&lt;p&gt;
In any event, we&amp;#39;re live and will kick off our certificate program
this summer. That&amp;#39;s the program designed for teachers already
certified in another subject area seeking to add the CS credential.
&lt;/p&gt;
&lt;p&gt;
So, what does the program look like? 
&lt;/p&gt;
&lt;p&gt;
It combines content and pedagogy. It was designed to give teachers the
CS they need and the knowledge of how to teach it. 
&lt;/p&gt;
&lt;p&gt;
In terms of content, you need some depth. In my opinion, that depth
should be at least a class beyond what you&amp;#39;d normally expect to
teach. For example a math teacher&amp;#39;s classes would max out with BC Calc
so I&amp;#39;d want a math teacher to have a math class beuond that. Since we
max out with APCS-A, my program takes teachers through data
structures - APCS-AB or CS2. 
&lt;/p&gt;
&lt;p&gt;
Teachers also need breadth. They don&amp;#39;t need to have a full course in
AI or a full class in Graphics etc. but a course that gives them
exposure to a number of fields. Enough to teach a unit, mentor a
precocious student, or learn more on their own to develop new
courses. We have a topics course for that.
&lt;/p&gt;
&lt;p&gt;
To round out the CS part of the program we have a programming heavy
ethics course. While ethics are woven throughout all the courses - CS
and CS Ed we felt that this standalone course also adds great value to
our program.
&lt;/p&gt;
&lt;p&gt;
This is a far cry from what I&amp;#39;ve seen in many other CS Ed programs
which follow the &amp;#34;you take it you teach it&amp;#34; philosophy. Basically
teachers take Exploring CS, APCS-P, and APCS-A and viola, you&amp;#39;ve got
CS teachers. Not in my book.
&lt;/p&gt;
&lt;p&gt;
Then we mix in the CS Ed. Two methods course where we introduce
additional content and how to teach it and also a curriculum design
course. The methods courses are based on current best practices and on
what I&amp;#39;ve learned helping teachers develop over the years but I&amp;#39;m
particularly excited about the curriculum design course. Over the
years I had to take three curriculum design courses and didn&amp;#39;t learn a
thing about curriculum design in any of them. I swore that if I ever
created an education course it would be a curriculum design course
that was good. Over the years, I
developed units, classes and full programs and learned a few
tricks. That in turn developed into the course. Teachers will study
existing curricula and develop their own and since the course
integrates fieldwork, they&amp;#39;ll deliver it as well.
&lt;/p&gt;
&lt;p&gt;
While I had internal help at Hunter, I want to send a special thanks
to JonAlf, Sam, and Topher - three of the best teachers I know who
provided feedback, assistance, and inspiration (sometimes without
knowing it) along with other friends in education, academia, and
industry throughout New York State who made sure I designed a program
that would work for teachers across New York State.
&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re looking to become certified to teach CS in New York schools,
check us out. You can find more info &lt;a href=&#34;https://education.hunter.cuny.edu/admissions/graduate-programs/computer-science/&#34;&gt;here&lt;/a&gt;. 
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Communicating With Students - maybe GitHub to the rescue</title>
      <link>https://cestlaz.github.io/post/communicating-with_students/</link>
      <pubDate>Wed, 13 Nov 2019 10:17:18 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/communicating-with_students/</guid>
      <description>&lt;p&gt;
Out of class student communication is always a challenge. There are
plenty of options:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Piazza
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Facebook group
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Slack, Discord, or other chat system
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Discourse, Vanilla or other discussion forum system
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Mailing list
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
but all have warts. 
&lt;/p&gt;
&lt;p&gt;
I shared my thoughts on a number of these options &lt;a href=&#34;https://cestlaz.github.io/posts/class-communications/&#34;&gt;a while ago&lt;/a&gt; but
thought I&amp;#39;d update them now.
&lt;/p&gt;
&lt;p&gt;
Most of my opinions hold form my earlier post. I was using and
continue to use a mailing list as I can be pretty sure that students
will get the email and they don&amp;#39;t have to go to any outside site or
application. Now, getting them to respond or just use it for general
class communication is another story.
&lt;/p&gt;
&lt;p&gt;
I also tried Slack again but it fared no better than my last attempt
with it. A couple of students used it but mostly, Slack was left to
die. I could have forced some engagement by posting assignments on
Slack but there wasn&amp;#39;t any real upside. 
&lt;/p&gt;
&lt;p&gt;
Earlier this semester some students said we should set up Discord -
&amp;#34;all the students use it!&amp;#34; was the line. Discord can be used as a chat
server similar to Slack but was created for gaming and also does voice
communication and other things. Personally, I prefer Slack. Funny
thing was that as I discussed this with my students I pointed out &amp;#34;you
know, we have a Slack channel set up and you all already have accounts
on it.&amp;#34; Most of them didn&amp;#39;t even remember. 
&lt;/p&gt;
&lt;p&gt;
So, we tried Discord and there was the usual burst of activity when we
first set it up but now it&amp;#39;s again, mostly dormant. A few students who
use Discord for personal use are usually online but I&amp;#39;d chalk it up as
another failure.
&lt;/p&gt;
&lt;p&gt;
So, what am I going to try next? GitHub. 
&lt;/p&gt;
&lt;p&gt;
GitHub doesn&amp;#39;t provide a general chat or email solution but it does
have what they call &amp;#34;issues.&amp;#34;  I got the idea from &lt;a href=&#34;https://twitter.com/ericdrosado&#34;&gt;Eric Rosado&lt;/a&gt; of
GitHub Education who clued me in on what issues can do.
&lt;/p&gt;
&lt;p&gt;
When you create a GitHub repository - something I do for class web
pages as well as assignments, you can also open issues. Issues are
associated with the project but also act as a lightweight forum. You
can go to a page and see all the issues (topics) and each one can have
a chain of messages (thread). You can tag them, filter them, and when
you&amp;#39;re done, close them (and reopen them later if needs be). The big
plusses are that:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
People who are subscribed to the repo (assignment, web page, etc.)
automatically get email alerts on the issues.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
You can explicitly tag people to force them to get alerts.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
You can directly reply via email so you don&amp;#39;t need to go to
GitHub.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Everything related to a given project or repo is self contained.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
If you&amp;#39;re using GitHub / GitHub classroom you can use issues to
create a logged communication with your students on specific assignments.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
I haven&amp;#39;t used this class wide yet - just experimented a bit but I
plan to dive in much more deeply next semester.
&lt;/p&gt;
&lt;p&gt;
This isn&amp;#39;t an overall communication solution. I&amp;#39;m sticking with a
mailing list for that until I can find a better solution but I think
using GitHub issues will be a win for project and assignment related
discussion.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I Speak Jive</title>
      <link>https://cestlaz.github.io/post/i-speak-jive/</link>
      <pubDate>Fri, 08 Nov 2019 07:48:14 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/i-speak-jive/</guid>
      <description>&lt;p&gt;
When I wrote about the &lt;a href=&#34;https://cestlaz.github.io/post/highedweb2019/&#34;&gt;HighWebEd&lt;/a&gt; I mentioned &lt;a href=&#34;https://twitter.com/elfin_john&#34;&gt;John William&lt;/a&gt;&amp;#39;&amp;#39;s talk on
Agile. He spoke about how the movie Airplane! was filmed in an Agile
manner and gave as an example the development of the &amp;#34;jive&amp;#34; scenes. 
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/zdCjbJ6NEfc&#34;&gt;https://www.youtube.com/embed/zdCjbJ6NEfc&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
&lt;p&gt;
Apparently the creative team had a script but it wasn&amp;#39;t working. The
first pair that read for the role, Norman Gibbs and Al White had their
owned take. Not only dir the team cast them on the spot and follow
their creative lead (hence Agile) but they also apparently apologized
to the two actors as the original attempt was so bad compared t what
Gibbs and White brought to the table.
&lt;/p&gt;
&lt;p&gt;
Of course, I would be negligent if I didn&amp;#39;t mention that the third
person to really make the jive sequence was Barbara Billingsley of
Leave it to Beaver fame.
&lt;/p&gt;
&lt;p&gt;
So, coming home, I had the Airplane! and the jive scenes in the back
of my mind. The other day at home, somehow or other we were chatting
about that great American masterpiece, The Muppet Show and of course,
the Swedish Chef.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/OUU6Rt6bi1U&#34;&gt;https://www.youtube.com/embed/OUU6Rt6bi1U&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
&lt;p&gt;
This brought me back the the &lt;a href=&#34;https://muppet.fandom.com/wiki/Encheferizer\&#34;&gt;Encheferizer&lt;/a&gt; (live version &lt;a href=&#34;http://www.tuco.de/home/jschef.htm&#34;&gt;here&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
So how is jive from Airplane! related to The Swedish Chef?
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Filters!!!!!!!!&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
A filter, in this context, is a program that takes data as input, in
this case a stream of text. Does some transformation to it and then
spits out the transformed text.
&lt;/p&gt;
&lt;p&gt;
Way back, Unix systems had a program called &lt;a href=&#34;https://en.wikipedia.org/wiki/Jive_filter&#34;&gt;jive&lt;/a&gt; that &amp;#34;translated&amp;#34;
text into Jive along with other filters including cockney and valspeak which
converted text to like, um, Valley Girl speak dontcha know. It was,
like, totally tubular. Of course one filter was named &lt;strong&gt;chef&lt;/strong&gt;, known as
the encheferizer which translated into Swedish Chef talk.
&lt;/p&gt;
&lt;p&gt;
Over time, the list of filters grew. Some were silly, some fun, and,
yes, some were kind of offensive.
&lt;/p&gt;
&lt;p&gt;
(side bar: as I write this bit of history, I just feel as though I&amp;#39;ve
been transported to Doug Peterson&amp;#39;s &lt;a href=&#34;https://dougpete.wordpress.com/2019/11/03/whatever-happened-to-183/&#34;&gt;Whatever happened to…&lt;/a&gt; posts and
feel as though I should write something like: Do you remember using
filters? Which ones did you use? etc.)
&lt;/p&gt;
&lt;p&gt;
Anyway, somewhere in here there&amp;#39;s the making of some nice class
projects but the challenge was how to do the translation. Some things
are easy. One filter was the Fudd filter which translated to &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Elmer_Fudd&#34;&gt;Elmer
Fudd&lt;/a&gt; speak. It&amp;#39;s easy enough to substitute &lt;strong&gt;w&lt;/strong&gt; for &lt;strong&gt;l&lt;/strong&gt; in a word as
Elmer says &amp;#34;Hew wow&amp;#34; instead of &amp;#34;Hello&amp;#34; but it&amp;#39;s hard to know if you&amp;#39;ve
got enough translation rules so that your students text will change
enough to be entertaining.
&lt;/p&gt;
&lt;p&gt;
Fortunately, I found &lt;a href=&#34;- https://github.com/hyperrealm/talkfilters&#34;&gt;this&lt;/a&gt; repo. It&amp;#39;s an implementation of a whole
bunch of filters:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
austro (Think Ahhnolld), b1ff (a web newbie), brooklyn, butthead (as
in Beevis and), chef, cockney, drawl, dubya, fudd, funetak, jethro,
jive, kraut, newspeak, pansy, pirate, postmodern, redneck, valspeak, warez
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I couldn&amp;#39;t get the system to compile but was able to dive into the
source code to see the rules. They&amp;#39;re in the &lt;strong&gt;.l&lt;/strong&gt; files. All of those
files are source for the &lt;a href=&#34;https://en.wikipedia.org/wiki/Lex_%2528software%2529&#34;&gt;Lex&lt;/a&gt; parser generator but even if you aren&amp;#39;t
familiar with Lex you should be able to figure out most of the rules.
&lt;/p&gt;
&lt;p&gt;
Some of the translators rely mostly on simple letter
substitutions. Fudd is such a filter:
&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;&lt;code class=&#34;language-lex&#34; data-lang=&#34;lex&#34;&gt;&amp;#34;r&amp;#34;         gtf_printf(&amp;#34;w&amp;#34;);
&amp;#34;l&amp;#34;         gtf_printf(&amp;#34;w&amp;#34;);
&amp;#34;qu&amp;#34;        gtf_printf(&amp;#34;qw&amp;#34;);
&amp;#34;th &amp;#34;       gtf_printf(&amp;#34;f &amp;#34;);
&amp;#34;th&amp;#34;        gtf_printf(&amp;#34;d&amp;#34;);
&amp;#34;n.&amp;#34;        gtf_printf(&amp;#34;n, uh-hah-hah-hah. &amp;#34;);
&amp;#34;R&amp;#34;         gtf_printf(&amp;#34;W&amp;#34;);
&amp;#34;L&amp;#34;         gtf_printf(&amp;#34;W&amp;#34;);
&amp;#34;Qu&amp;#34;        gtf_printf(&amp;#34;Qw&amp;#34;);
&amp;#34;QU&amp;#34;        gtf_printf(&amp;#34;QW&amp;#34;);&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
Dubya, on the other hand goes more with word substitutions:
&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;&lt;code class=&#34;language-lex&#34; data-lang=&#34;lex&#34;&gt;[Tt]errorist		|
[Oo]sama		|
[Bb]in(-|{WB})[Ll]ad(e|i)n	{ switch(gtf_random(3))
				  {
				  case 0: gtf_puts_case(&amp;#34;bad guy&amp;#34;); break;
				  case 1: gtf_puts_case(&amp;#34;evildoer&amp;#34;); break;
				  case 2: gtf_puts_case(&amp;#34;terrier&amp;#34;); break;
				  }
				}
[Uu]njustified/{NW}	     gtf_puts_case(&amp;#34;pre-emptive&amp;#34;);
[Cc]ontra/{NW}		     gtf_puts_case(&amp;#34;freedom-fighter&amp;#34;);
[Un]nder		     gtf_puts_case(&amp;#34;misunder&amp;#34;); BEGIN(INW);
[Mm]isunderstand	     gtf_puts_case(&amp;#34;misunderestimate&amp;#34;); BEGIN(INW);
[Mm]isunderstood             gtf_puts_case(&amp;#34;misunderestimated&amp;#34;); BEGIN(INW);
[Kk]ill/{NW}		     gtf_puts_case(&amp;#34;oblitifry&amp;#34;);
[Kk]illed/{NW}		     gtf_puts_case(&amp;#34;oblitifried&amp;#34;);
[Dd]destroy/{NW}	     gtf_puts_case(&amp;#34;destructifry&amp;#34;);
[Dd]destroyed/{NW}	     gtf_puts_case(&amp;#34;destructifried&amp;#34;);
[Rr]esonat/{NW}		     gtf_puts_case(&amp;#34;resignat&amp;#34;);
[Ee]ven(-|{WB})[Hh]anded/{NW} gtf_puts_case(&amp;#34;foreign-handed&amp;#34;);
[Ee]mbitter		     gtf_puts_case(&amp;#34;embetter&amp;#34;); BEGIN(INW);
[Ff]allability/{NW}	     gtf_puts_case(&amp;#34;fallacy&amp;#34;);
[An]tidote/{NW}		     gtf_puts_case(&amp;#34;anecdote&amp;#34;);&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
Some, like chef, pirate, and aust do some of both:
&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;&lt;code class=&#34;language-lex&#34; data-lang=&#34;lex&#34;&gt;[Tt]h		gtf_puts_case(&amp;#34;z&amp;#34;);
w		gtf_puts(&amp;#34;v&amp;#34;);
ou		gtf_puts(&amp;#34;u&amp;#34;);
&amp;#34;de &amp;#34;		gtf_puts(&amp;#34;d &amp;#34;);
&amp;#34;le &amp;#34;		gtf_puts(&amp;#34;l &amp;#34;);
&amp;#34;me &amp;#34;		gtf_puts(&amp;#34;m &amp;#34;);
&amp;#34;ne &amp;#34;		gtf_puts(&amp;#34;n &amp;#34;);
&amp;#34;re &amp;#34;		gtf_puts(&amp;#34;r &amp;#34;);
&amp;#34;ve &amp;#34;		gtf_puts(&amp;#34;v &amp;#34;);
[Cc]		gtf_puts_case(&amp;#34;s&amp;#34;);
[Pp]ie		gtf_puts_case(&amp;#34;mozer&amp;#39;s pie&amp;#34;);
[Ss]teak        gtf_puts_case(&amp;#34;shnitzel&amp;#34;);
[Gg]overnor	gtf_puts_case(&amp;#34;govenator&amp;#34;);&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
Some also deal with more complex situations such as only substituting
letters if they&amp;#39;re at the end of words and the like.
&lt;/p&gt;
&lt;p&gt;
All of this is leading to a huge number lesson and project
possibilities from simple text replacements in an intro class to
something much more ambitious in a later class.
&lt;/p&gt;
&lt;p&gt;
I was looking to vary some of the things we do in Hunter and I think
I&amp;#39;ll add some language filters to the mix.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cheating on CS projects</title>
      <link>https://cestlaz.github.io/post/cheating-on-projects/</link>
      <pubDate>Mon, 30 Sep 2019 17:33:02 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cheating-on-projects/</guid>
      <description>&lt;p&gt;
Alfred Thompson posted today about &lt;a href=&#34;http://blog.acthompson.net/2019/09/the-problem-of-cheating-on-programming.html&#34;&gt;cheating on CS class projects&lt;/a&gt;. It
was in response to Garth Flint&amp;#39;s post on &lt;a href=&#34;https://gflint.wordpress.com/2019/09/26/finding-cool-projects-for-programming-classes/&#34;&gt;finding interesting projects&lt;/a&gt;
which in turn referenced earlier posts by Alfred and me.
&lt;/p&gt;
&lt;p&gt;
Garth laments that it&amp;#39;s hard to find projects that are both
interesting and meaty but where solutions can&amp;#39;t easily be searched for
online. Alfred notes that cheating will happen and that it&amp;#39;s an ethics
issue. This is why I try to create a culture of sharing and
acknowledging credit (that is, citing sources) but I&amp;#39;m not naive
enough to believe there isn&amp;#39;t any cheating in my classes.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t go nuts looking out for cheating but there are a number of
things I do to try to help keep the students honest.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Class time. More often than not students have some time in class to
work on any given project. This lets me get a handle on what they
actually know since I can interact with the student or team and
observe them interacting with each other. Even if a particular
project is all done out of class, over the course of the semester
you can get a pretty good idea as to what a student will produce on
their own.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Project quizzes. For a big project, I&amp;#39;ll sometimes give a quiz on
the day it&amp;#39;s due. The quiz will be tied to the project - describe
a data structure or algorithm you used. If the student wrote the
project it&amp;#39;s free points, if not they&amp;#39;ll have problems. Of course,
this only requires that a student understands their project not
that they actually wrote it but at least that&amp;#39;s something.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Git logs. I get my students on GitHub early and that lets me look
at the commit logs for any given project. This usually can&amp;#39;t be
used to find cheating but it lets me see what was committed when. 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Be reasonable in terms of workload and expectations. &lt;strong&gt;This is a
really important one&lt;/strong&gt;. Back at Stuy, it was made clear to me many
times that many students feel forced to cheat due to teachers
expecting far too much from them. If you&amp;#39;re take 6 classes a day
and each gives you two hours of homework somethings got to give.
&lt;/p&gt;
&lt;p&gt;
I always try to give a fair amount of work and only if I think it&amp;#39;s
necessary and makes sense and as long a a student is up front about
any issues that arise I&amp;#39;ll try to work with them on deadlines and
requirements.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
I could use a code plagiarism tester like &lt;a href=&#34;https://theory.stanford.edu/~aiken/moss/&#34;&gt;Moss&lt;/a&gt; but I usually don&amp;#39;t
bother.
&lt;/p&gt;
&lt;p&gt;
I also try to keep things in perspective. Usually things come clean in
the end. Most classes have multiple measures - tests, homework,
projects, classwork and more. Even if a student copies a project and
gets away with it, it&amp;#39;s just one measure and it likely won&amp;#39;t move the
needle all that much. True, a kid who&amp;#39;s doing well might feel the need
to cheat on one assignment (see item 4 above) but that&amp;#39;s not a hill
I&amp;#39;m willing to die on.
&lt;/p&gt;
&lt;p&gt;
Even if a kid in a 10th grade intro CS class cheats their way through
they&amp;#39;ll unlikely take any more CS as they&amp;#39;ll be woefully
unprepared. In that case, the one higher grade they got on their
transcript due to cheating on CS projects probably won&amp;#39;t make much of
an overall difference and it certainly won&amp;#39;t hurt the kids who take
all your school&amp;#39;s CS courses and apply to college to be CS majors.
&lt;/p&gt;
&lt;p&gt;
None of this is to say that cheating doesn&amp;#39;t happen and I do believe
we should keep an eye out and address it if and when it rares its ugly
head. I&amp;#39;m just saying keep things in perspective. 
&lt;/p&gt;
&lt;p&gt;
When I pick projects I don&amp;#39;t pay much attention to if they can be
found online and I&amp;#39;m not the tightest screw when it comes to enforcing
the rules in my classes. I know that&amp;#39;s led to my being taken advantage
of over the years and yes, that does bother me but I&amp;#39;d rather put my
time and energy into the kids trying to do it right than those cutting
the corners.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pig Latin - a beginner lesson with some depth</title>
      <link>https://cestlaz.github.io/post/piglatin/</link>
      <pubDate>Wed, 25 Sep 2019 17:11:29 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/piglatin/</guid>
      <description>&lt;p&gt;
I recently did a unit where I had my students convert words into &lt;a href=&#34;https://en.wikipedia.org/wiki/Pig_Latin&#34;&gt;Pig
Latin&lt;/a&gt;. I like the problem because to start it only requires strings,
functions and if statements but there is some depth to the unit.
&lt;/p&gt;
&lt;p&gt;
We start with simplified rules:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
If the word starts with a vowel, add &amp;#34;ay&amp;#34; to the end of the word
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
If it starts with a consonant move the first latter to the end and
add &amp;#34;ay&amp;#34;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
don&amp;#39;t worry about anything else
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Students usually start with something like this:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
as students realize it&amp;#39;s much easier to check for vowels rather than
consonants. 
&lt;/p&gt;
&lt;p&gt;
Some students discover that you can do any of the following instead of
the big compound &lt;strong&gt;or&lt;/strong&gt; :
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This allows us to talk a little about lists (and tuples if you like)
as well as now strings are similar to them in certain ways.
&lt;/p&gt;
&lt;p&gt;
By itself, this is a nice little beginner project but it gets better. 
&lt;/p&gt;
&lt;p&gt;
Since we talked a bit about lists and strings in the refinement, we
then talk about using python&amp;#39;s &lt;code&gt;split()&lt;/code&gt; method that parses a string
on whitespace. We also talk about the &lt;code&gt;for&lt;/code&gt; loop. Ultimately this
leads us to writing a function to convert a sentence into Pig Latin:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
But this doesn&amp;#39;t work with real sentences. Let&amp;#39;s focus on two
problems. The first is that it won&amp;#39;t handle the period at the end of
the sentence properly. It would take that last word, let&amp;#39;s say &lt;strong&gt;dog.&lt;/strong&gt; 
and convert it to &lt;strong&gt;og,day&lt;/strong&gt; rather than &lt;strong&gt;ogday.&lt;/strong&gt;. It also doesn&amp;#39;t
handle capital letters. There are other issues but they have similar
solutions to the ones we&amp;#39;ll use for these two.
&lt;/p&gt;
&lt;p&gt;
This is where things get fun. 
&lt;/p&gt;
&lt;p&gt;
To handle the period, students frequently jump to modifying the &lt;strong&gt;if&lt;/strong&gt; 
conditions in &lt;code&gt;piglatinify&lt;/code&gt; :
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
or something similar.
&lt;/p&gt;
&lt;p&gt;
This is a straighforward working solution but it&amp;#39;s also a great place to introduce the idea of changing the data
instead of using complex conditionals to handle special cases (earlier
posts &lt;a href=&#34;https://cestlaz.github.io/posts/2014-02-26-change-the-data/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://cestlaz.github.io/posts/advent-of-code-2016-2/&#34;&gt;here&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
If we take out the period we can do our regular piglatinify and then
add it back in. This leads us to a solution like this:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We can do something similar to deal with words that start with upper
case letters:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You can approach other special cases similarly.
&lt;/p&gt;
&lt;p&gt;
So, there you have it. A fun little problem that you can do with your students
early on in a CS0 with surprising depth.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advanced CS Early - Are they learning it or just using it?</title>
      <link>https://cestlaz.github.io/post/are-they-learning-or-jus-using/</link>
      <pubDate>Sat, 21 Sep 2019 17:41:13 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/are-they-learning-or-jus-using/</guid>
      <description>&lt;p&gt;
I recently took a look at the &lt;a href=&#34;https://cryptopals.com/&#34;&gt;Cryptopals Crypto Challenges&lt;/a&gt;. It&amp;#39;s a
series of challenges through which you can learn all about crypto and
crypto attacks. They say they&amp;#39;ll eventually have solutions but since
the site appears to be at least a few years old, who knows it they&amp;#39;ll
ever publish them.
&lt;/p&gt;
&lt;p&gt;
One interesting thing about the site is that it really doesn&amp;#39;t have a
lot of content to teach you the concepts around the challenges. At
least not for the first few, the only ones I&amp;#39;ve looked at. You get a
bit of sample input, the sample output, a short description and then
you&amp;#39;re off to the races.
&lt;/p&gt;
&lt;p&gt;
This means that you&amp;#39;re going to do some web searching to figure out
what the terms they use mean and how to approach the problems.
&lt;/p&gt;
&lt;p&gt;
The first challenge was to convert a string of hex digits into
base64.  I&amp;#39;d never done this so I figured I should look up what base64
was. I figured it was some encoding but exactly what was it?
&lt;/p&gt;
&lt;p&gt;
A quick search yielded a bunch of online encoder/decoders and also the
Wikipedia page: &amp;#34;…Base64 is a &lt;strong&gt;group&lt;/strong&gt; of binary-to-text encoding
schemes…&amp;#34; - a &lt;strong&gt;group&lt;/strong&gt;? Uh oh. Which scheme am I to use? It turned
out that I was able to use the conversion table on the Wikipedia page
but I digress.
&lt;/p&gt;
&lt;p&gt;
I decided to write the solution in Clojure and was about to do so but
decided to see if there was an idiomatic way to do this. I did a
search. Most if not all of the searches resulted in links either to a
Clojure library to encode and decode Base64 or example code that used
said library. 
&lt;/p&gt;
&lt;p&gt;
If I wanted to I could code up a complete solution and not really
learn anything about base64 encoding. I&amp;#39;m not talking about wholesale
copying a solution off of StackOverflow. I&amp;#39;m talking about using the
included Clojure (technically Java) Base64 conversion library. 
&lt;/p&gt;
&lt;p&gt;
This made me think about what I&amp;#39;m seeing some times in CS Ed and lots
of time in drop in / opt in programs. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;d hear about classes where students are doing unbelievable
things. The kids made a neural network to do blah blah blah. I&amp;#39;d think
to myself &amp;#34;that&amp;#39;s upper level undergraduate work, how can they really
understand all the math and CS to build that stuff when they&amp;#39;re just
taking Algebra and their first CS class?&amp;#34;
&lt;/p&gt;
&lt;p&gt;
It turns out, they weren&amp;#39;t. They&amp;#39;d basically glue together libraries
and use pre-existing tools. 
&lt;/p&gt;
&lt;p&gt;
This raises the question: &amp;#34;is this a good thing?&amp;#34;
&lt;/p&gt;
&lt;p&gt;
Maybe and maybe not.
&lt;/p&gt;
&lt;p&gt;
If those kids mentioned above aren&amp;#39;t really studying AI but rather
intro programming and they&amp;#39;re using AI as part of the motivation, it
can be terrific. It could inspire them to study AI later and that&amp;#39;s
great.
&lt;/p&gt;
&lt;p&gt;
On the other hand, if they think they&amp;#39;re really learning AI, that&amp;#39;s not so good.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve met kids who were in either classes or programs on
cybersecurity. They were every confident in their knowledge and skills
but it turned out that they didn&amp;#39;t really learn anything in their
classes. It was just a curated canned experience. In these cases the
programs and classes weren&amp;#39;t really helping the kids. I&amp;#39;ve met
teachers who&amp;#39;ve told me about classes like these where the kids ended
up getting jobs but then promptly got fired because they didn&amp;#39;t really
know anything more than a superficial view of the subject.
&lt;/p&gt;
&lt;p&gt;
In this day and age students can&amp;#39;t write everything from scratch but
I&amp;#39;ve always believed that they should have some idea as to what&amp;#39;s
going on under the hood. A friend would always say &amp;#34;never use a tool
that you couldn&amp;#39;t&amp;#39; write yourself&amp;#34; I concur. He didn&amp;#39;t mean you have
to write every line yourself but you should have a basic idea as to
the underpinnings. 
&lt;/p&gt;
&lt;p&gt;
There are cool and interesting things at all levels of CS and CS
education. I know we live in a day and age where teachers brag about
how early they can cover some advanced topic with their kids but it&amp;#39;s
not a race. Let&amp;#39;s teach the kids what they need when they need
it. They don&amp;#39;t need to think they can write a deep learning platform
in year one. Right now I&amp;#39;m teaching college first year students. We
don&amp;#39;t cover the same things these kids will study in their 400 level
electives. I&amp;#39;m fine with that. I cover some topics that allude to
what&amp;#39;s to come and I set the stage for their futures.  Let&amp;#39;s design
and implement CS experiences that make sense for our kids rather than
giving them false experiences so that we can say that they&amp;#39;re doing
graduate level work in third grade.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Outside Evaluators</title>
      <link>https://cestlaz.github.io/post/outside-evaluators/</link>
      <pubDate>Fri, 26 Jul 2019 19:23:32 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/outside-evaluators/</guid>
      <description>&lt;p&gt;
I was planning on writing up all the exciting CS Education work I got
to be involved in these past two days but I saw a post on one of the
CS discussion forums that got me riled. 
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a teacher (name withheld to protect the innocent) who wants to
create an advanced course for his students but his administration is
requesting an outside measure of accountability. This sounds
reasonable on the surface but I found it really insulting. 
&lt;/p&gt;
&lt;p&gt;
As teachers we&amp;#39;re hired as the professional - the specialists with the
responsibility to teach our students. Parents leave their children with us
all day every day with the understanding that we&amp;#39;ll do our best to do
right by our charges. 
&lt;/p&gt;
&lt;p&gt;
Yet here we are being told &amp;#34;you can&amp;#39;t be trusted to design a course
for you students and assess them. You need an outsider for that.&amp;#34; Now,
I&amp;#39;m not advocating that teachers operate without supervision - it is
indeed part of a school&amp;#39;s administration&amp;#39;s job to evaluate, support,
and improve its faculty. What I am saying is that teachers should be
trusted to teach and to assess. 
&lt;/p&gt;
&lt;p&gt;
Actually, we still do trust teachers in some areas. How many English
classes are free not only of standardized tests but tests
altogether. My kids were in band and chorus. The assessments were all
performance based and all designed and administered by their
teachers. Same with many art classes. It&amp;#39;s funny how students in
instrumental music and hands on art classes learn to love and
appreciate the arts. At the same time, at least at Stuy, students who
instead went through the paper and test based art and music
appreciation classes left, let us say, less enthusiastic about the
subject matter. 
&lt;/p&gt;
&lt;p&gt;
Even in more test based subjects - precalc is a great example here we
trust the teachers to assess. There&amp;#39;s no precalc regents or AP exam -
everything&amp;#39;s designed, implemented, and assessed in house.
&lt;/p&gt;
&lt;p&gt;
Just because CS is the new kid on the block doesn&amp;#39;t mean that CS
classes all need some external evaluator. If you don&amp;#39;t trust your
teachers to assess you shouldn&amp;#39;t teach them to teach. 
&lt;/p&gt;
&lt;p&gt;
Now, this is not to say that there aren&amp;#39;t time for external
assessments or engaging outside parties to help us design, deliver,
and assess educational experiences. High School CS teachers can use
higher Ed CS people and tech industry players to great effect but it&amp;#39;s
the teacher that should drive these relationships and partnerships.
&lt;/p&gt;
&lt;p&gt;
The bottom line question is &amp;#34;do you trust your teachers or not.&amp;#34; If
you do, you should empower them and support them to do their
thing. It&amp;#39;s like a former teacher of mine always said: &amp;#34;to solve the
education problem, hire great teachers and get the F out of the way!&amp;#34;
On the other hand, if you don&amp;#39;t trust your teachers, something&amp;#39;s
fundamentally wrong in your school.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Big Code And Case Studies</title>
      <link>https://cestlaz.github.io/post/big-code-and-case-studies/</link>
      <pubDate>Wed, 24 Jul 2019 11:22:12 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/big-code-and-case-studies/</guid>
      <description>&lt;p&gt;
I&amp;#39;m enjoying reading about Ria Galanos&amp;#39; new chapter on her blog. In
her &lt;a href=&#34;https://cscheerleader.com/putting-it-all-together&#34;&gt;most recent post&lt;/a&gt; Ria briefly talks about the fact that very few
professional developers start from scratch and most work in existing
large code bases. She wonders why the College Board got rid of the
APCS-A case study and talked about how it gave students an opportunity
to work on a multi-file complex system. Over the past few years others
have wondered if the College Board should bring it back.
&lt;/p&gt;
&lt;p&gt;
While I agree that students should learn to work in a large code base
at some point in time and there are a whole bunch of software
engineering skills that would better serve the vast majority of CS
students than what is taught in full undergraduate programs I have to
disagree that bringing back the APCS-A case study is the way to go.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not against case studies and large complex CS projects in APCS-A
per se but rather that tying a specific large project to the AP exam
forces teachers to teach in a way that might not suit them or their
students. The case study never worked for me. It never fit in with the
way I liked to develop my classes. As a result it was merely a time
sink. To be honest, most of the time I just paid it lip service with
minimal coverage. It never seemed to affect my student&amp;#39;s scores so it
wasn&amp;#39;t something I had to worry about. I also used to use a few texts
over the years that integrated a large project throughout their
chapters and since those also didn&amp;#39;t mesh with the class it made large
swaths of the books more difficult to work through when trying to use
them to understand core concepts.
&lt;/p&gt;
&lt;p&gt;
I haven&amp;#39;t looked at all the newly released materials yet but I did
like the recent trend of making labs available that you could use to
cover core concepts but you didn&amp;#39;t have to. The same could be done for
case studies. Nothing stops the College Board or independent providers
from releasing things like Grid World or other case studies. Make them
available for teachers who&amp;#39;s classes are structured in ways that those
case studies support the class rather than are a forced add on.
&lt;/p&gt;
&lt;p&gt;
Beyond this, we also have the issue with exposing kids to larger
sometimes partially opaque code bases. This is pretty important but
many students don&amp;#39;t learn this until their on the job. 
&lt;/p&gt;
&lt;p&gt;
At Hunter, we do have a capstone project course where students do
indeed create some large team application using multiple technologies
but they do it largely on their own having not formally been prepared
in their earlier classes for development in the large. In my
experience, huge numbers of students from a wide array of well
respected institutions do little better at this. Many students do have
to work in a professors framework - write a &amp;#34;player&amp;#34; for the game and
such but that&amp;#39;s much more limited.
&lt;/p&gt;
&lt;p&gt;
So, we should be doing a better job at this but I&amp;#39;m also not sure if
APCS-A is the place. While it might work well at a TJ, where Ria
taught or Stuy where I spent most of my career, my gut tells me that
this is something for a course later in the undergraduate sequence.
&lt;/p&gt;
&lt;p&gt;
Regardless of when this is covered (if it&amp;#39;s covered at all) it&amp;#39;s
certainly worth teaching kids the common tooling to help them
along. Back in the day I used &lt;a href=&#34;https://en.wikipedia.org/wiki/Ctags&#34;&gt;Ctags&lt;/a&gt; to navigate large complex C code
bases. Ctags still exists in more modern forms and it and similar
tools work for a variety of languages. Coding standards like those
published by &lt;a href=&#34;https://google.github.io/styleguide/javaguide.html&#34;&gt;Google&lt;/a&gt; can make for an easier code based to understand
and tools like &lt;a href=&#34;https://www.oracle.com/technetwork/java/javase/documentation/index-jsp-135444.html&#34;&gt;Javadoc&lt;/a&gt; and similar for other languages can create web
based documentation where students can click through complex
hierarchies and relationships. Tools like &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;Ripgrep&lt;/a&gt; and &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;Silver Searcher&lt;/a&gt;
can also be lifesavers in finding code across complex directory
structures. Most if not all of these tools are directly supported in
many editors and ides.
&lt;/p&gt;
&lt;p&gt;
So, where am I at on this. Let&amp;#39;s not require any specific case study
in APCS-A but let&amp;#39;s make things like them available. On the other
hand, it would be great if our students did indeed all have the
opportunity to learn how to work in large complex pre-existing code
bases but that&amp;#39;s an issue well beyond just APCS-A and high school.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Proof By Authority</title>
      <link>https://cestlaz.github.io/post/proof-by-authority/</link>
      <pubDate>Tue, 25 Jun 2019 07:00:12 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/proof-by-authority/</guid>
      <description>&lt;p&gt;
No,I&amp;#39;m not talking about&lt;a href=&#34;https://en.wikipedia.org/wiki/Argument_from_authority&#34;&gt;Argument from Authority&lt;/a&gt; - something that very
much plagues CS Education and education in general where an annointed
few who may, or may not really know what they&amp;#39;re talking about are
given creedence because they&amp;#39;ve been there the longest, work for the
companies with the biggest names, have the economic backing  or
otherwise have been given the stage. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m talking about Proof by Authority which I fondly remember from
those silly &lt;a href=&#34;https://www.cs.hmc.edu/~fleck/proof.html&#34;&gt;Proof techniques&lt;/a&gt; lists that went around in the
day. Techniques like:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Technique&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Proof by Intimidation&lt;/td&gt;
&lt;td&gt;Trivial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Proof by example&lt;/td&gt;
&lt;td&gt;The author solves for n - 2…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Proof by funding&lt;/td&gt;
&lt;td&gt;How the Bill Gates Foundation be wrong&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
and many many more.
&lt;/p&gt;
&lt;p&gt;
Proof by authority was basically &amp;#34;I saw Dr. Gershon in the elevator
and she said….&amp;#34;
&lt;/p&gt;
&lt;p&gt;
What made me think og this was this Tweet by &lt;a href=&#34;https://twitter.com/b0rk&#34;&gt;Julia Evans&lt;/a&gt;:
&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;i&amp;#39;m not
sure if this advice is too obvious/basic but I really like to approach
confusing debugging situations by first looking at where my
understanding of the system is fuzzy, not by immediately trying to
tackle the bug&lt;/p&gt;&amp;mdash; 🔎Julia Evans🔍 (@b0rk) &lt;a
href=&#34;https://twitter.com/b0rk/status/1143313949640810498?ref_src=twsrc%5Etfw&#34;&gt;June
25, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async
src=&#34;https://platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
I don&amp;#39;t know Julia personally, but we have mutual friends and I&amp;#39;ve been following
her online for a while. She makes cool &amp;#34;zines&amp;#34; and interesting blog
posts about a variety of tech type topics leaning towards the systems
side. Her latest post on &lt;a href=&#34;https://jvns.ca/blog/2019/06/23/a-few-debugging-resources/&#34;&gt;debugging&lt;/a&gt; is well worth a read.
&lt;/p&gt;
&lt;p&gt;
What caught my eye was &amp;#34;I&amp;#39;m not sure if this advice is too
obvious/basic…&amp;#34; It isn&amp;#39;t. As an educator I&amp;#39;ve found that to others,
what&amp;#39;s obvious to us is not always obvious or clear to others. What I
also got to thinking about was the fact that if a student follows Julia,
they&amp;#39;re, in many cases, more likely to listen to her rather than her
teacher because Julia&amp;#39;s a known and respected expert in the field and
a teacher is well, just a teacher. 
&lt;/p&gt;
&lt;p&gt;
This further reminded me of something that happened early on in my
career. I was a reasonably popular teacher but I didn&amp;#39;t have that much
of a reputation being fairly new. I would try to add real world  best practices to
my classes but I could tell that many of the students weren&amp;#39;t really
buying it. Mid semester, a friend came to town. He was a long time
Microsoft employee. He started right after college in the late 80&amp;#39;s
and had been there ever since. He gave a guest talk in my classes. 
&lt;/p&gt;
&lt;p&gt;
One of the things I remember Danny saying in the class was that &amp;#34;Stuy
wasn&amp;#39;t special because of the teachers, but rather because of the
students.&amp;#34; He was right, but I, um &amp;#34;Thanks, Danny, you know, I&amp;#39;m a
teacher and right here in the room :-)&amp;#34; On the other hand, in later
talks he always did say to listen to what I had to say. I guess during
the first talk he didn&amp;#39;t really know what I brought to the table as a
teahcer.
&lt;/p&gt;
&lt;p&gt;
The other thing is that Danny talked about a number of best practices
both in his talk and during Q&amp;amp;A. In all cases, what he said mirrored
what I had been telling my students all year and none of it was
planned.
&lt;/p&gt;
&lt;p&gt;
Not only did the kids pay more attention to what Danny had to say than
what I had previously tried to say but from that point on, they paid
more attention to my asides on what is done in the &amp;#34;real world.&amp;#34; I had
been authenticated by a top level Microsoft engineer. Proof by
Authority.
&lt;/p&gt;
&lt;p&gt;
Since those early days, I&amp;#39;ve developed my own reputation. My students
graduated and went on to success both in and outside of CS. They
both provided the information I needed to know how best to prepare my
students and also verified that I was doing it. Over time I needed
outside verification less and less but was able to get and rely on
outside information more and more.
&lt;/p&gt;
&lt;p&gt;
When I saw Julia&amp;#39;s tweet it made me think that having respected
industry people share their thoughts on what works for them in clear
concise ways is not only valuable directly but can also be of value
indirectly when used wisely by teachers.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Year in Review - the classes</title>
      <link>https://cestlaz.github.io/post/semester-review/</link>
      <pubDate>Wed, 12 Jun 2019 09:02:19 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/semester-review/</guid>
      <description>&lt;p&gt;
Now that the semester&amp;#39;s over I&amp;#39;ve had a chance to reflect a bit on my
teaching over the past year. 
&lt;/p&gt;
&lt;p&gt;
This year I taught two classes each semester so the load was a little
higher. First semester was one class of our CS0 and one of the
lab/enrichment component that goes with CS1. Nothing big to report
there as I&amp;#39;ve done them both before.
&lt;/p&gt;
&lt;p&gt;
The biggest difference was that I had to deal with two separate
classes even though they&amp;#39;re one cohort. I can&amp;#39;t say I did a
particularly good job with that - something to keep working on next
year.
&lt;/p&gt;
&lt;p&gt;
In the second semester the CS0 became the CS1 lab/enrichment and that
went pretty well overall. I was unhappy with some of the scheduling.
The students work on labs in class for a number of sessions and due to
circumstances beyond my control I had to finish out the class with a
number of consecutive lab classes whereas I would have much rather
spread those out with the enrichment lessons. Not happy about it but
there wasn&amp;#39;t much I could do.
&lt;/p&gt;
&lt;p&gt;
The other class was data structures. This was the first time I was
teaching it at Hunter, first time in C++ in well over a decade and
first time in around five years. I think the class went alright but
there was a lot of room for improvement. For one thing, C++ is not
Java. In Java things are pretty restricted - there&amp;#39;s pretty much one
way to deal with linked list and dynamic structures. C++ is a little
more complex. Do you do structs or classes? When do you introduce
smart pointers (if at all)? Separate compilation and if so when? What
about templates/generics - they&amp;#39;re much more cumbersome and complex in
C++. Also, don&amp;#39;t get me started on exceptions. Lots of decisions to be
made and once you make them it&amp;#39;s hard to change directions.
&lt;/p&gt;
&lt;p&gt;
I decided to go with all classes, separate compilation, did
templates/generics early but then constrained our data structures to a
fixed type. Did regular pointers and then smart pointers a ways in.
&lt;/p&gt;
&lt;p&gt;
Because of all of the changes, I also missed the chance to use a
number of my class motivations and tricks that I&amp;#39;ve used in the
past. I should be able to mix those in next time around. Things like
building  a linked list or studetns in class prior to studying them or
playing out a mergesort with a deck of cards.
&lt;/p&gt;
&lt;p&gt;
Another thing I had to deal with that was new was the range of student
backgrounds. I have a number of students in my program from NYCS&amp;#39;s
specialized schools and Stuy in particular. No surprise but the Stuy
students have much more experience than the rest both in terms of time
they&amp;#39;ve spent programming and in terms of what they&amp;#39;ve studied. All of
the Stuy students had done most if not all of the data structures in
Java and most had taken 3 years of CS and have completed many major
projects. There were other students who did APCS-A plus another year but
not the data structures and finally those who had just done
APCS-A. They&amp;#39;re all great kids and more experience doesn&amp;#39;t equate to
more ability but there&amp;#39;s a big difference in terms of what you can do
and how quickly you can do it after a year of APCS-A and a course or
three beyond it.
&lt;/p&gt;
&lt;p&gt;
That was a tricky juggling and balancing act adn I think I&amp;#39;ll handle
it better next year.
&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t get to cover quite as much as I wanted in the Data Structures
class and I certainly didn&amp;#39;t cover it as well as I would have liked
but I don&amp;#39;t think I did a bad job. I&amp;#39;ve been in this racket long
enough to know the ebbs and flows.
&lt;/p&gt;
&lt;p&gt;
Overall I was happy with the year teaching wise but see a lot of
places where I want to do better and do more. 
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Grokking Algorithms</title>
      <link>https://cestlaz.github.io/post/grokking-algorithms/</link>
      <pubDate>Tue, 11 Jun 2019 07:29:30 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/grokking-algorithms/</guid>
      <description>&lt;p&gt;
Someone mentioned &lt;a href=&#34;https://www.manning.com/books/grokking-algorithms&#34;&gt;Grokking Algorithms&lt;/a&gt; by Aditya Y. Bhargava in one of
the CS educator Facbeook groups. It looked interesting so I thought
I&amp;#39;d give it a once over.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s certainly an accessible book. Text mixed with cute line drawings,
&amp;#34;hand written&amp;#34; text, diagrams and picture.s It reminded me of one of
my favorite, most accessible  Calculus books &lt;a href=&#34;https://www.goodreads.com/book/show/706622.Who_Is_Fourier_a_Mathematical_Adventure&#34;&gt;Who Was Fourier&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Overall I enjoyed the book but I&amp;#39;m not sure what its best audience
is. If you look at the selection of topics, it&amp;#39;s a little
haphazard. It introduces Big-O notation, sescrion sort, and intro
recursion all of which are covered prior to an algorithms course. It
also introduces linked lists in what I felt was an early and arbitrary
place but then neither gave any more than a theoretical overview nor
came back to them later. On the other hand, when the author covers
QuickSort he at one point compares it to a MergeSort as if that were
covered as well. On the more advanced side, there are Hash Tables,
Dijkstra&amp;#39;s Aalgorithm, Dyanmic Programming, and a few teasers at the
end.
&lt;/p&gt;
&lt;p&gt;
The biggest downside of the book, to me, is that some of the topics
seem to be great explanations of things as long as you already know
them. The Linked List coverage is a great example of this. The author
does a nice job relating Linked Lists to memory and how they are
theoretically implemented under the hood. That said, unless you&amp;#39;ve
already studied linked lists it probably isn&amp;#39;t enough to go
anywhere. This might be fine if you are to assume that the reader has
already taken data structures but if that&amp;#39;s the case, the linked list
section is probably superflous.
&lt;/p&gt;
&lt;p&gt;
Another point I noted was that some of the coverage is pretty standard
but some is great. I wasn&amp;#39;t very impressed by the recursion chapter
nor the coverage of Dijkstra&amp;#39;s algorithm. They were fine but nothing
special. On the other hand, I very much liked the way Bhargava laid
out and discussed Dynamic Programming. To me, that section alone is probably
worth the book. I don&amp;#39;t think it&amp;#39;s enough for you to build a unit on
Dyanamic Programming but the author provides a great way of developing
and talking about the subject and gives some nice examples. I also
like the way it builds from Greedy Algorithms.
&lt;/p&gt;
&lt;p&gt;
To be fair, I read a couple of Amazon Reviews of the book and one
reviewer loved the coverage of  Dijkstra&amp;#39;s algorithm so there is a lot
of subjectivity here. 
&lt;/p&gt;
&lt;p&gt;
A couple of other minor points worth thinking about are math and
rigor. One of the quotes on the back of the book states:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
This book does the impossible: it makes math fun and easy!
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I&amp;#39;ve got to disagree with this. The book doesn&amp;#39;t take any
traditionally difficult math and magically make it trivial. Rather the
book has some examples where basic math can be used to great
effect. In one section, Bhargava talks about classifiers and
similarity scores using the Distance Formula. It&amp;#39;s somewhat similar to
what I do &lt;a href=&#34;https://cestlaz.github.io/posts/2014-01-07-rot13-gateway/&#34;&gt;here&lt;/a&gt;. He&amp;#39;s not making hard math easy but rather he&amp;#39;s showing
that basic math can be amazingly useful and you can do cool and
powerful things with it. Nothing wrong with that. It&amp;#39;s a great thing
to do but it&amp;#39;s not making hard math easy. The author also refers the
reader to external references for more.
&lt;/p&gt;
&lt;p&gt;
The other point I want to mention is rigor - this is bound to come up
whenever a book tries to be accessible. While it&amp;#39;s true that the author
seems to fudge or simplify a definition here and there I didn&amp;#39;t find
any major problems and think that his choices in terms of langauge,
rigor, and fudge factor  are generally appropriate.
&lt;/p&gt;
&lt;p&gt;
So bottom line - who is this book for and should you get it?
&lt;/p&gt;
&lt;p&gt;
This is not a standalone algorithms book. You couldn&amp;#39;t use it for a
class by that name. The book mentions that it could be useful to a
code school graduate and given the lack of consistency in what&amp;#39;s
covered in code schools that&amp;#39;s probably a good recommendation. It
gives some feel and flavor on a number of subjects, does nothing
poorly and while it omits things that might be necessary, it does many
things well.
&lt;/p&gt;
&lt;p&gt;
To me, this is an ideal book as resource for a teacher looking to
stretch their APCS-A or APCS-AB class or possibly for an advanced
student.
&lt;/p&gt;
&lt;p&gt;
I enjoyed the book. You probably will too.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do It First</title>
      <link>https://cestlaz.github.io/post/do-it-first/</link>
      <pubDate>Mon, 10 Jun 2019 08:00:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/do-it-first/</guid>
      <description>&lt;p&gt;
Reading Garth Flint&amp;#39;s end of year &lt;a href=&#34;https://gflint.wordpress.com/2019/06/07/last-day-of-school-and-done-with-java/&#34;&gt;post&lt;/a&gt; and Alfred Thompson&amp;#39;s &lt;a href=&#34;http://blog.acthompson.net/2019/06/how-well-can-you-code-projects-you.html&#34;&gt;follow up&lt;/a&gt;
had me thinking about a couple of things. 
&lt;/p&gt;
&lt;p&gt;
One was spurred when Garth
wrote &amp;#34;They also have to figure out the math before they code.&amp;#34; This
made me think about all the details we sometimes &lt;a href=&#34;https://cestlaz.github.io/posts/2014-11-21-little-details.html/&#34;&gt;take for for
granted&lt;/a&gt;. Things that are hard for our students that we just know. It&amp;#39;s
frequently math that we might find trivial but it could also be much
simpler things.
&lt;/p&gt;
&lt;p&gt;
When I write Java code I have a snippet that provides most of my main
boilerplate. For a beginner, just typing in all the details and
getting them right might be a chore. Heck, even typing is something we
take for granted. Beginners who can type have a distinct
advantage. They can focus on the code rather than on the keys. That
boilerplate code might take ten minutes of typing alone and that&amp;#39;s not
adding in any typos or understanding errors. 
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t have anything to add here that I didn&amp;#39;t address in earlier
posts and Garth&amp;#39;s post has some great points so if you haven&amp;#39;t read it
yet, I recommend you take the few minutes to do so.
&lt;/p&gt;
&lt;p&gt;
The other thoughts were spurred from this part of Garth&amp;#39;s post:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
did only two of the six assignments myself.  With the others I saw
 the solution so did not code them up.  I should have coded them up
 just so I could answer questions better for the students.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Alfred expounded on this in his post and there was a good twitter
conversation around it as well.
&lt;/p&gt;
&lt;p&gt;
As a general rule as teachers we should have solved the problems
before we assign them and not just theoretically be able to solve
them. Actually writing up the solutions can also clue us in on some of
the difficulties that our students might face. Particularly if we
really try to look at the assignment using our student&amp;#39;s eyes. 
&lt;/p&gt;
&lt;p&gt;
Neal Plotnick tweeted: 
&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The lack of
experience with coding for Ts combined with canned, cloud based
curricula has allowed classrooms to be created with Ts pushing
assignments out and relying on automated grades. I don’t have a CS
degree but I made sure to code my python assignments first.&lt;/p&gt;&amp;mdash;
neil plotnick (@NeilPlotnick) &lt;a
href=&#34;https://twitter.com/NeilPlotnick/status/1137340790554996736?ref_src=twsrc%5Etfw&#34;&gt;June
8, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async
src=&#34;https://platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
And this is a real concern for me. I get it - we&amp;#39;re building a plane
while flying it and that places teachers in situations where they have
to learn on the fly and at times they&amp;#39;ll  have to assign problems
before they have  solutions. Long term, however, this is a big problem
and I suspect it&amp;#39;s not going to go away. 
&lt;/p&gt;
&lt;p&gt;
On the other side of the coin though are times when it&amp;#39;s best not to
have a solution before the class. Sure, if you&amp;#39;re teaching a merge
sort or doing a unit on inheritance you probably should have your
ownb written solutions but there are a whole bunch of topics which
lend themselves to doing things on the fly:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
debugging
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
software engineering practices
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
how to approach &amp;#34;random&amp;#34; problems
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
practical &amp;#34;programming&amp;#34; techniques
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
can all benefit from an on the fly lesson. 
&lt;/p&gt;
&lt;p&gt;
Coding or teaching on the fly, when used appropriately allows the
teacher to model best practices in real situations. Of course this is
difficult to truly replicate if you teach the same class again later
in the day or if you revisit the class next year but it can be a
valuable tool. When you get a bug - a real bug not a planted one in
your code, you can really model techniques to solve the problem and
you can involve the class in finding that solution.
&lt;/p&gt;
&lt;p&gt;
This can all be pretty scary. You can end up going down the wrong path
and never finish building whatever you&amp;#39;re building but overall it can
be a very valuable experience for the students. 
&lt;/p&gt;
&lt;p&gt;
The other consideration is that you can teach a great lesson this way
but it would probably get a low rating on Danielson or whateve
nonsense rubric your district uses for teacher evaluation.
&lt;/p&gt;
&lt;p&gt;
None of this is to say that you don&amp;#39;t want to prepare. Most of the
time I&amp;#39;ll have solutions worked out or if not, I&amp;#39;ll have written
similar solutions countless times before but that said, there&amp;#39;s
sometimes value in exploring in the wild or as one of my early
supervisors put it &amp;#34;calling an audible.&amp;#34;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AP Classes, Placing Students, and First Topic Exposures</title>
      <link>https://cestlaz.github.io/post/placing-students/</link>
      <pubDate>Mon, 03 Jun 2019 13:27:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/placing-students/</guid>
      <description>&lt;p&gt;
Just like last year, I&amp;#39;m taking in two classes worth of students in to
my honors program. The challenge is that I can only teach two classes
and I&amp;#39;ve got to figure out what to teach  and then which students
belong in which class.
&lt;/p&gt;
&lt;p&gt;
It basically comes down to one of two courses, our CS0 (CSCI127) and
our CS1 (CSCI135). 
&lt;/p&gt;
&lt;p&gt;
CSCI127 is a first programming experience. The normal class is taught
as a large lecture with small recitation/labs. It&amp;#39;s Python based and
the kids do a bunch of small programs in a variety of domains. They
also cover a few &amp;#34;miscellaneous&amp;#34; topics including base conversions,
truth tables, simple circuits, a baby look at an Assembly language
and an intro to C++ at the end. My version also uses
Python but is much more of a deep dive and also brings in a few
Softwae Engineering practices. I don&amp;#39;t do the extras other than the
C++ intro.
&lt;/p&gt;
&lt;p&gt;
CSCI135 is most analogous to APCS-A with the biggest difference being
our core language is C++. That means memory management, references and
all that good stuff. We also sequence things a little differently than
AP. For instance, we don&amp;#39;t do sorting at all until the second semester
but do deal with pointers. I don&amp;#39;t actually teach CSCI135 at all. Most
Hunter students take a 1 credit programming lab (CSCI136) to go along
with CSCI135. I teach a 3 credit version of that where we do a bunch
of enrichment.
&lt;/p&gt;
&lt;p&gt;
On the student side, they come in with a range of CS experiences. Some
are 100% new to the subject, some are self taught, a few have taken
after school or summer programs like GWC, Technovation, or others and
a bunch have taken some CS in school with the largest numbers being
either APCS-A or APCS-Principles. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve found the quality of the outside experiences to be uneven at
best. More often than not kids who come from them and think they&amp;#39;re
experienced programmers and really haven&amp;#39;t learned anything. I&amp;#39;ve
got to be careful with them but placement is easy. They  go to
CSCI127. The same is true for kids coming in from APCS-P. APCS-P is
also very uneven in terms of what the kids come out with and it&amp;#39;s not
a direct replacement for our CSCI127.
&lt;/p&gt;
&lt;p&gt;
The big question is what to do with the APCS-A kids. APCS-A does give
students a decent programming background but it&amp;#39;s in a different
language. There&amp;#39;s also the memory management and reordering of
subjects. It&amp;#39;s clear that for most students, even with APCS-A, our
CSCI135 is the right place. That said, we do offer an in house exam to
place out of it. A few of my students have done that but still do my
enrichment/lab class so I can be confident that the student is up to
speed on C++ and related issues.
&lt;/p&gt;
&lt;p&gt;
All of this has led to some discussion in our department recently -
should APCS-A exempt students from our CS0? My argument is that it
should. While I&amp;#39;m no fan of AP or of the AP Exam, kids having finished
the class will have solved problems and built programs more complex
than those we require in our CS0 course. The counter argument relates
to those few non programming topics that are covered in CSCI12700,
specifically, number bases, truth tables, simple circuits, assembly,
and into C++. The argument against placing the kids out of CS0 is that
early exposure to those topics is valuable in preparing the students
for later courses such as those in our required  systems/architecture
track. 
&lt;/p&gt;
&lt;p&gt;
Does that early exposure really make a difference? In this case, I
don&amp;#39;t think it does. For some topics, specifically recursion, I&amp;#39;ve
found that early lightweight exposure does help later on. We introduced
recursion through Racket (nee Scheme) in Stuy&amp;#39;s intro course and then
later revisited it in ACPS-AB. While I never formally collected data,
the early introduction seemed to help. On the other hand, I never
found early exposure to truth tables, base conversions and circuits to
make a difference even though we did do some of that in some
experimental sections of Stuy&amp;#39;s intro course and then revisted them in
the senior systems course. 
&lt;/p&gt;
&lt;p&gt;
Why did it seem to make a difference for recursion and not for the
other topics? Probably because the other topics are mechanical and
don&amp;#39;t require new thinking or deep thinking. You see it, you got
it. Recursion on the other hand is a problem solving technique so
there&amp;#39;s more to understand so the early exposure seems to help.
&lt;/p&gt;
&lt;p&gt;
This also seems to be born out  at Hunter where my early cohorts
didn&amp;#39;t get those small extra topics but all did very well in the
courses that &amp;#34;required&amp;#34; that knowledge.
&lt;/p&gt;
&lt;p&gt;
In the Fall this discussion will continue.  I&amp;#39;m not concerned about my
kids as I have a fair amount of leeway in getting them into the
classes they need. The trick is how to make sure that we&amp;#39;re not
forcing other kids to take classes they don&amp;#39;t need. We need to get these
kids to where they can start to interview for internships sooner
rather than later. At the same time, we have to make sure we&amp;#39;re not
placing kids to far up the track and setting them up for failure. 
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Hunter Daedalus Fall 2019 recruiting class</title>
      <link>https://cestlaz.github.io/post/daedalus-class-2019/</link>
      <pubDate>Wed, 08 May 2019 08:25:12 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/daedalus-class-2019/</guid>
      <description>&lt;p&gt;
Now that high school seniors have all committed to their respective
colleges I though I&amp;#39;d share some information on Hunter&amp;#39;s incoming
Daedalus (honors CS) cohort.
&lt;/p&gt;
&lt;p&gt;
I joke about the first cohort saying that nobody applied to the
program. That&amp;#39;s kind of true. I jointed Hunter a little over three
years ago in late January. That was after high school seniors had
already applied to college and at that time the program didn&amp;#39;t
exist. We found the first cohort by looking at students who had
already applied to Hunter not expecting Daedalus to exist.
&lt;/p&gt;
&lt;p&gt;
It was 12 kids and we&amp;#39;ve lost a few since then. 
&lt;/p&gt;
&lt;p&gt;
The second cohort consisted of 24 students. We started adding
&lt;a href=&#34;https://en.wikipedia.org/wiki/William_E._Macaulay_Honors_College&#34;&gt;Macaulay&lt;/a&gt; students into the mix. Macaulay is a CUNY wide honors
scholarship program. Each campus has a cohort and it was part of an
effort to bring CUNY back to it&amp;#39;s &amp;#34;glory days&amp;#34; before open
enrollment. The Macaulay kids saw that Daedalus was the place to be
for CS in NYC and Hunter and wanted in. 
&lt;/p&gt;
&lt;p&gt;
Third year, we were up to 44 students. 
&lt;/p&gt;
&lt;p&gt;
Now, in our fourth year we&amp;#39;re up to 50 which is a little over
capacity - at least until I can find and hire a partner in crime  (and
I am looking).
&lt;/p&gt;
&lt;p&gt;
Some other stats:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Year:&lt;/th&gt;
&lt;th&gt;2016&lt;/th&gt;
&lt;th&gt;2017&lt;/th&gt;
&lt;th&gt;2018&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;2019&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Size:&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Daedalus / Macaulay:&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;75% / 25%&lt;/td&gt;
&lt;td&gt;75%/ 20%&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;80% / 20%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Approximate Applicants&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;~150&lt;/td&gt;
&lt;td&gt;~200&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;Over 320&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gender M/F %&lt;/td&gt;
&lt;td&gt;80/20&lt;/td&gt;
&lt;td&gt;75/25&lt;/td&gt;
&lt;td&gt;50/50&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;75/25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Taken APCS / Beginner&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;50/50&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;50/50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Number of high schools&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;# students from beyond NYC&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
I also have stats on grades and test scores as well as the number of
offers an the percent of acceptances. 
&lt;/p&gt;
&lt;p&gt;
Some thoughts on the stats:
&lt;/p&gt;
&lt;p&gt;
I try to spend as much time as I can doing outreach. This is horribly
inefficient but it&amp;#39;s slowly getting the word out. I might spend most
of a day trekking out into the boroughs to &lt;a href=&#34;https://cestlaz.github.io/post/fall-2018-tour-revisited/&#34;&gt;talk to a class&lt;/a&gt; or a few
classes at some school knowing that there will probably be very few
fits for my program. I think I&amp;#39;m bringing important information to all
of the kids but it&amp;#39;s a low yield activity. Right now our biggest
feeder schools are Stuyvesant, Brooklyn Tech, and Bronx Science. Next
is Midwood. This makes sense as they&amp;#39;re all &lt;strong&gt;large&lt;/strong&gt; schools and they
all have established CS classes. They&amp;#39;ll probably continue to be the
biggest feeders but I&amp;#39;m delighted by the fact that I&amp;#39;m getting
students from 17 other schools including a couple from outside of
NYC. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m less happy with the gender distribution. Twenty five percent isn&amp;#39;t
bad compared to the national numbers but we should be doing
better. It&amp;#39;s a tough nut to crack. When I visit to schools I&amp;#39;m
normally sent to the CS classes so I&amp;#39;m already getting a gender skewed
audience. Not sure the best approach to work on this. 
&lt;/p&gt;
&lt;p&gt;
On the other hand, I&amp;#39;m getting to enough of a general audience to have
roughly a 50/50 split of students with APCS-A or beyond or what I
would call a beginner. 
&lt;/p&gt;
&lt;p&gt;
As I get to know this new group and find out why they applied to
Hunter Daedalus and ultimately decided to attend I&amp;#39;m hoping to be able
to better fine tune my recruiting approach and outreach.
&lt;/p&gt;
&lt;p&gt;
As a bottom line I&amp;#39;m going to continue to work to make Hunter&amp;#39;s
Daedalus program the place to be for CS education in NY so that kids
can get a top flight experience without paying a quarter of a million
dollars.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>