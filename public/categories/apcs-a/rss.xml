<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>APCS-A on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/categories/apcs-a/</link>
    <description>C&#39;est la Z (APCS-A)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Oct 2019 21:47:18 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/categories/apcs-a/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Classes Or After school programs - which is more important for female retention in CS?</title>
      <link>https://cestlaz.github.io/post/classes-or-afterschool/</link>
      <pubDate>Mon, 14 Oct 2019 21:47:18 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/classes-or-afterschool/</guid>
      <description>&lt;p&gt;
This morning Mark Guzdial tweeted on his latest post:
&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Results from
Longitudinal Study of Female Persistence in CS: AP CS matters,
After-school programs and Internships do not &lt;a
href=&#34;https://t.co/GOzp3045Hp&#34;&gt;https://t.co/GOzp3045Hp&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Mark Guzdial (@guzdial) &lt;a
href=&#34;https://twitter.com/guzdial/status/1183699009766121473?ref_src=twsrc%5Etfw&#34;&gt;October
14, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async
src=&#34;https://platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
I&amp;#39;m glad Mark wrote about this as it&amp;#39;s something that&amp;#39;s important to
both research and publicize but it&amp;#39;s really not a surprise.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m going to start by dismissing the statement that &amp;#34;â€¦ participation in
the Aspirations awards program were teh best predictors of persistence
three years after the high school survey in both CS and other
technology-related majors.&amp;#34; To me, that&amp;#39;s a water is wet statement -
girls who apply for an award where they talk about their aspiriations
in computing are more likely to do more computing. 
&lt;/p&gt;
&lt;p&gt;
The other stuff merits more of a look. Classes and APCS-A in
particular vs after school programs. Since APCS-A is as far as I know
always an elective there&amp;#39;s probably some selection bias here. If a
girl elects to take a college level CS class, perhaps there&amp;#39;s already
some interest in pursuing CS in college. Further, and I really hate to
say this, given the male dominated aspects frequently present in our
CS classes, a girl who was interested in CS and survives APCS-A might
be more likely to continue on and succeed having weathered the storm. 
&lt;/p&gt;
&lt;p&gt;
Now let&amp;#39;s look at the out of school programs. There are a number of
issues here. Many don&amp;#39;t really cover CS or legit programming, many
allow one group member to basically carry the team, and many are
really entrepreneurship programs using the CS marketing hype. They
don&amp;#39;t really prepare students for what&amp;#39;s to come in CS. When a
student then takes a CS class in college they&amp;#39;re ill prepared and drop
the subject. I&amp;#39;ve seen it happen. Unfortunately, many of those after
school programs are masters of marketing and fundraising. Some get big
money from the Googles of the world but they&amp;#39;re never held accountable
for preparing kids to fail. Rather, they&amp;#39;re lauded and praised as
saviors of education. 
&lt;/p&gt;
&lt;p&gt;
Going further, after school programs are usually taught by volunteers,
not teachers. They don&amp;#39;t necessarily understand the nuances of
teaching and they don&amp;#39;t necessarily prepare you for your next CS
experience. You then end up in a college course of 300, are ill
prepared to succeed, fall through the cracks and drop out. Take APCS-A
in HS and you&amp;#39;re going to be in a class of 30 and in a much more
supportive, forgiving  environment. A much better place to prepare you
for what&amp;#39;s to come.
&lt;/p&gt;
&lt;p&gt;
All in all the idea that girls are more likely to follow a CS path
with a solid high school experience than with an outside club or
activity is hardly a surprise. What is more of a surprise to me is the
fact that it&amp;#39;s taken so long to start getting the word out.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Interfaces</title>
      <link>https://cestlaz.github.io/post/java-interfaces/</link>
      <pubDate>Fri, 08 Feb 2019 09:40:44 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/java-interfaces/</guid>
      <description>&lt;p&gt;
Two of the hardest topics to make meaningful to students in APCS-A are
inheritance and interfaces. It&amp;#39;s not that they&amp;#39;re super difficult
topics but rather that they&amp;#39;re not often needed, useful, or superior
to not using them on beginner assignments. More often than not the
motivation is a bit forced as are the assignments. 
&lt;/p&gt;
&lt;p&gt;
Inheritance is its own can of worms and to be honest, something I&amp;#39;ve
not found to be all that useful or necessary. The class abstraction
made sense to me for a number of projects but deep inheritance just
hasn&amp;#39;t come up much. 
&lt;/p&gt;
&lt;p&gt;
In any event, today I thought I&amp;#39;d talk about interfaces.
&lt;/p&gt;
&lt;p&gt;
When Java was first built a decision was made not to allow multiple
inheritance - the idea that a class can be derived from multiple
parents. Multiple inheritance is powerful but it can also be
complicated and confusing. By not including multiple inheritance Java
ended up easier to work with than say C++ but there were times where
you needed features that multiple inheritance provide. Specifically
there are times when you need some functionality that operates across
multiple unrelated classes. Without any other features, you&amp;#39;d have to
start &lt;strong&gt;all&lt;/strong&gt; of your classes from a single based class and include that
functionality. Clearly not a good idea.
&lt;/p&gt;
&lt;p&gt;
The first useful example is probably &lt;code&gt;Comparable&lt;/code&gt;
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
At first blush it might not seem all that useful. 
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s suppose you are doing something like finding the first String
(alphabetically) from an array:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
That&amp;#39;s easy enough but what if you had another class, &lt;code&gt;Shape&lt;/code&gt; where
you wanted to find the &amp;#34;smallest&amp;#34; based on area and a third class
&lt;code&gt;Person&lt;/code&gt; where you want to find the smallest by age? Without
interfaces you would need three independent search routines or set up
a crazy inheritance hierarchy where &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Person&lt;/code&gt; and &lt;code&gt;Shape&lt;/code&gt; all
come from the same parent. Instead, by having your two new classes
implement the &lt;code&gt;Comparable&lt;/code&gt; interface all three can use the same
search:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This is not entirely true. The above solution will give you compiler
warnings. You&amp;#39;ll have to decide if it makes sense to jump through the
hoops necessary to get rid of the warnings or if it&amp;#39;s sufficient to do
some vigorous had waving.
&lt;/p&gt;
&lt;p&gt;
This is the benefit of interfaces. You can create functionality that
works across classes. In addition to writing things like our
 &lt;code&gt;findSmallest&lt;/code&gt; above, if our classes implement &lt;code&gt;Comparable&lt;/code&gt; we can sort
collections of our classes using the built in sort methods.
&lt;/p&gt;
&lt;p&gt;
This is a benefit that our students can probably appreciate.
&lt;/p&gt;
&lt;p&gt;
Anther place interfaces come up and make sense are with GUI
programming. It&amp;#39;s pretty easy to show the utility of using interfaces
with the assorted listeners. That said, Java GUI programming is
something of a bear so maybe that&amp;#39;s not the way to go.
&lt;/p&gt;
&lt;p&gt;
Where else can you explore interfaces in APCS-A? Any program where you
have different entities that change in different ways over time. This
might be a simulation where time passes via a control loop or maybe a
game where time passes a turn at a time.
&lt;/p&gt;
&lt;p&gt;
For example, you might have a simulation with various resources that
implement an interface with an &lt;code&gt;update&lt;/code&gt; routine:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Maybe a food resource updates by raising or lowering the amount of
food it provides or perhaps an animal resource updates its location. You could
have an array of objects that implement this interface and just call
update on each one.
&lt;/p&gt;
&lt;p&gt;
You could do the same with a game. Maybe the human player&amp;#39;s &lt;code&gt;update&lt;/code&gt; 
prompts for keyboard input while non player characters just calculate
their next state.
&lt;/p&gt;
&lt;p&gt;
Interfaces are not the easiest thing to teach. The mechanics are
straightforward but the motivation is frequently forced for
beginners. I was never 100% happy with how I did it and now that I&amp;#39;m
in a C++ shop it doesn&amp;#39;t come up but I hope this is helpful to some of
you out there.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>