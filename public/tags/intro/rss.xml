<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>intro on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/intro/</link>
    <description>C&#39;est la Z (intro)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Nov 2016 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/intro/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Inverted Index Project</title>
      <link>https://cestlaz.github.io/posts/inverted-index/</link>
      <pubDate>Sat, 26 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/inverted-index/</guid>
      <description>&lt;p&gt;
I haven&amp;#39;t spoken much about the class I&amp;#39;ve been teaching this
semester. It&amp;#39;s an intro CS course - a programming heavy intro. I
decided to use Python with a transition at the end to C++. The
transition is to mirror Hunter&amp;#39;s normal first CS course that ends with
a C++ intro to prepare the students for next semester&amp;#39;s CS course
which is a more intense OOP class using C++ - the language we use in
our core courses.
&lt;/p&gt;
&lt;p&gt;
Throughout the semester I&amp;#39;ve tried to use a variety of interesting
application areas so as to try to give the students some idea of the
possibilities that studying CS will open up for them.
&lt;/p&gt;
&lt;p&gt;
After covering Python dictionaries and lists I thought we&amp;#39;d play by
building an inverted Index.
&lt;/p&gt;
&lt;p&gt;
The basic idea is to map a set of words back to source files. For
example, given the following four one line files:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;files&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;&lt;/th&gt;
&lt;th&gt;contents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;file.01&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;if you prick us do we not bleed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;file.02&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;if you tickle us do we not laugh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;file.03&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;if you poison us do we not die and&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;file.04&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;if you wrong us shall we not revenge&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
You could build a data structure mapping each word back to the file(s)
that contain it (partially shown here),
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Word&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;&lt;/th&gt;
&lt;th&gt;Files containing It&amp;#39;s&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;if&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;file.01 file.02 file.03 file.04&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;you&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;file.01 file.02 file.03 file.04&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prick&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;file.01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;us&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;file.01 file.02 file.03 file.04&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;do&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;file.01 file.02 file.03&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
You can, of course, store more information - how many times a word
appears in a file, where it appears, etc.
&lt;/p&gt;
&lt;p&gt;
This is a fairly easy structure to build. A dictionary where the keys
are the words in the file and the values are lists of the documents
containing the words.
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In addition to letting us work with dictionaries and lists, we can
also review file access and even the python CSV module if we want.
&lt;/p&gt;
&lt;p&gt;
We can immediately write simple queries â€“ &amp;#34;what document(s) contain
the word &amp;#39;prick,&amp;#39; but things get more interesting if you write
functions to perform &lt;strong&gt;&lt;strong&gt;and&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;or&lt;/strong&gt;&lt;/strong&gt; queries - &amp;#34;what document(s)
contain the words &amp;#39;prick&amp;#39; &lt;strong&gt;&lt;strong&gt;or&lt;/strong&gt;&lt;/strong&gt; &amp;#39;do&amp;#39;&amp;#34; for instance.
&lt;/p&gt;
&lt;p&gt;
Why are we building this (besides as a data structure and programming
exercise)? I&amp;#39;ve seen a number of references to using an inverted index
when building a web search engine. In fact, I think that&amp;#39;s something
you do early on in the Udacity Mooc. I just wanted to play with
information retrieval.
&lt;/p&gt;
&lt;p&gt;
I remembered that there was a collection of information, including
last statements from &lt;a href=&#34;https://www.tdcj.state.tx.us/death_row/dr_executed_offenders.html&#34;&gt;executed offenders in Texas&lt;/a&gt;. Someone conveniently
converted it into a &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1HAjZTtPriClY-X3n9whTkA4i5D7bn3bmtHnLoaVICvI/edit#gid=1&#34;&gt;Google Spreadsheet&lt;/a&gt;. The format&amp;#39;s a little
different from our simple four file example but then there&amp;#39;s more
data. It&amp;#39;s straightforward enough to download the spreadsheet as a CSV
file and then read it with a Python program that builds it into an
inverted index.
&lt;/p&gt;
&lt;p&gt;
Now we have some interesting data to play with.
&lt;/p&gt;
&lt;p&gt;
How many offenders used words like &amp;#34;sorry&amp;#34; or &amp;#34;apologize?&amp;#34; How about
references to religion? We can do all sorts of &lt;strong&gt;&lt;strong&gt;and&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;or&lt;/strong&gt;&lt;/strong&gt;
queries.
&lt;/p&gt;
&lt;p&gt;
We just played with this a bit but I could see all sorts of
explorations. What about taking some great work of literature and
turning it into an inverted index by chapter. You could query
characters or certain words and see where and when they appear in the
book. A new and different way of exploring literature.
&lt;/p&gt;
&lt;p&gt;
So, there you have it - an interesting little project we played with
this past semester. We did it in an intro Python course but I could
see it as an interesting project in AP CS A using hashmaps and lists.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Madlib Madness</title>
      <link>https://cestlaz.github.io/posts/2013-04-30-madlib_madness/</link>
      <pubDate>Tue, 30 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-04-30-madlib_madness/</guid>
      <description>&lt;p&gt;Earlier in the term, our intro classes spent a little time learning
some basic HTML. We don&amp;rsquo;t spend a lot of time on it, just enough so
that the students can present their work in a static web site. The end
goal, though, was to programatically generate the web sites - there&amp;rsquo;s
nothing quite as empowering to a student as when they can present their
work to the world.&lt;/p&gt;
&lt;p&gt;Finally, it&amp;rsquo;s all coming together.&lt;/p&gt;
&lt;p&gt;Now that the classes are comfortable with Python, we can have some
fun. We all remember Mad Libs - that wacky word game where you select
unknowingly select words to substitute into a basic story and
hilarity ensues.&lt;/p&gt;
&lt;p&gt;We did our own versions using Python files, lists and
dictionaries.&lt;/p&gt;
&lt;p&gt;Here are some of the results:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;http://homer.stuy.edu/~richard.zhan/19-Madlibs.py&#34;&gt;http://homer.stuy.edu/~richard.zhan/19-Madlibs.py&lt;/a&gt;
&lt;!-- raw HTML omitted --&gt;
2. &lt;!-- raw HTML omitted --&gt;
&lt;a href=&#34;http://homer.stuy.edu/~veronika.azzara/madlibifystory.py&#34;&gt;http://homer.stuy.edu/~veronika.azzara/madlibifystory.py&lt;/a&gt;
&lt;!-- raw HTML omitted --&gt;
3. &lt;!-- raw HTML omitted --&gt;
&lt;a href=&#34;http://homer.stuy.edu/~belinda.liang/18-MadLibsMiniProject.py&#34;&gt;http://homer.stuy.edu/~belinda.liang/18-MadLibsMiniProject.py&lt;/a&gt;
&lt;!-- raw HTML omitted --&gt;
4. &lt;!-- raw HTML omitted --&gt;
&lt;a href=&#34;http://homer.stuy.edu/~kyle.oleksiuk/MadlibifyProject5.py&#34;&gt;http://homer.stuy.edu/~kyle.oleksiuk/MadlibifyProject5.py&lt;/a&gt;
&lt;!-- raw HTML omitted --&gt;
5. &lt;!-- raw HTML omitted --&gt;
&lt;a href=&#34;http://homer.stuy.edu/~phillip.huynh/story.py&#34;&gt;http://homer.stuy.edu/~phillip.huynh/story.py&lt;/a&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;The students wrote a basic story with substitution points. Their
programs then randomly replaced these points with words from an
assortment of categorized lists.&lt;/p&gt;
&lt;p&gt;Enjoy!!!!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Who won the election -- Quadratic to Linear Time!!!!!</title>
      <link>https://cestlaz.github.io/posts/2013-03-23-who_won_the_election-quadratic_to_linear_time/</link>
      <pubDate>Sat, 23 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-03-23-who_won_the_election-quadratic_to_linear_time/</guid>
      <description>&lt;p&gt;Last week was crazy. Busy, stressful, late night after late night. It
ended, though, on a great note.&lt;/p&gt;
&lt;p&gt;A young lady in my intro class found me in my office near the end of the day:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Student: Mr. Z, I wanted to make sure to catch you before vacation!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Me: What&amp;rsquo;s up?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Student: I wanted to tell you that today&amp;rsquo;s lesson was AWESOME!!!!!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wow. I&amp;rsquo;ve been teaching 23 years and that&amp;rsquo;s never happened before!!!!&lt;/p&gt;
&lt;p&gt;So, what was the hubbub about?&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve been doing list processing in Python over the past few days. We already did the basics, such as finding the largest element in a list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_max&lt;/span&gt;(L):
  maxval &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
  i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;len(L):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; L[i]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;maxval:
     maxval&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;L[i]
  i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; maxVal&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;ve also done basic searching, counting elements, removing elements, etc.&lt;/p&gt;
&lt;p&gt;Today we started with finding the mode of a list of grades.&lt;/p&gt;
&lt;p&gt;Most students approached the problem as a maximum problem. Assume the
first item is the mode and find it&amp;rsquo;s frequency, then proceed through
the list each time seeing if the current node occurs more fequently
than the &amp;ldquo;mode so far.&amp;rdquo; Pretty much the same idea as find_max (but in this case, returning a list of all the modes).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mode&lt;/span&gt;(L):
  modecount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count( L[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] )
  modes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ L[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] ]
  i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(L):
    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(L[i])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; modecount:
      modecount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c
      modes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ L[i] ]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;modecount &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; L[i] &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; modes:
      modes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append( L[i] )
    i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; modes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pretty cool. The kids are doing something pretty sophisticated here.&lt;/p&gt;
&lt;p&gt;Time to look deeper. We started running this on larger and larger data
sets. Things started really slowing down at about 20K. We then timed
things to get some numbers (thanks
&lt;a href=&#34;http://stackoverflow.com/questions/5998245/get-current-time-in-milliseconds-in-python&#34;&gt;StackOverflow&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;What was going on. The students pretty quickly honed in on the line
that called L.count(L[i]) &amp;ndash; &lt;strong&gt;Hidden Complexity&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We haven&amp;rsquo;t done big-O notation but the class easily saw that count had
to go through the entire data set and we ended up with an N^2
algorithm. For example, if we have 10 items, the main loop executes 10
times and each time, count goes through the entire list (10 items) as
well. If we go to 100 items, it becomes 100x100.&lt;/p&gt;
&lt;p&gt;What to do????&lt;/p&gt;
&lt;p&gt;Time to talk about what&amp;rsquo;s probably the most discussed instance of mode
finding - elections. The winner is &amp;ldquo;the mode of the ballots.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Of course we don&amp;rsquo;t use the above algorithm. We usually tally or count the ballots. We go through the ballots once, each time adding one to the appropriate candidates &amp;ldquo;bucket.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cestlaz.github.io/img/tally.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;From here, it&amp;rsquo;s a short step to see that we can use a list. It&amp;rsquo;s
indices represent the grade values and the data in the list the counts
or tallies:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fastmode&lt;/span&gt;(L):
  i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  counts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;max(L)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
    counts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    i&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(L):
    counts[ L[i] ] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  modecount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(counts)
  modes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
  i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(counts):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; counts[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;modecount:
    modes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(i)
    i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; modes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We go through the list once to build the tallies and then the &amp;ldquo;tally&amp;rdquo;
list once to get the modes. Simple, straightforward, and linear
time!!!!!!!!!&lt;/p&gt;
&lt;p&gt;The original routine started to hit a roadblock at about 20K items,
here we got to one million without breaking a sweat.&lt;/p&gt;
&lt;p&gt;The take away:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get it working first.&lt;/li&gt;
&lt;li&gt;Then profile to find your bottleneck&lt;/li&gt;
&lt;li&gt;Look at the problem in a different way&lt;/li&gt;
&lt;li&gt;Using data structures in a clever way can really improve performance.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Layers of a lesson</title>
      <link>https://cestlaz.github.io/posts/2012-12-17-layers-of-a-lesson/</link>
      <pubDate>Mon, 17 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2012-12-17-layers-of-a-lesson/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;div align=&#34;center&#34;&gt;
&lt;img width=&#34;50%&#34; src=&#34;https://cestlaz.github.io/img/turtle-anim.gif&#34; class=&#34;&#34; alt=&#34;&#34; /&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;p&gt;
My last post I was talking about the fact that as teachers, our
knowledge and experience is frequently trivialized. The tenor of the
times is that anyone can design a course, anyone can teach, and in
fact, we don&#39;t even need teachers, just videos or computer based
systems. If you&#39;ve ever tutored a friend, you&#39;re more than qualified.

&lt;p&gt;
That might be a strong statement but everywhere you look you see
&#34;education&#34; programs designed and implemented by non teachers. It
seems that it&#39;s believed that teaching only involves the most
superficial of transfers of information.

&lt;p&gt;
Today, I thought I&#39;d look at a lesson I taught the other week. How
I&#39;ve seen similar material presented and how my colleagues and I might treat
the subject.

&lt;p&gt;
We use &lt;a href=&#34;http://ccl.northwestern.edu/netlogo/&#34;&gt;NetLogo&lt;/a&gt; in
our Sophomore level intro course. It&#39;s a highly parallel version of
logo. It&#39;s very visual, it&#39;s great for modeling and you can introduce
deep, meaningful concepts such as parallel processing in a gentle
manner.

&lt;p&gt;
Early on the kids have to learn how to manipulate the turtles. In
NetLogo you write a single program and it&#39;s run by all the turtles &#34;at
once.&#34; The image above is one of their early &#34;experiments.&#34; Have the
turtles wiggle out of the center, but when they get to an invisible
border, start spinning. They do a number of variations on this theme.

&lt;p&gt;
A solution might look like this:

&lt;pre&gt;
; asked in a turtle context
to gospin
ifelse abs xcor &lt; 8 or abs ycor &lt; 8
[ wiggle ] ; wiggle implementation not shown
[ left 5 ]
end
&lt;/pre&gt;

&lt;p&gt;
Let&#39;s call level one just talking about the solution by looking at the
program as a sequence of instructions. Specifically relating the
instructions to the problem, showing how it solves it, and that&#39;s it.

&lt;p&gt;
This is the simplest level. A book, video, or online courseware can
approach teaching at this level. A non computer scientist teacher or a
non teacher computer scientist could do so as well. Students might
learn a bit but I wouldn&#39;t hope for much inspiration or
creativity to come out of it.

&lt;p&gt;
Let&#39;s move to level two.
&lt;p&gt;
Here we might talk about &#34;what the turtles are doing.&#34; They&#39;re always
doing something, either wiggling or spinning. This is a step in the
right direction. When done right, the students start thinking about
the problem in a more general sense but they&#39;re still looking at the
problem as something that exists only in the world of NetLogo. They
are more likely develop patterns than in level one, but it&#39;s still
limited.

&lt;p&gt;
Level three is where things get interesting. On the surface, the
problem is just a nice introduction to programming turtles in
NetLogo. At a deeper level, it&#39;s an opportunity to introduce the kids
to State Machines. A new way of thinking about problems and problem
solving.

&lt;p&gt;
Students understand the idea of a &#34;state.&#34; For example, in class,
they&#39;re in a &#34;seated state,&#34; maybe in a &#34;note taking state,&#34; etc. It&#39;s
easy to see that they don&#39;t know what their day will bring but they
constantly make decisions based on their &#34;state.&#34; Likewise, they can
think about the turtle as in a state. It&#39;s either in a wiggling state
or a spinning state and based on their situation they can either
continue in their current state or transition to the other one:

&lt;div align=&#34;center&#34;&gt;
&lt;img width=&#34;50%&#34; src=&#34;https://cestlaz.github.io/img/spin-state.png&#34; class=&#34;&#34; alt=&#34;&#34; /&gt;
&lt;/div&gt;

This opens up a new way of thinking and it&#39;s easy to see how this
extends to other problems, for example, a ghost from pacman:

&lt;div align=&#34;center&#34;&gt;
&lt;img width=&#34;50%&#34; src=&#34;https://cestlaz.github.io/img/pacman-ghost-state.png&#34; class=&#34;&#34; alt=&#34;&#34; /&gt;
&lt;/div&gt;

A good teacher thinks about working across these levels. He adjusts
based on the class and looks for opportunities to develop these deeper
concepts.
</description>
    </item>
    
    <item>
      <title>Pair Programming Tag Team Shootout</title>
      <link>https://cestlaz.github.io/posts/2012-03-01-pair-programming-tag-team-shootout/</link>
      <pubDate>Thu, 01 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2012-03-01-pair-programming-tag-team-shootout/</guid>
      <description>&lt;!DOCTYPE html&gt;

So today we changed things up a bit.&lt;br /&gt;&lt;br /&gt;Instead of having a typical lab type periods, we tried the Pair Programming Tag Team Shootout.&lt;br /&gt;&lt;br /&gt;We aren&#39;t annualized so while the kids that have been with me since September have been working in pairs for a while, the other half of the class is just getting used to how we do it. I also wanted to get the kids to mix a little more.&lt;br /&gt;&lt;br /&gt;Hence the shootout.&lt;br /&gt;&lt;br /&gt;Everyone got a sheet with a bunch of problems on it:&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://www.scribd.com/doc/83400730/Shootout&#34; style=&#34;-x-system-font: none; display: block; font-family: Helvetica,Arial,Sans-serif; font-size-adjust: none; font-size: 14px; font-stretch: normal; font-style: normal; font-variant: normal; font-weight: normal; line-height: normal; margin: 12px auto 6px auto; text-decoration: underline;&#34; title=&#34;View Shootout on Scribd&#34;&gt;Shootout&lt;/a&gt;&lt;iframe class=&#34;scribd_iframe_embed&#34; data-aspect-ratio=&#34;0.772727272727273&#34; data-auto-height=&#34;true&#34; frameborder=&#34;0&#34; height=&#34;600&#34; id=&#34;doc_39108&#34; scrolling=&#34;no&#34; src=&#34;http://www.scribd.com/embeds/83400730/content?start_page=1&amp;amp;view_mode=list&amp;amp;access_key=key-2kfbc4856l652aq1j5ik&#34; width=&#34;100%&#34;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;I then paired them off randomly.&lt;br /&gt;&lt;br /&gt;The idea is complete the first problem, find a new partner, repeat.&lt;br /&gt;&lt;br /&gt;By the end of the period each student worked with between five and seven partners.&lt;br /&gt;&lt;br /&gt;I&#39;m having them send me their solutions and partners tonight.&lt;br /&gt;&lt;br /&gt;The early response was good -- it&#39;s speeding up them getting to know each other and it was a nice change of pace. We had some problems coordinating switching problems, but we&#39;ll do better next time.&lt;br /&gt;&lt;br /&gt;All in all a good day.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;img width=&#39;1&#39; height=&#39;1&#39; src=&#39;https://blogger.googleusercontent.com/tracker/468689896075458340-8898870113233862529?l=cestlaz.blogspot.com&#39; alt=&#39;&#39; /&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Let me Google that for you</title>
      <link>https://cestlaz.github.io/posts/2012-02-08-let-me-google-that-for-you/</link>
      <pubDate>Wed, 08 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2012-02-08-let-me-google-that-for-you/</guid>
      <description>&lt;!DOCTYPE html&gt;

Piloting a new course this semester - Intro to Computer Science part 2. Between the existing Intro part 1 and this, we should be able to do a pretty thorough job in preparing our kids for the future.&lt;br /&gt;&lt;br /&gt;We decided that we wanted the kids to make deliverables in the form of web pages - plain old html written by hand. Part of the idea was to demystify things, part was to let the kids show off their work, part was to have something that they can generate programatically as the course progressed, and part was to give them a tool they might find valuable beyond their computer science classes.&lt;br /&gt;&lt;br /&gt;We also wanted to help teach the kids how to find information and how to learn things on their own. Despite the fact that our students use computers all the time, they possess a widely varying skill set. With that in mind, &amp;nbsp;here&#39;s what we tried to do:&lt;br /&gt;&lt;br /&gt;After a brief introduction to what a web page is (just a text file with markup) and showing them the bare&lt;br /&gt;minimum of markup:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/1775745.js?file=simple.html&#34;&gt;&lt;/script&gt;&lt;br /&gt;&lt;br /&gt;I recommended a simple editor - gedit - while resisting all my inner urges for all things emacs, and then showed them an image of a web page:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://www.stuycs.org/courses/ml2/zamansky/work/hw-1/SampleHTMLWebPagePicture.gif&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;177&#34; src=&#34;http://www.stuycs.org/courses/ml2/zamansky/work/hw-1/SampleHTMLWebPagePicture.gif&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The end goal was to make a page that had all of the elements in the above image but I also asked:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;How did they go about finding out how to make the page?&lt;/li&gt;&lt;li&gt;Where did they search?&lt;/li&gt;&lt;li&gt;what turned up bad results (and what were they)?&lt;/li&gt;&lt;li&gt;what turned up good results (and what were they)?&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;I was very pleased with the results. Just about all the kids are now able to make a web page with the components in the image above. More importantly, this is what came out of our discussion:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Everyone used Google exclusively as a search engine.&lt;/li&gt;&lt;li&gt;The range of&amp;nbsp;queries ranged from things like &#34;html tutorial,&#34; &#34;making a web page,&#34; and just plain &#34;html&#34; to maybe not so good things like &#34;gedit web page.&#34;&lt;/li&gt;&lt;li&gt;No one used social search or used facebook.&lt;/li&gt;&lt;li&gt;They mostly all found sites such as w3schools.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;I&#39;m hoping this is a good first step in having the students find things on their own and not be afraid to try things. I think it&#39;s an encouraging start.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;img width=&#39;1&#39; height=&#39;1&#39; src=&#39;https://blogger.googleusercontent.com/tracker/468689896075458340-984256400226014120?l=cestlaz.blogspot.com&#39; alt=&#39;&#39; /&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>