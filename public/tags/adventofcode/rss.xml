<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>adventofcode on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/adventofcode/</link>
    <description>C&#39;est la Z (adventofcode)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Nov 2019 09:02:09 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/adventofcode/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Advent Of Code 2019</title>
      <link>https://cestlaz.github.io/post/advent-of-code-2019/</link>
      <pubDate>Fri, 29 Nov 2019 09:02:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-of-code-2019/</guid>
      <description>&lt;p&gt;
It&amp;#39;s almost December which means it&amp;#39;s almost time for &lt;a href=&#34;http:/adventofcode.com&#34;&gt;Advent of Code
2019&lt;/a&gt;. Advent of code is an annual computer programming competition
created and ruyn by &lt;a href=&#34;https://twitter.com/ericwastl&#34;&gt;Eric Wastl&lt;/a&gt;. It&amp;#39;s been running since 2015. I&amp;#39;ve
written about it before, mostly from a teacher&amp;#39;s point of view (&lt;a href=&#34;https://cestlaz.github.io/post/solve-a-to-solve-b/&#34;&gt;Solve
A to Solve B&lt;/a&gt;, &lt;a href=&#34;https://cestlaz.github.io/post/aoc-data-structures-hidden-complexity/&#34;&gt;Data structures and Hidden Complexity&lt;/a&gt;, &lt;a href=&#34;https://cestlaz.github.io/posts/advent-2017-4-6/&#34;&gt;Tools can shape
how we think&lt;/a&gt; and a few others). 
&lt;/p&gt;
&lt;p&gt;
Basically, Eric releases one poblem a day at midnight from Dec 1
through Dec 25. Each problem has two parts with a correct solution to
part 1 unlocking part 2. Problems can be solved using any language as
each challenge just requires you to enter the correct result rather
than you submitting code. This allows you to use any language or even
no language at all.
&lt;/p&gt;
&lt;p&gt;
In terms of difficulty, some problems are certainly doable by students
in CS1 or even CS0. In fact, Eric takes great pains to keep from using
CSSpeak so as to make the problems approachable even if you aren&amp;#39;t a
CS major or professional.
&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re a CS Teacher you can find some great lesson and problem
ideas here. If you&amp;#39;re a student, they&amp;#39;re great interview prep and will
stretch your problem solving capabilities. If you&amp;#39;re just a techie,
they&amp;#39;re just fun challenges. 
&lt;/p&gt;
&lt;p&gt;
There aren&amp;#39;t any prizes so it&amp;#39;s all just for the fun of it. You can
also get help and see great discussions on the challenges over on the
Advent of Code &lt;a href=&#34;https://www.reddit.com/r/adventofcode/&#34;&gt;subreddit&lt;/a&gt;. Lots of people also put their solutions up
online. I&amp;#39;ve never finished but you can find a bunch of my old
solutions up on &lt;a href=&#34;https://github.com/zamansky?utf8=%25E2%259C%2593&amp;amp;tab=repositories&amp;amp;q=adve&amp;amp;type=&amp;amp;language=&#34;&gt;GitHub&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Finally, you can get to the challenges from previous years by just
adding the year to the url, that is:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://adventofcode/2019&#34;&gt;&lt;a href=&#34;http://adventofcode.com/2019&#34;&gt;http://adventofcode.com/2019&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://adventofcode.com/2018&#34;&gt;http://adventofcode.com/2018&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://adventofcode.com/2017&#34;&gt;http://adventofcode.com/2017&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://adventofcode.com/2016&#34;&gt;http://adventofcode.com/2016&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://adventofcode.com/2015&#34;&gt;http://adventofcode.com/2015&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Finally, here&amp;#39;s a really interesting video by Eric on the whole AoC
thing:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/bS9882S0ZHs&#34;&gt;https://www.youtube.com/embed/bS9882S0ZHs&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solve A To Solve B</title>
      <link>https://cestlaz.github.io/post/solve-a-to-solve-b/</link>
      <pubDate>Fri, 18 Jan 2019 19:36:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/solve-a-to-solve-b/</guid>
      <description>&lt;p&gt;
So many programming assignments involve a direct solution. Write a
program to do this or write a problem to solve that. It&amp;#39;s pretty
typical. There&amp;#39;s nothing wrong with assignments like these. They allow
students to practice what they&amp;#39;ve been learning and it gives them the
opportunity to create some cool programs. All the same, I like it when
there&amp;#39;s an indirect problem. You&amp;#39;re faced with a problem but in order
to solve it you first have to solve some other problem
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s why I liked &lt;a href=&#34;https://adventofcode.com/2018/day/10&#34;&gt;day 10&lt;/a&gt; from this year&amp;#39;s Advent of Code. 
&lt;/p&gt;
&lt;p&gt;
At it&amp;#39;s core the question presents you with a collection of points
along with velocities in this form::
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
position=&amp;lt; 9,  1&amp;gt; velocity=&amp;lt; 0,  2&amp;gt;
position=&amp;lt; 7,  0&amp;gt; velocity=&amp;lt;-1,  0&amp;gt;
position=&amp;lt; 3, -2&amp;gt; velocity=&amp;lt;-1,  1&amp;gt;
position=&amp;lt; 6, 10&amp;gt; velocity=&amp;lt;-2, -1&amp;gt;
&lt;/pre&gt;
&lt;p&gt;
Each point moves by adding the x and y components if its velocity each
second. For example, the last two points listed above - points (3,-2)
nad (6,10) would be transformed overtime as follows:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Point&lt;/th&gt;
&lt;th&gt;Velocity&lt;/th&gt;
&lt;th&gt;Second 0&lt;/th&gt;
&lt;th&gt;Second 1&lt;/th&gt;
&lt;th&gt;Second 2&lt;/th&gt;
&lt;th&gt;Second 3&lt;/th&gt;
&lt;th&gt;Second 4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3, -2&lt;/td&gt;
&lt;td&gt;-1,1&lt;/td&gt;
&lt;td&gt;3,-2&lt;/td&gt;
&lt;td&gt;2,-1&lt;/td&gt;
&lt;td&gt;1,0&lt;/td&gt;
&lt;td&gt;0,1&lt;/td&gt;
&lt;td&gt;-1,2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6,10&lt;/td&gt;
&lt;td&gt;-2,-1&lt;/td&gt;
&lt;td&gt;6,10&lt;/td&gt;
&lt;td&gt;4,9&lt;/td&gt;
&lt;td&gt;2,8&lt;/td&gt;
&lt;td&gt;0,7&lt;/td&gt;
&lt;td&gt;-2 6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
At some point in time, if you look at the points on a grid they will
spell out a message or at least a sequence of letters. The question
asks you to figure out that message. There&amp;#39;s a complete example and a
nice story around the problem on the &lt;a href=&#34;https://adventofcode.com/2018/day/10&#34;&gt;Advent of Code site&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
The first thought is probably to run this as a simulation. Set up a
loop, update the point locations, visualize and see if you have an
answer. This isn&amp;#39;t trivial for a beginner but it&amp;#39;s certainly
approachable. It also has a big problem. Unless you happen to have
some optical character recognition libaray handy you have to draw and
look at the output on every change. Given that it could take thousands
of iterations, this is not practical at all. 
&lt;/p&gt;
&lt;p&gt;
We can do better by solving another problem first. The key insight is
that each point travels along a line. In fact, this problem is a great
time to talk about a parametric representation of a line like 
&lt;/p&gt;
&lt;p&gt;
&amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;&lt;a href=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&lt;/a&gt;&amp;#34;&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/p&gt;
&lt;p&gt;
\(L=P+tV\) 
&lt;/p&gt;
&lt;p&gt;
Where \(P\)represents an \((x,y)\) point and \(V\) a direction vector
\((dx,dy)\).
&lt;/p&gt;
&lt;p&gt;
Regardless of where the points start, at some point all of them will
be contained within your field of view after which they will continue
along their paths outside of that field of view. We can look at a
bounding box for all of the points and when that bounding box is
smallest we should be at or close to our message.
&lt;/p&gt;
&lt;p&gt;
This is readily accomplished. We can find a bounding box by finding the
smallest and largest x and y coordinates for all the current points
and using \((X_{min},Y_{min})\) and \((X_{max},Y_{max})\) as the
diagonals of a bounding rectangle and then compare areas of these
rectangles. They should decrease at first and then eventually
increase. 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,some_large_value,stepsize):
      new_pts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; transform(pts,time) 
      bbox &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bounding_box(new_pts)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (area(bbox) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; area(previous_bbox)):
          &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re close to or at the smallest bounding box&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
We can start with a big &lt;code&gt;stepsize&lt;/code&gt; and then refine it down until we
hone in on the smallest bounding box.
&lt;/p&gt;
&lt;p&gt;
From there, we can transform all the points using the time that
resulted in the smallest bounding box and then display the points to
see our message. We might have to go through a small window of times
since the actual message might just be close to the configuration
yielded from the smallest bounding box. Of course that visualization
takes some doing - the actual viewing window might not align with your
screeen coordinates, they could all, for example, be negative so
you&amp;#39;ll probably have to do one last transformation to translate and
possibly scale the final points to make it all viewable.
&lt;/p&gt;
&lt;p&gt;
When I first solved the problem, I just dumped the coordinates into a
2 dimentional array and printed it but afterwards I wrote a little
clojurescript html5 canvas visualization:
&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://cestlaz.github.io/img/advent-2018-10.gif&#34; width=&#34;200px&#34; height=&#34;20px&#34;/&gt; 
&lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;
So there it is. It&amp;#39;s not a trivial problem for beginners but it is doable. There&amp;#39;s a
lot to deal with:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
parse the data
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
This isn&amp;#39;t too bad. You could cover regular expressions but even
without it isn&amp;#39;t too big of a deal. You could also just use an editor
to extract the important data or preprocess this for the kids.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Figure out how to transform the points.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
This also isn&amp;#39;t too bad. Just loop over all the points with &lt;code&gt;newpoint
= oldpoint + t * velocity&lt;/code&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Figure out the bounding boxes
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Also not too bad. Loop over all the points to find the smallest and
largest x and y coordinates
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Set up a loop to find the smallest bounding box and hence the time
that the message will appear.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
and then finally:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
draw the points to visually inspect the answer.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
This might be the most persnickety part. When I first coded it my
output was upside down and backwards but good enough.
&lt;/p&gt;
&lt;p&gt;
I can&amp;#39;t fully put my finger on it but I really enjoyed this problem. I
hope you enjoyed my writeup. If you want to check out my solution for
this (minus the clojurescript visualization) along with the other
Advent of Code problems I finished this year you can find them &lt;a href=&#34;https://github.com/zamansky/advent2018&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code, Data Structures, and Hidden Complexity</title>
      <link>https://cestlaz.github.io/post/aoc-data-structures-hidden-complexity/</link>
      <pubDate>Sun, 30 Dec 2018 15:17:14 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/aoc-data-structures-hidden-complexity/</guid>
      <description>&lt;p&gt;
Since 2015, &lt;a href=&#34;https://twitter.com/ericwastl&#34;&gt;Eric Wastl&lt;/a&gt; has gifted us each December with &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of
Code&lt;/a&gt; - a 25 day programming competition that I very much enjoy. This
year I haven&amp;#39;t been able to get to too many of the problems. I only
completed the first two days on the day they were released, problem
three a day late and then I didn&amp;#39;t get back to the problems until
almost 12/25 - the final day of the competition. I&amp;#39;ve spent a bit of
time over the break working through the problems. I&amp;#39;m currently
through 9. I started working through the problems in Clojure - part of
my yearly attempt to dive into the language but then did a few in
Python just to speed up my progress.
&lt;/p&gt;
&lt;p&gt;
Yesterday, I did &lt;a href=&#34;https://adventofcode.com/2018/day/9&#34;&gt;question 9&lt;/a&gt; which I found interesting as a teacher -
so much so that I think I&amp;#39;ll assign at some point in the future.
At the core of the problem you have to maintain a list of items
inserting and deleting items at assorted locations. I threw together
this solution:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;num_players &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;431&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 9&lt;/span&gt;
last_score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70950&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 255&lt;/span&gt;
players &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(num_players&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]

player&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
board&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
next_marble &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; next_marble &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; last_score:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; next_marble &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;#regular insert&lt;/span&gt;
        L &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(board)
        index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(index&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;L
        index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(index&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;L
        board&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insert(index,next_marble)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        players[player]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;players[player]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; next_marble
        index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(index&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;len(board)
        players[player]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;players[player]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;board[index]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; board[index]
    player&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(player&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;num_players
    next_marble &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_marble &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(max(players))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
It worked and I got my first star. This unlocked part 2 which changed
the number of marbles in the game from 70950 to 70950&amp;lt;b&amp;gt;00&amp;lt;/b&amp;gt;. This
brings me to my first observation - hidden complexity. Seeing my input
I knew my part 2 would be crazy slow. The solution requires you insert
and delete into a list over and over again and I did it using a Python
list and a Python list is backed by an array. This means that every
insert and delete will be linear and I had a whole bunch of them.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s another great simple example of hidden complexity. Students and
beginners use Python lists as if they were linked structures with
direct indexing - the best of all worlds. It&amp;#39;s great if you&amp;#39;re dealing
with small data sets but unless you&amp;#39;re careful things can get very
slow very fast. It&amp;#39;s important that students learn about this and it
appears that many don&amp;#39;t. 
&lt;/p&gt;
&lt;p&gt;
Even though I knew the program would take forever to run it was my bed
time so I started it on part two and turned in for the night.
&lt;/p&gt;
&lt;p&gt;
When I woke up I had an answer to part 2, entered it and earned my
next star. 
&lt;/p&gt;
&lt;p&gt;
Of course I knew that the solution should really be written using a
doubly linked list. The funny thing is that if you&amp;#39;re comfortable with
creating dynamic data structures like linked lists, writing a solution
using a doubly linked list and running it on part 2 actually takes a fraction of
the time of writing the original solution and running it. To make
sure, I did it. I decided to code it up in Java since I might assign
something like this to my students in C++. You can check it out &lt;a href=&#34;https://github.com/zamansky/advent2018/tree/master/java&#34;&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
The second take away was that it&amp;#39;s actually beneficial for students to
be able comfortable with pointers and dynamic memory and while
creating a linked list let alone a tree can be tricky at first, &lt;a href=&#34;https://cestlaz.github.io/posts/it-gets-easier-advent19/&#34;&gt;it
does get easier.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
With all the debate going on over coding vs computational thinking vs
CS it&amp;#39;s things like this - thinking about things like this that marks
one of the ways a computer scientist is different from a programmer. 
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tools can shape how we think</title>
      <link>https://cestlaz.github.io/posts/advent-2017-4-6/</link>
      <pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-2017-4-6/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been having fun with this years &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; competition. So
far, I&amp;#39;ve been able to keep up but with I expect that to change in
another couple of days since I&amp;#39;ll be traveling for the weekend.
&lt;/p&gt;
&lt;p&gt;
After solving a problem, I like looking over some of the other
solutions on the Advent of Code &lt;a href=&#34;https://www.reddit.com/r/adventofcode/&#34;&gt;subreddit&lt;/a&gt;. Even with similar
agorithmic solutions there&amp;#39;s a decent amount of variation in the
actual code and solutions in different languages can look radically
different.
&lt;/p&gt;
&lt;p&gt;
That got me thinking about how the tools we know and use both shape the ways we
approach solving problems and creating things and either limit or
empower us to go from a mental model of a solution or creation to an
actual artifact.
&lt;/p&gt;
&lt;p&gt;
Relating to this are the common themes that come up in the CS
Education world. The idea that it&amp;#39;s computer science not programming
and certainly not merely coding. That&amp;#39;s true but the tools and
languages we use shape the whole thinking part and can also give the
students a valuable practical tool that they can leverage to great
advantage in both future classes and work and life endeavors.
&lt;/p&gt;
&lt;p&gt;
I decided to do this rant as a video. I hope you enjoy it:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/x8cZgEogWNw&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allow=&#34;encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code 2017 - Day 1</title>
      <link>https://cestlaz.github.io/posts/advent-2017-1/</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-2017-1/</guid>
      <description>&lt;p&gt;
It&amp;#39;s once again time for &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt;. That one a day programming
competition that&amp;#39;s been running now for three years.
&lt;/p&gt;
&lt;p&gt;
Here are some thoughts on &lt;a href=&#34;http://adventofcode.com/2017/day/1&#34;&gt;day 1&lt;/a&gt;. The core of the problem is that you
have a large string of digits and you have to calculate a
checksum. This is done by adding the sum of a subset of the
digits. Only the ones that are identical to the digit to their
right. To make it a little more interesting, the last digit wraps
around to the first for checksum purposes.
&lt;/p&gt;
&lt;p&gt;
For example, the input &lt;strong&gt;&lt;strong&gt;2234335&lt;/strong&gt;&lt;/strong&gt; leads to the calculate &lt;code&gt;2 + 3&lt;/code&gt; or
&lt;code&gt;5&lt;/code&gt;. The input &lt;strong&gt;&lt;strong&gt;234445662&lt;/strong&gt;&lt;/strong&gt; leads to &lt;code&gt;4+4+6+2&lt;/code&gt; or &lt;code&gt;16&lt;/code&gt;. We add 4 for
twice because the first four is adjacent the second and the second the
third. We add the 2 at the end because it wraps around to match the
one at the front.
&lt;/p&gt;
&lt;p&gt;
We first read in the data and strip off the trailing newline
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Then, since we can access the elements of the string as a list (or
array) it&amp;#39;s a simple loop to calculate the sum:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Pretty straightforward but I don&amp;#39;t like the special case of checking
the last element for the wraparound. Sometimes it&amp;#39;s possible to get
rid of edge cases like this by &lt;a href=&#34;https://cestlaz.github.io/posts/2014-02-26-change-the-data.md&#34;&gt;changing the data&lt;/a&gt;. We can do that here
by simply appending a copy of the first character to the end of the
list.
&lt;/p&gt;
&lt;p&gt;
This leads to a slightly cleaner solution:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This is pretty much what I&amp;#39;d expect from a Python programmer that&amp;#39;s
just starting out. We can use a couple of more advanced Python
features to make what I consider a more elegant solution.
&lt;/p&gt;
&lt;p&gt;
Python&amp;#39;s &lt;strong&gt;&lt;strong&gt;zip&lt;/strong&gt;&lt;/strong&gt; function takes two lists and interleaves them.
&lt;code&gt;zip(&amp;#34;abc&amp;#34;,&amp;#34;def&amp;#34;)&lt;/code&gt; will yield &lt;code&gt;[ (a,d), (b,e), (c,f)]&lt;/code&gt;. If the lists
are of different length, it just zips up until the shorter list is
exhausted. We can use array slicing to zip the input string with it&amp;#39;s
neighbor by using &lt;code&gt;new_list = zip(data,data[1:])&lt;/code&gt;. For the string &amp;#34;122344&amp;#39;
zipping gives us &lt;code&gt;[(1,2),(2,2),(2,3),(3,4),(4,4)]&lt;/code&gt;. We can put this in
a list comprehension that only keeps the tuples representing an
element with an identical neighbor and also converts it to an int:
&lt;code&gt;new_list = [int(a) for a,b in new_list if a==b]&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Finally, we can just calculate the sum. This leads to the following
complete solution:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
List comprehensions for the win!!!!
&lt;/p&gt;
&lt;p&gt;
Each Advent of Code problem has two parts. You unlock the second by
solving the first. Here, the wrinkle is that instead of checking each
digit with it&amp;#39;s neighbor to the right, you check it with the one
that&amp;#39;s halfway around the list.
&lt;/p&gt;
&lt;p&gt;
With loops, the solution is just a quick modification of part 1. We
just add half the length and use mod to find the digit to compare with:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I wanted to see if I could do this with a list comprehension
though. The trick was to figure out how to make two lists to zip
together to get the pairs to check then add. Here&amp;#39;s the solution:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The insight was that we could just make a second list that starts
halfway through and then wraps around. I did this by adding
&lt;code&gt;data[l//2:] + data&lt;/code&gt;. &lt;code&gt;l//2&lt;/code&gt; is the integer division of the length (in
Python3). &lt;code&gt;data[l//2:]&lt;/code&gt; represents the second half of data (from the
midway point to the end). Technically I should have only added the second
half of data: &lt;code&gt;data[l//2:] + data[:l//2]&lt;/code&gt; where &lt;code&gt;data[:l//2]&lt;/code&gt; gives us
the first half of the list but since zip will just stop when it
exhausts the shorter list, this wasn&amp;#39;t necessary.
&lt;/p&gt;
&lt;p&gt;
Day 2 also has a nice list comprehension based solution. Maybe I&amp;#39;ll
write that up later.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>It gets easier (or advent of code 2016 day 19)</title>
      <link>https://cestlaz.github.io/posts/it-gets-easier-advent19/</link>
      <pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/it-gets-easier-advent19/</guid>
      <description>&lt;p&gt;
Today&amp;#39;s &lt;a href=&#34;http://adventofcode.com/2016/day/19&#34;&gt;Advent of Code&lt;/a&gt; problem was a variant on the &lt;a href=&#34;http://mathworld.wolfram.com/JosephusProblem.html&#34;&gt;Josephus
problem&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I recalled that there was a formula to figure out the
sole survivor but I decide to run a simulation rather than looking it
up. I also decided to write it up in C++, well, really C with cout
instead of printf.
&lt;/p&gt;
&lt;p&gt;
Part 1 was the traditional problem. Part 2 was a variant where at each
iteration, you remove the elf opposite the elf being processed (see
the &lt;a href=&#34;http://adventofcode.com/2016/day/19&#34;&gt;problem description&lt;/a&gt; for details).
&lt;/p&gt;
&lt;p&gt;
For both solutions I coded up a circular doubly linked list:
&lt;/p&gt;
&lt;div class=&#34;src src-c&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You can see my complete solutions &lt;a href=&#34;https://github.com/zamansky/advent2016/blob/master/day19.cpp&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I was thinking about how I wrote the code – I just rolled it off the
top of my head. The same was true for the earlier AoC problems where I
had to implement a breadth first search or something similar.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not making a statement about my amazing coding abilities - linked
lists and graph searches are pretty basic, but rather than having done
the CS thing for so long, these fundamentals have become somewhat
routine. I haven&amp;#39;t really written C code in years but other than a
couple of typos (and a stupid mistake in calculating steps) things
worked right off the bat.
&lt;/p&gt;
&lt;p&gt;
I remember a time when I was in college or even a young professional
when I would use an array and an index as a stack or queue - not
because it made more sense but rather, because I wasn&amp;#39;t fully
comfortable with memory manipulation and linked lists. The same could
be said for my first few years working with anything more than the
simplest recursion.
&lt;/p&gt;
&lt;p&gt;
All of this is to say that it does get easier.
&lt;/p&gt;
&lt;p&gt;
Things that seem trivial to us now seemed
insurmountable when we were beginners. Last year, I wrote about an overnight homework
assignment I gave to my class that would have been a final project a
year earlier (the post is &lt;a href=&#34;http://cestlaz.github.io/posts/2015-02-11-taking-stock-self-assess.html/#.WFiGl99iekA&#34;&gt;here&lt;/a&gt; but the homework links are no longer
active) and a few weeks ago I recall a fellow CS teacher talking about
how much longer it takes his students to write a chunk of code than it
takes the teacher.
&lt;/p&gt;
&lt;p&gt;
New things are challenging and take time but with practice and
persistence techniques that were once daunting can become tools ready
at our disposal to use on a whim.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code 2016 - Check your data</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016-check-data/</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016-check-data/</guid>
      <description>&lt;p&gt;
I&amp;#39;m spending the weekend up in Michigan. Visiting my brother and is
family. We&amp;#39;re here to see the &lt;a href=&#34;http://umgass.org&#34;&gt;UMGASS&lt;/a&gt; production of Gilbert and
Sullivan&amp;#39;s &lt;a href=&#34;http://www.umgass.org/current-production&#34;&gt;The Sorcerer&lt;/a&gt;. Batya also came up from Cornell to join us so
the two families are all togehter for the first time in about 10
years.
&lt;/p&gt;
&lt;p&gt;
This hasn&amp;#39;t left much time for &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; but I did manage to
finish yesterday&amp;#39;s challenge this morning.
&lt;/p&gt;
&lt;p&gt;
What took me so long? Much like last year, it was &lt;a href=&#34;http://cestlaz.github.io/posts/2015-12-17-im-an-idiot.html/&#34;&gt;because I&amp;#39;m an
idiot&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
The &lt;a href=&#34;http://adventofcode.com/2016/day/9&#34;&gt;problem&lt;/a&gt; seemed pretty straighforward. I coded a solution and it
worked for all the test cases. I tried it on my data set but
the grader said the answer was wrong. I went through the problem a
number of times as well sa my code. I figured I either mis-interpreted
the question or had some bug. I found neither to be true.
&lt;/p&gt;
&lt;p&gt;
After some frustration, I went over to the Advent of Code &lt;a href=&#34;https://www.reddit.com/r/adventofcode/&#34;&gt;subreddit&lt;/a&gt;
grabbed a couple of posted solutions (trying not to look at them) and
ran both on my data - those solutions got the same answer on my data
set as I did.
&lt;/p&gt;
&lt;p&gt;
This morning, I asked Batya to look over my code and the problem (it&amp;#39;s
always good to have a daughter that&amp;#39;s smarted than you are) but she
saw no problems.
&lt;/p&gt;
&lt;p&gt;
Finally, I emailed my buddy JonAlf since I know he completed the problem. He sent back his answer along
with his data set and I got the same answer as he did on his data.
&lt;/p&gt;
&lt;p&gt;
What could be the problem.
&lt;/p&gt;
&lt;p&gt;
His data set was about 12k characters long, mine was 4k. Something had
to be wrong here. I went back to the Advent of Code site and grabbed
the data set again. This time, I went to the page and did a &amp;#34;save-as&amp;#34;
to save it - last time, I cut and pasted.
&lt;/p&gt;
&lt;p&gt;
The cut and paste version was 4k, the save-as was 12k. This time it
worked and was accepted and I also finished part 2 in short order.
&lt;/p&gt;
&lt;p&gt;
The moral of the story – make sure you check the integrity of your
data set - you&amp;#39;ll never get the right answer if you&amp;#39;re working with
the wrong data.
&lt;/p&gt;
&lt;p&gt;
In case anyone&amp;#39;s interested, you can find my AoC code &lt;a href=&#34;https://github.com/zamansky/advent2016&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2016 #2</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016-2/</link>
      <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016-2/</guid>
      <description>&lt;p&gt;
Today we&amp;#39;re looking at &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; 2016 &lt;a href=&#34;http://adventofcode.com/2016/day/2&#34;&gt;number 2&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
To change things up, I thought I&amp;#39;d do a video where I live code a solution.
&lt;/p&gt;
&lt;p&gt;
The solution I present is pretty straightforward - use a 2D array (or
technically, an array of strings) to represent the keypad, parse the
input, and follow the input instructions to build the code.
&lt;/p&gt;
&lt;p&gt;
One of the things I really like about Advent of Code is that every
problem has two parts and depending on how you solved part 1, you may
or may not have extra work to do for part 2.
&lt;/p&gt;
&lt;p&gt;
A couple of years ago, I wrote about one of the coding techniques I
try to convey to my students. The idea of &lt;a href=&#34;http://cestlaz.github.io/posts/2014-02-26-change-the-data.md&#34;&gt;changing the data&lt;/a&gt; to take
away edge and special cases.
&lt;/p&gt;
&lt;p&gt;
Part two of this problem is a perfect time to use that technique.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the video, I hope you enjoy it:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/EC8gSrYQ11g&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2016 #1</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016-1/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016-1/</guid>
      <description>&lt;p&gt;
I recently &lt;a href=&#34;http://cestlaz.github.io/posts/advent-of-code-2016/&#34;&gt;posted&lt;/a&gt; about &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; - a series of programming
problems relseased one a day. While they vary in terms of level of
difficulty, a number of them make nice problems for introductory to
mid level programming classes.
&lt;/p&gt;
&lt;p&gt;
I thought I&amp;#39;d share some of my thoughts on a few of them starting with
the first problem from this years competition.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;http://adventofcode.com/2016/day/1&#34;&gt;Take a minute to read it over.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
At first glance, it might seem to a young programmer that this problem
requires a two dimensional array - all about (x,y) coordinates but
then there&amp;#39;s a problem - there are no limits on coordinates and we
can&amp;#39;t make an unlimited size array.
&lt;/p&gt;
&lt;p&gt;
After thinking a bit, hopefully the programmer realizes that all they
need to do is keep track of the how the &lt;strong&gt;&lt;strong&gt;(x,y)&lt;/strong&gt;&lt;/strong&gt; location changes over
time. In the solution below, we start at &lt;strong&gt;&lt;strong&gt;(0,0)&lt;/strong&gt;&lt;/strong&gt; and count the steps as
we update two variables &lt;strong&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;y&lt;/strong&gt;&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
When we finish processing the moves, we have our current location in
&lt;strong&gt;&lt;strong&gt;(x,y)&lt;/strong&gt;&lt;/strong&gt; and we have the number of steps taken to get there.
&lt;/p&gt;
&lt;p&gt;
The solution below hsa a couple of niceties that a beginning
programmer might not know or use (and I&amp;#39;m not arguing that what&amp;#39;s written is
superior in any way, it&amp;#39;s just what I ended up writing).
&lt;/p&gt;
&lt;p&gt;
I make use of tuple destructuring:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
which assigns &lt;strong&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/strong&gt; to the first item in the tuple and &lt;strong&gt;&lt;strong&gt;y&lt;/strong&gt;&lt;/strong&gt; the
second. I used that a number of times
&lt;/p&gt;
&lt;p&gt;
I also use a list  I call &lt;strong&gt;&lt;strong&gt;dirs&lt;/strong&gt;&lt;/strong&gt; to hold dx and dy values for the
four direcitons:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This made it easier to to update the location based on the 4
directions. I could also have just used if statements.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s all the code:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Overall, a nice little problem for beginning and intermediate
students.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code 2016</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016/</link>
      <pubDate>Sat, 03 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016/</guid>
      <description>&lt;p&gt;
Once again, it&amp;#39;s time for &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; - a series of small
programming problems released once a day.
&lt;/p&gt;
&lt;p&gt;
I wrote a bit about it &lt;a href=&#34;http://cestlaz.github.io/posts/2015-12-15-advent.html/&#34;&gt;last&lt;/a&gt; &lt;a href=&#34;http://cestlaz.github.io/posts/2015-12-17-im-an-idiot.html/#.WEMqBB9ieYQ&#34;&gt;year&lt;/a&gt; and you can still find last years
problems &lt;a href=&#34;http://adventofcode.com/2015/&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s only day three but so far, all of the problems look really nice
for students in APCS-A or any similar intro course. I&amp;#39;m thinking of
looking at a couple of the problems this week with my class at Hunter.
&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t think about this much last year but one thing I really like
about the competition is that each problem comes in two parts. You&amp;#39;re
first presented with the problem and the input and once you put in the
correct answer, you&amp;#39;re presented with part two.
&lt;/p&gt;
&lt;p&gt;
This can be annoying at times, particularly when it requires a large
code rewrite but it also means that well designed, not too specific
solutions are rewarded.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s not quite the same as changing the specs on a project mid way but
it does encourage thinking about more than just solving a super
specific problem.
&lt;/p&gt;
&lt;p&gt;
Check out &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; and see if it&amp;#39;s something you or your classes
might enjoy.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>