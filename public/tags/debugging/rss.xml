<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>debugging on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/debugging/</link>
    <description>C&#39;est la Z (debugging)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 May 2020 08:11:25 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/debugging/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>More thoughts on debugging</title>
      <link>https://cestlaz.github.io/post/debug/</link>
      <pubDate>Thu, 21 May 2020 08:11:25 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/debug/</guid>
      <description>&lt;p&gt;
Yesterday&amp;#39;s post on &lt;a href=&#34;https://cestlaz.github.io/post/errors-are-hard-to-find/&#34;&gt;errors&lt;/a&gt; led to some interesting discussion over on
Facebook. Specifically on teaching students to use a debugger. 
&lt;/p&gt;
&lt;p&gt;
My contention is that while it&amp;#39;s easy to demonstrate a debugger it&amp;#39;s
hard to get student buy in. In my CS0, we start with &lt;a href=&#34;https://thonny.org/&#34;&gt;Thonny&lt;/a&gt; which has
a great integrated debugger. In my CS1 I also show and use
gdb. Regardless of my approach the subset of students who actively end
up using the debugger has remained both constant and small.
&lt;/p&gt;
&lt;p&gt;
A few students will use the debugger in the very early stages to help
understand basic constructs but fewer will go back to the tool later
when a real error occurs. One of the difficulties probably relates to
the fact that it&amp;#39;s hard to present a natural, organic example of using
a debugger. You either have to force an appropriate error situation or
you have to wait and hope for the right situation to present itself at
a good time.
&lt;/p&gt;
&lt;p&gt;
Truth be told, I don&amp;#39;t use debuggers all that much. Mostly, I&amp;#39;ll use
them in C or C++ to get in the ballpark of where my error is - usually
via postmortem debugging. 
&lt;/p&gt;
&lt;p&gt;
In any event, while the students should know of the existence and
power of debugging tools the real skill is how to think about your
craft.
&lt;/p&gt;
&lt;p&gt;
Whether one uses a debugger or print statements the questions are
really: 
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
what problem is the student trying to solve - do they understand it?
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
How are they solving it?
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
What specifically are they telling their program to do? 
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
That last one is important. I always tell my students that &amp;#34;Computers
are really bad at doing what you want them to do but they&amp;#39;re really
good at what you tell them to do!&amp;#34; 
&lt;/p&gt;
&lt;p&gt;
Here are some errors that I&amp;#39;ve seen stump kids time and time again:
&lt;/p&gt;
&lt;p&gt;
A typical intro to recursion problem is the Fibonacci numbers. The
recursive definition gives:
&lt;/p&gt;
&lt;p&gt;
\[
f(n) = \left\{
\begin{array}{ll}
1 &amp;amp; if x \leq 2 \\
f(n-1) + f(n-2) &amp;amp; otherwise
\end{array}
\right.
\]
&lt;/p&gt;
&lt;p&gt;
This translates directly to code
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
See the problem?
&lt;/p&gt;
&lt;p&gt;
I see this at least a couple of times a year. 
&lt;/p&gt;
&lt;p&gt;
The student writes &lt;code&gt;(n-1) + (n-2)&lt;/code&gt; instead of &lt;code&gt;f(n-1) + f(n-2)&lt;/code&gt;. In
fact, when they read off their code they&amp;#39;re more likely than not to
say it correctly - the brain autocorrects. It&amp;#39;s just when you read an
essay with a glaring mistake over and over. A debugger might bring
attention to this but then so can careful code tracing. This is a time
that rubber duck debugging can also be effective. Another good
strategy would be to just take a break and come back with fresh eyes.
&lt;/p&gt;
&lt;p&gt;
Another one is when students are starting to work with loops and
arrays. I&amp;#39;ve seen all sorts of variations on the error so will only
share one. Suppose the students are looking for the largest in a data
set. I might see code like this:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Once again, the student will usually describe the algorithm correctly
but their code is comparing adjacent elements not each element against
a &amp;#34;source of truth.&amp;#34; The computer is doing what they told it to do not
what they want it to do.
&lt;/p&gt;
&lt;p&gt;
A debugger would probably be more helpful here but again, it all comes
down to careful analysis of the code. 
&lt;/p&gt;
&lt;p&gt;
In the previous two examples, a debugger could help but the real
requirement is careful code tracing be it via tool, print statements
or by hand. Here&amp;#39;s an example where a debugger can really shed some
light for a beginner. This time in C++:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
What causes the error isn&amp;#39;t important. What happens is that students
start to add print statements and ultimately get to the point where a
print is the very first line of the program and it still outputs
nothing.
&lt;/p&gt;
&lt;p&gt;
The culprit here is output buffering. &lt;code&gt;cout&lt;/code&gt; is the same as
 &lt;code&gt;System.out.print&lt;/code&gt; - no newline. The output buffers and won&amp;#39;t actually
appear until you send a &lt;code&gt;\n&lt;/code&gt;. If your program crashes before then you
won&amp;#39;t see anything. This is why we have &lt;code&gt;cerr&lt;/code&gt; in C++,  &lt;code&gt;stderr&lt;/code&gt; for C
and &lt;code&gt;System.err&lt;/code&gt; in Java. The error streams are unbuffered and will
 output immediately. Not as good but still effective would be adding a
 newline to the original print statement. 
&lt;/p&gt;
&lt;p&gt;
In any event, this is a case where stepping through with a debugger
can be truly enlightening. 
&lt;/p&gt;
&lt;p&gt;
Now with all of this, the real key is to carefully consider what
you&amp;#39;re trying to do and how you end up communicating it in
program. I&amp;#39;d love to find a way to convince more students of the
utility of a good toolset that includes debuggers but I&amp;#39;d also just
love to be more effective in getting them to carefully read and
analyze their code.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Errors Are Hard To Find</title>
      <link>https://cestlaz.github.io/post/errors-are-hard-to-find/</link>
      <pubDate>Wed, 20 May 2020 08:10:54 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/errors-are-hard-to-find/</guid>
      <description>&lt;p&gt;
Programming is amazing. You get the thrill of victory and &lt;a href=&#34;https://www.youtube.com/watch?v=Asxr5v9arH4&#34;&gt;the agony of
defeat&lt;/a&gt;. It&amp;#39;s a great feeling when you write something and it works -
even it it&amp;#39;s small and simple. It also feels good to hunt down,
discover and eliminate subtle bugs in our code. On the other hand,
I&amp;#39;ll frequently feel like a bozo when I pour over my code for days
only to find a super silly error. Unfortunately, that&amp;#39;s the most kind
of error. It helps if you can laugh at yourself. It&amp;#39;s something I&amp;#39;ve
written about &lt;a href=&#34;https://cestlaz.github.io/posts/2015-12-17-im-an-idiot.html/&#34;&gt;before&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
As a teacher it&amp;#39;s something I try to convey to my students. When they
don&amp;#39;t see a bug, it&amp;#39;s probably not them. It&amp;#39;s like when they read an
essay over and over and don&amp;#39;t see their mistake because their brain
autocorrects.
&lt;/p&gt;
&lt;p&gt;
So, what had me kicking myself this time?
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m going to be teaching a CS topics course as part of our teacher
certification program this summer. I already have a lot of possible
topics to choose form:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
WebDev via Flask
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
3D Graphics / transformations
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Ray Tracing
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Data mining
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Machine Learning
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
NLP
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
and more
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I had never quite grokked &lt;strong&gt;Blockchain&lt;/strong&gt; - specifically its use as a
platform so I thought I&amp;#39;d see about that as a topic. I started
playing, exploring and building but when I got to signing transactions
that led me to add &lt;strong&gt;Public Key Encryption&lt;/strong&gt; as another topic.
&lt;/p&gt;
&lt;p&gt;
Traditional encryption requires a key to be used by both parties. This
means that both parties can both encrypt and decrypt so they must
trust each other. This leads to some issues:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Both parties have to share the key securely.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
All parties with the key can encrypt and decrypt. 
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
On the other hand, public key encryption uses two keys. A public one
that everyone has access to is used to encrypt data and a private one
known only to the owner. This can be used to decrypt the data. This
means I can share my public key with the world and receive secure
transmissions that only I can decrypt. It also means that two parties
can share secure data with each other without both parties knowing the
others private key.
&lt;/p&gt;
&lt;p&gt;
I decided that it would be a good idea to get my head around all of
this.
&lt;/p&gt;
&lt;p&gt;
There are a bunch of good resources on the web but the basic idea is
that you take two primes - large primes, multiply them together, chant
some mystic incantations and come up with a private and a public
key. You can then use one key to encrypt a message and the other to
decrypt that encrypted message. 
&lt;/p&gt;
&lt;p&gt;
For this to work, you want to use large primes but to work through the
math and make sure I got it, I started with small numbers - 7
and 13. I went through all the math, everything worked and it made
sense.
&lt;/p&gt;
&lt;p&gt;
Now time to write some code.
&lt;/p&gt;
&lt;p&gt;
I wrote up a small program and things seemed to work and then decided
to set up a mock student application - something that would encrypt a
sentence. If I were writing this &amp;#34;for real&amp;#34; I would figure out some
reasonable way to chunk my data for encryption but for this test I
figured it would be easy to just take each character from the input
string and encrypt it.
&lt;/p&gt;
&lt;p&gt;
First few tests worked. I encrypted and decrypted &amp;#34;ABC.&amp;#34; Then I tried
the classic &amp;#34;Hello World!&amp;#34; and things went kablooey.
&lt;/p&gt;
&lt;p&gt;
I was getting weird results and couldn&amp;#39;t for the life of me figure out
why. Every time I did an individual test it seemed to work.
&lt;/p&gt;
&lt;p&gt;
Finally, it clicked - Duh, of course it wasn&amp;#39;t working.
&lt;/p&gt;
&lt;p&gt;
When you encrypt or decrypt a number, which in our case is a
character, it involves modulo arithmetic. Given a  number &lt;strong&gt;X&lt;/strong&gt; you
calculate \(X^e\  mod\  n\ \) where e is your key and n is the product of the
primes you selected. I chose 7 and 13 as my primes which made my
 &lt;strong&gt;n&lt;/strong&gt; 91. 
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;OF COURSE IT DIDN&amp;#34;T WORK!!!!!&lt;/strong&gt; It worked for A, B, and C because
they had ascii values of 65, 66, and 67 -  all less than 91. Once I
added lower case letters all was lost. The characeter &amp;#39;e&amp;#39; has an ascii
code of 101. There&amp;#39;s no way I can get some encoded value back to 101
if I&amp;#39;m modding by 91. 
&lt;/p&gt;
&lt;p&gt;
D&amp;#39;oh
&lt;/p&gt;
&lt;p&gt;
From there it was an easy fix - I just had to account for this. I
selected larger primes, derived new keys and everything worked. 
&lt;/p&gt;
&lt;p&gt;
I felt pretty stupid but on the other hand I got that surge of joy at
it finally working.
&lt;/p&gt;
&lt;p&gt;
Now I can confidently add both Public Key Encryption and Blockchain to
possible topics for my classes. It was also another reminder that
finding bugs is hard. That&amp;#39;s something not only important for us to
remember but also important that we convince our students of this.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CS Ed Podcast 3 -  Debugging</title>
      <link>https://cestlaz.github.io/post/cs-ed-podcast-3-debugging/</link>
      <pubDate>Fri, 06 Mar 2020 08:40:26 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-ed-podcast-3-debugging/</guid>
      <description>&lt;p&gt;
&amp;lt;blockquote&amp;gt;
Everyone knows that debugging is twice as hard as writing a
  program in the first place. So if you&amp;#39;re as clever as you can be
  when you write it, how will you ever debug it? 
&lt;/p&gt;
&lt;p&gt;
– Brian Kernighan
&amp;lt;/blockquote&amp;gt;
&lt;/p&gt;
&lt;p&gt;
Debugging is what the &lt;a href=&#34;https://sites.duke.edu/csedpodcast/2020/01/07/episode-3-amy/#more-197&#34;&gt;third episode&lt;/a&gt; of the CS Ed Podcast was all
about. Kristin Stephens-Martinez of Duke University speaks with Amy Ko
of the University of Washington.
&lt;/p&gt;
&lt;p&gt;
The long and the short  of it is that debugging is hard, teaching is
hard, and teaching debugging is hard.
&lt;/p&gt;
&lt;p&gt;
Without even getting to the difficulties, one of the interesting
points discussed was that debugging is normally not the priority in CS
classes. Classes, lessons, and assignments are about learning to
program not how to debug programs. That makes debugging an add on and
an unpredictable one at that. Students will have to deal with bugs and
the time necessary not to mention the cognitive load isn&amp;#39;t really
factored in.
&lt;/p&gt;
&lt;p&gt;
This also got me thinking about designing debugging
experiences. That&amp;#39;s also really hard. It&amp;#39;s easy enough to insert
syntax errors but if students see them in an intelligent editor
they&amp;#39;ll be clued in to their locations. On paper, it&amp;#39;s trickier but
either are more cases of learning the syntax than debugging a
program. To debug I&amp;#39;m thinking you really have to create a program or
part of a program with the intent for it to do something and have it
fail or do something else.
&lt;/p&gt;
&lt;p&gt;
Teachers could also make code samples that don&amp;#39;t work as a result of
logic errors but those are also hard. They can be too obvious -
remember students are explicitly looking to fix them not discovering
an unintended error in their own code or they can be so convoluted
that in reality someone faced with the code would just rewrite it.
&lt;/p&gt;
&lt;p&gt;
So, what to do?
&lt;/p&gt;
&lt;p&gt;
Amy mentions that she asks students to write down what the program
should do. If they don&amp;#39;t understand what it should do it&amp;#39;s even harder
to understand what it&amp;#39;s doing wrong. When a student comes to me saying
&amp;#34;my program doesn&amp;#39;t work&amp;#34; I&amp;#39;ll frequently ask them what they want it
to do. We then segue to &amp;#34;what did you tell the computer to do.&amp;#34; I
frequently tell students that computers are really bad at doing what
you want them to do but really great at doing what you tell them to
do. This leads to a couple of techniques. One, described here in
another Brian Kernighan quote:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;blockquote&amp;gt;
Another effective [debugging] technique is to explain your code to
someone else. This will often cause you to explain the bug to
yourself. Sometimes it takes no more than a few sentences, followed by
an embarrassed &amp;#34;Never mind, I see what&amp;#39;s wrong. Sorry to bother you.&amp;#34;
This works remarkably well; you can even use non-programmers as
listeners. One university computer center kept a teddy bear near the
help desk. Students with mysterious bugs were required to explain them
to the bear before they could speak to a human counselor.
&amp;lt;/blockquote&amp;gt;
&lt;/p&gt;
&lt;p&gt;
This of course related directly to &lt;a href=&#34;https://en.wikipedia.org/wiki/Rubber_duck_debugging&#34;&gt;rubber duck debugging&lt;/a&gt;. Also code
tracing works well at this point. Rubber Duck Debugging is interesting
because it&amp;#39;s a example of convergent evolution having developed
independently in both industry and education. Code tracing is
interesting because it&amp;#39;s used both to teach an understanding of
programming and also as a debugging technique.
&lt;/p&gt;
&lt;p&gt;
Another point that came up is that as instructors we see the same
errors from each new crop of students. Now, what do we do about it? Is
it worth the students hitting that error wall and figuring out? Should
we scaffold or prepare them? How much? It&amp;#39;s an interesting point to
ponder and there&amp;#39;s no single right answer.
&lt;/p&gt;
&lt;p&gt;
A final point from the podcast related to CS culture as Amy pointed
out: 
&lt;/p&gt;
&lt;p&gt;
&amp;lt;blockquote&amp;gt;
 I Think it also interacts a lot with–going back to the culture of
 computing–computer science, especially in higher education, is a
 place where people like to signal their intelligence, right? It’s not
 a place where we say, “You know, I had a hard time with this. I
 worked really hard to get to this level of understanding.” It’s a
 place where people say, “I figured it out because I’m smart and I’m
 clever. Look at this clever thing I did.” Right?
&amp;lt;/blockquote&amp;gt;
&lt;/p&gt;
&lt;p&gt;
Over my career I&amp;#39;ve found this to be true and it&amp;#39;s something of a
contradiction to the fail early and openly dictum we hear so often. I
ray of light though is that at least at the more introductory levels
there are efforts to change this culture.
&lt;/p&gt;
&lt;p&gt;
So, if you haven&amp;#39;t listened to episode 3 take the time to do so. It&amp;#39;s
only about 25 minutes. 
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a lot more to talk about with debugging - using debuggers and
other tools, testing, code reviews and on and on but for now I&amp;#39;ll
leave you with one last though on debugging with another Brian
Kernighan quote:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;blockquote&amp;gt;
The most effective debugging tool is still careful thought, coupled with judiciously placed print statements.
&amp;lt;/blockquote&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>