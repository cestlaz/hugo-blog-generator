<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pedagogy on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/pedagogy/</link>
    <description>C&#39;est la Z (pedagogy)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Aug 2020 07:37:12 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/pedagogy/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Preparing CS Teachers - what to leave in, what to leave out</title>
      <link>https://cestlaz.github.io/post/teacher-cert-methods-choosing/</link>
      <pubDate>Thu, 06 Aug 2020 07:37:12 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-methods-choosing/</guid>
      <description>&lt;p&gt;
Teachers always make decisions in their courses - what to leave in,
what to leave out. I&amp;#39;ve seen programming and data structure classes
where everything is written from scratch and others where a few things
are explained and the students just use built in types like the
java LinkedList  or Arrays.sort() method.
&lt;/p&gt;
&lt;p&gt;
Do too much from scratch and you&amp;#39;ll never finish the curriculum. Do to
little and the students won&amp;#39;t really understand what&amp;#39;s going on and
walk a path towards being programmers or coders rather than computer
scientists. Most teachers work somewhere between the extremes.
&lt;/p&gt;
&lt;p&gt;
We not only had to make these decisions for our CS content but also
for our methods. We decided to leave out two particular
methods that are very popular - pair programming and Parsons
problems. We did mention both in passing and did a little talk on pair
programming but the treatment was far less than say live coding,
subgoal labeling or the many other teaching techniques we decided to
explicitly cover. 
&lt;/p&gt;
&lt;p&gt;
Why did we leave out these two topics? 
&lt;/p&gt;
&lt;p&gt;
Partly pragmatism and pragmatism is something that&amp;#39;s always left out
when talking about teaching. Let&amp;#39;s look at Parsons problems. If you&amp;#39;re
unfamiliar with them, they&amp;#39;re basically scrambled code
fragments. Students have to put them in order. They&amp;#39;re cool puzzles
and a nice change of pace. but you have to create them and get them to
your students. That didn&amp;#39;t fit all that well with us. By the time we
got to content that would benefit from Parsons problems our pace or approach
didn&amp;#39;t really fit using them. It&amp;#39;s also worth noting that we haven&amp;#39;t
seen any good online Parson problem generator systems which would be
both a boon to problem creation and potentially distribution and
assessment. 
&lt;/p&gt;
&lt;p&gt;
There just wasn&amp;#39;t that much bang for the buck in giving them more than
lip service. Since our cohort was composed of experienced teachers, we
were confident that they can find the appropriate Parsons problems
resources and use them where appropriate in their classes.
&lt;/p&gt;
&lt;p&gt;
On pair programming we had similar pragmatic issues - it didn&amp;#39;t fit
all that well given how tight the program was and we had to figure out
how bet to do it remotely on the fly. We also knew that the cohort had
all been to at least some NYC CS4All training and so were at least
exposed to the idea. Still, we, or more accurately, Topher, who&amp;#39;s had
great success getting student buy in did do a brief talk on the
subject. Some of the things we covered were: 
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
How to motivate pair programming in a collaborative way
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
What activities can you give the navigator while the driver&amp;#39;s
setting up the environment to involve them.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
How in the &amp;#34;real world&amp;#34; some developers love PP and some hate it
and that there are many variations on the theme.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
You&amp;#39;d not always going to get student buy in.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
That last point is &lt;strong&gt;very&lt;/strong&gt; important. Teachers are going to try things
that don&amp;#39;t always work and unfortunately, the system of evaluation
doesn&amp;#39;t promote such necessary experimentation. What&amp;#39;s more every time
you go to a professional development or training session or head
something online it&amp;#39;s about how the presented did it and it worked
perfectly and if you follow the same recipe it&amp;#39;ll work for you. It
might, but then, it might not. It&amp;#39;s all about building the toolbox of
tricks and using them when appropriate and even then, not every lesson
is going to be John Keating or Jaime Escalante on the big screen.
&lt;/p&gt;
&lt;p&gt;
So, in the end we made choices. We&amp;#39;re they the right ones? I think
so. Next time around the cohort will be different and the
circumstances a little as well. Will we make the same choices? Maybe,
we&amp;#39;ll have to wait and see. 
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Preparing CS Teachers - adding methods to our madness</title>
      <link>https://cestlaz.github.io/post/teacher-cert-methods/</link>
      <pubDate>Tue, 04 Aug 2020 06:47:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-methods/</guid>
      <description>&lt;p&gt;
Our summer intensive was, well, pretty intensive. We met all day every
day for a month and knocked out four classes. 
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Programming (CS1)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Data Structures
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Topics
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Methods
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
If you ever took or taught a summer session class, you know that time
is tight and generally you cover a little less than in a fall or
spring semester class. N credits in 5 weeks just isn&amp;#39;t the same as
those same N credits spread over 13. 
&lt;/p&gt;
&lt;p&gt;
How did we recapture some time? First, we had some pre-work and second
we integrated some of the courses. We couldn&amp;#39;t really do it with
programming and data structures and we were less successful at
integrating the topics than we liked but it made the most sense with
methods, in fact, I think the methods part of the class was more
successful as a result of it&amp;#39;s integration with the other subjects
than it would have been as a stand alone.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what we did.
&lt;/p&gt;
&lt;p&gt;
We first thought about covering methods as we taught topics - that is,
present something using some teaching technique, cover the topic and
then also dive in to the technique. This turned out to be a
mistake. The teachers that came in with a strong CS background  seemed
fine but for the ones newer to the subject matter, it was too much at
once. We had to alter course.
&lt;/p&gt;
&lt;p&gt;
So we did.
&lt;/p&gt;
&lt;p&gt;
We continued to model various methods and sometimes made a side remark
here or there but focused on the CS. After a few days in, we were
ready to spend a day on pedagogy. We broke the class into groups and
had them reflect on the content we taught - how did we teach it? Why
did we approach it the way we did? Did it work? This led to some rich
discussion of both CS teaching techniques and teaching in general. We
were very happy with how it all went.
&lt;/p&gt;
&lt;p&gt;
We then went back to content but added more side bits here and there
about the teaching methods - as they became more comfortable with the
CS we were able to integrate more methods talk in with the CS talk. At
our next formal pedagogy lesson, we again talked about new techniques
that were modeled but also looked at alternative approaches and
took a deeper look at our individual cohort members student
populations. 
&lt;/p&gt;
&lt;p&gt;
Some of the methods we discussed included: 
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Live Coding 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Subgoal labeling
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Make predictions
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Modifying existing code
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
code tracing
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
diagramming
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
scaffolded assignments (code skeletons)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Rubber Duck Debugging
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code sharing (presenting)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
writing implementations of library code
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
slack techniques (reacts polls, channels, ) 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
thought-grooming/sparking warm-up Qs/tasks
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
relevant quotes at warm-up
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
and more but the list doesn&amp;#39;t really do the discussion justice. Take
&amp;#34;live coding&amp;#34; for example - that&amp;#39;s not just writing code in front of
the class. There&amp;#39;s a rich discussion here - how do you narrate? Is it
truly live or from a note sheet? How about discussing workflow while
modeling it? How about live coding subgoals? The actual class is much
richer than just &amp;#34;live coding.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
In addition to integrating methods into the teaching of content, we
also merged it with the topics course for some of the assessment. For
topics, each group created a class or unit on some area of CS and
included in the documents they prepared and presentation was a
discussion of how it might bet taught. I know that they all came in as
experienced teachers so weren&amp;#39;t starting with nothing but man, they
knocked it out of the park. I&amp;#39;ll be talking more about the topics in a
later post.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll probably say this a lot in my summer intensive wrap up posts but
it was such a treat working with a cohort of great educators and also
to have two of the best teachers I know to work with as the teaching
team.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tools matter when teaching (and learning)</title>
      <link>https://cestlaz.github.io/post/tools-matter/</link>
      <pubDate>Wed, 22 Jul 2020 07:52:24 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/tools-matter/</guid>
      <description>&lt;p&gt;
One of our teacher certification cohort members asked for some help on
our Slack the other day. It was about a side project - he was learning
him so Javascript. It&amp;#39;s always very cool to see teachers exploring
things that can help with their craft on their own.
&lt;/p&gt;
&lt;p&gt;
The whole situation reminded me  about how important good tooling is
and why, in spite of its popularity, javascript has some severe issues
as a learning language and I&amp;#39;m a guy that actually likes javascript. 
&lt;/p&gt;
&lt;p&gt;
The project was a small interactive javascript todo application and he was
having trouble getting a button to react. I grabbed his code off
GitHub, fired up a server and took a look. Indeed, there were
issues. Some of the interface worked - you could type in a new item
and hit enter or click an add button and it worked. You could check or
uncheck items and you could delete them individually. Everything
worked except the clear button which did nothing. Weird.
&lt;/p&gt;
&lt;p&gt;
Exploring the code, here were some of the key sections:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// there were sections like this
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filterOption&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.filter-todo&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clearButton&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.clear-button&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// then more code 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// then some of this
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filterOption&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;filterTodo&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;clearButton&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;clearTodos&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// and more code
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
I just pulled out the lines relevant to what he was doing and to the
error so be aware that it&amp;#39;s all out of context. 
&lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;document.querySelector&lt;/code&gt; lines get references to DOM elements -
elements on the page. The &lt;code&gt;addEventListener&lt;/code&gt; then links a function to
the event. So, when you click on the &lt;strong&gt;clear&lt;/strong&gt; button on the web site,
it&amp;#39;s supposed to run the function &lt;code&gt;clearTodos&lt;/code&gt; and when you click on
the &lt;strong&gt;filter&lt;/strong&gt; button it will run &lt;strong&gt;fiterTodo&lt;/strong&gt;. There&amp;#39;s more linking of
events to elements in the code.
&lt;/p&gt;
&lt;p&gt;
What was really weird was that parts and in fact most of the interface
was working and just the clear button was not. To make matters worse,
looking both at the server output and the actual web page, there was
no indication of anything wrong. Even if you looked at the developers
console in the browser it didn&amp;#39;t really give you a clue.
&lt;/p&gt;
&lt;p&gt;
It didn&amp;#39;t take me &lt;strong&gt;too&lt;/strong&gt; long to find the error but that&amp;#39;s only because
I spent hours on similar errors back when I learned javascript. Back
then though I lost hours of time on errors like these and I was
learning JS decades into my career as a computer science teacher and
professional.
&lt;/p&gt;
&lt;p&gt;
What was going on?
&lt;/p&gt;
&lt;p&gt;
When javascript executes  &lt;code&gt;querySelector&lt;/code&gt; it returns a reference to an
element in the web page. If that element doesn&amp;#39;t exist, it returns
 &lt;code&gt;null&lt;/code&gt;. As it turned out, at least in the version I looked at, there
was no element on the page identified by the class &lt;strong&gt;filter-todo&lt;/strong&gt;. The
result was that after executing
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filterOption&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.filter-todo&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;filterOption&lt;/code&gt; is set to refer to null.
&lt;/p&gt;
&lt;p&gt;
Then later, this code: 
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filterOption&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;filterTodo&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
crashes the program because you can&amp;#39;t call the &lt;code&gt;addEventListener&lt;/code&gt;
method on &lt;code&gt;null&lt;/code&gt; which is what &lt;code&gt;filterOption&lt;/code&gt; is set to.
&lt;/p&gt;
&lt;p&gt;
Therein lies the problem. I commented out the two lines, the program
ran, and the &lt;strong&gt;clear&lt;/strong&gt; button was clickable.
&lt;/p&gt;
&lt;p&gt;
The killer was that the tool gave some pretty weird results - it
wasn&amp;#39;t all or nothing. Parts of the interface responded but parts
didn&amp;#39;t. There was no actionable feedback. The only feedback was indeed
this error: &lt;strong&gt;TypeError: filterOption is null&lt;/strong&gt; but this seems wholly
unrelated to the clear button and since most of the interface was
responsive it seemed even weirder.
&lt;/p&gt;
&lt;p&gt;
My best guess was that the web browser executed the JS code
until the crash so anything that parts of the user interface that were
wired up prior to that null pointer reference did indeed run.
&lt;/p&gt;
&lt;p&gt;
The lack of feedback and this manner of execution can make javascript
really tough on both beginners and self learners. It&amp;#39;s also tough with
a teacher if they don&amp;#39;t really know the ins and outs of the toolset.
&lt;/p&gt;
&lt;p&gt;
This was all just a reminder that tools matter. Java, Python, and C++
might not give the best error messages but generally the tooling isn&amp;#39;t
so bad. They could of course, be better, and I&amp;#39;m not arguing that any
of them are ideal learning environments but JS has a long way to
go. On the other hand, languages and environment specifically made for
learning have issues as well. The bottom line in choice of tools is
that there&amp;#39;s no magic bullet and the answer is as usual, &amp;#34;it depends.&amp;#34;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Merge Over Zoom - A Hunter CS Certification Program Update</title>
      <link>https://cestlaz.github.io/post/merge-over-zoom/</link>
      <pubDate>Thu, 16 Jul 2020 19:00:55 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/merge-over-zoom/</guid>
      <description>&lt;p&gt;
We&amp;#39;ve been talking sorting and searching in our teacher certification
program and today was all about the merge sort. One of the strategies
we use when teaching it in person involves sorting a deck of cards by
&lt;a href=&#34;https://cestlaz.github.io/posts/2014-02-27-dumbass/&#34;&gt;Tom Sawyering&lt;/a&gt; it with the class. It&amp;#39;s fun and it&amp;#39;s effective but you
can&amp;#39;t do it over Zoom. What to do? We didn&amp;#39;t want to just jump into
the nuts and bolts of merge sort. We could - we&amp;#39;ve got a great group
of teachers who could handle it but we&amp;#39;re not just talking about
content in the program we&amp;#39;re also talking about pedagogy.
&lt;/p&gt;
&lt;p&gt;
How could we adapt a divide and conquer algorithm where we split a
deck of cards and pass it out to the class to a remote environment.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what we came up with.
&lt;/p&gt;
&lt;p&gt;
I started with a story about how I pitched Hunter about having a party
with this first cohort when they all earn their NY State CS Teaching
Certificates (assuming we could have a party in person). They said yes
but to keep costs down I had to get them a list of possible
restaurants to order from sorted by lowest price. We decided to use
Chinese restaurants and the price of pork dumplings. 
&lt;/p&gt;
&lt;p&gt;
I had a long list and was going to have to go to the seamless page for
each one and get the price and then sort them. Not fun.
&lt;/p&gt;
&lt;p&gt;
Since I&amp;#39;m running the program but have two instructors - JonAlf and
Topher working with me, we decided I could &amp;#34;volunteer&amp;#34; each to do half
the list. They weren&amp;#39;t happy so they looked for Teaching Assistants to
pawn the work off on but having none went to the students. We
continued with the split until a bunch of students each had to look up
one and only one restaurant to find the price of the pork. We then
passed the restaurants and prices back up the chain and voila - merge
sort. .
&lt;/p&gt;
&lt;p&gt;
We basically were able to replicate the in class card sorting
experience with something that we could do over Zoom. It went over
pretty well. 
&lt;/p&gt;
&lt;p&gt;
We&amp;#39;re going to talk more about what we did and why and the idea of
actively engaging students in different ways over virtual conference
technologies tomorrow. 
&lt;/p&gt;
&lt;p&gt;
It was all pretty cool.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hunter&#39;s CS Teacher Certification program Week 2</title>
      <link>https://cestlaz.github.io/post/teacher-cert-week-2/</link>
      <pubDate>Sun, 12 Jul 2020 10:31:53 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-cert-week-2/</guid>
      <description>&lt;p&gt;
Time for some thoughts after week 2.
&lt;/p&gt;
&lt;p&gt;
Since this is the inaugural edition of our program and there was no
way to really know what the cohort would be like we&amp;#39;ve been adjusting
on the fly. This was expected but we&amp;#39;re finally starting to settle
in. We&amp;#39;re still finding more zoom heavy days but as we move towards
the end of our data structures segment there should be fewer of those.
&lt;/p&gt;
&lt;p&gt;
The cohort is progressing nicely. They&amp;#39;re working hard - we&amp;#39;ve got
some members who are former CS majors or otherwise came in with a
strong CS background but many were relative beginners. They&amp;#39;re all
coming along. We have to remind them that some topics just take
time. I&amp;#39;ve taught these subjects for years at Stuy but also at Hunter
College and NYU and recursion just takes time. So do Linked Lists and
dynamic data structures. It&amp;#39;s typical for CS majors not to be really
comfortable with them for a couple of years. I think I was near the
end of my college days before I&amp;#39;d roll out a pointer based solution to
a problem with the same comfort as with an array. So, the long and
short is that they&amp;#39;re doing great.
&lt;/p&gt;
&lt;p&gt;
When we started, we tried to integrate a discussion of pedagogy with
the CS but found that we were expecting too much as the CS was new to
a large portion of the group. We decided instead to model assorted
teaching techniques but keep the analysis and discussion mostly to the
CS. Last Friday though we spent most of the morning looking back at
the pedagogy. It was a rich discussion. We loved that many of the
teachers commented on &amp;#34;when we modeled&amp;#34; one technique or another. We
ended up spending a good amount of time talking about scaffolding and
code skeletons, code reading and tracing, live coding and a bunch of
others. What was also cool was that some of the techniques we modeled
didn&amp;#39;t come up in our discussion originally (we had to interject them)
and some things we did unintentionally were also highlighted by the
cohort. 
&lt;/p&gt;
&lt;p&gt;
It was a fun and productive morning. 
&lt;/p&gt;
&lt;p&gt;
Another thing that came out of the discussion was our use of
technology but I&amp;#39;m saving that for another post. 
&lt;/p&gt;
&lt;p&gt;
Finally, I&amp;#39;m remembering that a month long summer intensive is, well,
intensive. It&amp;#39;s really draining. After Friday&amp;#39;s session was done and
JonAlf, Topher and I debriefed, I just crashed for the night and
pretty much took Saturday off save making one video that we&amp;#39;ll need on
Monday. It&amp;#39;s also hard on the students - 12 credits in one month. 
&lt;/p&gt;
&lt;p&gt;
That said, we&amp;#39;re chugging along and they&amp;#39;re doing great. More
confident than ever that we&amp;#39;re going to have a 21 new leaders in CS Ed
in NY come the program&amp;#39;s conclusion.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Limitations Of Remote Teaching</title>
      <link>https://cestlaz.github.io/post/limitations-of-remote-teaching/</link>
      <pubDate>Mon, 30 Mar 2020 14:41:35 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/limitations-of-remote-teaching/</guid>
      <description>&lt;p&gt;
While tools like Zoom, Slack and others are a tremendous boon as we&amp;#39;re
forced to do all our teaching remotely the limitations become apparent
as we settle in and try to go beyond the basics of an offsite meeting.
&lt;/p&gt;
&lt;p&gt;
Today was &lt;a href=&#34;https://cestlaz.github.io/post/code-review-2/&#34;&gt;code review&lt;/a&gt; day in my CS1 class. It&amp;#39;s a lesson that I enjoy
teaching and I think my students get a lot out of it. Today we had to
do it remote. The mechanics were largely the same:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Pair off the kids.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Have them write out a commentary on their partners code without discussion
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
pair off again
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Have one review the others code but this time via discussion and
note taking.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Get everyone together and discuss
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Zoom supported all the basics. Splitting the class was pretty easy via
the breakout room interface and students were able to flag me when
they wanted to bring me in to their breakout. It was also pretty easy
to move newcomers into a room. There were some interface nits that
Zoom has to address like how when I entered and left a breakout room I
ended up losing part of the breakout window interface but I figured
out a workaround.
&lt;/p&gt;
&lt;p&gt;
The big difference and limitation was that I couldn&amp;#39;t just lurk. In
a live in person class, I get a top down view. I can basically see what all the
pairs are doing. I can&amp;#39;t get the details from a distance but I can
basically see what&amp;#39;s going on. I can also sidle over near a group to
see how they&amp;#39;re doing without being obtrusive. I can also see some of
the students screens and notebooks to get the gist of what&amp;#39;s going on
and focus in on individual conversations.
&lt;/p&gt;
&lt;p&gt;
You can&amp;#39;t do these things with Zoom and I daresay you can&amp;#39;t with any
remote conferencing platform. When I wasn&amp;#39;t in a breakout room I was
alone in the main room. When I was in a breakout room it was obvious I
joined and that in and of itself changed the room dynamic. I also
couldn&amp;#39;t see anything the kids were writing on paper or on screen
unless they explicitly shared it. 
&lt;/p&gt;
&lt;p&gt;
All of this changes the dynamic big time and limits my effectiveness
as a teacher. 
&lt;/p&gt;
&lt;p&gt;
Don&amp;#39;t take this to mean I&amp;#39;m down on Zoom. I&amp;#39;m really loving the tool
and without it or similar products my students would be getting &lt;strong&gt;much&lt;/strong&gt; 
less during this crisis. 
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s just a reminder that teaching is a contact sport and as much as
some people will tell you otherwise the best instruction is in person
in a small class with a knowledgeable dynamic teacher. We&amp;#39;re not
getting back there this semester but here&amp;#39;s hoping that we get back by
Fall.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Necessity is the mother of invention</title>
      <link>https://cestlaz.github.io/post/mother-of-invention/</link>
      <pubDate>Mon, 23 Mar 2020 18:59:40 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/mother-of-invention/</guid>
      <description>&lt;p&gt;
I didn&amp;#39;t expect to read a Fred Wilson post on &lt;a href=&#34;https://avc.com/2020/03/teaching-online/&#34;&gt;teaching online&lt;/a&gt; but
that&amp;#39;s what I found when I visited &lt;a href=&#34;https://avc.com/&#34;&gt;his blog&lt;/a&gt; this morning. Don&amp;#39;t get me
wrong - I suspect that Fred has the makings of a great teacher, it&amp;#39;s
just not what I expected to find. There have been many posts about
education but I don&amp;#39;t recall any about teaching or more specifically
the art of teaching. I did find &lt;a href=&#34;https://avc.com/2011/07/teaching/&#34;&gt;this post&lt;/a&gt; though which actually speaks
to some of the thoughts today&amp;#39;s post got churning.
&lt;/p&gt;
&lt;p&gt;
Fred describes what sounds like a typical &amp;#34;lecture style&amp;#34; lesson he&amp;#39;s
delivered numerous times. This time, it would be delivered via
Zoom. Now, Zoom is great but it&amp;#39;s harder to do an interactive
lecture - ie active learning online than it is to do in person which
is what I&amp;#39;m guessing led him to set up some starter Google sheets and
use these shared documents for an active project based class.
&lt;/p&gt;
&lt;p&gt;
At the end of the post, now that he came up with what sounds like
a much stronger approach. Fred wonders if he&amp;#39;ll ever teach this class
any other way. 
&lt;/p&gt;
&lt;p&gt;
The first thing I thought was that this would be even better in
person. I don&amp;#39;t know the specifics but I could think of a number of
ways of running this. All in person with time to work on the
spreadsheets is one. Giving some pre-work and the sheets and then pick
up somewhere in the middle is another. In person gives the feel - the
live interaction where a teacher can read the class but there&amp;#39;s no
reason why we can&amp;#39;t also leverage tech tools like shared Google
sheets in a live classroom.
&lt;/p&gt;
&lt;p&gt;
Then I got thinking about necessity being the mother of
invention. Nothing stops us from changing things up, from trying
something in normal times but when the norm is disrupted sometimes it
spurs creativity or changes focus. I
try to continually evolve as a teacher but I&amp;#39;m no better than anyone
else and get caught in ruts. I force myself to try new
things. Sometimes they work and it&amp;#39;s great and sometimes &lt;a href=&#34;https://cestlaz.github.io/post/try-something-new/&#34;&gt;they
don&amp;#39;t&lt;/a&gt;. Live and learn. On the other hand, when all if a sudden you can&amp;#39;t do things the
usual way the brain works on alternatives. 
&lt;/p&gt;
&lt;p&gt;
One example was the lesson where I
&amp;#34;invented&amp;#34; live coding. It was a direct result of a forced change -
for some reason, and I don&amp;#39;t recall why, I couldn&amp;#39;t do things the way I
wanted that day so I winged it. Years later, I was chatting with a
former student and he, out of the blue mentioned that that lesson had
a profound influence on him. 
&lt;/p&gt;
&lt;p&gt;
Right now, I&amp;#39;m teaching using Zoom, slack, videos and email. Not being
in a room with my kids sucks. I feel less connected and it&amp;#39;s much
harder to read the class. What am I doing? On the one hand, I&amp;#39;m not
trying to change that much at once as I want my students to have some
stability in an uncertain time but I am working on new things. The
nice thing is that whatever I come up with I can share with my fellow
teachers here and take with me back into the classroom. 
&lt;/p&gt;
&lt;p&gt;
This was my big takeaway but the post also reminded me of why I turn
to teachers before I turn to &amp;#34;the research&amp;#34; or policy makers on how to
teach. Fred described the evolution of a lesson and a teaching
technique. What he essentially described is what teachers do every day
and we have to do it accounting for all the variables that the
research can&amp;#39;t. We teach multiple classes a day every day of the
week. We try things, assess the results, rinse and repeat. I get that
all teachers don&amp;#39;t do this but the good ones do.
&lt;/p&gt;
&lt;p&gt;
The final thought I had was with the reality that while coming up with
interesting active learning experiences is great it also takes a lot
of time and there&amp;#39;s not much time when you&amp;#39;re teaching five classes a
day five days a week to 150 kids along with grading, advising, and
everything else. This is why I tell young teachers that you always
want to evolve and improve but not every lesson is going to be a home
run and that&amp;#39;s okay.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s particularly important for teachers to remember this now as
across the nation they&amp;#39;re re-inventing their syllabi on the fly to
move from in person to online and they&amp;#39;re doing it without time,
training, and in some cases tools. 
&lt;/p&gt;
&lt;p&gt;
Do the best you can and continue to develop your toolset. Not every
new online experience will be great but if they&amp;#39;re sincere, your kids
will know. In the end we&amp;#39;ll all be okay and back to normal but with a
whole bunch of new tricks up our sleeves.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Remote Classes</title>
      <link>https://cestlaz.github.io/post/remote-classes/</link>
      <pubDate>Tue, 03 Mar 2020 09:34:40 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/remote-classes/</guid>
      <description>&lt;p&gt;
Over at &lt;a href=&#34;https://avc.com&#34;&gt;AVC&lt;/a&gt; Fred Wilson just posted about &lt;a href=&#34;https://avc.com/2020/03/outschool-can-help-your-school-prepare-for-unexpected-closures/&#34;&gt;Outschool&amp;#39;s efforts&lt;/a&gt;
to support students and teachers in the event of school closures due
to the Coronavirus. All the details and relevant links are in the
post. 
&lt;/p&gt;
&lt;p&gt;
I looked a bit into Outschool when Fred first &lt;a href=&#34;https://avc.com/2019/05/outschooling/&#34;&gt;wrote about them&lt;/a&gt; but
never had a chance to do a deep dive.
&lt;/p&gt;
&lt;p&gt;
Now, internet based teaching is not going to be as effective as in
person teaching but I was thinking about how far things have come.
&lt;/p&gt;
&lt;p&gt;
After superstorm Sandy, Stuy was closed for about a week. Instead of
losing all the time my classes and I decided to try to do us some
internet schooling. We used Google tools and things went pretty well. 
&lt;/p&gt;
&lt;p&gt;
I wrote about what we did and some concluding thoughts &lt;a href=&#34;https://cestlaz.github.io/posts/2012-10-31-sandy-bridge.html/&#34;&gt;here&lt;/a&gt; and
&lt;a href=&#34;https://cestlaz.github.io/posts/2012-11-02-back-to-work/&#34;&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Back then - 2012 - the technology was close but not quite there. Now,
with tools like &lt;a href=&#34;https://zoom.us&#34;&gt;Zoom&lt;/a&gt; and I&amp;#39;m guessing &lt;a href=&#34;https://outschool.com/&#34;&gt;Outschool&lt;/a&gt;, which is probably
more fine tuned for education rather than meetings you have some nice
all in one or at least most in one solutions. I had to use a YouTube
broadcast and separate documents and chats. Today&amp;#39;s tools tie all of
those together along with screen sharing. Maybe Outschool even has a
shared virtual blackboard - that would be pretty cool. Add in
something like Trello and GitHub and we&amp;#39;re really cooking.
&lt;/p&gt;
&lt;p&gt;
It really reminds me that &lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_Wave&#34;&gt;Google Wave&lt;/a&gt; was really a product ahead of
it&amp;#39;s time. 
&lt;/p&gt;
&lt;p&gt;
As I said above, internet teaching will not be as effective as
live. It&amp;#39;s more of a show and do rather than an interactive class and
I go through some of the other issues in the my two posts linked above
but we&amp;#39;re getting better. Certainly way better than closing a school
and doing nothing. 
&lt;/p&gt;
&lt;p&gt;
Hats off to Outschool for providing their services to the community. I
hope few have to use them but am thankful they&amp;#39;re there.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teacher Centric Teaching</title>
      <link>https://cestlaz.github.io/post/teacher-centric-teaching/</link>
      <pubDate>Tue, 14 Jan 2020 08:27:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teacher-centric-teaching/</guid>
      <description>&lt;p&gt;
Every few years the experts give us some new magic bullet, some new
 &lt;del&gt;teaching fad&lt;/del&gt; research based pedagogical technique. Teachers are
 trained in it, forced to use it - frequently as a one size fits
 all. If we do, we&amp;#39;re good teachers, if we don&amp;#39;t we get the dreaded
 ineffective on our annual ratings.
&lt;/p&gt;
&lt;p&gt;
I was reminded of this when reading &lt;a href=&#34;https://twitter.com/guzdial&#34;&gt;Mark Guzdial&lt;/a&gt;&amp;#39;s recent blog post on
&lt;a href=&#34;https://computinged.wordpress.com/2020/01/13/computing-education-lessons-learned-from-the-2010s-what-i-got-wrong/&#34;&gt;things he got wrong&lt;/a&gt; in Computing Education. It&amp;#39;s a really great
post. Mark mentioned &lt;a href=&#34;https://en.wikipedia.org/wiki/Constructivism_(philosophy_of_education)&#34;&gt;constructivism&lt;/a&gt; and it made me think of a few
years ago when constructivism was all the rage. If you didn&amp;#39;t set your
class up for &lt;a href=&#34;https://en.wikipedia.org/wiki/Discovery_learning&#34;&gt;discovery learning&lt;/a&gt; all the time you were clearly a bad
teacher. I&amp;#39;d sit on on CS PD sessions, listen to principals and
supervisors talk about what they wanted to see in classes and on and
on.
&lt;/p&gt;
&lt;p&gt;
If you weren&amp;#39;t a constructivist educator you weren&amp;#39;t a good educator.
&lt;/p&gt;
&lt;p&gt;
Of course a few years earlier it was something else.
&lt;/p&gt;
&lt;p&gt;
Back when I started it was cooperative learning and
cooperative learning isn&amp;#39;t just group work - you had to follow the
formula. Each student in a group had a role, there were specific
stages of work and everything had to be just so.
&lt;/p&gt;
&lt;p&gt;
There were other fads along the way. 
&lt;/p&gt;
&lt;p&gt;
If you were lucky and had a good supervisor you didn&amp;#39;t have to worry
about the fads, the research, the nonsense. You could focus on your
development as a teacher. They might work with you on questioning, for
instance - regardless of the flavor of the month, a teacher will ask
questions and facilitate discussion and they will surely insulate you
from whatever nonsense the bean counters want to see as long as you&amp;#39;re
doing right by your students. On the other hand, a bad supervisor
would mean stressful set up observations.
&lt;/p&gt;
&lt;p&gt;
Even without Mark&amp;#39;s post, I&amp;#39;ve been thinking about this a lot since
we&amp;#39;re about to launch our CS Teacher Certification programs at
Hunter so I&amp;#39;ve been thinking about these fads from a teacher
preparation point of view. 
&lt;/p&gt;
&lt;p&gt;
Many of these fads have some value - they&amp;#39;re tools in the toolbelt to
be used as needed. The problem is that supervisors, and in my
experience, professional development and teacher preparation programs
make teaching 100% about the student. While the student is in fact the
customer and who&amp;#39;s development is the goal of our work, you can&amp;#39;t
ignore other factors. Environment and resources are two of these other
factors and a big one is the teachers individual strengths,
weaknesses, and tendencies.
&lt;/p&gt;
&lt;p&gt;
Cooperative Learning never really worked for me - at least not whole
hog. As a &amp;#34;Cooperative Learning teacher&amp;#34; I&amp;#39;d be meh at best. On the
other hand, I&amp;#39;ve taken plays from the cooperative learning playbook
and applied them as I&amp;#39;ve seen useful. Sometimes it didn&amp;#39;t work,
sometimes to great effect.
&lt;/p&gt;
&lt;p&gt;
As a teacher, I always took the advice of one of my early fencing
mentors. I was receiving conflicting advice from multiple well
respected coaches and more experienced fencers. My mentor said &amp;#34;listen
to what they all have to say, think about it, figure out what best
will work for you and do that.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
As to running my teacher prep programs, I&amp;#39;m going to do my best to
make sure that we do recognize that teachers bring different things to
the table and it will my job to help them maximize their
effectiveness. This means that we can&amp;#39;t blindly follow the favored
teaching techniques du jour but rather we have to look at all sorts of
methods and combine them with our teachers strengths, abilities, and
tendencies, and their specific classroom situations.
&lt;/p&gt;
&lt;p&gt;
It should be fun.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with texts part 1 - cleaning the data</title>
      <link>https://cestlaz.github.io/post/cleaning-textx/</link>
      <pubDate>Fri, 15 Nov 2019 16:18:51 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cleaning-textx/</guid>
      <description>&lt;p&gt;
I run periodic professional development sessions here in New York with
my partner in crime JonAlf Dyrland-Weaver. I call them PD for &amp;#34;APCS-A,
similar or beyond&amp;#34; and they&amp;#39;re designed to fill a professional
development gap. We try to run them once a month but it&amp;#39;s a little
less frequent than that.
&lt;/p&gt;
&lt;p&gt;
The NYCDOE has taken on the monster task of CS for all and since
they&amp;#39;re trying to get to everyone they have to run a bazillion
sessions but all at an introductory level. Beyond that, most PD is
tied to a curriculum, program, or product. We decided to run sessions
for teachers who are ready for more both pedagogically and content
wise while not affiliating with any specific provider. We&amp;#39;re just
about the CS and the teaching of CS.
&lt;/p&gt;
&lt;p&gt;
Yesterday we had our first session of the year and the content topic
was text processing. Along the way, we used it as an opportunity to
highlight subgoal labeling as a teaching technique.
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a lot you can do in both CS0 and CS1 with text and document
processing. By the end of yesterday&amp;#39;s session we had discussed a bunch
of possibilities based on the text processing technique known as a
&amp;#34;bag of words&amp;#34; which basically takes a text and just considers all the
words it contains. What are the words and how many times does each
word occurs. No consideration of order, grammar, or anything else. Just
words and counts. We also talked a bit about more advanced possibilities
like playing with an inverted index. I&amp;#39;ll talk about both of those in
a future post. 
&lt;/p&gt;
&lt;p&gt;
For today, let&amp;#39;s talk about what we have to do before we even begin -
preprocessing the data.
&lt;/p&gt;
&lt;p&gt;
We grabbed a bunch of texts from &lt;a href=&#34;https://www.gutenberg.org/&#34;&gt;Project Gutenberg&lt;/a&gt;. Specifically, &amp;#34;Moby
Dick&amp;#34;, a translation of my favorite play &amp;#34;Cyrano de Bergerac&amp;#34; and the
Book of Psalms from the Bible. I also made a copy of the first chapter
of &amp;#34;Moby Dick&amp;#34; so we had a shorter corpus to play with and typed up
the first scene of &amp;#34;Macbeth&amp;#34; - all thirteen lines of it.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s easy enough to read in the data in a language like Python:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cyrano.txt&amp;#34;&lt;/span&gt;)
raw_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
but if you&amp;#39;re using a bag of words you&amp;#39;ve got to do some cleaning.
&lt;/p&gt;
&lt;p&gt;
To start, all Project Gutenberg texts contain a whole bunch of front
and back matter with lots of words. If you don&amp;#39;t get rid of them
you&amp;#39;ll get extra words in your bag. I forgot to do this and was a bit
surprised to see phrases like &amp;#34;Pay a trademark license&amp;#34; in the Book of
Psalms.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s easy enough to just cut the tops and bottoms of each file off
with an editor and that&amp;#39;s when we can read our data into our program
and the fun begins.
&lt;/p&gt;
&lt;p&gt;
First we had to turn everything into lower case;
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lower_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
and then the big part - we want to get rid of all the punctuation. We
first tried something like this:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;stuff_to_remove &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.:;&amp;#39;0123456789&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;cleaned_letters &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lower_data &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stuff_to_remove]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;cleaned_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cleaned_letters)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
The second line is a list comprehension. It iterates through each
letter in lower_data and copies it into the resultant list only if the
letter is not in our stuff_to_remove list.
&lt;/p&gt;
&lt;p&gt;
For example, if we had &lt;code&gt;lower_data = &amp;#34;abc123def g&amp;#34;&lt;/code&gt; we&amp;#39;d get a result
of &lt;code&gt;[&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;,&amp;#34;c&amp;#34;,&amp;#34;d&amp;#34;,&amp;#34;e&amp;#34;,&amp;#34;f&amp;#34;,&amp;#34; &amp;#34;,&amp;#34;g&amp;#34;]&lt;/code&gt;. We then use the join in line 3
to turn it back into a string &lt;code&gt;&amp;#34;abcdef g&amp;#34;&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
This worked pretty well but we found that there were problems. There
were characters that we didn&amp;#39;t account for like long dashes that
connected words and we didn&amp;#39;t have an easy way to put them in our
removal string.
&lt;/p&gt;
&lt;p&gt;
This led to take 2. Instead of deciding what to throw away, let&amp;#39;s
decide what to keep;
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;stuff_to_keep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abcdefghijklmnopqrstuvwxyz &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;cleaned_letters &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lower_data &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stuff_to_remove]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;cleaned_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cleaned_letters)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
This worked better (and yes, I know I could have used isalpha() but I
didn&amp;#39;t remember it at the time) but still had problems. We had words
that were formerly separated by punctuation with no spaces that were
now combined into new invalid words. We also had things like chapter
headings in our text and other stray words that we probably wanted to
get rid of.
&lt;/p&gt;
&lt;p&gt;
All of this led to rich conversation among the teachers present and
can do the same in class. What do you clean? What do you keep? Is it
worth the effort to write all sorts of cleaning code to get rid of a
couple of stray bits of bad data or can we get the results we want by
leaving it in? There&amp;#39;s no universally right answer and that&amp;#39;s part of
the beauty of doing things like this with a class - it&amp;#39;s something
that can make them think.
&lt;/p&gt;
&lt;p&gt;
Once we made our final cleaning decisions it&amp;#39;s a simple matter to
convert the long string of text into a list of words:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;wordlist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cleaned_string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Now we&amp;#39;re ready to start building our bag of words but that&amp;#39;s a post
for another day.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My test grading policy</title>
      <link>https://cestlaz.github.io/post/grading-policy/</link>
      <pubDate>Wed, 09 Oct 2019 17:13:24 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/grading-policy/</guid>
      <description>&lt;p&gt;
I was working on writing a midterm the other day so figured I&amp;#39;d talk a
bit about my test grading policy.
&lt;/p&gt;
&lt;p&gt;
Before getting to the specifics, let me set the stage. I spent most of
my career at Stuyvesant - a public magnet school in
NYC. There are many great students who are interested in learning but
there&amp;#39;s also a focus on grades. and this leads to a non-insignificant portion of
the student body that is grade obsessed and will do everything and
anything for every point possible. 
&lt;/p&gt;
&lt;p&gt;
We called it grade grubbing. 
&lt;/p&gt;
&lt;p&gt;
Grade grubbing goes beyond asking for points you think you deserve and
it comes in many forms. It&amp;#39;s when you BS your way through an essay or
paper and put in as many key phrases as possible and hope the teacher
only sees those when scanning through hundreds of papers. It&amp;#39;s taking
that same paper and only showing the key correct phrases during an
appeal and ignoring the contradictory key phrases a few lines
below. It&amp;#39;s when you write an answer in a somewhat ambiguous way that
if marked wrong allows for an appeal. It&amp;#39;s appealing a low grade
because &amp;#34;I always get over 95&amp;#34; and it even involves cheating
sometimes and changing answers after the fact.
&lt;/p&gt;
&lt;p&gt;
Now, this isn&amp;#39;t the majority of the class. It&amp;#39;s only a small percent
but it&amp;#39;s pretty annoying and it had a bit of influence on my testing
policy.
&lt;/p&gt;
&lt;p&gt;
So, what&amp;#39;s my policy? It&amp;#39;s pretty simple. 
&lt;/p&gt;
&lt;p&gt;
Rule 1 - once I return the test you can&amp;#39;t ask me anything about your
exam until either we go over the exam in class or if we don&amp;#39;t until
after I&amp;#39;ve shared the answer key with the class. If you do ask me
about the exam before we&amp;#39;ve gone over it you forfiet your right to ask
for any points back on any mismarked questions. 
&lt;/p&gt;
&lt;p&gt;
Rule 2 - If you appeal a question for points - that is come up and say
&amp;#34;I got this question right&amp;#34; and it turns out that you are correct, you
get your points. If, on the other hand, the quesiton is incorrect, I
reserve the right to take off the points deducted a second time. That
is, if you originally lost 5 points you could now lose up to 10.
&lt;/p&gt;
&lt;p&gt;
This might sound harsh and somewhat jerky but it really isn&amp;#39;t. Due to
the nature of CS exams students can always be 100% certain that their
answer is correct because they can always try it out on a
computer. That&amp;#39;s the point. If something is marked wrong, I want the
student to take the time to see what&amp;#39;s going on before appealing the
grade. Questions that can&amp;#39;t be absolutely tested are of course excempt
from this policy.
&lt;/p&gt;
&lt;p&gt;
If a student comes up to me and says &amp;#34;hey, i know this is wrong - I
tested it and I&amp;#39;m not asking for points, I just don&amp;#39;t understand
what&amp;#39;s going on&amp;#34; I would never deduct more points and in fact have
sometimes lowered deductions.
&lt;/p&gt;
&lt;p&gt;
As it turns out, I&amp;#39;ve never actually ended up taking off extra points.
&lt;/p&gt;
&lt;p&gt;
The whole idea is to stop the reflexive grade grubbing and get
students to think about the problems and solutions. It also helps in
keeping teacher harrassment to a minimum :-). 
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching techniques - industry to classroom and classroom to industry</title>
      <link>https://cestlaz.github.io/post/industry-techniques-in-class/</link>
      <pubDate>Fri, 27 Sep 2019 12:34:04 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/industry-techniques-in-class/</guid>
      <description>&lt;p&gt;
There are things we do in school and there are things we do in
industry and they&amp;#39;re not always the same. In school we might use a
learning language or an IDE which gives additional support and at
times even take away language features while at work you might you
might make heavy use of continuous integration tools. 
&lt;/p&gt;
&lt;p&gt;
On the other hand, sometimes we use the same things. Java is used in
schools and in industry, StackOverflow consulted in both and many
schools use professional IDEs like Eclipse.
&lt;/p&gt;
&lt;p&gt;
While the things I mentioned above, whether the same or different are
on the tooling side, there are also things on the technique side that
are used both in school and in industry.
&lt;/p&gt;
&lt;p&gt;
The most well publicized concept is probably &lt;a href=&#34;https://en.wikipedia.org/wiki/Pair_programming&#34;&gt;Pair Programming&lt;/a&gt; - the
idea of having two programmers develop using a shared
computer. There&amp;#39;s more to it than that and tons of variations but
that&amp;#39;s the crux of the idea. Proponents claim it increases programmer
efficiency and lowers error rates but others would rather not follow
the practice. Some feel that it&amp;#39;s great in certain environments like
when onboarding a new team member.
&lt;/p&gt;
&lt;p&gt;
We hear CS Teachers talk about pairing in their classes all the time -
&amp;#34;It&amp;#39;s an industry technique&amp;#34; but to me the interesting thing is that I
think many teachers, particularly more senior ones came up with pair
programming independent of it as an industry technique. It came out of
not having enough computers. This invariably leads to kids pairing
up. Now, you&amp;#39;ll say &amp;#34;but pair programming isn&amp;#39;t just two kids sharing
a computer.&amp;#34; I agree but when good teachers do group work it isn&amp;#39;t
just kids left to their own devices working in a group. Over time,
teachers who &amp;#34;discover&amp;#34; pair programming come up with ways to make it
effective in their classrooms.
&lt;/p&gt;
&lt;p&gt;
The other interesting thing is that pair programming serves different
purposes at work vs in schoo. At work it&amp;#39;s supposed to increase
programming efficiency and help them develop better code more
quickly. In the classroom, besides addressing the lack of computers,
it&amp;#39;s used as a tool to provide feedback to students, have them support
each other, and create a cooperative supportive environment.
&lt;/p&gt;
&lt;p&gt;
Another technique CS teachers use is subgoal labeling. The gist here
is that you write down or label smaller goals within your
program. It&amp;#39;s an idea I used for years but only relatively recently
learned its name.
&lt;/p&gt;
&lt;p&gt;
The interesting thing here is that I used this idea as a professional
programming well before I ever taught and I don&amp;#39;t recall it ever being
used in any of my classes. 
&lt;/p&gt;
&lt;p&gt;
The idea just made sense. I&amp;#39;d write a function and pepper it with
comments indicating the parts s or subgoals I&amp;#39;d need to write code for
to complete the function. I don&amp;#39;t know if subgoal labelling is or ever
was a prevelent technique in professional programming but the related
idea of writing function stubs is. The idea here is that as you
develop your program write out an empty placeholder function, a stub,
when you realize you need it and fill it in later. This is something
of a subgoal but at the function level.
&lt;/p&gt;
&lt;p&gt;
So, here we have two practices. One that is certainly used in both
the classroom and in industry and one that likely is. The practices
seem to be examples of convergent evolution. Developed independently
but with similar albeit somewhat different benefits.
&lt;/p&gt;
&lt;p&gt;
There have to me more practices like this. If you know any, please
share.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pig Latin - a beginner lesson with some depth</title>
      <link>https://cestlaz.github.io/post/piglatin/</link>
      <pubDate>Wed, 25 Sep 2019 17:11:29 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/piglatin/</guid>
      <description>&lt;p&gt;
I recently did a unit where I had my students convert words into &lt;a href=&#34;https://en.wikipedia.org/wiki/Pig_Latin&#34;&gt;Pig
Latin&lt;/a&gt;. I like the problem because to start it only requires strings,
functions and if statements but there is some depth to the unit.
&lt;/p&gt;
&lt;p&gt;
We start with simplified rules:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
If the word starts with a vowel, add &amp;#34;ay&amp;#34; to the end of the word
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
If it starts with a consonant move the first latter to the end and
add &amp;#34;ay&amp;#34;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
don&amp;#39;t worry about anything else
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Students usually start with something like this:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
as students realize it&amp;#39;s much easier to check for vowels rather than
consonants. 
&lt;/p&gt;
&lt;p&gt;
Some students discover that you can do any of the following instead of
the big compound &lt;strong&gt;or&lt;/strong&gt; :
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This allows us to talk a little about lists (and tuples if you like)
as well as now strings are similar to them in certain ways.
&lt;/p&gt;
&lt;p&gt;
By itself, this is a nice little beginner project but it gets better. 
&lt;/p&gt;
&lt;p&gt;
Since we talked a bit about lists and strings in the refinement, we
then talk about using python&amp;#39;s &lt;code&gt;split()&lt;/code&gt; method that parses a string
on whitespace. We also talk about the &lt;code&gt;for&lt;/code&gt; loop. Ultimately this
leads us to writing a function to convert a sentence into Pig Latin:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
But this doesn&amp;#39;t work with real sentences. Let&amp;#39;s focus on two
problems. The first is that it won&amp;#39;t handle the period at the end of
the sentence properly. It would take that last word, let&amp;#39;s say &lt;strong&gt;dog.&lt;/strong&gt; 
and convert it to &lt;strong&gt;og,day&lt;/strong&gt; rather than &lt;strong&gt;ogday.&lt;/strong&gt;. It also doesn&amp;#39;t
handle capital letters. There are other issues but they have similar
solutions to the ones we&amp;#39;ll use for these two.
&lt;/p&gt;
&lt;p&gt;
This is where things get fun. 
&lt;/p&gt;
&lt;p&gt;
To handle the period, students frequently jump to modifying the &lt;strong&gt;if&lt;/strong&gt; 
conditions in &lt;code&gt;piglatinify&lt;/code&gt; :
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
or something similar.
&lt;/p&gt;
&lt;p&gt;
This is a straighforward working solution but it&amp;#39;s also a great place to introduce the idea of changing the data
instead of using complex conditionals to handle special cases (earlier
posts &lt;a href=&#34;https://cestlaz.github.io/posts/2014-02-26-change-the-data/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://cestlaz.github.io/posts/advent-of-code-2016-2/&#34;&gt;here&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
If we take out the period we can do our regular piglatinify and then
add it back in. This leads us to a solution like this:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We can do something similar to deal with words that start with upper
case letters:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You can approach other special cases similarly.
&lt;/p&gt;
&lt;p&gt;
So, there you have it. A fun little problem that you can do with your students
early on in a CS0 with surprising depth.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Is Good Teaching</title>
      <link>https://cestlaz.github.io/post/what-is-good-teaching/</link>
      <pubDate>Tue, 17 Sep 2019 17:13:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/what-is-good-teaching/</guid>
      <description>&lt;p&gt;
I had a conversation with my principal during my last year at
Stuy. She said &amp;#34;whenever the superintendent or high level education
people come and ask to see our best teachers I can never bring them to
Jim&amp;#39;s class.&amp;#34; Everyone knows that Jim is the best. I describe him as
&amp;#34;the teacher I aspire to be.&amp;#34;  What&amp;#39;s the problem? The problem is that
Jim didn&amp;#39;t teach the way the powers that be wanted him to teach. He
didn&amp;#39;t do discovery learning, kids didn&amp;#39;t work in groups, there&amp;#39;s
typically nothing that you could check off on the &amp;#34;best way to teach&amp;#34;
list. Jim&amp;#39;s an old school teacher. Teacher dominant. He leads the
discussion, asks questions, circulates while the kids work on
problems etc. Why does it work? A combination of things. He know his
math, charisma, force of personality, empathy, and a lot of other
factors. One could dismiss it as saying &amp;#34;it&amp;#39;s Stuy, it&amp;#39;s easy&amp;#34; but he
was the best at a high needs school before he was the best at Stuy.
&lt;/p&gt;
&lt;p&gt;
I was thinking about this for a few reasons. One is I watched &lt;a href=&#34;https://www.youtube.com/watch?v=g1ib43q3uXQ&amp;amp;list=WL&amp;amp;index=52&amp;amp;t=0s&#34;&gt;this&lt;/a&gt;
video by &lt;a href=&#34;https://twitter.com/Felienne&#34;&gt;Felienne Hermans&lt;/a&gt;. It&amp;#39;s a good video, many good points. I
particularly like when she talked about talking to a room of teachers
about a new &amp;#34;discovery&amp;#34; about learning only to find that teachers have
known it for decades. Basically, Felienne pushes back on the discovery
learning and let them play that&amp;#39;s dominated the CS Education
space. She talks about her success with direct instruction. Another is
that we&amp;#39;re starting to see more acceptance and voices for
direct instruction in the CS Ed space as a whole. 
&lt;/p&gt;
&lt;p&gt;
Personally, I think this is a good thing, after all, it&amp;#39;s more my
style. On the other hand, I don&amp;#39;t want the pendulum to swing too
far. I was talking to a history teacher at Stuy when they brought in
the Danielson &lt;del&gt;nonsense&lt;/del&gt; Framework. She&amp;#39;s a good teacher but she was
sheepish about Danielson. She said that Danielson worked for her - it
aligned with the way she taught and made her seem like the absolute
best. She was and is an excellent teacher but we all have holes in our
game. She didn&amp;#39;t want to be held  up as an exemplar of great teaching
where she knew that chances are there will be a successor to Danielson
and chances are something else will be in vogue and she won&amp;#39;t be so
officially terrific anymore. 
&lt;/p&gt;
&lt;p&gt;
Right now, direct instruction is coming back. Who knows if it will
become the darling of the policy makers but regardless, a teaching
style or technique&amp;#39;s value can&amp;#39;t be determined without considering
other factors. The teacher&amp;#39;s personal style, the students, the
resources, class time, and much more. 
&lt;/p&gt;
&lt;p&gt;
So, what is a teacher to do? Add all the tools to your toolbox. I&amp;#39;m
not big on cooperative learning but I&amp;#39;ve peppered it in now and
then. Sometimes, it&amp;#39;s best to have the students discover things,
something you&amp;#39;ve got to tell them. Sometimes they should work on
things solo, sometimes in teams. I&amp;#39;ve taught classes that were all
projects and classes that had limited projects. Acquire all the tools
and use them as YOU think best. It&amp;#39;s the teacher with the skin in the
game. Not the policy makers, thought leaders, researchers, and
influences. More importantly it&amp;#39;s the teacher that knows their
students best - where they are, what they need and how to do the best
they can given the limited resources they have. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m obviously not excusing teachers who do one side lectures or who
just phone it in but the majority of teachers work hard to do it right
and should be given the freedom to do just that.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Different languages, different techniques, different solutions</title>
      <link>https://cestlaz.github.io/post/different-languages/</link>
      <pubDate>Mon, 02 Sep 2019 17:33:51 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/different-languages/</guid>
      <description>&lt;p&gt;
I spent this weekend diving back into Clojure or more specifically,
Clojurescript. For those who don&amp;#39;t know, Clojure is a Lisp that runs
on the JVM. The solution it particularly seeks to &amp;#34;solve&amp;#34; is
immutability. Clojurescript is Clojure that compiles to Javascript for
web applications. Tooling aside, it&amp;#39;s all pretty neat.
&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t do anything earth shaking, just a quick implementation of
Conway&amp;#39;s game of life and Snake. While the code isn&amp;#39;t particularly
good, you can check them out here (&lt;a href=&#34;https://github.com/zamansky/clojure-snake&#34;&gt;Snake&lt;/a&gt;, &lt;a href=&#34;http://github.com/zamansky/clojure-life&#34;&gt;Life&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
The Life implementation got me thinking about the value of studying
different languages or more specifically, different paradigms. A
student who implements the game of life in Java will likely implement
something very similar in C++ as both languages are Object Oriented /
imperative. An implementation in Clojure or Haskell will likely look
very different.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s look a little deeper.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%2527s_Game_of_Life&#34;&gt;Conway&amp;#39;s Game of LIfe&lt;/a&gt; is a Cellular Automaton and when teaching a CS
class in Java or C++ it&amp;#39;s a really nice application of 2D arrays. On
each turn, for each cell in the world, you calculate its living
neighbors. If the cell is alive and it has 2 or 3 living neighbors, it
stays alive to the next turn. If the cell isn&amp;#39;t alive but has 3 living
neighbors it will become alive. Otherwise the cell dies (or remains
dead).
&lt;/p&gt;
&lt;p&gt;
In a Java type language, given a 2D array &lt;code&gt;this_turn&lt;/code&gt; with the current
world and you might get something like:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It&amp;#39;s a really nice application of 2D arrays and I&amp;#39;ve done it with my
classes frequently over the years.
&lt;/p&gt;
&lt;p&gt;
Another language I&amp;#39;ve done &lt;strong&gt;life&lt;/strong&gt; in is NetLogo. In NetLogo, you have
a world represented by an x,y grid with each cell in the grid known as
a patch. You write a program and all the patches run it
independently. A life solution might look like this:
&lt;/p&gt;
&lt;div class=&#34;src src-text&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-netlogo&#34; data-lang=&#34;netlogo&#34;&gt;ask patches [ 
  set n count nieghbors with [color =  red] ;; red cells will be alive
  ifelse color = red 
    [ ifelse n=2 or n = 3
        [set nextcolor red]
        [set nextcolor black]
    ] 
    [
      ifelse n=3
        [ set nextcolor red ]
        [ set nextcolor black ]  
    ]
ask patches [set color nextcolor]&lt;/code&gt;&lt;/pre&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
My NetLogo is a little rusty so my syntax might be off but the idea is
to:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
have each patch count it&amp;#39;s living neighbors and figure out it&amp;#39;s
next state - alive (red) or dead (black)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
have each patch set its color to the new state
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
This is a very different solution. In NetLogo you never think about
looping over the cells. It&amp;#39;s much higher level. You think about each
location as it&amp;#39;s own entity whereas in the Java solution you&amp;#39;re
getting much more into the nitty gritty. 
&lt;/p&gt;
&lt;p&gt;
NetLogo and Java are very different languages and using them
encourages you to solve problems in different ways. you&amp;#39;d likely
never create a 2D array in NetLogo - you&amp;#39;d exploit the word as your
array. Likewise you&amp;#39;d exploit the patches to distribute the work. In
Java you&amp;#39;d probably wouldn&amp;#39;t create a class to represent each patch in
the array and then run each in a thread. That would be overkill for
the problem at hand.
&lt;/p&gt;
&lt;p&gt;
Well, what about Clojure?
&lt;/p&gt;
&lt;p&gt;
Clojure isn&amp;#39;t set up for 2D arrays, at least not as cleanly as a
language like C++ or Java. One could use Java Interop - that is, the
ability of Clojure to directly use Java but that would defeat the
purpose of using Clojure. Clojure is all about lists, vectors, and
maps. Instead of a 2D array of the world, I made a list (vector) where
each element contained the location of a living cell. This is
certainly more space efficient. It also let me operate on the world as
a sequence of transformations to the data:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Calculate all the possible next cells (the cells in the list plus
all their neighbors
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
For each possible next cell, count it&amp;#39;s living neighbors and
determine if the cell is alive in the next iteration
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Replace the list of cells with these new cells. 
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;generate [state]
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Generate and return the next state&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[potential-cells (for [[x y] state [dx dy] cell-bloc-3x3]
                          [(+ x dx) (+ y dy)])
        next-state (for [cell potential-cells]
                     (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;alive?&lt;/span&gt; cell state) cell))]
    (into &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{} (remove nil?(into &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{} next-state)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You can see the complete code &lt;a href=&#34;https://github.com/zamansky/clojure-life/blob/master/src/life.cljs&#34;&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
This again is a very different way of thinking about the problem. In
Java we looped over the world and made adjustments. Here we
transformed the current set of cells into the next generations set of
cells in a pipeline like fashion.
&lt;/p&gt;
&lt;p&gt;
Another feature of Clojure that results from its focus on immutability
is that in programs like these the computational part of the program
and the presentation part (the graphics) are totally separate. We
first transform the data and then the UI displays the current
data. Clojure does this very nicely and maybe I&amp;#39;ll write a post on
it but for now, I just want to point out that this is very different
from NetLogo. In fact, I completely finished the program for life
before I even thought about the interface. In NetLogo the interface is
an integral part of the language.
&lt;/p&gt;
&lt;p&gt;
The point of all of this is that languages designed around different
paradigms are worth exploring even if you never do real work in
them. Even if you don&amp;#39;t like or use Clojure you can take lessons from
it&amp;#39;s functional side and how it handles immutability and you can add
those techniques to your toolkit when using C++ or Java. It doesn&amp;#39;t
mean you should write Java to look like Clojure but having a complete
toolkit of paradigms to draw from and apply when appropriate can only
be good for us and for our students.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do It First</title>
      <link>https://cestlaz.github.io/post/do-it-first/</link>
      <pubDate>Mon, 10 Jun 2019 08:00:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/do-it-first/</guid>
      <description>&lt;p&gt;
Reading Garth Flint&amp;#39;s end of year &lt;a href=&#34;https://gflint.wordpress.com/2019/06/07/last-day-of-school-and-done-with-java/&#34;&gt;post&lt;/a&gt; and Alfred Thompson&amp;#39;s &lt;a href=&#34;http://blog.acthompson.net/2019/06/how-well-can-you-code-projects-you.html&#34;&gt;follow up&lt;/a&gt;
had me thinking about a couple of things. 
&lt;/p&gt;
&lt;p&gt;
One was spurred when Garth
wrote &amp;#34;They also have to figure out the math before they code.&amp;#34; This
made me think about all the details we sometimes &lt;a href=&#34;https://cestlaz.github.io/posts/2014-11-21-little-details.html/&#34;&gt;take for for
granted&lt;/a&gt;. Things that are hard for our students that we just know. It&amp;#39;s
frequently math that we might find trivial but it could also be much
simpler things.
&lt;/p&gt;
&lt;p&gt;
When I write Java code I have a snippet that provides most of my main
boilerplate. For a beginner, just typing in all the details and
getting them right might be a chore. Heck, even typing is something we
take for granted. Beginners who can type have a distinct
advantage. They can focus on the code rather than on the keys. That
boilerplate code might take ten minutes of typing alone and that&amp;#39;s not
adding in any typos or understanding errors. 
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t have anything to add here that I didn&amp;#39;t address in earlier
posts and Garth&amp;#39;s post has some great points so if you haven&amp;#39;t read it
yet, I recommend you take the few minutes to do so.
&lt;/p&gt;
&lt;p&gt;
The other thoughts were spurred from this part of Garth&amp;#39;s post:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
did only two of the six assignments myself.  With the others I saw
 the solution so did not code them up.  I should have coded them up
 just so I could answer questions better for the students.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Alfred expounded on this in his post and there was a good twitter
conversation around it as well.
&lt;/p&gt;
&lt;p&gt;
As a general rule as teachers we should have solved the problems
before we assign them and not just theoretically be able to solve
them. Actually writing up the solutions can also clue us in on some of
the difficulties that our students might face. Particularly if we
really try to look at the assignment using our student&amp;#39;s eyes. 
&lt;/p&gt;
&lt;p&gt;
Neal Plotnick tweeted: 
&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The lack of
experience with coding for Ts combined with canned, cloud based
curricula has allowed classrooms to be created with Ts pushing
assignments out and relying on automated grades. I don’t have a CS
degree but I made sure to code my python assignments first.&lt;/p&gt;&amp;mdash;
neil plotnick (@NeilPlotnick) &lt;a
href=&#34;https://twitter.com/NeilPlotnick/status/1137340790554996736?ref_src=twsrc%5Etfw&#34;&gt;June
8, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async
src=&#34;https://platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
And this is a real concern for me. I get it - we&amp;#39;re building a plane
while flying it and that places teachers in situations where they have
to learn on the fly and at times they&amp;#39;ll  have to assign problems
before they have  solutions. Long term, however, this is a big problem
and I suspect it&amp;#39;s not going to go away. 
&lt;/p&gt;
&lt;p&gt;
On the other side of the coin though are times when it&amp;#39;s best not to
have a solution before the class. Sure, if you&amp;#39;re teaching a merge
sort or doing a unit on inheritance you probably should have your
ownb written solutions but there are a whole bunch of topics which
lend themselves to doing things on the fly:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
debugging
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
software engineering practices
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
how to approach &amp;#34;random&amp;#34; problems
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
practical &amp;#34;programming&amp;#34; techniques
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
can all benefit from an on the fly lesson. 
&lt;/p&gt;
&lt;p&gt;
Coding or teaching on the fly, when used appropriately allows the
teacher to model best practices in real situations. Of course this is
difficult to truly replicate if you teach the same class again later
in the day or if you revisit the class next year but it can be a
valuable tool. When you get a bug - a real bug not a planted one in
your code, you can really model techniques to solve the problem and
you can involve the class in finding that solution.
&lt;/p&gt;
&lt;p&gt;
This can all be pretty scary. You can end up going down the wrong path
and never finish building whatever you&amp;#39;re building but overall it can
be a very valuable experience for the students. 
&lt;/p&gt;
&lt;p&gt;
The other consideration is that you can teach a great lesson this way
but it would probably get a low rating on Danielson or whateve
nonsense rubric your district uses for teacher evaluation.
&lt;/p&gt;
&lt;p&gt;
None of this is to say that you don&amp;#39;t want to prepare. Most of the
time I&amp;#39;ll have solutions worked out or if not, I&amp;#39;ll have written
similar solutions countless times before but that said, there&amp;#39;s
sometimes value in exploring in the wild or as one of my early
supervisors put it &amp;#34;calling an audible.&amp;#34;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Choosing A Textbook</title>
      <link>https://cestlaz.github.io/post/choosing-a-textbook/</link>
      <pubDate>Sun, 31 Mar 2019 10:41:16 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/choosing-a-textbook/</guid>
      <description>&lt;p&gt;
Now and again there are requests on the assorted CS Education forums
asking about which text book to use. These requests are usually for
APCS-A. There are usually a number of &amp;#34;I&amp;#39;m very happy with …&amp;#34;
replies but I thought I&amp;#39;d take a bit of a deeper dive into what
teachers might want to consider when evaluating a textbook.
&lt;/p&gt;
&lt;p&gt;
It was never an issue when I started as a math teacher. The choice was
generally already made and the school had one book for each subject
level. Sometimes there were two if the school was transitioning from
one book to another.
&lt;/p&gt;
&lt;p&gt;
The older books were in general more rigorous and at the same time
more terse. The newer ones were more accessible but never seemed to
give enough guidance for kids to approach the harder
problems on their own. 
&lt;/p&gt;
&lt;p&gt;
In general, most teachers I know used them primarily as a source for
homework problems.
&lt;/p&gt;
&lt;p&gt;
In the CS world, it seems like we have more options. 
&lt;/p&gt;
&lt;p&gt;
When I first starting teaching APCS-AB at Stuy we had to buy new books
as the enrollment had just shot up. There weren&amp;#39;t many books that
covered both the programming and the data structures but I found one
nad it was a good one:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;
    &amp;lt;img src=&amp;#34;&lt;img src=&#34;https://pictures.abebooks.com/isbn/9780314933072-uk.jpg&#34; alt=&#34;https://pictures.abebooks.com/isbn/9780314933072-uk.jpg&#34; title=&#34;https://pictures.abebooks.com/isbn/9780314933072-uk.jpg&#34; /&gt;&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;
&lt;/p&gt;
&lt;p&gt;
It was both accessible and was thorough. It wasn&amp;#39;t a great source of
exercises but it was no worse than the other options.
&lt;/p&gt;
&lt;p&gt;
When we moved to C++ it was pretty easy as the same book was still
available, albeit now in two parts:
&amp;lt;div&amp;gt;
&amp;lt;figure class=&amp;#34;z_image_right&amp;#34;&amp;gt;
    &amp;lt;img src=&amp;#34;&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/31pkP2rZj5L._BO1,204,203,200_.jpg&#34; alt=&#34;https://images-na.ssl-images-amazon.com/images/I/31pkP2rZj5L._BO1,204,203,200_.jpg&#34; title=&#34;https://images-na.ssl-images-amazon.com/images/I/31pkP2rZj5L._BO1,204,203,200_.jpg&#34; /&gt;&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;
&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure&amp;gt;
    &amp;lt;img src=&amp;#34;&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/51BS6W1XRRL._SX394_BO1,204,203,200_.jpg&#34; alt=&#34;https://images-na.ssl-images-amazon.com/images/I/51BS6W1XRRL._SX394_BO1,204,203,200_.jpg&#34; title=&#34;https://images-na.ssl-images-amazon.com/images/I/51BS6W1XRRL._SX394_BO1,204,203,200_.jpg&#34; /&gt;&amp;#34; width=&amp;#34;150px&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;
&lt;/p&gt;
&lt;p&gt;
&amp;lt;/div&amp;gt;
When we went to Java we couldn&amp;#39;t find a book that covered both the
programming and the data structures but settled on this one: 
&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;
    &amp;lt;img src=&amp;#34;&lt;img src=&#34;https://i.ebayimg.com/images/g/N4oAAOSw4bVTmzOV/s-l1600.jpg&#34; alt=&#34;https://i.ebayimg.com/images/g/N4oAAOSw4bVTmzOV/s-l1600.jpg&#34; title=&#34;https://i.ebayimg.com/images/g/N4oAAOSw4bVTmzOV/s-l1600.jpg&#34; /&gt;&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;
&lt;/p&gt;
&lt;p&gt;
Nowadays, particularly with data structures no longer being in issue
at most high schools there are many more choices and even back then
there was more to consider than I&amp;#39;m sure I realized.
&lt;/p&gt;
&lt;p&gt;
When we recommend books to our colleagues we&amp;#39;re probably not being as
helpful as we can when we say &amp;#34;we like ….&amp;#34;&amp;#34;
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s important to think about how the text book is going to be
used. 
&lt;/p&gt;
&lt;p&gt;
Some text books weave a project, toolkit, or theme throughout
the chapters. That&amp;#39;s great if the teacher&amp;#39;s going to align the course
closely with the textbook. If you don&amp;#39;t however, it can make later
chapters harder on the students. If the text book develops, let&amp;#39;s say,
a graphics library in the early chapters and the teacher doesn&amp;#39;t do
the same, when the later chapters rely on this library students will
find themselves in a bit of trouble. 
&lt;/p&gt;
&lt;p&gt;
Some textbooks develop these large projects or libraries but do so as
add ons to each chapter. For most teachers that&amp;#39;s probably a better
bet.
&lt;/p&gt;
&lt;p&gt;
Does the textbook have a rich set of problems, questions, and
examples? I haven&amp;#39;t found many that are great but then it&amp;#39;s probably
not as important these days with resources like &lt;a href=&#34;https://codingbat.com/java&#34;&gt;Coding Bat&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Does the textbook present material in a way similar to the teacher? If
it is, is that a good thing or not? On the one hand, it might make the
book easier for the student that&amp;#39;s &amp;#34;getting it&amp;#34; in class and then the
book and the class reinforce each other. On the other hand, if I&amp;#39;m not
connecting with a student, it&amp;#39;s probably better if the textbook takes
on a different voice.
&lt;/p&gt;
&lt;p&gt;
There are more questions one should ask themselves when desciding on a
new textbook but I think you get the idea.
&lt;/p&gt;
&lt;p&gt;
For my classes, I&amp;#39;ve never strictly used the textbook. It&amp;#39;s more meant
as a reference and alternate resource for the kids. For this reason, I
like a book that is more on the tutorial side. I generally don&amp;#39;t use
them for assignments but if the book has good ones, so much the
better. As we cover a unit in class, I want the book to be available
for the student who might need extra support. Nowadays, with so many
free resources out there I try to leverage them as well. For my
beginners at Hunter, I&amp;#39;ve been using &lt;a href=&#34;https://automatetheboringstuff.com/&#34;&gt;this&lt;/a&gt; and am pretty happy with it.
&lt;/p&gt;
&lt;p&gt;
So, what am I missing? What else should we be considering more so than
just &amp;#34;I like the book.&amp;#34;
&amp;#34;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>March PD for CS Teachers</title>
      <link>https://cestlaz.github.io/post/pd-apcs-a-and-beyond-3-14-2019/</link>
      <pubDate>Tue, 26 Feb 2019 15:49:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pd-apcs-a-and-beyond-3-14-2019/</guid>
      <description>&lt;p&gt;
Back in December we ran our first &lt;a href=&#34;https://cestlaz.github.io/post/pd-apcs-a-and-beyond/&#34;&gt;PD session for CS teachers&lt;/a&gt;. This was
to address the need for professional development for teachers who were
more experienced in terms of computer science - we aimed this at people who were ready to
teach APCS-A, similar, or beyond and also to start to build a
community for these teachers. 
&lt;/p&gt;
&lt;p&gt;
We had trouble setting things up for February but we&amp;#39;re good to go for
March, April and May.
&lt;/p&gt;
&lt;p&gt;
Just as with our first session, each session will consist of a content
piece, a pedagogy piece, and will overall be driven by the
participants.
&lt;/p&gt;
&lt;p&gt;
The next session is set for Thursday, March 14 from 5:00 - 8:00 and
will be hosted by Digital Ocean. The sessions will earn you 3 CTLE
hours and dinner will be provided.
&lt;/p&gt;
&lt;p&gt;
If you or a CS teacher you know is interested in this, they can sign
up here: &lt;a href=&#34;https://goo.gl/forms/DCXqPtwYS47Ooo8j1&#34;&gt;https://goo.gl/forms/DCXqPtwYS47Ooo8j1&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I use Github Classroom</title>
      <link>https://cestlaz.github.io/post/github-classroom/</link>
      <pubDate>Sun, 17 Feb 2019 16:42:48 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-classroom/</guid>
      <description>&lt;p&gt;
It&amp;#39;s been an amazingly unproductive weekend. Mostly because I&amp;#39;ve been
sick with the flu. It sucks but since the rest of the family&amp;#39;s away
anway at least I&amp;#39;m not making everyone miserable.
&lt;/p&gt;
&lt;p&gt;
I did manage to stage my next couple of classes and figured that
writing this post wouldn&amp;#39;t take too much energy since it&amp;#39;s mostly a
video.
&lt;/p&gt;
&lt;p&gt;
Earlier, I talked about using &lt;a href=&#34;https://cestlaz.github.io/post/github-classroom-travis/&#34;&gt;GitHub and TravicCI&lt;/a&gt; and this time around
I show how I use GitHub classroom to set up, disseminate, and collect
assignments.
&lt;/p&gt;
&lt;p&gt;
Here are the important links you&amp;#39;ll need to set things up yourself:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
To register an organization (so that you can use private repos for
free): &lt;a href=&#34;https://education.github.com/discount_requests/new&#34;&gt;https://education.github.com/discount_requests/new&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The main GitHub education page with lots of good stuff and links: &lt;a href=&#34;https://education.github.com/&#34;&gt;https://education.github.com/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
GitHub Classroom: &lt;a href=&#34;https://classroom.github.com/&#34;&gt;https://classroom.github.com/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
GitHub Classroom Assistant: &lt;a href=&#34;https://classroom.github.com/assistant&#34;&gt;https://classroom.github.com/assistant&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The video goes through the entire process but doesn&amp;#39;t really much into
grading. For grading I usually do something like the following:
&lt;/p&gt;
&lt;p&gt;
First I make a file named &lt;strong&gt;repos&lt;/strong&gt; with the names of all the submitted
repos:
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cd THEDIRECTORYWITHALLTHEREPOS
ls &amp;gt; repos&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Then I&amp;#39;ll use a script that looks something like this:
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;cat repos&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      cd /tmp/235-assignment-02-02-16-2019-07-25-00/$i
      NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** Name: &amp;#34;&lt;/span&gt; Readme.org | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/** Name: //g&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
      echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;================= &lt;/span&gt;$NAME&lt;span style=&#34;color:#e6db74&#34;&gt; ====================&amp;#34;&lt;/span&gt;
      make test
      ./test -s
      echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n------------------------------------\n\n&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt; &amp;gt; report&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
First I &lt;code&gt;cd&lt;/code&gt; into the repo. Each repo has a file named &lt;strong&gt;Readme.org&lt;/strong&gt; 
which has a line that looks like this &lt;code&gt;** Name: Students Name&lt;/code&gt;. The
line that starts &lt;strong&gt;NAME=&lt;/strong&gt; pulls out the student&amp;#39;s name. It then echos a
separator line with the sutdent&amp;#39;s name in it, builds and runs the
tests. &lt;code&gt;./test -s&lt;/code&gt; runs the doctest tests. The &lt;code&gt;-s&lt;/code&gt; says to print out
the passing tests as well as the failing ones. The output of the whole
loop is saved to a file named report.
&lt;/p&gt;
&lt;p&gt;
From there I can look at the report and get a quick overview of who&amp;#39;s
submissions worked and who&amp;#39;s didn&amp;#39;t. I still have to look at the
students actual code but I usually navigate all of that in Emacs.
&lt;/p&gt;
&lt;p&gt;
Finally, for grades, I just use a Google Spreadsheet with a script I
wronte to email grades to the students -
&lt;a href=&#34;https://cestlaz.github.io/posts/google-sheets/.&#34;&gt;https://cestlaz.github.io/posts/google-sheets/.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
You can easily adapt this processto use other languages wether you use Unit
Tests or not. 
&lt;/p&gt;
&lt;p&gt;
So, GitHub classroom - check it out. 
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/2PuXdb8OLYo&#34;&gt;https://www.youtube.com/embed/2PuXdb8OLYo&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Interfaces</title>
      <link>https://cestlaz.github.io/post/java-interfaces/</link>
      <pubDate>Fri, 08 Feb 2019 09:40:44 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/java-interfaces/</guid>
      <description>&lt;p&gt;
Two of the hardest topics to make meaningful to students in APCS-A are
inheritance and interfaces. It&amp;#39;s not that they&amp;#39;re super difficult
topics but rather that they&amp;#39;re not often needed, useful, or superior
to not using them on beginner assignments. More often than not the
motivation is a bit forced as are the assignments. 
&lt;/p&gt;
&lt;p&gt;
Inheritance is its own can of worms and to be honest, something I&amp;#39;ve
not found to be all that useful or necessary. The class abstraction
made sense to me for a number of projects but deep inheritance just
hasn&amp;#39;t come up much. 
&lt;/p&gt;
&lt;p&gt;
In any event, today I thought I&amp;#39;d talk about interfaces.
&lt;/p&gt;
&lt;p&gt;
When Java was first built a decision was made not to allow multiple
inheritance - the idea that a class can be derived from multiple
parents. Multiple inheritance is powerful but it can also be
complicated and confusing. By not including multiple inheritance Java
ended up easier to work with than say C++ but there were times where
you needed features that multiple inheritance provide. Specifically
there are times when you need some functionality that operates across
multiple unrelated classes. Without any other features, you&amp;#39;d have to
start &lt;strong&gt;all&lt;/strong&gt; of your classes from a single based class and include that
functionality. Clearly not a good idea.
&lt;/p&gt;
&lt;p&gt;
The first useful example is probably &lt;code&gt;Comparable&lt;/code&gt;
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
At first blush it might not seem all that useful. 
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s suppose you are doing something like finding the first String
(alphabetically) from an array:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
That&amp;#39;s easy enough but what if you had another class, &lt;code&gt;Shape&lt;/code&gt; where
you wanted to find the &amp;#34;smallest&amp;#34; based on area and a third class
&lt;code&gt;Person&lt;/code&gt; where you want to find the smallest by age? Without
interfaces you would need three independent search routines or set up
a crazy inheritance hierarchy where &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Person&lt;/code&gt; and &lt;code&gt;Shape&lt;/code&gt; all
come from the same parent. Instead, by having your two new classes
implement the &lt;code&gt;Comparable&lt;/code&gt; interface all three can use the same
search:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This is not entirely true. The above solution will give you compiler
warnings. You&amp;#39;ll have to decide if it makes sense to jump through the
hoops necessary to get rid of the warnings or if it&amp;#39;s sufficient to do
some vigorous had waving.
&lt;/p&gt;
&lt;p&gt;
This is the benefit of interfaces. You can create functionality that
works across classes. In addition to writing things like our
 &lt;code&gt;findSmallest&lt;/code&gt; above, if our classes implement &lt;code&gt;Comparable&lt;/code&gt; we can sort
collections of our classes using the built in sort methods.
&lt;/p&gt;
&lt;p&gt;
This is a benefit that our students can probably appreciate.
&lt;/p&gt;
&lt;p&gt;
Anther place interfaces come up and make sense are with GUI
programming. It&amp;#39;s pretty easy to show the utility of using interfaces
with the assorted listeners. That said, Java GUI programming is
something of a bear so maybe that&amp;#39;s not the way to go.
&lt;/p&gt;
&lt;p&gt;
Where else can you explore interfaces in APCS-A? Any program where you
have different entities that change in different ways over time. This
might be a simulation where time passes via a control loop or maybe a
game where time passes a turn at a time.
&lt;/p&gt;
&lt;p&gt;
For example, you might have a simulation with various resources that
implement an interface with an &lt;code&gt;update&lt;/code&gt; routine:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Maybe a food resource updates by raising or lowering the amount of
food it provides or perhaps an animal resource updates its location. You could
have an array of objects that implement this interface and just call
update on each one.
&lt;/p&gt;
&lt;p&gt;
You could do the same with a game. Maybe the human player&amp;#39;s &lt;code&gt;update&lt;/code&gt; 
prompts for keyboard input while non player characters just calculate
their next state.
&lt;/p&gt;
&lt;p&gt;
Interfaces are not the easiest thing to teach. The mechanics are
straightforward but the motivation is frequently forced for
beginners. I was never 100% happy with how I did it and now that I&amp;#39;m
in a C++ shop it doesn&amp;#39;t come up but I hope this is helpful to some of
you out there.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Github Classroom and Travis CI</title>
      <link>https://cestlaz.github.io/post/github-classroom-travis/</link>
      <pubDate>Sat, 02 Feb 2019 09:44:29 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-classroom-travis/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been using GitHub with my classes since GitHub&amp;#39;s early days. Over
time I&amp;#39;ve gotten my &lt;a href=&#34;https://cestlaz.github.io/posts/sigcse-2017-github-4/&#34;&gt;workflows down&lt;/a&gt;. I use a combination of shell
scripts - many just written on the fly, GitHub organizations, and some
naming conventions and protocols that have served me well. 
&lt;/p&gt;
&lt;p&gt;
A few years ago, the &lt;a href=&#34;https://education.github.com/&#34;&gt;GitHub Education team&lt;/a&gt; started &lt;a href=&#34;https://classroom.github.com/&#34;&gt;GitHub
Classroom&lt;/a&gt;. I looked at it at the time. It was pretty cool but I had my
workflow so I didn&amp;#39;t adopt it. I still very much liked GitHub, the
education team, and the product so I kept tabs on the project as time
passed. 
&lt;/p&gt;
&lt;p&gt;
This semester I decided to go all in on GitHub Classroom. Why? A
combination of my changing my workflow and part due to the GitHub
education tools and community. At it&amp;#39;s core, GitHub classroom does two
things well:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Assignment creation and distribution
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Repo management and organization.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
I thought I&amp;#39;d do a couple of posts and videos to show how I&amp;#39;m using
everything. 
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the first one.
&lt;/p&gt;
&lt;p&gt;
Interestingly enough I&amp;#39;m not going to talk at all about GitHub
classroom for the remainder of this post. Instead I&amp;#39;m going to talk
about TravisCI (&lt;a href=&#34;https://travis-ci.com/&#34;&gt;&lt;a href=&#34;https://travis-ci.com/&#34;&gt;https://travis-ci.com/&lt;/a&gt;&lt;/a&gt;,
&lt;a href=&#34;https://travis-ci.org/&#34;&gt;https://travis-ci.org/&lt;/a&gt;). Travis is a platform for continuous
intergration. The idea is pretty simple. After setting things up,
whenever you push code to a repo that Travis is watching, Travis
starts a container for your repo and runs one or more scripts against
the repo. This usually means tests. It turns out that this can be a
useful sanity check for students. It&amp;#39;s true that they can run tests on
their assignments before submitting them but this way it&amp;#39;s done
automatically and after they submit. They can be sure that what
they&amp;#39;ve submitted actually works.
&lt;/p&gt;
&lt;p&gt;
First you have to link your GitHub accoutn with Travis. To do this,
just go to travis-ci.org and log in using GitHub. You can then set a
bunch of options including which repos to run Travis on. The interface
at travis-ci.com looks similar but a bit nicer. The .org site is free
for open source or public repos  (as is the .com site, I think) but
the good people at Travis will give you rights to use private repos
for educational purposes for free. 
&lt;/p&gt;
&lt;p&gt;
The only other thing you have to do is create a &lt;a href=&#34;https://yaml.org/&#34;&gt;YAML&lt;/a&gt; file named
 &lt;code&gt;.travis.yml&lt;/code&gt; in your repo. Here&amp;#39;s one I&amp;#39;m using to test C++ projecs:
&lt;/p&gt;
&lt;div class=&#34;src src-yaml&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;language&lt;/span&gt;: cpp
&lt;span style=&#34;color:#66d9ef&#34;&gt;compiler&lt;/span&gt;: clang
&lt;span style=&#34;color:#66d9ef&#34;&gt;script&lt;/span&gt;:
  - make test
  - ./test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This tells Travis to use the clang compiler (as opposed to, say g++)
and then run &lt;code&gt;make test&lt;/code&gt; and then &lt;code&gt;./test&lt;/code&gt;. If all the tests pass you
get a green check and an email and you&amp;#39;re good to go. If they don&amp;#39;t
you get a red X and also an email. Of course for this particular
configuration to work you need &lt;code&gt;Makefile&lt;/code&gt; and everything else needed
to build the tests in the repo. In my case, I&amp;#39;m using &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt; for tests.
&lt;/p&gt;
&lt;p&gt;
Travis has support for a whole bunch of languages including Java,
Python, and JavaScript and all of those have nice testing frameworks
so regardless of what you&amp;#39;re teaching with, Travis could be easily
integrated. 
&lt;/p&gt;
&lt;p&gt;
In this video I show how I&amp;#39;m using TravisCI and also a simple Python
setup. In the next post I&amp;#39;ll get back to GitHub classroom and how
TravisCI integrates into it.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/-J8A5oWazvE&#34;&gt;https://www.youtube.com/embed/-J8A5oWazvE&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sequencing Topics</title>
      <link>https://cestlaz.github.io/post/sequencing-topics/</link>
      <pubDate>Sat, 26 Jan 2019 16:06:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sequencing-topics/</guid>
      <description>&lt;p&gt;
Monday&amp;#39;s the start of the Spring semester. Other than the 8:00am start
I&amp;#39;m looking forward to it. My 8:00am class is the honors/lab component
that goes with CS1. I taught it last semester and during each of the
past two years at Hunter. My second class is the follow up  - more OOP
/ C++, data structures and some algorithms.
&lt;/p&gt;
&lt;p&gt;
The material is old hat. I&amp;#39;ve taught it in Java more times than I can
count and also in C++ albeit many years ago. What&amp;#39;s new is that I&amp;#39;m
teaching my Hunter kids and I&amp;#39;m doing it in a college framework - two
days a week, 1:15 a session. I&amp;#39;m not thinking too much about how I&amp;#39;ll
teach each class - I usually figure that out in the moment - not
actually in the class but week to week based on the flow of the
class. 
&lt;/p&gt;
&lt;p&gt;
Right now, I have to make final decisions on sequencing, at least for
the start of the class. We got ahead of the game by covering most of
the C++ topics - inheritance, templates, overloading etc. at the end
of last semester so that
leaves all the data structures, algorithms, dynamic structures, and
memory management, recursion, and sorting and searching. If I have
time I&amp;#39;d also love to get into some graph stuff. 
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the plan, at lest for now.
&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll start with recursion. They had the basics last term but now
we&amp;#39;ll talk about search - I usually focus this around a maze
solver. After this we&amp;#39;ll place recursion on hold - at least in terms
of class time and move to linked lists and dynamic memory. We&amp;#39;ll
follow this with sorting. The idea is that students have trouble
getting comfortable with both recursion and also with dynamic
structures first time through. Rather than ploughing  through from
recursion to the recursive sorts I&amp;#39;m hoping that putting the dynamic
lists in between will give recursion some time to marinate in the
background. Likewise I&amp;#39;m hoping that the dynamic memory stuff can
marinate through the sorting unit for when we revisit it with stacks,
queues, and trees after sorting.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t know if this is the optimal way of sequencing the topics but I
think it will work pretty well.
&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll see as the semester progresses. If things are going swimmingly I
can always call an audible.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Professional Development - APCS-A, similar and beyond</title>
      <link>https://cestlaz.github.io/post/pd-apcs-a-and-beyond/</link>
      <pubDate>Sat, 15 Dec 2018 08:56:06 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pd-apcs-a-and-beyond/</guid>
      <description>&lt;p&gt;
A while ago I wrote about &lt;a href=&#34;https://cestlaz.github.io/post/pd-in-nyc/&#34;&gt;our plans&lt;/a&gt; at Hunter to run professional
development for CS teachers. Specifically, running once a month
sessions for teachers who teach APCS-A, similar and beyond.
&lt;/p&gt;
&lt;p&gt;
The idea started as a joke but morphed into a legit idea.
&lt;/p&gt;
&lt;p&gt;
I was talking to some friends about CTLE hours and how ridiculous the
system is. NY State teachers need 100 hours of CTLE credit (PD hours)
every so many years. It&amp;#39;s something of a scam for a few
reasons. First, two of the biggest providers are the NYC DOE and the
UFT, the teacher&amp;#39;s union. I&amp;#39;ve been told they both charge money for
many CTLE credit bearing activities. That certainly doesn&amp;#39;t seem
kosher – your boss and your union set up a system to charge you to keep your
job. 
&lt;/p&gt;
&lt;p&gt;
Well, it turns out that Hunter is certified to issue CTLE credits so
we joked that we should get dinner and hang out once a month and call
it professional development. We were only half joking - whenever you
get a bunch of teachers in a room they talk shop and that is actually
the best PD there is. Upon talking among ourselves and also to other
teachers we realized there was a legitimate need for PD for teachers
who were beyond the basics and so we turned this silly idea into the
real deal.
&lt;/p&gt;
&lt;p&gt;
Last Thursday we had our first session. We had about 25 attendees for
a three hour session.
&lt;/p&gt;
&lt;p&gt;
I can&amp;#39;t tell you if it was any good - you&amp;#39;ll have to ask the
participants, I can tell you what we did and what we plan moving
forward.
&lt;/p&gt;
&lt;p&gt;
We started with a content piece. I ran through &lt;a href=&#34;https://cestlaz.github.io/posts/2013-03-23-who_won_the_election-quadratic_to_linear_time/&#34;&gt;this lesson&lt;/a&gt; (or &lt;a href=&#34;https://cestlaz.github.io/posts/when-they-change-the-script/&#34;&gt;this
one&lt;/a&gt;) where the students find the mode of a list, realize it&amp;#39;s a slow
(n^2) algorithm and then refine it to a linear solution. The key idea
is to give the students an intuitive feeling for run time issues and
also to introduce them to &lt;a href=&#34;https://cestlaz.github.io/posts/2014-11-17-hidden-complexity.html/&#34;&gt;hidden complexity&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
After this we had dinner, provided by our friends at Google. Over
dinner the teachers talked shop. In addition to getting to know each
other, their programs, and their classes we also asked them to
consider these three items:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
What are things that cause you difficulty that you&amp;#39;d like us to
cover?
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
What are things you wish you knew about that you&amp;#39;d like us to
cover?
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
What are things you&amp;#39;re comfortable with that you&amp;#39;d be willing to
share with the group?
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
After dinner we circled up and JonAlf presented the way he set up
student note taking in his class.
&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://cestlaz.github.io/img/pd-apcs-a.jpg&#34; width=&#34;500&#34; height=&#34;500px&#34;/&gt; 
&lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;
Finally, we discussed next steps - specifically what we came up with
for those three bullet points above.
&lt;/p&gt;
&lt;p&gt;
I like the idea of having at least one short content piece, one short
pedagogy piece and a deeper dive at each meeting. For the first one,
JonAlf and I had to guess as to what might be useful and at the
appropriate level. We advertised for teachers who did APCS-A, similar,
or beyond but I&amp;#39;m sure we had teachers for whom the mode lesson was a
bit too advanced to do without scaffolding and also some for whom it
was way to simple. As we continue to meet, we&amp;#39;ll nail down the right
level and the right activities.
&lt;/p&gt;
&lt;p&gt;
The real hope is that many of the participants will become regulars
and together we&amp;#39;ll turn this into both an amazing once a month
activity and also a community of teachers.
&lt;/p&gt;
&lt;p&gt;
Right now, I&amp;#39;m looking for companies who want to feed us and possibly
provide space so if you know of any, hook me up. We&amp;#39;re also collecting
feedback and ideas from the attendees. 
&lt;/p&gt;
&lt;p&gt;
We&amp;#39;re targetting February for our next session followed by March,
April, May and possibly June.
&lt;/p&gt;
&lt;p&gt;
In the meantime, stay tuned.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let Teachers Teach</title>
      <link>https://cestlaz.github.io/post/let-teachers-teach/</link>
      <pubDate>Fri, 09 Nov 2018 08:57:36 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/let-teachers-teach/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://twitter.com/guzdial&#34;&gt;Mark Guzdial&lt;/a&gt;&amp;#39;s post the other day about &lt;a href=&#34;https://cacm.acm.org/blogs/blog-cacm/232557-direct-instruction-is-better-than-discovery-but-what-should-we-be-directly-instructing/fulltext&#34;&gt;direct isntruction&lt;/a&gt; struck a chord with
me. Right up front, Mark said:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
The research evidence is growing that students learn better through direct instruction rather than through a discovery-based method, where we expect students to figure things out for themselves.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Quite a surprise to the teachers who have been beaten over the head
with &amp;#34;everything must be discovery&amp;#34; in recent years. 
At the end of the post, Mark writes:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
I’m a follower of the research Felienne is citing in her blog post, and agree that direct instruction is better than discovery learning for introductory courses
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I found myself very much agreeing with Mark. I&amp;#39;m not surprised. It&amp;#39;s
true that Mark and I have traded blog comments with me saying that
a teacher dominant classroom can be very effective and Mark saying
lecturing is bad but after a while I realized that we were saying the
same thing. To me, a teacher dominant high school class means teacher
directed active learning experience and not a droning college lecture. 
&lt;/p&gt;
&lt;p&gt;
In any event, back to direct instruction vs discovery. It seems
like the pendulum is swinging again. A few years ago it was all about
discovery and now direct instruction is ok. There are two problems
here. The first is that in a few years it will be something
else. Before the discovery learning fad we had other fads. When I
started teaching it was cooperative learning. I also went through the
portfolio movement. There were other fads along the way including yet
another &amp;#34;new math.&amp;#34; At some point we got back to traditional direct
instruction, then discovery and that brings us back up to today.
&lt;/p&gt;
&lt;p&gt;
The second problem is a big one that&amp;#39;s often ignored. Regardless of
what the research says or doesn&amp;#39;t say and what teachers know or don&amp;#39;t
know the powers that be have time and time again decided upon the one
true way to teach and tried to force it upon teachers.
&lt;/p&gt;
&lt;p&gt;
It doesn&amp;#39;t work that way.
&lt;/p&gt;
&lt;p&gt;
The missing piece of the puzzle is the fact that teachers bring
different things to the table and that&amp;#39;s a fact that&amp;#39;s often
ignored. When teachers are observed, at least in NY, supervisors want
to see what they want to see. After Danielson was implemented in NYC I
was talking to a friend who almost sheepishly told me that she was
getting great evaluations because her teaching style aligned perfectly
with Danielson but she knew that when something else came into vogue
all of a sudden she&amp;#39;d no longer be &amp;#34;highly effective.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
When I started, cooperative learning was all the rage but it didn&amp;#39;t
work for me. Since it didn&amp;#39;t work for me, it didn&amp;#39;t work for my
students. This didn&amp;#39;t mean that I couldn&amp;#39;t cherry pick aspects of
cooperative learning and use them to good effect nor did it mean that
I couldn&amp;#39;t run a cooperative learning experience effectively from time
to time  but it meant that I couldn&amp;#39;t whole hog teach the way I was
&amp;#34;supposed&amp;#34; to teach. In another case, I knew a teacher who was a very
strong lecturer and I mean this in the traditional one sided lecture
style. He was much weaker when using active learning techniques and in
no way could he give up control to a cooperative learning
experience. That was who he was. He was most effective as a lecturer
for better or worse. With the right group of kids it worked pretty
well. Certainly better than if he was forced to teach in a way that
was contrary to who he was. I&amp;#39;ve also outright asked some great math teacher
friends of mine about &amp;#34;the research&amp;#34; on how to teach and the responses
I&amp;#39;ve gotten back were generally either &amp;#34;I don&amp;#39;t read the research&amp;#34; or
&amp;#34;it doesn&amp;#39;t work for me so I do what I do.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
All this isn&amp;#39;t to say that research isn&amp;#39;t important and that a teacher
shouldn&amp;#39;t master a variety of techniques and tools. A good preservice
program will leave a teacher with a cabinet full of tools to draw from
and the expertise to know themselves, their students, and what tools
to put in the toolbelt for an any given class. Teachers should
likewise be trained to maximize their inherent tendencies and talents
and blend in teaching techniques as appropriate. Good professional development
should bring new ideas and new techniques to teachers and should
consider who they can be added in to a teacher&amp;#39;s practice rather than
to replace it.
&lt;/p&gt;
&lt;p&gt;
Finally, teachers should be allowed to teach. It&amp;#39;s horrible that
there&amp;#39;s a movement to more and more scripted lessons and to tell
teachers how to teach. It was bad when I started and it&amp;#39;s only gotten
worse.
&lt;/p&gt;
&lt;p&gt;
Fortunately, some supervisors do indeed get it. Back when I was a
young teacher I was talking to a supervisor about this and he told me
that he observed a class he started with one basic question: &amp;#34;is
learning going on?&amp;#34; Everything flowed from there.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Compile Each Concept</title>
      <link>https://cestlaz.github.io/post/compile-each-concept/</link>
      <pubDate>Tue, 09 Oct 2018 14:46:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/compile-each-concept/</guid>
      <description>
&lt;p&gt;
We&amp;#39;ve all been there:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Student: Teacher, I need help
Teacher (comes over)
Student (shows screen listing three bazillion errors)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The student has just written pages of code and finally decided to try
to run it only to end up with pages of errors.
&lt;/p&gt;
&lt;p&gt;
Error messages can at times be hard to read for beginners but to see
and truth be told, they frequently don&amp;#39;t even read them but over the
years I&amp;#39;ve developed a practice that I&amp;#39;ve found helpful as a software
developer and if students adopt the same practice it can save them a
lot of time and effort.
&lt;/p&gt;
&lt;p&gt;
The idea is very simple. 
&lt;/p&gt;
&lt;p&gt;
Compile and test one concept at a time.
&lt;/p&gt;
&lt;p&gt;
It might seem silly, but if I&amp;#39;m writing a a program, my first compile
might be code that looks like this:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  using std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout;
  using std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
  {
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
or 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloWorld&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

      &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
	
      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
This might seem silly but it really doesn&amp;#39;t take any effort. I have a
key sequence to do this under Emacs and if I&amp;#39;m using an interactive
language like Python or Clojure I just have to hit &lt;code&gt;c-c c-c&lt;/code&gt; 
&lt;/p&gt;
&lt;p&gt;
This might seem silly but I do it out of muscle memory and it
immediately tells me I don&amp;#39;t have any syntax errors and my build system
works.
&lt;/p&gt;
&lt;p&gt;
Going further, I compile and test every time I code up what I call a
concept. What&amp;#39;s a concept? Let&amp;#39;s look at some code. A student might
write something like this to find prime number up to n:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a lot going on there. To me, a concept is
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
A loop
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A complex calculation
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
a conditional
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
All of these can have other concepts within.
&lt;/p&gt;
&lt;p&gt;
In the above code, I&amp;#39;d probable write it as follows, adding in tests
and print statements throughout the process:
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Step 1:
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Step 2
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i,j)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Step 3
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is not prime&amp;#34;&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Step 4 
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i,i_isPrime)
  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Step 5
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
It might not play out exactly this way but if not it would be something
similar. The idea is that if you test every time you add one concept
or construct there are fewer places where you can introduce an error.
&lt;/p&gt;
&lt;p&gt;
If you enter 100 lines before you test there are 100 places where
things can go wrong. If you type 10, there are only 10. On top of
that, if you&amp;#39;ve added 100 lines, conecptually you&amp;#39;ve probably added a
lot and the error can be anywhere. While it&amp;#39;s not always the case,
most of the time, if you just added an &lt;strong&gt;if&lt;/strong&gt;, the problem will be in the
&lt;strong&gt;if&lt;/strong&gt; or as a result of the if. Same with a &lt;strong&gt;loop&lt;/strong&gt; or any other construct.
&lt;/p&gt;
&lt;p&gt;
Once you get in the habit, it&amp;#39;s easy and doesn&amp;#39;t really take any
time. A couple of keystrokes to compile and a couple more to run. 
&lt;/p&gt;
&lt;p&gt;
All too often students try to write everything at once and it&amp;#39;s so
rare that it works. If we can get them to develop incrementally
they&amp;#39;ll be able to write much more complex systems and write them with
much less frustration.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CS vs CT vs Coding</title>
      <link>https://cestlaz.github.io/post/cs-ct-cc/</link>
      <pubDate>Fri, 28 Sep 2018 12:08:35 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-ct-cc/</guid>
      <description>&lt;p&gt;
There&amp;#39;s been a lot of buzz recently concernting Computational Thinking
(CT) vs Computer Science (CS) vs Coding / Programming on the
interwebs.
&lt;/p&gt;
&lt;p&gt;
Some of the questions and concerns that I&amp;#39;ve seen recently include:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
What is CT??
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Will rich schools get CS and poor only CT?
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Will rich schools get CS and poor on coding?
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The first question is a big one and as a community we haven&amp;#39;t answered
it yet. I think about it as including things like algorithmic
thinking, decomposing problems, iterating, pattern recoginition and the like 
but I&amp;#39;m hardpressed to come up with a succinct formal definition. This
is somewhat related to the bigger problem of &amp;#34;what is CS?&amp;#34; A problem
the CS community is still dealing with. There seems to be an editorial
or letter in the &lt;a href=&#34;https://cacm.acm.org/&#34;&gt;Communications of the ACM&lt;/a&gt; every few months talking
about this. &amp;#34;We&amp;#39;re an enginering discipline. No, we&amp;#39;re a science. No
we&amp;#39;re an artistic endeavor&amp;#34; and on and on. It&amp;#39;s no surprise that the
rest of the world doesn&amp;#39;t understand what we are when we haven&amp;#39;t
figured it out ourselves. It&amp;#39;s also no surprise that this problem also
extends to CT.
&lt;/p&gt;
&lt;p&gt;
One thing seemed clear on the twitter threads and posts I read is that
people seem to believe that CT and Coding are potentially overlapping
subsets of CS but you can do CT and Coding without CS.
&lt;/p&gt;
&lt;p&gt;
While there&amp;#39;s probably a lot to say on the CT without CS or rather CT
without programming but today let&amp;#39;s look at the programming without CS
side of things.
&lt;/p&gt;
&lt;p&gt;
This is probably of particular concern to me as a high school and now
college guy. There&amp;#39;s no doubt to me that there&amp;#39;s a big difference
between a kid learning coding/programming and computer science. 
&lt;/p&gt;
&lt;p&gt;
Coding can be a useful skill but without at least some computer
science it&amp;#39;s of limited value. Look at code schools as examples. Many
code schools work to prepare their customers for entry level tech
jobs. Usually, this includes the fundamentals of programming on top of
a typical business toolset. Examples would be a node.js backend,
Mongodb, and React.js. Another, albeit older one so probably not
taught as much now would be Ruby on Rails. Upon completing the
program, one can create a formulaic full stack applicationand knowing
that formula can make you employable in our current tech sector. The
downside though, as I&amp;#39;ve heard from countless employers, is that code
school graduates, by training, can&amp;#39;t break out of that formula. They
just don&amp;#39;t have the context, nor the problem solving ability - they
lack the CS. I&amp;#39;m sure many go on to learn the CS but that&amp;#39;s another
story. I was talking to a code school founder a few years ago about
this and asked &amp;#34;what happens when the formula chages.&amp;#34; The answer I
got was &amp;#34;that&amp;#39;s ok, we&amp;#39;ll just bring them back for a new bootcamp.&amp;#34; Of
course that will cost the kid another 10K or whatever bootcamps are
charging these days.
&lt;/p&gt;
&lt;p&gt;
Now of course some code schools try harder than others and some
attempt build some CS into their programs but while there are always
outliers who can learn a great deal in a short period of time, and
often on their own, real education takes time and effort and a short
term bootcamp just doesn&amp;#39;t have that time.
&lt;/p&gt;
&lt;p&gt;
Back to schools.
&lt;/p&gt;
&lt;p&gt;
To start coding is easier to teach than CS. It can be formulaic and
there are lots of resources out there to assist teachers without a CS
background. 
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s also easy to test and show off. 
&lt;/p&gt;
&lt;p&gt;
I was at the NYTM once and they were celebrating a code school
project. The idea was really a good one - automatic sensing of heat in
low income apartments. I had a couple of questions about getting their
data out to the authorities but thought that if they figured that out
it could really do some good. On the other hand there was practically
no CS. As the project was described - it sets up it&amp;#39;s own mesh network
and communicates heat readings etc etc., I said to my neighbor in the
audience - sounds like an arduino with an XBee shield and yep, when
they showed the case, it was the exact form factor to hold an arduino
and xbee. That told me there was no CS. The mesh networking is
automatically done by the XBee so all they had to do was take the
sample arduino code to read the heat sensor and instead of sending it
to the serial port as the sample code does, send it to a particular
XBee node. Pretty much no CS and almost no programming. Just a great
idea and gluing some components together.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve seen the same with student projects that have been highlighted at
events with funders and politicians and in the media. I won&amp;#39;t describe
them as they are student projects and wouldn&amp;#39;t do that to a student
but the projects really had no CS under the hood. Nice ideas or even
more importantly nice stories around the kid but it was glue and
simple basic programming not CS.
&lt;/p&gt;
&lt;p&gt;
Teaching real CS is harder to do, harder to assess and harder to show
off which makes teaching coding so enticing. 
&lt;/p&gt;
&lt;p&gt;
This is not to say that teaching coding without CS doesn&amp;#39;t have
value. I believe it does but it also leads to another problem – it
can be assessed improperly either with showy projects that are merely
gluing a theme on a fixed pattern or by tests that allow for
memorization and this at times has led to students being given too
much too early.
&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ve seen this with algebra and physics. Students end up taking these
subjects before they&amp;#39;re ready for them. They can pass the
standardized test  because they can plug numbers into formulas or can
recognize what form to use because there are a limited set of problem
patterns on the exams but they don&amp;#39;t really &amp;#34;get&amp;#34; the subject. This
leads to problems later on but of course that&amp;#39;s another teacher&amp;#39;s
problem.
&lt;/p&gt;
&lt;p&gt;
This also happens in coding classes. While it&amp;#39;s usually pretty clear
when a kid isn&amp;#39;t getting a CS concept, I&amp;#39;ve seen programming
experiences where the student at first or in the short term can appear
to pass the assessments but later on it&amp;#39;s revealed that they weren&amp;#39;t
ready and they didn&amp;#39;t really learn what they were supposed to.
&lt;/p&gt;
&lt;p&gt;
This is a problem. Just as we might have some students exposed to CT
without CS I think a major problem will be kids getting Coding without
CS. This will particularly be a danger in poorer schools and
communities but possibly across the board.
&lt;/p&gt;
&lt;p&gt;
Just another thing we have to really be on guard for as we try to
achieve CS for all.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Not every lesson has to be magic</title>
      <link>https://cestlaz.github.io/post/not-always-exciting/</link>
      <pubDate>Tue, 25 Sep 2018 18:08:35 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/not-always-exciting/</guid>
      <description>&lt;p&gt;
If you check out Twitter, Facebook, Medium  and other blog sites you
might get the idea that you&amp;#39;re the worst teacher in the world. The
internet abounds with people sharing tweets and posts about wonderful
lessons they&amp;#39;ve just taught, witnessed or learned about in
professional development. Sure, the teacher forums rife with requests
for lesson ideas and resources but the shared material is always aces.
&lt;/p&gt;
&lt;p&gt;
It makes sense, people in the community want to share things that
worked for them or things they think will work. 
&lt;/p&gt;
&lt;p&gt;
Still, for new teachers it can create an unhealthy illusion of what
really goes on in the classroom.
&lt;/p&gt;
&lt;p&gt;
This is not to say that sharing of the good stuff is a bad thing but
the truth is that not every lesson is a masterpiece, not every teacher
is a super charismatic showman, and not all topics lend themselves to
creative teaching.
&lt;/p&gt;
&lt;p&gt;
Why am I writing this now? Because I was planning lessons earlier
today and I&amp;#39;m at one of those places where I&amp;#39;m not going to be able to
deliver a whiz-bang lesson in my next class. One of my classes this
semester is for beginners so we&amp;#39;re building up language skills from
the ground up. Right now I want to do some loop applications but
there&amp;#39;s only so much we can do given what the students know. There are
reasons why I don&amp;#39;t want to do graphics with them right now. I also
haven&amp;#39;t introduced lists yet and don&amp;#39;t want to loop over strings yet
so I&amp;#39;m left with doing mathy stuff.
&lt;/p&gt;
&lt;p&gt;
I think I&amp;#39;ll look at Newton&amp;#39;s method for square roots. It&amp;#39;s
interesting for the math inclined and does let us explore issues with
floating point and accuracy. 
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s not going to be super exciting for everyone though and that&amp;#39;s okay. 
&lt;/p&gt;
&lt;p&gt;
I could do lists first but I don&amp;#39;t want the kids to have to handle so
much new material so quickly. I&amp;#39;d rather keep the pace slower and work
with what they&amp;#39;ve just learned for a bit. 
&lt;/p&gt;
&lt;p&gt;
I could also do graphics but that adds a level of overhead I don&amp;#39;t
want to get into now.
&lt;/p&gt;
&lt;p&gt;
The idea is to look at the long game. A class runs a whole semester or
possibly a year. You&amp;#39;re going to have some special memorable lessons
and some mundane ones and that&amp;#39;s nothing to be ashamed of. 
&lt;/p&gt;
&lt;p&gt;
We&amp;#39;re still mostly going to see best practices shared online with only
a few brave souls sharing disaster classes and asking for help. That&amp;#39;s
just how the internet works. It&amp;#39;s not the worst thing in the
world. Just remember when you&amp;#39;re struggling to come up with a good
lesson or you&amp;#39;ve just taught a bad one that tomorrow&amp;#39;s will be
better. Judge yourself by your students long term development, not one
day at a time.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Two Faces of Project Based Learning</title>
      <link>https://cestlaz.github.io/posts/two-faces-of-pbl/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/two-faces-of-pbl/</guid>
      <description>&lt;p&gt;
If one looks at my twitter feed they&amp;#39;ll notice that in addition to CS
Ed, another issue I&amp;#39;m passionate about is school reform or rather
resistance to what is popularly known as and mislabeled as school reform. I&amp;#39;m anti
vouchers, charter schools, high stakes testing and more. One of the
heroes of this resistance is education historian Diane Ravitch. I&amp;#39;m a
big fan of Diane&amp;#39;s and she&amp;#39;s one of the true great champions of public
schools, kids, and teachers. She blogged today about how a superintendent on Long Island &lt;a href=&#34;https://dianeravitch.net/2018/07/27/new-york-district-on-long-island-shows-that-problem-based-curriculum-produces-better-results-than-test-prep/&#34;&gt;replaced test
prep with project based learning&lt;/a&gt;. The post which talks about how this
superintendent improved test results  is worth a read. My only
quibble was that we shouldn&amp;#39;t read anything into the results for a
variety of reasons including the fact that the group of students who
did the project based learning (PBL) units instead of test prep were
self selecting volunteers.
&lt;/p&gt;
&lt;p&gt;
One of the comments caught my eye:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
PBL is just another “student-centered” fad…
&lt;/p&gt;
&lt;p&gt;
PBL operates on the myth of “transference” perpetuated by non-educators.
&lt;/p&gt;
&lt;p&gt;
…
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The comment continues on with a number of good points.
&lt;/p&gt;
&lt;p&gt;
Why am I writing about it here? Because PBL is a big CS Ed buzzword
and like most buzzwords there&amp;#39;s both truth at the root of the hype and
hype that distorts the truth.
&lt;/p&gt;
&lt;p&gt;
When done right with the right group of kids, project based learning
can be wonderful but it takes a lot of time and effort. You can&amp;#39;t just
set the kids loose to learn. You&amp;#39;ve got to train them to work
together, set up the project, as the teacher, you&amp;#39;ve got to know the
subject so as to know when to guide, when to tell, when to prod, and when to leave
them alone. Doing it right, at least for most students, is certainly
not giving them the instruction sheet and going off the check your
email.
&lt;/p&gt;
&lt;p&gt;
On the other hand, it&amp;#39;s easy to do it wrong. If you&amp;#39;ve got high
performing kids, they&amp;#39;ll figure things out. If you&amp;#39;ve got a few high
performing kids, they can mask the fact that the majority of a group
isn&amp;#39;t getting things. You might have an assignment where a kid figures
out a formula from discovered data and might be able to then use it to
make predictions but there&amp;#39;s a good chance they won&amp;#39;t understand why
it works or it&amp;#39;s root derivation. That&amp;#39;s where we need the teacher.
&lt;/p&gt;
&lt;p&gt;
One of the dangers of bad PBL is that it&amp;#39;s sexy. Kids are engaged and
it appears to work - particularly when the teacher doesn&amp;#39;t know the
subject area. This is my great fear whenever I hear things about
teachers being &amp;#34;Lead Learners.&amp;#34; Sure, when you&amp;#39;re a converted
something else teacher moving into CS you won&amp;#39;t know the subject
matter but that has to change over time. I&amp;#39;ve seen enough instances of
cases where teachers never develop their chops and just throw projects
at the kids augmented by scripted curricula or computer driver
content. The kids get through the class or program but are not
prepared for the next class or next level. I&amp;#39;ve seen this with the old
Cisco curriculum, any number of after school and summer programs -
some VERY highly regarded ones and I think we&amp;#39;ll see more and more of
this in states that are pushing CSforAll without developing the
necessary pre and in service programs for their teachers.
&lt;/p&gt;
&lt;p&gt;
Don&amp;#39;t let my last two paragraphs leave you feeling that I&amp;#39;m anti
PBL. I&amp;#39;m not. It&amp;#39;s great when done right and if you have thee time and
resources in your school and classes you should be using it when
appropriate.
&lt;/p&gt;
&lt;p&gt;
If you want some pointers on how to get going in the right direction with PBL in CS  check out &lt;a href=&#34;https://www.amazon.com/Computer-Science-K-12-Imagining-possibilities-ebook/dp/B07DYDXBSH/ref=sr_1_1?ie=UTF8&amp;amp;qid=1532808363&amp;amp;sr=8-1&amp;amp;keywords=doug+bergman&#34;&gt;this
book&lt;/a&gt; by my buddy Doug Bergman. It&amp;#39;s a great getting started guide by a
great teacher. He&amp;#39;s basically Mr. PBL and he does it right.  If you&amp;#39;re new to CS you&amp;#39;ll still need to learn content
and if you&amp;#39;re new to teaching, you&amp;#39;ll be developing your chops for
your entire career but it&amp;#39;s a great resource to get you and then your
kids started on the journey.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PD for people who know CS</title>
      <link>https://cestlaz.github.io/posts/pd-for-cs/</link>
      <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/pd-for-cs/</guid>
      <description>&lt;p&gt;
I saw a couple of tweets from Sarah Judd this morning:
&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;A lot of CS Ed PD assumes you are new to CS. I really want CS Ed PD for people like us that came from a CS background and want to understand the pedagogy for CS in particular better. Do you know of some?&lt;/p&gt;&amp;mdash; Sarah Judd (@SarahEJudd) &lt;a href=&#34;https://twitter.com/SarahEJudd/status/1011785286693552139?ref_src=twsrc%5Etfw&#34;&gt;June 27, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Yes! I love SIGCSE and CSTA. I just feel like... Math teachers don&amp;#39;t get PD that starts with &amp;quot;and this is how you add and subtract!&amp;quot; and I&amp;#39;d love more CS PD that assumes the content is there, and can focus on the pedagogy.&lt;/p&gt;&amp;mdash; Sarah Judd (@SarahEJudd) &lt;a href=&#34;https://twitter.com/SarahEJudd/status/1011966102795059200?ref_src=twsrc%5Etfw&#34;&gt;June 27, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
It wasn&amp;#39;t the first time I&amp;#39;ve heard this refrain. Last year I attended
my first CSTA conference. I had numerous conversations with CS
teachers on the fact that everything was on an intro level in terms of
both content and teaching. Further conversations with local teachers
with stronger CS backgrounds led me to run a professional development
session at Hunter this past election day for more experienced CS
teachers at schools that offered more than the basics.
&lt;/p&gt;
&lt;p&gt;
While it&amp;#39;s not surprising that most of the PD opportunities for CS teachers are
rather rudimentary given that nationally most programs are new and
most teachers are new to the subject but there are a few deeper
reasons.
&lt;/p&gt;
&lt;p&gt;
To start, there are big players in the CS Ed movement that are pushing
curricula and specific programs and that leads to scripted PD for
their products and not depth of knowledge nor deep pedagogical content
knowledge let alone basic pedagogy. Add to this the fact that many of
the &amp;#34;thought leaders&amp;#34; in the space don&amp;#39;t have experience teaching CS
at the K12 level and in many cases don&amp;#39;t have a background either in
teaching nor tech and you can see where the problem comes from. On top
of this we have the erosion of respect for teaching as a profession
where reformers are trying to take the teacher out of teaching and are
trying to reduce pedagogy to following scripts. This problem goes well
beyond CS Ed but as the new kid on the block it probably hits us
hardest.
&lt;/p&gt;
&lt;p&gt;
In any case, preparing beginners is both necessary and appropriate for
the time being but we can and must do a better job than what&amp;#39;s
currently &amp;#34;state of the art.&amp;#34; At the same time we have to do something
with the CS teachers who indeed do have strong content knowledge but
don&amp;#39;t feel comfortable with imparting that knowledge.
&lt;/p&gt;
&lt;p&gt;
So, what should we do?
&lt;/p&gt;
&lt;p&gt;
For new teachers the solution will ultimately have to come
from pre-service programs but what we end up getting is going to
largely be dictated on what&amp;#39;s required by individual states. If states
merely require passing an exam like the Praxis CS exam which, from
what I can gather isn&amp;#39;t a horrible content exam then we&amp;#39;re going to
see CS teachers bumble through their early to mid careers while trying
to figure out how to teach CS much like I did way back when. If they
end up endorsing pre-service programs that are focused on specific
curricula - APCS-A for teachers, APCS-P for teachers, &lt;a href=&#34;https://cestlaz.github.io/posts/math-for-math-teachers/&#34;&gt;Math for Math
teachers&lt;/a&gt; if you will but for CS, we&amp;#39;re also not going to get strong
well prepared pedagogues. On the other hand if you can design a
program that has a strong pedagogical component to go along with the
content, you have a chance. Even with a well designed program
implementation will still be a challenge. Who will teach it? Education
professors who don&amp;#39;t have CS backgrounds? CS professors with little
pedagogical training? Neither of those groups necessarily have any
real experience as actual K12 teachers. If you can find honest to
goodness experienced, strong K12 CS teachers to teach your pedagogy
courses that&amp;#39;s a big win but that&amp;#39;s going to be hard in most cases.
&lt;/p&gt;
&lt;p&gt;
I think we designed a great program at Hunter and have a practical and
strong implementation plan. If you&amp;#39;re going to be
at CSTA2018 you can hear all about it and why we designed it as we did
in the talk I&amp;#39;m giving.
&lt;/p&gt;
&lt;p&gt;
For the more experienced I don&amp;#39;t have a universal answer but I can say
what I&amp;#39;m planning. Teachers in NY have to complete 100 CTLE hours
every five years. For beginners, there are plenty of options, at least
content wise. For teachers who know CS, not so much. I was at a meetup
talking to a few friends a couple of weeks ago and one mentioned that
they get most of their hours in Math for America CS
workshops. Unfortunately more than a few of my CS teacher friends who
are in MFA tell me that the CS content in these workshops, while they
do satisfy the hours, are somewhat lacking on the CS / CS pedagogy
side.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what I&amp;#39;m planning - we (Hunter) will host a once a month
dinner/session for CS teachers who are a little farther along CS
wise. I haven&amp;#39;t worked out all the details yet but I&amp;#39;ve got a few tech
companies that are already interested in sponsoring and helping out
should we need anything and we&amp;#39;ll probably set most of our agenda for
the year at the first session where I&amp;#39;ll make my best guess at a
useful agenda. This is something I&amp;#39;m pretty excited about. It should
help create a network of more experienced CS teachers which will both
help bolster that segment of the community and provide a long term
resource to newcomers and it should be a lot of fun.
&lt;/p&gt;
&lt;p&gt;
In some ways, this is why I ended up joining Hunter. Regardless of
what the city and state do, we&amp;#39;re going to prepare the teachers and if
you have a well prepared teacher, you&amp;#39;ve got a shot.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching recursion early? Make sure to use a good tool.</title>
      <link>https://cestlaz.github.io/posts/recursion-early/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/recursion-early/</guid>
      <description>&lt;p&gt;
I replied this tweet yesterday and thought I&amp;#39;d expound a bit.
&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;We started kids using scheme on 10th grade at stuy so did recursion early. Not everyone got all of it but it think it made things much easier for those that you more CS later.&lt;/p&gt;&amp;mdash; Mike Zamansky (@zamansky) &lt;a href=&#34;https://twitter.com/zamansky/status/1001508028439519233?ref_src=twsrc%5Etfw&#34;&gt;May 29, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
We introduced recursion very early in our intro course at Stuy and I
think it worked well. In that course we started by using Racket (nee
Scheme) as the first programming unit. Originally we
started the kids out first using NetLogo or StarLogo and followed with
Scheme but after a few years we switched the order.
&lt;/p&gt;
&lt;p&gt;
I wouldn&amp;#39;t always recommend Scheme for a first course and in fact
frequently don&amp;#39;t but given how the Stuy course was introduced and
developed it made sense and worked.
&lt;/p&gt;
&lt;p&gt;
Was it worth doing things this way? I think so. Prior to that intro
course becoming a requirement I got to see students coming in from
different pathways to APCS. Some came in raw with zero formal
experience, some self taught, some through that intro course and some
having taken another more traditional intro programming course or
experience. The kids who started on Scheme had no more difficulty
mastering loops and iteration but had an easier time getting to the
more advanced recursive techniques. This wasn&amp;#39;t a surprise - it wasn&amp;#39;t
their first rodeo. This also jived with reports I read at the time
that felt that when students did recursion first, iteration was just
as easy but when they did iteration first, recursion was harder.
&lt;/p&gt;
&lt;p&gt;
You can of course make a strong case that recursion isn&amp;#39;t necessary
for a kid that isn&amp;#39;t going to study more CS. I&amp;#39;ll merely argue that
what we did at Stuy worked with that population and I wouldn&amp;#39;t change
it. At the same time, I&amp;#39;ve helped a number of teachers design classes and programs
where we agreed that recursion first was not the way to go.
&lt;/p&gt;
&lt;p&gt;
In any event, it wasn&amp;#39;t that I specifically wanted to do recursion
early but rather, there were a number of things I wanted to do with
the class for which Scheme made sense and recursion was just one of
them.
&lt;/p&gt;
&lt;p&gt;
Some reasons to like (or for some, to dislike) Scheme early:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
It&amp;#39;s functional – everything is a function. While this is
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
technically not true, we can fudge it a bit at this level. You put
things in parens so instead of add(a,b) you write (add a b) or
really (+ a b). You can also do (+ a b c). Things that would be
statements are also functions: (if Booelean TruePart FalsePart) is the &lt;strong&gt;if&lt;/strong&gt;
statement. For example &lt;code&gt;(if (&amp;gt;= a b) a b)&lt;/code&gt; returns the larger of a
and b.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Because it&amp;#39;s functional it avoids the issue kids have with &lt;code&gt;=&lt;/code&gt; being
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
for assignment rather than comparison.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
It has great support for list processing.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Recursion is much more natural.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
It&amp;#39;s a super simple language with simple rules and a simple, small  syntax
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Of course, Scheme isn&amp;#39;t perfect and some people dislike the above
reasons. It&amp;#39;s also easy to come up with a number of other good reasons
not to use a language like Scheme.
&lt;/p&gt;
&lt;p&gt;
On the recursion front, it makes things much easier. There are no
loops so recursion develops as a natural form for repetition:
&lt;/p&gt;
&lt;div class=&#34;src src-scheme&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;f (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
(* x  (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; (- x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This defines a function that takes one parameter and returns
&lt;code&gt;x*(x-1)*(x-2)...&lt;/code&gt;. It repeats, but never ends. This leads to adding
a base case:
&lt;/p&gt;
&lt;div class=&#34;src src-scheme&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;f (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;lt; x &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
(* x (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; (- x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Which is your basic factorial function.
&lt;/p&gt;
&lt;p&gt;
Since this use of recursion for repetition  develops naturally as we
introduce language concepts it&amp;#39;s easier for kids to get their heads
around it as opposed to when they&amp;#39;ve seen loops already and have an
&amp;#34;easier&amp;#34; alternative. You can make the case that you could introduce
recursion this way in a language with loops like Python but once loops
are available and particularly when loops are idiomatic, students will
find them and getting them to think recursively will be more
difficult.
&lt;/p&gt;
&lt;p&gt;
Scheme and most other functional programming languages also have
strong support for lists and list recursion. This means you don&amp;#39;t have
to limit yourself to mathy problems. Think about a todo list:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Go to the market
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Buy a gallon of milk
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
If they have eggs, get a dozen (heh heh)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Go home
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Processing a todo list is really a recursive problem:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
If the list is empty you&amp;#39;re done
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Take the first item off  the list
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Do it
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Recurse
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Once you start working with lists, you can play with all sorts of
recursive examples.
&lt;/p&gt;
&lt;p&gt;
At the end of the Scheme unit the big project is creating a sentence
generator. The kids don&amp;#39;t know it but they&amp;#39;re learning about grammars
and in fact are writing a recursive descent parser - they just think
they&amp;#39;re writing a program that creates silly sentences. It&amp;#39;s a really
nice project that uses recursion in a way that&amp;#39;s different and I&amp;#39;d
argue more fun and interesting than the usual approaches.
&lt;/p&gt;
&lt;p&gt;
I chose Scheme for a variety of reasons. I also chose NetLogo for
specific reasons. Unlike Scheme (or most other popular learning
languages), NetLogo is really all about agent based parallel
processing. There are concepts that we can explore easily and in depth
with NetLogo that would be tremendously difficult in any other
language and at the same time, there are things that are easy to
explore in other languages that Netlogo doesn&amp;#39;t lend itself to.
&lt;/p&gt;
&lt;p&gt;
So, in the end, this post really isn&amp;#39;t about when to teach
recursion. It&amp;#39;s more about how languages lend themselves to solving
different problems and teaching different concepts in different
ways. If all you have is a hammer, everything looks like a
nail. Fortunately, we can do better.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do It The Dumb Way</title>
      <link>https://cestlaz.github.io/posts/do-it-the-dumb-way/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/do-it-the-dumb-way/</guid>
      <description>&lt;p&gt;
There&amp;#39;s so much to like in the shape drawing lessons I talked about
in my &lt;a href=&#34;http://cestlaz.github.io/posts/refactoring/&#34;&gt;refactoring&lt;/a&gt; post that I thought I&amp;#39;d share a little more here.
&lt;/p&gt;
&lt;p&gt;
It can be argued that the most important things for a program to do is work. The
most clever, elegant, creative program is worthless if it doesn&amp;#39;t
produce the desired result. All too often, beginners and hot shot beginners in particular try to
be too clever too early and get themselves into trouble.
&lt;/p&gt;
&lt;p&gt;
When doing the shape drawing lessons the first couple of shape are
pretty easy
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;

| ****            |    | *               |
| ****            |    | **              |
| ****            |    | ***             |
| ****            |    | ****            |
| ****            |    |                 |
|                 |    |                 |
&lt;/pre&gt;
&lt;p&gt;
but things get more interesting with the right justified triangle:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
----*       *
---**      **
--***     ***
-****    ****
*****   *****
&lt;/pre&gt;
&lt;p&gt;
For this triangle, students want to come up with the formula for the
number of spaces. They usually figure out something like this with
&lt;code&gt;h-i-1&lt;/code&gt; spaces and &lt;code&gt;i+1&lt;/code&gt; stars:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The formulas become harder to figure out as the shapes become more
complex and sometimes students get stymied.
&lt;/p&gt;
&lt;p&gt;
The truth is that while they&amp;#39;re struggling to find the perfect
solution, it&amp;#39;s sometimes better to do it the dumb way.
&lt;/p&gt;
&lt;p&gt;
Consider drawing a trapezoid like this example of height 5 and
starting width 12:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
************
**********
********
******
****
&lt;/pre&gt;
&lt;p&gt;
A student could come up with the &amp;#34;formulas&amp;#34; for spaces and stars but
sometimes there&amp;#39;s a more straightforward way.
&lt;/p&gt;
&lt;p&gt;
Consider the number of spaces on each line on the left hand side of
the shape. First line is 0 then 1, 2 etc. Why not start a variable
&lt;code&gt;spaces&lt;/code&gt; at 0 and increment it on each loop iteration.
&lt;/p&gt;
&lt;p&gt;
For the number of stars, it&amp;#39;s starting at the width and being reduced
by 2 each time.
&lt;/p&gt;
&lt;p&gt;
This leads to a solution similar to this (using the line routine from
the earlier refactoring post):
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This solution is simple to construct, simple to understand, and quite
frankly, hard to get wrong.
&lt;/p&gt;
&lt;p&gt;
It can also lead a student to discovering a pattern or &amp;#34;formula&amp;#34; such
as what was used to solve the earlier problems.
&lt;/p&gt;
&lt;p&gt;
This might seem to some as a cheap way out, the dumb approach -
creating extra variables and have them count along the way but I
don&amp;#39;t. There&amp;#39;s nothing wrong with simple and straightforward. Yes, you
could come up with an elegant formula but the bottom line is you need
something to count 0,1,2,3… so create a variable to do it. You need
something to count 12,10,8,… create one for that as well.
&lt;/p&gt;
&lt;p&gt;
Now, I&amp;#39;m not advocating writing 100 if statements rather than a loop
but I think you get the idea.
&lt;/p&gt;
&lt;p&gt;
The best solution is one that works and Sometimes the &amp;#34;dumb&amp;#34; approach is the best approach.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Refactoring</title>
      <link>https://cestlaz.github.io/posts/refactoring/</link>
      <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/refactoring/</guid>
      <description>&lt;p&gt;
One of my laments on teaching computer science is that students are
rarely taught and given the chance to develop  good programming
practices. There&amp;#39;s usually not enough time. Beginners work on small
&amp;#34;toys&amp;#34; which don&amp;#39;t lend themselves to good software development
practices and later on, there&amp;#39;s so much other material like
algorithms, data structures etc. to teach and
learn that programming practices usually amount to lines like:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&amp;#34;Make sure to comment your code..&amp;#34;
&lt;/p&gt;
&lt;p&gt;
&amp;#34;Indent properly…&amp;#34;
&lt;/p&gt;
&lt;p&gt;
&amp;#34;Use functions…&amp;#34;
&lt;/p&gt;
&lt;p&gt;
&amp;#34;It&amp;#39;s important to test your code…&amp;#34;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
so when I see an opportunity to use a simple example to drive home a
good practice,  I try to jump on it.
&lt;/p&gt;
&lt;p&gt;
Drawing shapes with text is a typical early project. I&amp;#39;ve seen it in
text books and online and have been doing it for years. I recall doing
it back in the 80s in Fortran IV when the programs we wrote were on &lt;a href=&#34;https://en.wikipedia.org/wiki/Punched_card&#34;&gt;punch cards&lt;/a&gt;, run
overnight on an &lt;a href=&#34;https://en.wikipedia.org/wiki/IBM_1130&#34;&gt;IBM 1130&lt;/a&gt;, and printouts picked up the next day.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s a nice use of nested loops. The students will write functions to
create assorted shapes out of asterisks  like rectangles and
triangles. Typical solutions look like this:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Which results in shapes like these:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;

| ****            |    | *               |
| ****            |    | **              |
| ****            |    | ***             |
| ****            |    | ****            |
| ****            |    |                 |
|                 |    |                 |
|                 |    |                 |
| *************** |    | *               |
| *************** |    | **              |
| *************** |    | ***             |
| *************** |    | ****            |
| *************** |    | *****           |
| *************** |    | ******          |
| *************** |    | *******         |
&lt;/pre&gt;
&lt;p&gt;
Then there will be more interesting shapes including things like:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;

*       *            *****
**      ***           *   *            and more
***     *****          *   *
****      ***           *****
&lt;/pre&gt;
&lt;p&gt;
This is a great time to talk about refactoring.  All of the shape
drawing functions follow the same pattern - there&amp;#39;s an outer loop for
the height and then one or more inner loops to draw each line. We can
factor out the inner loops in to a separate &lt;code&gt;line()&lt;/code&gt; function.
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It&amp;#39;s just like factoring in algebra:
&lt;/p&gt;
&lt;div class=&#34;latex-block&#34;&gt;
&lt;p&gt;
(RectangleOuterLoop × Line) + (TriangleOuterLoop × Line) ⇒ Line  (Rectangleouterloop × TriangleOuterloop)
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
We end up with:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It&amp;#39;s simpler, cleaner, and also can lead us to thinking about the
&amp;#34;harder&amp;#34; shapes in an interesting way. Instead of looking at the right
justified triangle as a triangle, we can think of each level as two
lines - one of spaces (shown here as dashes) followed by a line of
stars:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
----*       *
---**      **
--***     ***
-****    ****
*****   *****
&lt;/pre&gt;
&lt;p&gt;
Noticing that  for a height of 5, the dashed lines count down in
length 4,3,2,1,0 and the star lines count up 1,2,3,4,5, we get:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Here we have typical early CS assignment that really lends itself to
talking about structuring programs and refactoring. Where else can we
inject good programming practices in ways that make sense early on?
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sigcse2018 Bootstrapworld on Creativity in CS classes</title>
      <link>https://cestlaz.github.io/posts/sigcse2018-bootstrap/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse2018-bootstrap/</guid>
      <description>&lt;p&gt;
I really didn&amp;#39;t know what to expect at the &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3159471&#34;&gt;Creativity, Customization,
and Ownership: Game Design in Bootstrap: Algebra&lt;/a&gt; session. I&amp;#39;ve been a
big fan of &lt;a href=&#34;http://www.bootstrapworld.org/&#34;&gt;Bootstrep&lt;/a&gt; for years and looking at the authors, &lt;a href=&#34;http://blog.acthompson.net/2017/10/cs-teacher-interview-emmanuel.html&#34;&gt;Emmanuel
Schanzer&lt;/a&gt;&amp;#39;s been a freind forever. I&amp;#39;ve never met &lt;a href=&#34;https://twitter.com/ShriramKMurthi&#34;&gt;Shriram Krishnamurthi&lt;/a&gt;
in person but am looking forward to it. We&amp;#39;ve traded emails and blog
comments. I&amp;#39;d like to consider him a friend and I certainly respect
him and his work even though we frequently disagree around the
edges. The third author and presenter, Kathi Fisler was new to me.
&lt;/p&gt;
&lt;p&gt;
The Bootstrap program is embedded in algebra classes. In it, students
use Racket (nee scheme) to reinforce math skills while building
computer science skills. The big student project is a graphical game.
&lt;/p&gt;
&lt;p&gt;
When designing the project, students are asked to decide on and find
four resources:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
The background image
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The player image
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The target image
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The enemy image
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Students are given a short amount of time to decide on and find these
four images. I think it was about ten minutes and that&amp;#39;s it. That&amp;#39;s
all the &amp;#34;creativity&amp;#34; in the assignment. After that, all the students
are essentially creating the same game with different skins.
&lt;/p&gt;
&lt;p&gt;
This design makes sense. You can&amp;#39;t have students going all over the
place. Constraining the assignment in this way allows teachers who
might now be strong in computer science to guide the kids through the
program to completion.
&lt;/p&gt;
&lt;p&gt;
At the time I was thinking: I really like all of this but is it really
open ended creativity and discovery with respect to math or computer
science? As it turned out, Fisler addressed this point at the end of
the talk in a way that made me vary happy.
&lt;/p&gt;
&lt;p&gt;
Fisler went on to describe the rest of the student experience and then
went on to talk about the statistics they gathered.
&lt;/p&gt;
&lt;p&gt;
One big takeaway was that while all the students were essentially
writing the same game varying only the graphical elements, this
encouraged students to create very different themes. They also created
rich stories around their games. The project might not have been
&amp;#34;creative&amp;#34; with respect to the CS or Math directions but it was certainly
creative in other important areas. The other takeaway was that
survey&amp;#39;s indicated all sorts of positives from the program as a whole
so the project didn&amp;#39;t seem to have suffered by having the students
essentially write the same program. Participants were proud of their
work, they felt their games were different from their peers and in
general the experience was good.
&lt;/p&gt;
&lt;p&gt;
During questions, someone asked about adding a fifth element - a
projectile or missile. It turns out that at one point the program had a
projectile component but that led to the vast majority of projects to
be themed in very similar ways. Even though not the same, it reminded me to something Randy
Pausch said in his &lt;a href=&#34;https://www.youtube.com/watch?v=ji5_MqicxSo&#34;&gt;Last Lecture&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
You make whatever you want. Two rules: no shooting violence and no
pornography. Not because I’m opposed to those in particular, but you know, that’s been done with
VR, right? [laughter] And you’d be amazed how many 19-year-old boys are completely out of ideas
when you take those off the table.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
At the very end, Fisler addressed my questions about creativity and
discovery. She posed these questions of her own: &amp;#34;Do we overstate the
case for creativity?&amp;#34; and &amp;#34;Is pure constructivism a win?&amp;#34;
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve ranted on contructivism before. It can be great but a
constructivist lesson takes a knowledgeable educator and a lot of time,
preparation, and effort. It&amp;#39;s a big ask for, say, a high school
teacher who&amp;#39;s already taking home hours of work every evening. Too
often I&amp;#39;ve seen the following &amp;#34;contructivist&amp;#34; model instead:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Take an isntructor that doesn&amp;#39;t know their craft, the content, or
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
niether.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Let the kids play with stuff.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Show off the couple of autodidacts that figure it out as success
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
stories.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll rant more about this &amp;#34;model&amp;#34; with respect to the new buzz word
&amp;#34;lead learner&amp;#34; at some point in the future.
&lt;/p&gt;
&lt;p&gt;
On the creativity side, it&amp;#39;s important but there are also times for
the instructor to lead and for guidelines to be followed.
We want to foster creativity but that doesn&amp;#39;t mean that it&amp;#39;s 100%
creativity 100% of the time. Education is like life, a balance. The
Bootstrap program had to constrain the CS and math learning but
allowed for creativity in other areas. It&amp;#39;s smart and it&amp;#39;s a win.
&lt;/p&gt;
&lt;p&gt;
I still want to meet Shriram in person one day and now also Kathi
Fisler. I didn&amp;#39;t know what to expect walking in but I left the talk
reminded of why I&amp;#39;m such a fan of Emmanuel, his team, and their work.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sigcse2018 - Malloc Lab</title>
      <link>https://cestlaz.github.io/posts/sigcse2018-malloc-lab/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse2018-malloc-lab/</guid>
      <description>&lt;p&gt;
I wasn&amp;#39;t going to go to this session. I started out in a panel on
integrating social good into CS Ed. With the panel not meeting my
expectations I moved over to my second choice - the system programming
sessions where I saw &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3159597&#34;&gt;Implementing Malloc: Students and Systems
Programming&lt;/a&gt;, a paper presented by &lt;a href=&#34;http://www.cs.cmu.edu/~bpr/&#34;&gt;Brian Railing&lt;/a&gt; of CMU.
&lt;/p&gt;
&lt;p&gt;
I really liked both the paper and the talk.
&lt;/p&gt;
&lt;p&gt;
CMU computer science students all take a systems course that uses
&lt;a href=&#34;https://www.amazon.com/Computer-Systems-Programmers-Perspective-3/dp/9332573905/ref=pd_lpo_sbs_14_t_0?_encoding=UTF8&amp;amp;psc=1&amp;amp;refRID=Y5ZKG2V8ZYZZPZHQP8SQ&#34;&gt;Computer Systems: A Programmer&amp;#39;s Perspective&lt;/a&gt;. It&amp;#39;s a great book. I
read through the first edition years ago and felt it was great
resource not only in a systems course but also for self study. One of
the labs has the students implement their own memory allocation calls,
or &lt;strong&gt;malloc&lt;/strong&gt; for us old time C wonks.
&lt;/p&gt;
&lt;p&gt;
There were a number of self perceived  deficiencies with the
assignment such as encouraging bad programming style by modeling
less than ideal practices but the biggest deficiency as that students
could game the assignment. Students could do very well on the
assignment by exploiting knowledge of the assignment rather than by
writing a full and correct malloc implementation. One example is that
students were able to figure out that no allocation would be more than
100MB so they really didn&amp;#39;t have to deal with 64 bit pointers. They
could use smaller offsets thus simplifying the assignment. The
assignment became more about figuring out how to get it through the
grader and less about learning memory management. I&amp;#39;m sure I&amp;#39;m
overstating it but that&amp;#39;s the idea.
&lt;/p&gt;
&lt;p&gt;
Railing explained all of the deficiencies and then how they changed
the assignment to address them.
&lt;/p&gt;
&lt;p&gt;
At the end of the day, the assignment had fewer loopholes to game so
students had to really write the malloc library and presumably learn
about memory management.
&lt;/p&gt;
&lt;p&gt;
They also added an intermediate deliverable so students couldn&amp;#39;t leave
everything for the last minute.
&lt;/p&gt;
&lt;p&gt;
Near the end of the talk, Railing discussed results where he pointed
out that students final exam scores didn&amp;#39;t change but they did better
on the malloc questions. It wasn&amp;#39;t clear if the overall scores didn&amp;#39;t
change, meaning that the students did better on the malloc questions
but worse somewhere else or if they did similarly to past students on
the other sections and in addition they scored better on the malloc
questions. I&amp;#39;m not sold on the final exam questions being the best way
to evaluate learning but it is an easy data point.
&lt;/p&gt;
&lt;p&gt;
I loved the presentation and paper and I love what Railing is doing
but my big takeaway was…
&lt;/p&gt;
&lt;p&gt;
Well, Duh…
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
students aren&amp;#39;t doing as they should
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
teacher realizes students are gaming assignment
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
teacher reworks assignment
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
students do better
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Teachers do this all the time. Of course when we do it, it&amp;#39;s not
&amp;#34;research.&amp;#34; This was a recurring theme for me at SIGCSE2018 and I
tweeted it. While it&amp;#39;s true that K12 teachers can learn a lot about CS
content from higher ed, people in higher ed can learn a lot about
teaching from teachers.
&lt;/p&gt;
&lt;p&gt;
What Railing presented was terrific and important as changing
assignments like this will now be considered by people who haven&amp;#39;t
thought about this before but this is second nature to a teacher. Of
course I&amp;#39;m talking about a good teacher, not one who blindly follows
scripted lessons.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t mean this as a slight to professors. They&amp;#39;re hired and
promoted based on research so much of their job involves another skill
set. I know many professors who care very much about teaching but they
might only teach one or two classes a semester that meets once or
twice a week while a typical high school teacher meets 150 students a
day five days a week over five different classes a day.  Much more of
an opportunity for deliberate practice.
&lt;/p&gt;
&lt;p&gt;
This presents a huge challenge. How can professors who are hired and
promoted as researchers be given the time and ability to develop as
teachers? What about adjuncts or Teaching Assistants? I&amp;#39;d imagine it&amp;#39;s
even harder for them. I know that colleges have lines for teaching
faculty but from what I can see, those instructors are usually super
overloaded with classes and students so that doesn&amp;#39;t solve the
problem. Even if you do have teaching faculty that have the time to
develop their craft, how do you get those teaching chops over to the
research faculty?
&lt;/p&gt;
&lt;p&gt;
After the session, I was talking about this with &lt;a href=&#34;http://www.cs.cmu.edu/~mjs/&#34;&gt;Mark Stehlik&lt;/a&gt;,
Assistant Dean at CMU&amp;#39;s School of Computer Science. Mark was telling
me about CMU&amp;#39;s efforts to develop teaching faculty across the
disciplines. I was happy to hear about the efforts CMU was taking but
it sounds like they have the same challenges with respect to pedagogy
as everyone else. If it&amp;#39;s a challenge for CMU with all their
resources, what does that mean for the rest of us?
&lt;/p&gt;
&lt;p&gt;
Still, it was encouraging to go to a number of sessions where it was
clear that professors - both teaching and research faculty are serious
about the craft of teaching and conferences like SIGCSE can bring them
together with those of us who don&amp;#39;t have the chops as researchers but
do so as teachers.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tools can shape how we think</title>
      <link>https://cestlaz.github.io/posts/advent-2017-4-6/</link>
      <pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-2017-4-6/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been having fun with this years &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; competition. So
far, I&amp;#39;ve been able to keep up but with I expect that to change in
another couple of days since I&amp;#39;ll be traveling for the weekend.
&lt;/p&gt;
&lt;p&gt;
After solving a problem, I like looking over some of the other
solutions on the Advent of Code &lt;a href=&#34;https://www.reddit.com/r/adventofcode/&#34;&gt;subreddit&lt;/a&gt;. Even with similar
agorithmic solutions there&amp;#39;s a decent amount of variation in the
actual code and solutions in different languages can look radically
different.
&lt;/p&gt;
&lt;p&gt;
That got me thinking about how the tools we know and use both shape the ways we
approach solving problems and creating things and either limit or
empower us to go from a mental model of a solution or creation to an
actual artifact.
&lt;/p&gt;
&lt;p&gt;
Relating to this are the common themes that come up in the CS
Education world. The idea that it&amp;#39;s computer science not programming
and certainly not merely coding. That&amp;#39;s true but the tools and
languages we use shape the whole thinking part and can also give the
students a valuable practical tool that they can leverage to great
advantage in both future classes and work and life endeavors.
&lt;/p&gt;
&lt;p&gt;
I decided to do this rant as a video. I hope you enjoy it:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/x8cZgEogWNw&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allow=&#34;encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A new first language? What&#39;s the follow up plan?</title>
      <link>https://cestlaz.github.io/posts/first-language-changing/</link>
      <pubDate>Fri, 21 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/first-language-changing/</guid>
      <description>&lt;p&gt;
This morning, &lt;a href=&#34;https://twitter.com/guzdial&#34;&gt;Mark Guzdial&lt;/a&gt; wrote about Stanford possibly &lt;a href=&#34;https://computinged.wordpress.com/2017/04/21/cs-department-updates-introductory-courses-java-is-gone/&#34;&gt;moving away
from Java&lt;/a&gt; as their intro language. This comes on the heels of a
semi-regular thread on one of the lists I&amp;#39;m on asking about what
languages are used at assorted colleges around the country. Invariably
the Pascal -&amp;gt; C++ -&amp;gt; Java progression of APCS turns up in these
threads.
&lt;/p&gt;
&lt;p&gt;
There are plenty of arguments to be made both for and against pretty
much any language or platform. There&amp;#39;s no single best universal
answer. Each choice giveth and each choice taketh away.
&lt;/p&gt;
&lt;p&gt;
What I&amp;#39;m really curious about is who&amp;#39;s looking at intro languages in
the context of complete programs or even complete educations that
could span multiple institutions.
&lt;/p&gt;
&lt;p&gt;
Early language choices can make a big difference in engaging and
exciting newcomers but there are ramifications later on that few seem
to consider.
&lt;/p&gt;
&lt;p&gt;
Take the APCS change from C++ to Java. It removed memory management
from the first year course. It also simplified issues relating to
pass by value vs pass by reference (or, rather, passing address by
value), bought much more strongly into OOP and moved more towards
using built in implementations of data structures like Lists rather
than rolling your own.
&lt;/p&gt;
&lt;p&gt;
Removing memory management from the first year course in and of itself
isn&amp;#39;t a problem as long as it&amp;#39;s taught and taught effectively
somewhere later on. It could be argued that &amp;#34;memory is already covered
in our required systems course.&amp;#34; That could be the case, but there are
many concepts that kids don&amp;#39;t get the first time around. Is an
institution that covered memory management in CS1/2 and then came back
to it in a later Systems course giving their students the same
understanding now that they&amp;#39;ve eliminated the CS1/2 experience?
&lt;/p&gt;
&lt;p&gt;
What about OOP buy in. Personally, I&amp;#39;ve never been a big OOP fan but
that&amp;#39;s neither here nor there. What I have found is that depending on
how a student is exposed to programming in CS1/CS2 can have a big
influence on how they approach problems later. Did the move to Java
cause more of our students to try to use shoehorn OOP into a problem
that really shouldn&amp;#39;t be approached in an OOP manner?
&lt;/p&gt;
&lt;p&gt;
I suspect that the use of built in data structures has had a
negative impact. A few years after the switch to Java, I was talking
to a senior tech worker. He was having a bad day - interviewing
potential internees and full time engineers. My friend was complaining
that the kids couldn&amp;#39;t come up with solutions to what he thought were
pretty straightforward questions. He felt that had the kids actually
implemented algorithms like the nlogn sorts rather than just learning
java .sort method and just talking about the algorithm they&amp;#39;d be
better prepared. I&amp;#39;ve heard this sentiment repeated over and over
throughout the years.
&lt;/p&gt;
&lt;p&gt;
This is not to say that Java is a horrible language or horrible for
teaching - that&amp;#39;s another debate. The point is that you can&amp;#39;t just
look at the intro class and who it draws in. You have to consider how
it will prepare students for the next level and you have to look at
the big picture – will our students get everything they need by the
time they leave us.
&lt;/p&gt;
&lt;p&gt;
Many schools have moved to Python. Will that effect students take on
type systems later on? Will the flexibility and constructs like list
comprehensions make it harder to teach recursion since there are
&amp;#34;easier&amp;#34; ways to do it?
&lt;/p&gt;
&lt;p&gt;
None of these are really problems so long as the CS1/2 (or even CS0)
isn&amp;#39;t taught in a vacuum.
&lt;/p&gt;
&lt;p&gt;
I fear, however that too often we&amp;#39;re paying attention to the intake of
the pipe and not so much the output.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHub as a tool for education</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-github-4/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-github-4/</guid>
      <description>&lt;p&gt;
When I started using git and GitHub with my students it was a natural
progression having started with started with CVS and then, as
technology changed moving through Subversion and then Mercurial. It
was all about using sensible professional software development
techniques while making it easier for students to submit work and for
me to evaluate their submissions.
&lt;/p&gt;
&lt;p&gt;
Over time, I found that git and GitHub in fact provided some extra
support for educators right out of the box.
&lt;/p&gt;
&lt;p&gt;
In my &lt;a href=&#34;http://cestlaz.github.io/posts/sigcse-2017-github-3&#34;&gt;last github post&lt;/a&gt; I talked about using the results of &lt;code&gt;git log&lt;/code&gt;
and looking at diffs. Both provide ways of seeing what a student did
and when. The commit log and history make it easier to hold students accountable to working
through a project and not leavings for the last minute. The diffs make
it easier to see what&amp;#39;s changed both to see progress and also to help
support students as they develop their projects.
&lt;/p&gt;
&lt;p&gt;
If you use Emacs, as I do, you can use the &lt;a href=&#34;https://github.com/pidu/git-timemachine&#34;&gt;git timemachine&lt;/a&gt; package
which does a great job visualizing changes:
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/sigcse-github/timemachine.gif&#34; alt=&#34;/img/sigcse-github/timemachine.gif&#34; title=&#34;/img/sigcse-github/timemachine.gif&#34; align=&#34;center&#34;/&gt;
&lt;p&gt;
Other editors might have a similar feature.
&lt;/p&gt;
&lt;p&gt;
The contribution graphs also provide a quick snapshot which shows what
team members are contributing and when:
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/sigcse-github/githubgraph.png&#34; alt=&#34;/img/sigcse-github/githubgraph.png&#34; title=&#34;/img/sigcse-github/githubgraph.png&#34; align=&#34;center&#34;/&gt;
&lt;p&gt;
The punchcard graph is also useful to see when students actually do
their work.
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/sigcse-github/githubgraph2.png&#34; alt=&#34;/img/sigcse-github/githubgraph2.png&#34; title=&#34;/img/sigcse-github/githubgraph2.png&#34; align=&#34;center&#34;/&gt;
&lt;p&gt;
GitHub also make it easy to set up starter code or to have students
&amp;#34;take over&amp;#34; each others projects by forking.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m very happy using git and GitHub as is but if you want more
support, check out &lt;a href=&#34;https://classroom.github.com/&#34;&gt;GitHub Classroom&lt;/a&gt;. Had it existed when I started,
I&amp;#39;d probably have used it but since I had already gotten used to my
work flows I&amp;#39;ve stuck with raw git and github.
&lt;/p&gt;
&lt;p&gt;
In case you missed the earlier posts describing the process I use to
introduce github to my classes here they are:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/sigcse-2017-github-1&#34;&gt;Part 1&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/sigcse-2017-github-2&#34;&gt;Part 2&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/sigcse-2017-github-3&#34;&gt;Part 3&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I&amp;#39;m hoping some of you have found this set of four posts useful or at
least interesting.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A free multi-state clicker with built in redundency</title>
      <link>https://cestlaz.github.io/posts/thumb_clickers/</link>
      <pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/thumb_clickers/</guid>
      <description>&lt;p&gt;
Last Friday, &lt;a href=&#34;https://twitter.com/guzdial&#34;&gt;Mark Guzdial&lt;/a&gt; wrote about the woes of &lt;a href=&#34;https://computinged.wordpress.com/2017/03/31/the-need-for-better-software-and-systems-to-support-active-cs-learning/%0A&#34;&gt;using clickers&lt;/a&gt; in a
class. The amount of effort required to use his school&amp;#39;s approved
clicker technology sounds ridiculous so while we need tools to better
engage students in large class settings we need better tools that can
be integrated into our classes more easily.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve never used clickers. On top of stories like Mark&amp;#39;s, there are  a
number of problems with using clickers in a public school.
&lt;/p&gt;
&lt;p&gt;
You can&amp;#39;t force students to buy them and in NYC, until recently,
students couldn&amp;#39;t use their phones (which they also might not have).
Forgetting the expense, if the school provides them, is it one per
student? If so, who&amp;#39;s going to administer the clicker to student
mapping and how will that be communicated to the teachers. If college
tech infrastructures are sometimes lacking, high schools are orders of
magnitudes worse. The resources just aren&amp;#39;t there. Then we have to
deal with loss and breakage.
&lt;/p&gt;
&lt;p&gt;
If a teacher somehow gets a class set of clickers, they have to deal
with mapping clickers to students for all of their classes and make
sure the right student has the right clicker. Again, loss  and
breakage is a problem.
&lt;/p&gt;
&lt;p&gt;
Then you have to create the question content and hope that everything
works in class.
&lt;/p&gt;
&lt;p&gt;
The value added given the overhead just doesn&amp;#39;t seem worth it
particularly since high school classes, while large, are not in the
hundreds and there are other methods of student engagement.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what I use instead. It&amp;#39;s not perfect but it&amp;#39;s low cost and low
effort with a pretty high return.
&lt;/p&gt;
&lt;p&gt;
The basic configuration, is a simple three state broadcast device.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s not without its problems and I don&amp;#39;t think it would work as well
in a large lecture but given the cost, it&amp;#39;s well worth it.
&lt;/p&gt;
&lt;p&gt;
So, what is it?
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/thumbs/fonzup.jpg&#34; alt=&#34;/img/thumbs/fonzup.jpg&#34; title=&#34;/img/thumbs/fonzup.jpg&#34; align=&#34;center&#34;/&gt;
&lt;p&gt;
Thumbs.
Periodically, I&amp;#39;ll poll my class.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;span&amp;gt;
&amp;lt;img width=&amp;#34;30%&amp;#34;src=&amp;#34;file:/img/thumbs/sidethumb.png&amp;#34;&amp;gt;
&amp;lt;img width=&amp;#34;30%&amp;#34; src=&amp;#34;file:/img/thumbs/upthumb.jpg&amp;#34;&amp;gt;
&amp;lt;img width=&amp;#34;30%&amp;#34; src=&amp;#34;file:/img/thumbs/downthumb.jpg&amp;#34;&amp;gt;
&amp;lt;/spam&amp;gt;
&lt;/p&gt;
&lt;p&gt;
Thumb to the side? Everything&amp;#39;s OK. Keep going as you&amp;#39;re going. I get
it. Basically, things are good.
&lt;/p&gt;
&lt;p&gt;
Thumb up? Speed up, you&amp;#39;re going too slow, I got it five minutes ago or
some similar big positive.
&lt;/p&gt;
&lt;p&gt;
Thumb down? I have no idea what you&amp;#39;re talking about.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s cheap, easy, quick, and once you can get your class to buy in,
you can get a quick sense of the class.
&lt;/p&gt;
&lt;p&gt;
The downsides?
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
The class has to have a level of comfort so that students vote
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
honestly and don&amp;#39;t just give you positive feedback.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
No data collection.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The upsides?
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
quick
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
cheap
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
works on any topic on the fly
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
even if the votes are artificially skewed towards positive, it does
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
forces the class to be at least a little attentive and to engage in
some physical response
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
can get analog responses by allowing students to adjust wrist
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
rotation
&lt;/p&gt;
&lt;p&gt;
As to the redundancy? I&amp;#39;ve never had a kid leave their thumb at home
or lose it and even if they did, they&amp;#39;ve got a second hand.
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/thumbs/fonztwo.jpg&#34; alt=&#34;/img/thumbs/fonztwo.jpg&#34; title=&#34;/img/thumbs/fonztwo.jpg&#34; align=&#34;center&#34; height=&#34;200&#34;/&gt;
&lt;p&gt;
This also works in extreme environments. Try using a clicker or mobile
app with gloves or mittens on or underwater.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t teach large lectures so I don&amp;#39;t know how this would work in a
huge class. I&amp;#39;d imagine it&amp;#39;s still worth it given that it&amp;#39;s so low
friction and low cost of entry even if it&amp;#39;s not perfect.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2016 #2</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016-2/</link>
      <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016-2/</guid>
      <description>&lt;p&gt;
Today we&amp;#39;re looking at &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; 2016 &lt;a href=&#34;http://adventofcode.com/2016/day/2&#34;&gt;number 2&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
To change things up, I thought I&amp;#39;d do a video where I live code a solution.
&lt;/p&gt;
&lt;p&gt;
The solution I present is pretty straightforward - use a 2D array (or
technically, an array of strings) to represent the keypad, parse the
input, and follow the input instructions to build the code.
&lt;/p&gt;
&lt;p&gt;
One of the things I really like about Advent of Code is that every
problem has two parts and depending on how you solved part 1, you may
or may not have extra work to do for part 2.
&lt;/p&gt;
&lt;p&gt;
A couple of years ago, I wrote about one of the coding techniques I
try to convey to my students. The idea of &lt;a href=&#34;http://cestlaz.github.io/posts/2014-02-26-change-the-data.md&#34;&gt;changing the data&lt;/a&gt; to take
away edge and special cases.
&lt;/p&gt;
&lt;p&gt;
Part two of this problem is a perfect time to use that technique.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the video, I hope you enjoy it:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/EC8gSrYQ11g&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2016 #1</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016-1/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016-1/</guid>
      <description>&lt;p&gt;
I recently &lt;a href=&#34;http://cestlaz.github.io/posts/advent-of-code-2016/&#34;&gt;posted&lt;/a&gt; about &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; - a series of programming
problems relseased one a day. While they vary in terms of level of
difficulty, a number of them make nice problems for introductory to
mid level programming classes.
&lt;/p&gt;
&lt;p&gt;
I thought I&amp;#39;d share some of my thoughts on a few of them starting with
the first problem from this years competition.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;http://adventofcode.com/2016/day/1&#34;&gt;Take a minute to read it over.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
At first glance, it might seem to a young programmer that this problem
requires a two dimensional array - all about (x,y) coordinates but
then there&amp;#39;s a problem - there are no limits on coordinates and we
can&amp;#39;t make an unlimited size array.
&lt;/p&gt;
&lt;p&gt;
After thinking a bit, hopefully the programmer realizes that all they
need to do is keep track of the how the &lt;strong&gt;&lt;strong&gt;(x,y)&lt;/strong&gt;&lt;/strong&gt; location changes over
time. In the solution below, we start at &lt;strong&gt;&lt;strong&gt;(0,0)&lt;/strong&gt;&lt;/strong&gt; and count the steps as
we update two variables &lt;strong&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;y&lt;/strong&gt;&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
When we finish processing the moves, we have our current location in
&lt;strong&gt;&lt;strong&gt;(x,y)&lt;/strong&gt;&lt;/strong&gt; and we have the number of steps taken to get there.
&lt;/p&gt;
&lt;p&gt;
The solution below hsa a couple of niceties that a beginning
programmer might not know or use (and I&amp;#39;m not arguing that what&amp;#39;s written is
superior in any way, it&amp;#39;s just what I ended up writing).
&lt;/p&gt;
&lt;p&gt;
I make use of tuple destructuring:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
which assigns &lt;strong&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/strong&gt; to the first item in the tuple and &lt;strong&gt;&lt;strong&gt;y&lt;/strong&gt;&lt;/strong&gt; the
second. I used that a number of times
&lt;/p&gt;
&lt;p&gt;
I also use a list  I call &lt;strong&gt;&lt;strong&gt;dirs&lt;/strong&gt;&lt;/strong&gt; to hold dx and dy values for the
four direcitons:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This made it easier to to update the location based on the 4
directions. I could also have just used if statements.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s all the code:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Overall, a nice little problem for beginning and intermediate
students.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Term, New Tool - repl.it</title>
      <link>https://cestlaz.github.io/posts/new-term-new-tool-repl.it/</link>
      <pubDate>Fri, 02 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/new-term-new-tool-repl.it/</guid>
      <description>&lt;p&gt;
We&amp;#39;re now a week in to my first class at Hunter. It&amp;#39;s a little early
for me to really compare and contrast the high school to college
experience but I thought I&amp;#39;d share some thoughts on a tool that I&amp;#39;ve
recently started to play with.
&lt;/p&gt;
&lt;p&gt;
My students were all supposed to be issued laptops at the beginning of
the semester. The plan was to have them learn Linux, the command line,
and a little DevOps along the way. I guess I shouldn&amp;#39;t have been too
surprised to learn that the laptops weren&amp;#39;t going to come in until
late September.
&lt;/p&gt;
&lt;p&gt;
Scratch all that advance lesson planning. A brief scramble and I was
able to relocate the class into a computer lab but now we can&amp;#39;t
customize the kids environments.
&lt;/p&gt;
&lt;p&gt;
Time to look for an online solution.
&lt;/p&gt;
&lt;p&gt;
We&amp;#39;re starting the kids off in Python, a choice that I&amp;#39;ll talk about
in some future post and normally my online go to for Python is
&lt;a href=&#34;http://codesters.com&#34;&gt;codesters.com&lt;/a&gt;. I&amp;#39;m a big fan of the codesters team and product. This
time, though, I decided to try something else. Specifically &lt;a href=&#34;http://repl.it&#34;&gt;repl.it&lt;/a&gt;. Partly because, as with
codesters, I like the people behind it. It&amp;#39;s also pretty simple and it
supports a lot of different languages:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
APL, ES2015 ,Bloop, BrainF, C, CoffeeScript, C++, C++11, C#, Emoticon,
Forth, F#, Go, Java, JavaScript, LOLCODE, Lua, Nodejs, PHP, Python,
Python3, QBasic, Roy, Ruby, Rust, Scheme, Swift, Unlambda, and HTML, CSS, JS
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It&amp;#39;s still a pretty new product so there are occasional hiccups but
I&amp;#39;m really liking things so far. Some of the things I like include:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
a simple clean interface.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
sharing and embedding code:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&amp;lt;script src=&amp;#34;//repl.it/embed/DF3m/19.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
project mode which allows multi file projects
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
examples to get you started
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
But the thing I&amp;#39;m really liking are the teacher features they&amp;#39;re
working on. The teacher interface isn&amp;#39;t fancy. I like that. Things are
simple and clean and they let me get the job done.
&lt;/p&gt;
&lt;p&gt;
I had two extra minutes in class yesterday and in that time, I was
able to:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Make a classroom
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Invite all my students by email
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Create 2 quick assignments.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
The assignment page lets you give starter code as well as instructions
and it also lets you put in tests that are run when a student submits
their work for instant feedback.
&lt;/p&gt;
&lt;p&gt;
I really like the tests feature on projects. So far, I&amp;#39;ve only played
with Python unit tests. Repl.it uses a really easy to follow
interface and has a sample test to guide you. There&amp;#39;s also an option
for input/output matching which includes flexible matching and regular
expressions but I haven&amp;#39;t played with it yet.
&lt;/p&gt;
&lt;p&gt;
Overall, I&amp;#39;m liking this tool. When the kids get their laptops we&amp;#39;ll
probably use it somewhat less as they start to learn to use their own
systems but I&amp;#39;m glad to have repl.it in my teaching arsenal.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lesson plans - scripts to springboards</title>
      <link>https://cestlaz.github.io/posts/lesson-plans/</link>
      <pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/lesson-plans/</guid>
      <description>&lt;p&gt;
I spent last Saturday up at the Microsoft offices in Times Square
observing a &lt;a href=&#34;https://www.tealsk12.org/&#34;&gt;TEALS&lt;/a&gt; training session. My fried &lt;a href=&#34;https://twitter.com/nathanielgranor&#34;&gt;Nathaniel Granor&lt;/a&gt;, Teals
Regional Manager in the east has invited me a number of times and this
time I was able to make it.
&lt;/p&gt;
&lt;p&gt;
If you don&amp;#39;t know, TEALS is a program that takes volunteers in the
tech industry and places them in classrooms. Unlike other programs,
the TEALS volunteers work with the teachers while the kids learn some
CS. The idea is that the teacher will learn about CS from the
volunteer and the volunteer will learn something about teaching.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s not the same as having a strong, knowledgeable CS teacher in the
classroom but until we get there, TEALS is doing great work giving
kids something that they need and otherwise wouldn&amp;#39;t get.
&lt;/p&gt;
&lt;p&gt;
At one point, Nathaniel started to talk to the volunteers about lesson
plans emphasizing the fact that TEALS would provide all the lesson materials and
the plans so these new to teaching tech volunteers wouldn&amp;#39;t have to
make curricular decisions.
&lt;/p&gt;
&lt;p&gt;
The lesson plan form was pretty traditional and pretty formulaic:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
warm up
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
hook
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
instruction
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
practice
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Assessment
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Very similar to what I was shown back in the day during my two day
&amp;#34;teaching boot camp&amp;#34; that kicked off my career [fn:: full disclosure: I
came in to teaching with zero education credentials and took the
minimum number of ed classes for my license after I started.] and very
appropriate as an effective and efficient way to prepare these
volunteers for their first days.
&lt;/p&gt;
&lt;p&gt;
This got me thinking about my lesson planning over the years.
&lt;/p&gt;
&lt;p&gt;
When I started, I was teaching math but I wasn&amp;#39;t really a math
guy - I was CS all the way. I had to remember the math from high
school, learn the new topics, and figure out how to teach it.
&lt;/p&gt;
&lt;p&gt;
I had a very supportive department but they were busy with their own
classes and this was pre internet. Fortunately, the NYC DOE published
lesson plan books. They were basically bound volumes of xerox copies
of hand written and typed lesson plans provided by experienced
teachers.
&lt;/p&gt;
&lt;p&gt;
I spent many hours copying them, studying  them, and then later
tweaking them.
&lt;/p&gt;
&lt;p&gt;
They were a life saver back then. How was the teaching? OK. Not
great. I got the material to the kids but I was nothing special. This
is where I started to form my bias against the scripted teaching
that&amp;#39;s being pushed down today.
&lt;/p&gt;
&lt;p&gt;
As I developed my chops, I started to design my own experiences for my
classes and things improved. By the time I was done teaching math -
maybe 4 years in, I was just scratching the surface of being a math
teacher.
&lt;/p&gt;
&lt;p&gt;
One year in, I started teaching CS along with math at Seward
Park. When I was bumped to Stuy, I went back to math for  a year and a
half and then it was all CS all the time.
&lt;/p&gt;
&lt;p&gt;
For CS, we didn&amp;#39;t have lesson plan books so I had to craft everything
from scratch. It was a lot of work but the results were much better.
&lt;/p&gt;
&lt;p&gt;
At first, I would actually write out lesson plans a la math lesson
plans. A &amp;#34;do now,&amp;#34; &amp;#34;instructional objectives,&amp;#34; &amp;#34;applications,&amp;#34;
&amp;#34;Homework,&amp;#34; etc. The only thing I never formally wrote out was a
&amp;#34;medial summary.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
Over time, my lessons got better but my lesson plans looked worse and
worse.
&lt;/p&gt;
&lt;p&gt;
There were times a lesson plan might look something like this:
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/lesson-plans/plan.jpg&#34; alt=&#34;/img/lesson-plans/plan.jpg&#34; title=&#34;/img/lesson-plans/plan.jpg&#34; align=&#34;center&#34;/&gt;
&lt;p&gt;
OK, not exactly but as I developed at my craft, I didn&amp;#39;t need a laid
out script to follow line for line  rather, just a set of little
reminders and maybe some printed out code. If we were going to develop
a complicated algorithm or derivation, though, I would still write out
all the steps.
&lt;/p&gt;
&lt;p&gt;
This doesn&amp;#39;t mean that as my career progressed I planned any less. It
might appear that I&amp;#39;m winging it but even if little to nothing is
written down, there is a plan and there&amp;#39;s always a lot of pre work
before class begins.
&lt;/p&gt;
&lt;p&gt;
Now, to bring this back to TEALS.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s interesting how what&amp;#39;s good in one context is not so much in
another.
&lt;/p&gt;
&lt;p&gt;
What TEALS is doing is great - they&amp;#39;ve got to get a lot of
technologists in to classrooms quickly but once there, they&amp;#39;ll be with
real, hopefully experienced teachers. What they&amp;#39;re doing gets them
ready to go. It&amp;#39;s a starting point, not an end.
&lt;/p&gt;
&lt;p&gt;
On the other hand, when I see scripted curriculum being sold as the
special sauce, be it in CS teacher &amp;#34;training,&amp;#34; Teach for America
summer prep or in the name of charter school uniformity, I run the
other way.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s prepare curricular  materials for important programs like TEALS
and for beginning teachers just starting out but let&amp;#39;s not confuse a
scripted lesson that can be delivered by one and all to be anything
close to the work of a master educator and craftsman.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Robots platforms and practicalities</title>
      <link>https://cestlaz.github.io/posts/robot-survey/</link>
      <pubDate>Wed, 15 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/robot-survey/</guid>
      <description>&lt;p&gt;
I received an email from a friend the other day asking me about a
particular robotics platform she recently saw.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve played with robotics on and off over the years ranging from
building them from (not using) scratch using Atmel chips and programming them in
assembly to using Arduino based platforms to using pre-built robot
platforms. They&amp;#39;re really cool and since they interact with the real
world you can do all sorts of interesting and motivational things with students.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve done these on my own as a hobbyist and also with students either
individually or in small groups, but never as part of a class I had
been teaching.
&lt;/p&gt;
&lt;p&gt;
Why not?
&lt;/p&gt;
&lt;p&gt;
The biggest reason is that the classes I&amp;#39;ve taught are already so
packed full of CS goodness that we can&amp;#39;t even get everything done
that&amp;#39;s theoretically on the syllabi.
&lt;/p&gt;
&lt;p&gt;
The other has to do with practical concerns.
&lt;/p&gt;
&lt;p&gt;
Equipment costs - Let&amp;#39;s say we can get our platform at $100 a pop. I
just can&amp;#39;t see a public school with 34 kids in a class getting one per
student or one for every two.
&lt;/p&gt;
&lt;p&gt;
So, what&amp;#39;s the robot to student ratio and how much actual access do
the kids get? If they&amp;#39;re designing  building, do they all get to
design and build? Same question with coding and operating.
&lt;/p&gt;
&lt;p&gt;
Then there&amp;#39;s space – if we&amp;#39;re talking about a mobile platform as
opposed to something that sits on the desk and is near stationary, we
have a problem. The classrooms I&amp;#39;ve taught in can barely hold the
students.
&lt;/p&gt;
&lt;p&gt;
There are also issues with breakage, loss, theft and long term
maintainability - will we be able to or even want to fill in with
compatible units in a few years as needed or will we have to reboot
the program from scratch.
&lt;/p&gt;
&lt;p&gt;
All that to deal with before we even get to the fun of teaching and learning.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m really curious about the experiences of those of you who do teach
using robots and similar platforms.
&lt;/p&gt;
&lt;p&gt;
If you are such a teacher, could you please fill out this form or
leave a comment for anything that the form doesn&amp;#39;t cover?
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe src=&amp;#34;&lt;a href=&#34;https://docs.google.com/forms/d/1FlppDbeiK8uPxh_RkXoCbbdE_UDY_4qXmZWbXlZ0gGg/viewform?embedded=true&#34;&gt;https://docs.google.com/forms/d/1FlppDbeiK8uPxh_RkXoCbbdE_UDY_4qXmZWbXlZ0gGg/viewform?embedded=true&lt;/a&gt;&amp;#34; width=&amp;#34;760&amp;#34; height=&amp;#34;500&amp;#34; frameborder=&amp;#34;0&amp;#34; marginheight=&amp;#34;0&amp;#34; marginwidth=&amp;#34;0&amp;#34;&amp;gt;Loading…&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Navajo Math Circles</title>
      <link>https://cestlaz.github.io/posts/navajo-circles/</link>
      <pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/navajo-circles/</guid>
      <description>&lt;p&gt;
Yesterday, I saw the New York Premiere of &lt;a href=&#34;http://www.zalafilms.com/navajo/&#34;&gt;Navajo Math Circles&lt;/a&gt;, a
documentary on a &lt;a href=&#34;http://www.mathcircles.org/&#34;&gt;Math Circle&lt;/a&gt; put in place to support and enrich the
currently under-served community in the Navajo educational system.
&lt;/p&gt;
&lt;p&gt;
At their core, Math Circles are math outreach and enrichment
programs. I&amp;#39;m most familiar with the &lt;a href=&#34;https://www.nymathcircle.org/&#34;&gt;New York Math Circle&lt;/a&gt;. I&amp;#39;m friends
with many of their teachers and organizers and my son took part in
their summer program for a couple of years.
&lt;/p&gt;
&lt;p&gt;
Over in the southwest, these Math Circles have been bringing together
students, frequently across great distances each day to explore
problem solving and creativity through mathematics.
&lt;/p&gt;
&lt;p&gt;
As someone who&amp;#39;s worked hard to bring educational opportunities to the
have nots, I love the program. Some of the highlights include the kids
working on open ended problems, focusing on process and techniques
more than specific results, working both collaboratively but also
developing self sufficiency, and more. I also love the fact that
they&amp;#39;ve started teacher math circles to help to bring some of that
math circle magic to the everyday classroom.
&lt;/p&gt;
&lt;p&gt;
I enjoyed the film and recommend you check it out to see what&amp;#39;s
possible and I want to share my two big takeaways.
&lt;/p&gt;
&lt;p&gt;
First, early on in the film, one of the people running the program
talked about developing a math enrichment program through and with
Navajo traditions and culture. This is HUGE and I feel it&amp;#39;s something
we&amp;#39;re losing. America is so diverse from coast to coast and here in
New York City you can see radically different ways of life living
right across the street from each other. Everyone pays lip service to
&amp;#34;making the work interesting and relevant to the student&amp;#34; but few
people walk the walk. These folk do.
&lt;/p&gt;
&lt;p&gt;
Second, I left the documentary with a sour taste in my mouth. Not
because of the program but because the Navajo Math Circle project and
projects like it are scraping together what little resources they can
to try to do what the school systems should be doing to begin with.
&lt;/p&gt;
&lt;p&gt;
As we move to scripted lessons, national standards, curricula dictated
or at least influenced by large private concerns and standardized
tests, our schools are moving further and further away from community
and local culture.
&lt;/p&gt;
&lt;p&gt;
In the documentary, one student pointed out that in math class, they
have to use the textbook. They learn the process and then have to
solve the problems. In Math Circle, there are no textbooks.
&lt;/p&gt;
&lt;p&gt;
Afterwards, the students in from the Math Circle did some Q&amp;amp;A. I asked
them to elaborate - what&amp;#39;s the difference between there Math Circle
experiences and their in school ones. I got:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Math Circle is fun!!!!
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I think that says it all.
&lt;/p&gt;
&lt;p&gt;
I know many great teachers who try to bring culture and community to
their classes. One of my son&amp;#39;s best teachers, &lt;a href=&#34;http://www.heinemann.com/authors/828.aspx&#34;&gt;Paula Rogovin&lt;/a&gt; did it all
the time. Many of my friends and colleagues try to do so as well but
the powers that be make it harder and harder.
&lt;/p&gt;
&lt;p&gt;
Until we win back public education it&amp;#39;s important to support programs
like Math Circles (and, if I do say so myself, programs like our own
&lt;a href=&#34;http://cstuy.org&#34;&gt;CSTUY&lt;/a&gt;) and it&amp;#39;s also critical that we work to try to bring community
and culture to our regular classes.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>As curricula changes, what&#39;s falling through the cracks?</title>
      <link>https://cestlaz.github.io/posts/semaphores/</link>
      <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/semaphores/</guid>
      <description>
&lt;h2 id=&#34;headline-1&#34;&gt;
Edit:
&lt;/h2&gt;
&lt;p&gt;
Just a brief note to clarify a couple of things. As indicated in the
comments, this post isn&amp;#39;t  about what&amp;#39;s appropriate for HS CS. It&amp;#39;s
more about what kids have after they finish their education - be it
high school, college, code school, or other.
&lt;/p&gt;
&lt;p&gt;
Some of my thoughts are the results of pondering on the exacerbations
of friends after interviewing people for entry level positions.
&lt;/p&gt;
&lt;p&gt;
The two examples are just to illustrate the point.
&lt;/p&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Original Post:
&lt;/h2&gt;
&lt;p&gt;
I enjoy reading blogs. It&amp;#39;s one of the ways I keep current. Not only
in terms of what&amp;#39;s going on in CS Education, but also trends in CS -
academic or professional as well as on a range of other topics.
&lt;/p&gt;
&lt;p&gt;
One of the blogs I enjoy is authored by &lt;a href=&#34;https://twitter.com/b0rk&#34;&gt;Julia Evans&lt;/a&gt;. I don&amp;#39;t know
Julia, but we do have some mutual friends. I&amp;#39;ve enjoyed her &lt;a href=&#34;http://jvns.ca&#34;&gt;blog&lt;/a&gt;. She
does a nice job talking about any number of systems related
issue. I&amp;#39;ve tried to leave comments a few times but for some reason,
my comments always end up deleted or otherwise not showing up.
&lt;/p&gt;
&lt;p&gt;
One recent post, one on &lt;a href=&#34;http://jvns.ca/blog/2016/03/29/thread-pools-part-ii-i-love-blocking/&#34;&gt;concurrency&lt;/a&gt; got me thinking. Since the comment
I left there didn&amp;#39;t take, I thought I&amp;#39;d write about it here.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s a nice post but the thing that caught my eye was when Julia
said that she &amp;#34; didn&amp;#39;t know what a semaphore was until I read this
code and I was like OH THIS IS AMAZING AND SO USEFUL AND WOW.&amp;#34; I was a
little surprised, semaphores seem to be one of those basic concepts
that you just know but that is, of course incorrect. I first learned
about semaphores in my honors Systems class with my mentor, the late
&lt;a href=&#34;https://en.wikipedia.org/wiki/Robert_Dewar&#34;&gt;Robert Dewar&lt;/a&gt;. We started from test and set and worked our way up. I
had two other undergraduate classes that at least mentioned the topic.
&lt;/p&gt;
&lt;p&gt;
Then again, I knew that many undergrads would never get a good
treatment of concurrency so I tried to build a bit in to the System
Level Programming  course I designed while at Stuy.
&lt;/p&gt;
&lt;p&gt;
This got me thinking - according to her linked in, Julia was a CS
major at McGill - a university that I hold in high regard but either
semaphores were never covered or their treatment didn&amp;#39;t make enough of
an impact to be worth remembering. What topics do we cover in our
classes that kids just let fall to the wayside and what topics do we
end up losing as curricula change and we don&amp;#39;t have an eye on the big
picture.
&lt;/p&gt;
&lt;p&gt;
One big one is memory management. When APCS and college 101 classes
went to Java, memory management went out the window. Not a problem, as
long as memory issues are covered in some other course. Unfortunately
the don&amp;#39;t seem to be. You can make a case that kids don&amp;#39;t need to
understand memory management or anything about garbage collection but
I&amp;#39;d argue that while one might never have to do their own memory
management a good CS person should have some understanding of what&amp;#39;s
going on under the hood or as my friend Gerry says &amp;#34;never use a
technology you couldn&amp;#39;t write yourself.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
Another biggie that I lived through was the IBM PC era. Prior to the
mid to late 80&amp;#39;s when the IBM PC ruled the world, kids learned about
CS on timesharing systems. Once the PC took hold, every kid learning
programming or studying CS was working on their own machine. They had
full access to everything and the machine just supported a single
thread.
&lt;/p&gt;
&lt;p&gt;
On the one hand, it was nice since you could easily play with low
level programming and hardware but on the other hand, a hole
generation didn&amp;#39;t learn about the complexities of multiple users and
multiple processes.
&lt;/p&gt;
&lt;p&gt;
Early in my career I designed courses and only later did I realize
that you can&amp;#39;t just design a course, you have to look at the full arc
of a students education.
&lt;/p&gt;
&lt;p&gt;
I think it&amp;#39;s interesting to think about what concepts are getting left
on the side of the road and I wonder if the big players driving CS
education spend any time thinking about this bigger picture.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IDE or the Cloud</title>
      <link>https://cestlaz.github.io/posts/2016-04-12-ide-or-cloud/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-04-12-ide-or-cloud/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;
&lt;div id=&#34;outline-container-orgheadline1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline1&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline1&#34;&gt;
&lt;p&gt;
This weekend, I had a conversation on Twitter with my friend &lt;a href=&#34;https://twitter.com/roybahat&#34;&gt;Roy Bahat&lt;/a&gt;:
&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/zamansky&#34;&gt;@zamansky&lt;/a&gt; Mike, unrelated, what do you think of &lt;a href=&#34;https://t.co/BT1ublbajF&#34;&gt;https://t.co/BT1ublbajF&lt;/a&gt; ?&lt;/p&gt;&amp;mdash; Roy Bahat (@roybahat) &lt;a href=&#34;https://twitter.com/roybahat/status/718835740738650112&#34;&gt;April 9, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/roybahat&#34;&gt;@roybahat&lt;/a&gt;Maybe I&amp;#39;ll blog about my thoughts about online environments vs local installs&lt;/p&gt;&amp;mdash; Mike Zamansky (@zamansky)
&lt;a href=&#34;https://twitter.com/zamansky/status/718837282334240768&#34;&gt;April 9, 2016&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/roybahat&#34;&gt;@roybahat&lt;/a&gt; Agree with this but there are many issues. I&amp;#39;ll try to write more later. Now going to see my son in &lt;a href=&#34;https://twitter.com/umgass&#34;&gt;@umgass&lt;/a&gt; prod of Pinafore.&lt;/p&gt;&amp;mdash; Mike Zamansky (@zamansky) &lt;a href=&#34;https://twitter.com/zamansky/status/718838508689993728&#34;&gt;April 9, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;
Another friend had just asked me about IDEs vs local installs for learning enviromnents the day before.
&lt;/p&gt;

&lt;p&gt;
So, should we use cloud based IDEs when teaching CS or should we use
local installs.
&lt;/p&gt;

&lt;p&gt;
There isn&#39;t a single right answer but I thought I&#39;d share some of my thoughts here.
&lt;/p&gt;

&lt;p&gt;
I&#39;m hoping this is helpful to both those of us in the trenches as well
as maybe some platform developers out there.
&lt;/p&gt;

&lt;p&gt;
Some times, you don&#39;t have a choice.
&lt;/p&gt;

&lt;p&gt;
On the web based side, does your school have the bandwidth. We&#39;re not
only talking about the pipe to the outside world but also &lt;a href=&#34;http://www.nytimes.com/2016/01/14/nyregion/bronx-science-bans-cellphones-from-wi-fi-as-students-devour-it.html?_r=0&#34;&gt;wifi within
the school&lt;/a&gt;.  If kids can&#39;t reliably get to the web based environment,
it&#39;s not a viable option. On the other hand, cloud based software will
always be up to date and properly configured and kids can use them
from home or pretty much anywhere they have a connection.
&lt;/p&gt;

&lt;p&gt;
On the other side we have local installs. This can also present
problems. Is the teacher allowed to install locally? Does he or she
know how to do it? Who&#39;s going keep all the machines up to date and configured?
&lt;/p&gt;

&lt;p&gt;
Assuming we can get past the technical issues we can start looking at
the education side of thing.
&lt;/p&gt;

&lt;p&gt;
On the web based side, you&#39;ve got a silo. This can be both good and
bad. In an intro class, using a tool like &lt;a href=&#34;http://codesters.com&#34;&gt;Codesters&lt;/a&gt; can keep the cost
of entry low, allow students to share work online and allow teachers
to make use of their curricular materials. If you can&#39;t tell, I&#39;m a
big fan of Codesters and the Codesters team. The limitation is that
you have to use their simplified interface and toolset.
&lt;/p&gt;

&lt;p&gt;
Some web based IDEs like &lt;a href=&#34;http://koding.com&#34;&gt;Koding&lt;/a&gt; offer more flexibility - one tool with
many languages as well as deployment. The cost is complexity. With
Koding, you&#39;re basically running a virtual machine in the
cloud. You&#39;ve got their web based IDE and a terminal shell so it&#39;s not
as complex as doign everything from scratch locally but it&#39;s not as
structured as Codesters and is more of a general purpose site rather
than one focussed soley on learning.
&lt;/p&gt;

&lt;p&gt;
Then you have &lt;a href=&#34;http://repl.it&#34;&gt;repl.it&lt;/a&gt;. This looks to be a great platform for
experienced programmers to play with and explore new languages but I&#39;d
be concerned about using it with beginners. It looks like they&#39;re
rolling out some teacher tools so this might be worth revisiting soon.
&lt;/p&gt;

&lt;p&gt;
In any case and with other web based products, you&#39;re living in the
providers silo.
&lt;/p&gt;

&lt;p&gt;
Personally, I&#39;m a command line wonk and confessed Emacs geek so I&#39;m
generally wary of an online environment without an exit strategy to
real world tools. Eventually, if all development moves into the
browser as platform then this problem goes away, but for now, you&#39;re
not going to have the expressive power and flexibility that a local
install gives.
&lt;/p&gt;

&lt;p&gt;
Local installs let you use more powerful and flexible tools either
alone or in combination.
&lt;/p&gt;

&lt;p&gt;
Keeping kids out of silos also makes it easier for them to learn new
tools, languages, and techniques.
&lt;/p&gt;

&lt;p&gt;
Since I like generic tools, I&#39;m not a fan of big professional IDEs
like Eclipse. I&#39;m an Emacs geek but Atom, Sublime Text, and Vim are
all good as well.
&lt;/p&gt;

&lt;p&gt;
There are also an assortment of beginner IDEs like Dr. Racket and I&#39;m
a fan with these for beginners as long as there&#39;s an exit strategy.
&lt;/p&gt;

&lt;p&gt;
For completeness, I should mention that if I weren&#39;t an old school
Emacs guy, I might check out something like JetBrain&#39;s IDEs. They&#39;re
much lighter weight than something like Eclipse but still full
featured. Somewhere between a true general purpose, customizable,
programmable editor and an all encompassing IDE.
&lt;/p&gt;


&lt;p&gt;
In general, I use online enviromnents with my classes early on when:
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;They&#39;re pretty much identical or equivalent to the installed version.&lt;/li&gt;
&lt;li&gt;They provide some value added (&lt;a href=&#34;http://codingbat.com&#34;&gt;codingbat&lt;/a&gt; for example) so they&#39;re not
being used as a development environment but for some other purpose.&lt;/li&gt;
&lt;li&gt;They help with student collaboration (such as cloud9 or Koding.com
for more advanced kids).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
In any case, it&#39;s imporant that our kids aren&#39;t locked into any IDE be
it web based or local.
&lt;/p&gt;

&lt;p&gt;
Our kids that go on to more advanced CS studies will certainly need to
break out of sheltered world of a learning IDE and we&#39;re not doing
them a service if we shelter them too long.
&lt;/p&gt;

&lt;p&gt;
Our other kids also benefit from seeing beyond these restrictive
environments. A student might learn to code in Python in one of our
classes, but if we do our jobs right, that student might be writing a
little Javascript to automate Google Docs.
&lt;/p&gt;

&lt;p&gt;
I can&#39;t tell you how many people I&#39;ve seen go through online coding
courses in a web based enviromnent only to be unable to do anything
outside of that enviromnent.
&lt;/p&gt;

&lt;p&gt;
At the end of the day, we want our kids to be empowered to grow on
their own. All of the things I&#39;ve talked about here are merely
tools. Each has it&#39;s place. It&#39;s up to the teacher to make the roadmap
and to lead the student down the path.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>DevOps, or You don&#39;t know what the F you&#39;re doing!</title>
      <link>https://cestlaz.github.io/posts/2016-01-31-devops/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-01-31-devops/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
Having just concluded almost a quarter century at one job in one
place, I&#39;ve been reflecting on a number of things.
&lt;/p&gt;

&lt;p&gt;
What I accomplished, what I&#39;ve failed to accomplish, highlights,
low lights and everything in between.
&lt;/p&gt;

&lt;p&gt;
I&#39;ve also learned a lot over these twenty five years.
&lt;/p&gt;

&lt;p&gt;
One thing I learned is DevOps and System Administration.
&lt;/p&gt;

&lt;p&gt;
Back around 1993 or 1994 Stuy wasn&#39;t really on the internet. Yes, we
were able to scam stuy.edu even though we were a high school and yes
we did have a class B address block but no one really had access.
&lt;/p&gt;

&lt;p&gt;
Somehow, Bruce, a student of mine at the time and I ended up with the
job of getting Stuy onto the internet. Bruce was one of our superstar
kids and people thought I had extensive experience setting up and
running networks. Truth be told I messed around a bit but there&#39;s no
way I would have hired myself for the job.
&lt;/p&gt;

&lt;p&gt;
Nonetheless, we were off.
&lt;/p&gt;

&lt;p&gt;
We were able to take one of the RS/6000 AIX workstations that were
supposed to be used as CAD stations and repurposed it as a server. We
made email accounts for everyone and were off.
&lt;/p&gt;

&lt;p&gt;
Neither Bruce nor I really knew what we were doing but we figured
things out. I learned a lot from him and I&#39;d like to think he also got
some benefit out of working with me. Fortunately, we seemed to have a
knack for &lt;a href=&#34;http://www.amazon.com/Linux-System-Administration-Handbook-Edition/dp/0131480057/ref=pd_sim_14_2?ie=UTF8&amp;amp;dpID=61%2B57ajucML&amp;amp;dpSrc=sims&amp;amp;preST=_AC_UL160_SR117%2C160_&amp;amp;refRID=164V89GZMZM2X9M2S8AH&#34;&gt;finding the answers&lt;/a&gt;.
&lt;/p&gt;


&lt;p&gt;
Of course, we had our moments. Once, we got a critical patch
announcement from IBM. It said that if we needed the patch and didn&#39;t
apply it were were in big trouble but if our machine didn&#39;t need it,
applying the patch would kill our system. It was unclear whether we
needed the patch or not.
&lt;/p&gt;

&lt;p&gt;
After about a half hour research, we determined that we didn&#39;t need
the patch.
&lt;/p&gt;

&lt;p&gt;
But applied it anyway :-(.
&lt;/p&gt;

&lt;p&gt;
D&#39;Oh.
&lt;/p&gt;

&lt;p&gt;
After a brief set of panic attacks and a bunch of fumbling around, we
did manage to restore things.
&lt;/p&gt;

&lt;p&gt;
So, Bruce and I ran the system for a year or so and as I said, I
learned a lot. Now, Bruce was close to graduating so I was starting to
worry that I&#39;d have to figure this all out myself soon. That was a
seriously frightening thought.
&lt;/p&gt;

&lt;p&gt;
I figured it would be good to bring in a couple of new super smart
students. As it turns out, Jon was one of them.
&lt;/p&gt;

&lt;p&gt;
At one point, there was some problem and Bruce and I were going to
head to the office to try to figure it out. Jon asked if he could come
and watch. I thought that was a great idea so I agreed.
&lt;/p&gt;

&lt;p&gt;
We all went to the office and Bruce and I went to work. After about
fifteen minutes, Jon blurted out:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
&#34;I just figured how you guys do it!!!&#34;
&lt;/p&gt;

&lt;p&gt;
&#34;You guys have no idea what the F you&#39;re doing!!!!!&#34;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
We all cracked up.
&lt;/p&gt;

&lt;p&gt;
He was absolutely right. We had no clue. We didn&#39;t know what we were
doing but we had become pretty good at figuring things out.
&lt;/p&gt;

&lt;p&gt;
Truth be told, that really is the norm. If you already knew how to
solve the problem, well, then it really wouldn&#39;t have been a problem
to begin with.
&lt;/p&gt;

&lt;p&gt;
So, you learn to figure it out. It&#39;s something I learned not to be
afraid of a long time ago. I hope that it&#39;s something I&#39;ve been able
to convey to my students.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debugging deployment</title>
      <link>https://cestlaz.github.io/posts/2016-01-23-debugging-deployment/</link>
      <pubDate>Sat, 23 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-01-23-debugging-deployment/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
SoftDev students are hard at work on their final projects. By now,
they all have fairly complex code bases. This limits how much I can
help them with debugging.
&lt;/p&gt;

&lt;p&gt;
There are some problems, though, that they have to contend with that
even with experience, are hard to spot. Notably because the very
tools you use to debug these errors are part of the problem.
&lt;/p&gt;

&lt;p&gt;
Last week, this happened twice. Both cases were brought to me by
really strong students which just goes to underscore how insidious
these problems can be.
&lt;/p&gt;


&lt;p&gt;
Here&#39;s a fake code snippet of a &lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt; application that illustrates
both problems.
&lt;/p&gt;


&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;&lt;span class=&#34;linenr&#34;&gt; 1: &lt;/span&gt;from flask import Flask, render_template
&lt;span class=&#34;linenr&#34;&gt; 2: &lt;/span&gt;
&lt;span class=&#34;linenr&#34;&gt; 3: &lt;/span&gt;app = Flask(__name__)
&lt;span class=&#34;linenr&#34;&gt; 4: &lt;/span&gt;
&lt;span class=&#34;linenr&#34;&gt; 5: &lt;/span&gt;@app.route(&#34;/&#34;)
&lt;span class=&#34;linenr&#34;&gt; 6: &lt;/span&gt;def index():
&lt;span class=&#34;linenr&#34;&gt; 7: &lt;/span&gt;    return &#34;hello&#34;
&lt;span class=&#34;linenr&#34;&gt; 8: &lt;/span&gt;
&lt;span class=&#34;linenr&#34;&gt; 9: &lt;/span&gt;@app.route(&#39;/test/&amp;lt;some_data&amp;gt;&#39;)
&lt;span class=&#34;linenr&#34;&gt;10: &lt;/span&gt;def test():
&lt;span class=&#34;linenr&#34;&gt;11: &lt;/span&gt;    picture_url = build_url(some_data)
&lt;span class=&#34;linenr&#34;&gt;12: &lt;/span&gt;    result = api_test(picture_url)
&lt;span class=&#34;linenr&#34;&gt;13: &lt;/span&gt;    do_something(result)
&lt;span class=&#34;linenr&#34;&gt;14: &lt;/span&gt;
&lt;span class=&#34;linenr&#34;&gt;15: &lt;/span&gt;if __name__ == &#34;__main__&#34;:
&lt;span class=&#34;linenr&#34;&gt;16: &lt;/span&gt;   app.debug = True
&lt;span class=&#34;linenr&#34;&gt;17: &lt;/span&gt;   app.secret_key = &#34;some secret key&#34;
&lt;span class=&#34;linenr&#34;&gt;18: &lt;/span&gt;   app.run(host=&#34;0.0.0.0&#34;, port=8000)
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
First, the &#34;easy&#34; one. The student was trying to deploy the
application. We use &lt;a href=&#34;http://gunicorn.org/&#34;&gt;Green Unicorn&lt;/a&gt; to deploy our applications,
ultimately on &lt;a href=&#34;http://digitalocean.com/&#34;&gt;Digital Ocean&lt;/a&gt; servers in the cloud.
&lt;/p&gt;

&lt;p&gt;
The student was using the correct command:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-shell&#34;&gt;gunicorn -W 4 -b 0.0.0.0:8000 app:app
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
but it wasn&#39;t working. It ran, but whenever he went to the site, it
came back with an error.
&lt;/p&gt;

&lt;p&gt;
The problem?
&lt;/p&gt;

&lt;p&gt;
He had to change:
&lt;/p&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;if __name__ == &#34;__main__&#34;:
app.debug = True
app.secret_key = &#34;some secret key&#34;
app.run(host=&#34;0.0.0.0&#34;, port=8000)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
to
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;app.secret_key = &#34;some secret key&#34;
if __name__ == &#34;__main__&#34;:
app.debug = True
app.run(host=&#34;0.0.0.0&#34;, port=8000)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Normally, when developing and testing our applications, we use the
test server that&#39;s bundled with Flask. The line that reads
&#34;app.run&amp;#x2026;&#34; takes care of this.
&lt;/p&gt;

&lt;p&gt;
When running the application as a &#34;main program&#34; - &#34;python app.py&#34; the
if statement is true and it runs the indented lines, setting the
secret key which is required for session management.
&lt;/p&gt;

&lt;p&gt;
When running under &lt;b&gt;&lt;b&gt;gunicorn&lt;/b&gt;&lt;/b&gt;, the &lt;b&gt;&lt;b&gt;gunicorn&lt;/b&gt;&lt;/b&gt; server loads the
application as a module and then runs it. In this case name isn&#39;t main
so it never sets secret key and so we have a problem.
&lt;/p&gt;

&lt;p&gt;
Pretty subtle and even though we did cover this in class, it comes up
pretty rarely so it&#39;s not an easy catch.
&lt;/p&gt;

&lt;p&gt;
Then there was this problem.
&lt;/p&gt;

&lt;p&gt;
The setup for this one&#39;s a little more complicated. The group was
using a facial recognition api. You provide the API with the url to an
image, it fetches it and does recognition.
&lt;/p&gt;

&lt;p&gt;
It&#39;s also important to note that when Flask is running, it will serve
files from a static directory, so, if I&#39;m running my flask server on
myhost, port 800 and you stored an image named picture.jpg in the
static directory, going to:
&lt;/p&gt;

&lt;verbatim&gt;
http://myhost:8000/static/picture.jpg
&lt;/verbatim&gt;
&lt;br&gt;&lt;br&gt;


&lt;p&gt;
would get that image.
&lt;/p&gt;

&lt;p&gt;
The group did things right. They ran the Flask test server to serve
the static files and then wrote a small python program to test the
api:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;picture_url = build_url(some_data)
result = api_test(picture_url)
do_something(result)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Everything worked fine.
&lt;/p&gt;

&lt;p&gt;
But, when they put this code in as a route in their web app (as in the
top code fragment), it froze.
&lt;/p&gt;

&lt;p&gt;
They couldn&#39;t figure it out.
&lt;/p&gt;

&lt;p&gt;
The code worked as a &#34;stand alone&#34; but not in the web app.
&lt;/p&gt;

&lt;p&gt;
The problem?
&lt;/p&gt;

&lt;p&gt;
Once again, the built in Flask development server.
&lt;/p&gt;

&lt;p&gt;
The development server runs in a single thread / process. This means
it can only do one thing at a time. When they ran their test as a
separate program, the api they used made a request to their app to
serve up the static picture file and it worked.
&lt;/p&gt;

&lt;p&gt;
When they ran from the Flask application itself, their app made a call
to the web api (line 12) and then blocked while waiting for the
response. The web api tried to request the image from the Flask app
but it was blocked &amp;#x2013; &lt;b&gt;&lt;b&gt;deadlock&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Again, the solution was to run the web app using a server that could
handle multiple requests - gunicorn.
&lt;/p&gt;

&lt;p&gt;
Once again, that solved the problem.
&lt;/p&gt;

&lt;p&gt;
Both of these problems were fairly subtle and very hard to catch -
even with experience. I remember the hours I lost when I was learning
this stuff.
&lt;/p&gt;

&lt;p&gt;
Some times kids get caught up in algorithms or poor code design but
sometimes, it&#39;s just the tools.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cellular Automata for Pathfinding in NetLogo</title>
      <link>https://cestlaz.github.io/posts/2016-01-17-maze-ca/</link>
      <pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-01-17-maze-ca/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;link href=&#34;//cdn.rawgit.com/noelboss/featherlight/1.3.5/release/featherlight.min.css&#34; type=&#34;text/css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;//cdn.rawgit.com/noelboss/featherlight/1.3.5/release/featherlight.min.js&#34; type=&#34;text/javascript&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;style&gt;
div.center {text-align:center;}
.smaller {height:200px;width:200px}

.center {text-align:center;}
.frame {width:600px;height:800px;}

&lt;/style&gt;


&lt;div class=&#34;center&#34;&gt;
&lt;a class=&#34;center&#34; href=&#34;#&#34; data-featherlight=&#34;/img/maze-ca/maze-start.png&#34;&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/maze-ca/maze-start.png&#34;&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;

&lt;div id=&#34;outline-container-orgheadline1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline1&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline1&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/2016/01/15/shift-image.html#.Vpvy4x8SrmE&#34;&gt;Last time&lt;/a&gt; we took a look at implementing a Cellular Automaton in
NetLogo to do some simple image manipulation. We just scratched the
surface. In class, the kids write pretty nice Photoshop Light
applications.
&lt;/p&gt;

&lt;p&gt;
Today we&#39;ll look at some more ambitious problem solving - using a
Cellular Automaton to find a path through a maze.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-orgheadline2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline2&#34;&gt;Part 1 - finding possible paths&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline2&#34;&gt;
&lt;p&gt;
We&#39;ll use the image above as an example and a live model with all the
code is at the end of this post.
&lt;/p&gt;

&lt;p&gt;
Each square of the maze is a
NetLogo patch. White square represent possible paths, Red is our
entrance, green our exit. As we explore the maze, we&#39;ll color the
cells yellow.
&lt;/p&gt;

&lt;p&gt;
Remember, in  a Cellular Automaton (CA), each cell makes a decision as to
it&#39;s next state based on information about its neighbors (up, down,
left, and right only in this case).
&lt;/p&gt;

&lt;p&gt;
So, if every cell is looking around at it&#39;s neighbors, most cells
don&#39;t have enough information. The only white cell that might be on
the path from entrance to exit is the one next to the entrance - it
might be on the path.
&lt;/p&gt;

&lt;p&gt;
This leads us to the first step of our CA rule set:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-netlogo&#34;&gt;; if I have a green neighbor, I might be on the path, turn yellow
ask patches with [pcolor = white] [
if any? neighbors with [pcolor = red] [
set pcolor yellow
]
]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
(click images to enlarge)
&lt;/p&gt;

&lt;a href=&#34;#&#34; data-featherlight=&#34;/img/maze-ca/maze-1.png&#34;&gt;
&lt;img class=&#34;smaller&#34; src=&#34;https://cestlaz.github.io/img/maze-ca/maze-1.png&#34;&gt;
&lt;/a&gt;

&lt;p&gt;
Next time through, we notice that a cell might be on the path if it&#39;s
white and it has either red or yellow neighbors.
&lt;/p&gt;


&lt;a href=&#34;#&#34; data-featherlight=&#34;/img/maze-ca/maze-2.png&#34;&gt;
&lt;img class=&#34;smaller&#34; src=&#34;https://cestlaz.github.io/img/maze-ca/maze-2.png&#34;&gt;
&lt;/a&gt;
&lt;a href=&#34;#&#34; data-featherlight=&#34;/img/maze-ca/maze-3.png&#34;&gt;
&lt;img class=&#34;smaller&#34; src=&#34;https://cestlaz.github.io/img/maze-ca/maze-3.png&#34;&gt;
&lt;/a&gt;

&lt;a href=&#34;#&#34; data-featherlight=&#34;/img/maze-ca/maze-4.png&#34;&gt;
&lt;img class=&#34;smaller&#34; src=&#34;https://cestlaz.github.io/img/maze-ca/maze-4.png&#34;&gt;
&lt;/a&gt;

&lt;p&gt;
Eventually, we end up with a yellow abutting green - the exit.
&lt;/p&gt;

&lt;a href=&#34;#&#34; data-featherlight=&#34;/img/maze-ca/maze-found.png&#34;&gt;
&lt;img class=&#34;smaller&#34; src=&#34;https://cestlaz.github.io/img/maze-ca/maze-found.png&#34;&gt;
&lt;/a&gt;

&lt;p&gt;
Notice that each yellow cell is also numbered. The number indicates
how many steps it took to get there from the entrance. The
implementation is trivial:
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;Start by giving each patch a variable &lt;b&gt;&lt;b&gt;step&lt;/b&gt;&lt;/b&gt; and starting it at 0.&lt;/li&gt;
&lt;li&gt;When a cell is about to turn yellow, it should look at it&#39;s yellow
or red neighbors, ask for their &lt;b&gt;&lt;b&gt;step&lt;/b&gt;&lt;/b&gt; value (they&#39;ll all be the
same - think about why), and set it&#39;s &lt;b&gt;&lt;b&gt;step&lt;/b&gt;&lt;/b&gt; value to one more
than that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
We&#39;ll use these step numbers to recover the actual shortest path.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-orgheadline3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline3&#34;&gt;Part 2 - recovering the shortest path.&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline3&#34;&gt;
&lt;p&gt;
We can now use the yellow patches with the step numbers to find our
way back.
&lt;/p&gt;

&lt;p&gt;
We&#39;re going to build a solution set.
&lt;/p&gt;
&lt;ol class=&#34;org-ol&#34;&gt;
&lt;li&gt;start with an empty solution set.&lt;/li&gt;
&lt;li&gt;take the only green cell not in the solution set (let&#39;s call it &lt;b&gt;&lt;b&gt;G&lt;/b&gt;&lt;/b&gt;).&lt;/li&gt;
&lt;li&gt;Ask &lt;b&gt;&lt;b&gt;G&lt;/b&gt;&lt;/b&gt;&#39;s yellow neighbor with lowest step number to turn
itself green (that cell will be &lt;b&gt;&lt;b&gt;G&lt;/b&gt;&lt;/b&gt; next time around).&lt;/li&gt;
&lt;li&gt;Place &lt;b&gt;&lt;b&gt;G&lt;/b&gt;&lt;/b&gt; into the solution set (leaving the new green cell as
the only green cell not in the solution set).&lt;/li&gt;
&lt;li&gt;Repeat 2 - 5 until we&#39;re back at the entrance.&lt;/li&gt;
&lt;/ol&gt;



&lt;a href=&#34;#&#34; data-featherlight=&#34;/img/maze-ca/maze-back-1.png&#34;&gt;
&lt;img class=&#34;smaller&#34; src=&#34;https://cestlaz.github.io/img/maze-ca/maze-back-1.png&#34;&gt;
&lt;/a&gt;
&lt;a href=&#34;#&#34; data-featherlight=&#34;/img/maze-ca/maze-back-2.png&#34;&gt;
&lt;img class=&#34;smaller&#34; src=&#34;https://cestlaz.github.io/img/maze-ca/maze-back-2.png&#34;&gt;
&lt;/a&gt;
&lt;a href=&#34;#&#34; data-featherlight=&#34;/img/maze-ca/maze-solved.png&#34;&gt;
&lt;img class=&#34;smaller&#34; src=&#34;https://cestlaz.github.io/img/maze-ca/maze-solved.png&#34;&gt;
&lt;/a&gt;

&lt;p&gt;
This is one of my favorite intro topics. It&#39;s using a CA - something
normally just presented as a toy idea, to solve a real problem. It
reinforces parallel processing and foreshadows all sorts of pathfinding
ideas to come.
&lt;/p&gt;

&lt;p&gt;
Below is the complete NetLogo program. You can look at the code by
clicking on the code tab at the bottom.
&lt;/p&gt;

&lt;p&gt;
To run:
&lt;/p&gt;
&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;setup&lt;/b&gt;&lt;/b&gt; sets up all the variables and clears the world.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;buildmaze&lt;/b&gt;&lt;/b&gt; builds a random maze.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;solve&lt;/b&gt;&lt;/b&gt; is a toggle to run through an entire solution.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;step&lt;/b&gt;&lt;/b&gt; single steps through the CA.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;b&gt;reset&lt;/b&gt;&lt;/b&gt; Resets all the variables and recolors the maze to
unsolved.&lt;/li&gt;
&lt;li&gt;The other buttons are toggles for drawing your own maze.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;center frame&#34;&gt;
&lt;iframe class=&#34;center frame&#34; src=&#34;https://cestlaz.github.io/img/maze-ca/maze.html&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Cellular Automata, NetLogo and real problems</title>
      <link>https://cestlaz.github.io/posts/2016-01-15-shift-image/</link>
      <pubDate>Fri, 15 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-01-15-shift-image/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
.center {text-align:center;}
.frame {width:640px;height:800px;}
&lt;/style&gt;


&lt;p&gt;
We&#39;ve been using &lt;a href=&#34;https://ccl.northwestern.edu/netlogo/&#34;&gt;NetLogo&lt;/a&gt; in our intro course for years. It&#39;s a
wonderful programming environment. Many of you recall the &lt;a href=&#34;https://en.wikipedia.org/wiki/Logo_(programming_language)&#34;&gt;Logo&lt;/a&gt;
programming language. NetLogo is like Logo but instead of programming
a turtle, you write a program that&#39;s run by multiple, perhaps hundreds
of turtles and also by the world the turtles live on.
&lt;/p&gt;

&lt;p&gt;
Some of the reasons we like it are that it&#39;s:
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;An easy accessible textual programming language&lt;/li&gt;
&lt;li&gt;Makes building a graphical interface trivial&lt;/li&gt;
&lt;li&gt;great for modeling&lt;/li&gt;
&lt;li&gt;Comes with tons of demo models&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
And now, with the latest version, NetLogo programs/models can be
deployed as web sites. All you have to do is save your program as
&#34;NetLogo Web&#34; and put it up on a observer somewhere.
&lt;/p&gt;

&lt;p&gt;
If you haven&#39;t you should download and install NetLogo, run it, then
go to the file menu and look at the built in models.
&lt;/p&gt;

&lt;p&gt;
I also enjoy playing with &lt;a href=&#34;https://en.wikipedia.org/wiki/Cellular_automaton&#34;&gt;Cellular Automata&lt;/a&gt; and NetLogo&#39;s a wonderful
platform to play with. The turtles live on a grid of patches and just
like the turtles, the patches will all run your program over and over.
&lt;/p&gt;

&lt;p&gt;
The patches make perfect cells for a cellular automaton and you can
implement a rule set in your patches.
&lt;/p&gt;

&lt;p&gt;
NetLogo even comes with a bunch of built in demo models for Cellular
Automata including &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&#34;&gt;Conway&#39;s Game of Life&lt;/a&gt;, probably the most famous CA.
&lt;/p&gt;

&lt;p&gt;
On the other hand, Conway&#39;s Game of Life is somewhat cliche and while
I find it fascinating, it doesn&#39;t really solve a practical problem, at
least on on the surface.
&lt;/p&gt;

&lt;p&gt;
So, I was looking for something more practical to do and something
where we could explore some deeper CS concepts.
&lt;/p&gt;

&lt;p&gt;
Image manipulation.
&lt;/p&gt;

&lt;p&gt;
In class, we make a Cellular Automaton where each cell or patch is a
pixel in an image. In NetLogo, you can do this with the
&#34;import-pcolors&#34; command. Lower down, I have a demo that just manually
colors patches - the web version of NetLogo doesn&#39;t yet support that
command.
&lt;/p&gt;

&lt;p&gt;
Task 1 - what if we want to shift the image over? The kids come up
with a solution pretty quickly: &#34;We can just have each patch ask its
neighbor for its color.&#34; Here&#39;s the code they try:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-netlogo&#34;&gt;; ask each patch to set its color to the color of the
; patch at relative location -1,0
to shift-naive
ask patches [ set pcolor [pcolor] of patch-at -1 0]
end
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
To see what happens, scroll down to the NetLogo model below, click on
setup and then hit the &lt;b&gt;&lt;b&gt;shift-naive&lt;/b&gt;&lt;/b&gt; button a few times.
&lt;/p&gt;

&lt;p&gt;
It doesn&#39;t work.
&lt;/p&gt;

&lt;p&gt;
What&#39;s going on?
&lt;/p&gt;

&lt;p&gt;
It&#39;s a synchronization issue.
&lt;/p&gt;

&lt;p&gt;
Suppose we have the following three cells in a row:
&lt;/p&gt;


&lt;div class=&#34;figure&#34;&gt;
&lt;p&gt;&lt;img src=&#34;https://cestlaz.github.io/img/shift-image/image1.png&#34; alt=&#34;image1.png&#34; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
If cell 3 asks cell 2 it&#39;s color before cell 2 asks cell 1&#39;s color, we
get the desired result:
&lt;/p&gt;


&lt;div class=&#34;figure&#34;&gt;
&lt;p&gt;&lt;img src=&#34;https://cestlaz.github.io/img/shift-image/image2.png&#34; alt=&#34;image2.png&#34; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
But if cell 2 asks cell 1 for it&#39;s color first then cell 3 will
actually get cell 1&#39;s color:
&lt;/p&gt;


&lt;div class=&#34;figure&#34;&gt;
&lt;p&gt;&lt;img src=&#34;https://cestlaz.github.io/img/shift-image/image3.png&#34; alt=&#34;image3.png&#34; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
So now we have the students thinking about synchronization and
parallel processing and they don&#39;t even know it.
&lt;/p&gt;

&lt;p&gt;
The solution&#39;s pretty easy, break the problem up into two steps.
&lt;/p&gt;

&lt;p&gt;
First, have every patch ask its neighbor for its color and then once
everyone knows their neighbor&#39;s color, then change:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-html&#34;&gt;patches-own [next-color]

to shift-correct
; figure out my next color
ask patches [ set next-color [pcolor] of patch-at -1 0 ]
; then switch to it
ask patches [ set pcolor next-color]
end
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
You can run that by clicking &lt;b&gt;&lt;b&gt;setup&lt;/b&gt;&lt;/b&gt; again and then &lt;b&gt;&lt;b&gt;shift-correct&lt;/b&gt;&lt;/b&gt; a
few times.
&lt;/p&gt;

&lt;p&gt;
There&#39;s some of the beauty of NetLogo - we can get kids to think about
some deep concepts while playing with an easy to use, fun, interactive
environment with a real textual programming language.
&lt;/p&gt;

&lt;p&gt;
Stay tuned for part 2 when I&#39;ll talk about creating a cellular
automaton that can solve a maze.
&lt;/p&gt;

&lt;div class=&#34;center frame&#34;&gt;
&lt;iframe class=&#34;center frame&#34; src=&#34;https://cestlaz.github.io/img/shift-image/shift-image.html&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Teaching Coding - getting beyond superficial syntax</title>
      <link>https://cestlaz.github.io/posts/2016-01-01-different-languages/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-01-01-different-languages/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
The other day, Alfred Thompson put up a piece about &lt;a href=&#34;http://blog.acthompson.net/2015/12/code-in-different-languages.html&#34;&gt;coding in multiple
languages&lt;/a&gt;. Alfred references a post written last May by &lt;a href=&#34;http://robunderwood.com/2015/05/31/code-syntax-compared-part-1/%0A&#34;&gt;Rob Underwood.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Both pieces are worth a look.
&lt;/p&gt;

&lt;p&gt;
Rob is trying to illustrate many of the superficial similarities in
popular languages.
&lt;/p&gt;

&lt;p&gt;
In the comments on Alfred&#39;s blog, both Alfred and I alluded to coding
in an appropriate style for the language.
&lt;/p&gt;

&lt;p&gt;
For me the issue is even bigger.
&lt;/p&gt;

&lt;p&gt;
Learning to code is all the rage and places to learn are popping out of
the woodwork.
&lt;/p&gt;

&lt;p&gt;
There are:
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;In classes, in schools, with teachers&lt;/li&gt;
&lt;li&gt;Drop in programs in schools.&lt;/li&gt;
&lt;li&gt;Programs run by coding schools&lt;/li&gt;
&lt;li&gt;Moocs and other online resources&lt;/li&gt;
&lt;li&gt;Summer and weekend programs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
And probably more. All of these options are giving more and more
people a way to learn to code.
&lt;/p&gt;

&lt;p&gt;
That&#39;s great, but it also raises concerns given that very few people
involved in CS education have both strong teaching and CS backgrounds.
&lt;/p&gt;

&lt;p&gt;
What I&#39;m starting to see are the results as I meet young people coming
out of all of these programs.
&lt;/p&gt;

&lt;p&gt;
Unfortunately, what I&#39;m frequently seeing, at best, is very
superficial coverage of syntax.
&lt;/p&gt;

&lt;p&gt;
I&#39;ve seen kids who would have no basis for understanding that the
ramifications of this Python code:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;a = 30
def f():
a=20
print a

print a
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
and this Javascript code:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-javascript&#34;&gt;a = 30;
function f(){
a = 20
console.log(a);
}
console.log(a);
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
are very different.
&lt;/p&gt;

&lt;p&gt;
It gets worse when I meet kids who &#34;know C&#34; because they were exposed
to constructs like:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-c&#34;&gt;for (i=0;i&amp;lt;10;i++){
// code goes here
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
I think the most common issue come from kids being &#34;taught&#34;
programming using javascript which seems deceptively simple but is
really rather deep.
&lt;/p&gt;

&lt;p&gt;
It&#39;s important that as CS becomes more mainstream that we make sure
that we have teachers and programs that are teaching the real deal. It
can be fun and accessible but it does require teachers that know their
stuff and are willing to continue to learn.
&lt;/p&gt;


&lt;p&gt;
Do our kids deserve any less?
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code - because I&#39;m an idiot</title>
      <link>https://cestlaz.github.io/posts/2015-12-17-im-an-idiot/</link>
      <pubDate>Thu, 17 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-12-17-im-an-idiot/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;


&lt;div class=&#34;figure&#34;&gt;
&lt;p&gt;&lt;img src=&#34;http:/img/advent/advent.png&#34; alt=&#34;advent.png&#34; width=&#34;480px&#34; align=&#34;center&#34; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
I wish our kids believed us when we tell them that we have the same
programming troubles as they do. We stare at code for hours not seeing
problems that could be a simple as passing the wrong value. We spend
an inordinate amount of time trying to see the problem and then
realize that we just forgot something silly.
&lt;/p&gt;

&lt;p&gt;
At this point, it&#39;s common for us CS teachers to tell each other &#34;I
figured out the problem I was having &amp;#x2013; it&#39;s that I was an idiot.&#34;
&lt;/p&gt;

&lt;p&gt;
Last time, I talked about &lt;a href=&#34;http://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt; and how I was somewhat behind
the curve. In part because I started late and in part because I&#39;ve
been using it as an excuse to learn some Clojure.
&lt;/p&gt;

&lt;p&gt;
Here&#39;s how I burned over two days on &lt;a href=&#34;http://adventofcode.com/day/6&#34;&gt;Day 6&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The problem is pretty straight forward. You have a 1,000 x 1,000 grid
representing a light board and you have to repeatedly do operations on
smaller rectangles on that grid. Turning individual lights on and off,
if you would.
&lt;/p&gt;

&lt;p&gt;
If I were doing this in a language like C, I&#39;d probably just take a
big block of memory and loop through the instructions but since I was
working in Clojure, I thought I&#39;d try to do something in more of the
functional mode, that is, with immutable data types.
&lt;/p&gt;

&lt;p&gt;
After a while, I was getting the feeling that it was going to be too
slow so I shifted to just modifying a big block of memory.
&lt;/p&gt;

&lt;p&gt;
Try as I could, I couldn&#39;t get it to work. I was sure my algorithm was
fine - it wasn&#39;t a hard problem, but I couldn&#39;t get the right answer.
&lt;/p&gt;

&lt;p&gt;
After a while, I started looking at existing solutions and they were
basically the same as mine.
&lt;/p&gt;

&lt;p&gt;
I was stumped.
&lt;/p&gt;

&lt;p&gt;
Two days after the start, I figured it out.
&lt;/p&gt;

&lt;p&gt;
No matter how hard you try, if your problem specifies the data in the
form &lt;b&gt;&lt;b&gt;row1,col1 row2,col2&lt;/b&gt;&lt;/b&gt;, you&#39;re not going to get the right answer
if you decide that the input is in the form &lt;b&gt;&lt;b&gt;row1,row2 col1,col2&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;D&#39;Oh&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Ok, after that the problem was pretty trivial.
&lt;/p&gt;

&lt;p&gt;
Hopefully I&#39;ll have some time to do problem 7 and beyond this weekend.
&lt;/p&gt;

&lt;p&gt;
If there are any Clojure people out there, I&#39;m putting my solutions up
on &lt;a href=&#34;https://github.com/zamansky/adventofcodeclojure&#34;&gt;GitHub&lt;/a&gt; - I&#39;d love some feedback on how to get more idiomatic.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Other People&#39;s Code</title>
      <link>https://cestlaz.github.io/posts/2015-11-11-other-peoples-code/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-11-11-other-peoples-code/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;
&lt;div id=&#34;outline-container-orgheadline1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline1&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline1&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;
The coding on their project is reminiscent in many ways of an Ed
Sheerhan song. It left me in tears and very confused as to what the
author was trying to accomplish.
&lt;/p&gt;

&lt;p&gt;
&amp;#x2013; a student commenting on their most recent project.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-orgheadline2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline2&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline2&#34;&gt;
&lt;p&gt;
We had some fun last week. Well, OK, I had some fun. The SoftDev
classes had just finished a little project. Basically, a blogging
platform. Something that would tie together all the tools we&#39;ve been
using. Flask, user management, an SQL database (SQLite), and a nice
looking front end.
&lt;/p&gt;

&lt;p&gt;
It was also the first real group project so the teams have started to
learn how to work together.
&lt;/p&gt;

&lt;p&gt;
After some project demos, it was time for part two: NOSQL. We explored
MongoDB and then it was time for the project - clean up the
previous project through the use of techniques like template
inheritance and convert the database backend to MongoDB.
&lt;/p&gt;

&lt;p&gt;
The catch? Each group would take another groups project and use that
as their starter code. The rules? They could modify and refactor but
they couldn&#39;t rewrite.
&lt;/p&gt;

&lt;p&gt;
It threw the groups for a loop but I ultimately think they had
fun with this.
&lt;/p&gt;

&lt;p&gt;
Afterwards each group gave a write up to their starter group. What
made their life easier, what made it harder. We then circled up for
discussion as a class.
&lt;/p&gt;

&lt;p&gt;
It was terrific.
&lt;/p&gt;

&lt;p&gt;
First, it was great that we&#39;ve gotten to a point where everyone feels
comfortable giving each other constructive criticism. We&#39;ve gotten to
the point where the class is a team.
&lt;/p&gt;

&lt;p&gt;
Beyond that, I&#39;m hoping that everyone got a lot out of the exercise.
&lt;/p&gt;

&lt;p&gt;
As each group talked, common themes arose:
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;consistent commenting is good&lt;/li&gt;
&lt;li&gt;variable names matter&lt;/li&gt;
&lt;li&gt;unused code and files can be misleading&lt;/li&gt;
&lt;li&gt;overall code structure, file names, and locations are important.&lt;/li&gt;
&lt;li&gt;and much more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
We&#39;re now going to start a discussion of coding style, standards, and
documentation.
&lt;/p&gt;

&lt;p&gt;
I&#39;ve got to say that I&#39;m very happy how this little experiment worked
out.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Interview questions and tests</title>
      <link>https://cestlaz.github.io/posts/2015-11-04-tests-and-interviews/</link>
      <pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-11-04-tests-and-interviews/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;p&gt;
The StuyCS Family mailing list was host to an interesting discussion
today. One of our younger members asked if the practice of giving
technical problems during an interview was going to follow him
throughout his career or if it goes away for more senior applicants.
&lt;/p&gt;

&lt;p&gt;
An interesting discussion followed.
&lt;/p&gt;

&lt;p&gt;
It reminded me of a time I was talking to a few senior engineers at a
large tech company. A couple of younger engineers were with us along
with a new hire. The youngsters started talking about the new hires
technical interview questions. One older engineer light heartedly
asked another &#34;I don&#39;t recall any tricky technical questions, how
about you?&#34; &#34;I don&#39;t recall any either&amp;#x2026;&#34; and on around the table.
&lt;/p&gt;

&lt;p&gt;
Of course these senior engineers had track records that stretched for
miles.
&lt;/p&gt;

&lt;p&gt;
I never liked those tech interview questions. If you just took
algorithms, you&#39;ve got an edge and it really seems to be more of a
test of &#34;have you seen this problem before&#34; rather than a true test of
ability.
&lt;/p&gt;

&lt;p&gt;
I much prefer those few companies that give &#34;take home assignments&#34; or
use other ways to determine fit.
&lt;/p&gt;

&lt;p&gt;
The tech interview reminds me of the pop quiz or a poorly designed
test. If you just ask the question that the kid doesn&#39;t get, the kid&#39;s
in trouble. A kid could know how to handle 90% of the work but if the
question is that last 10%, zero credit.
&lt;/p&gt;

&lt;p&gt;
As teachers, we end up using many forms of assessment and try to
develop an overall picture of a student.
&lt;/p&gt;

&lt;p&gt;
Companies should try to do the same.
&lt;/p&gt;

&lt;p&gt;
Why to companies still use these technical interview questions?
&lt;/p&gt;

&lt;p&gt;
Quite simply because they can.
&lt;/p&gt;

&lt;p&gt;
A company might miss out on a number of great candidates by using a
bad technical question but they will probably get at least a
reasonably strong hire that passes the test. For the company, mission
accomplished.
&lt;/p&gt;

&lt;p&gt;
As teachers, we can&#39;t do that. I&#39;m not given a class of 32 kids and
asked to pull out a couple of software engineers. As teachers, we&#39;re
supposed to pull everyone along.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Alan Alda on Teaching Science</title>
      <link>https://cestlaz.github.io/posts/2015-10-20-alda/</link>
      <pubDate>Tue, 20 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-10-20-alda/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
Scale, scale, scale. Scripted lessons. Online resources, Moocs. No
excuses schools. All of these are modern trends in education. None of
these are about good education. It&#39;s really demoralizing reading
article after article devaluing true master teachers and real
education.
&lt;/p&gt;

&lt;p&gt;
So, last night was a real pleasure.
&lt;/p&gt;

&lt;p&gt;
I attended a talk, given by Alan Alda on communicating science. The
talk was sponsored by &lt;a href=&#34;http://academyforteachers.org/&#34;&gt;The Academy for Teachers&lt;/a&gt;. I grew up watching
Hawkeye on MASH and more recently Arnold Vinick on The West Wing but
Mr. Alda has really been keeping himself busy in the world of
education. Check out what he&#39;s doing at the &lt;a href=&#34;http://www.centerforcommunicatingscience.org/&#34;&gt;Alan Alda Center for
Communicating Science&lt;/a&gt; at Stony Brook University.
&lt;/p&gt;

&lt;p&gt;
At it&#39;s core, Mr. Alda&#39;s talk was about teaching. Making a connection
with your students and engaging them. The exact opposite of many of
the current ed reform trends.
&lt;/p&gt;

&lt;p&gt;
Mr. Alda talked about &lt;a href=&#34;http://www.centerforcommunicatingscience.org/the-flame-challenge-2/&#34;&gt;the Flame Challenge&lt;/a&gt; where he challenged
scientists to teach 11 year olds all about &lt;a href=&#34;https://en.wikipedia.org/wiki/The_Chemical_History_of_a_Candle&#34;&gt;a candle&lt;/a&gt; without dumbing it
down. Communication.
&lt;/p&gt;

&lt;p&gt;
He also talked about story telling. At one point he had a volunteer
from the audience carry a glass across the stage. He then had her do
it again, but this time with a full glass telling her &#34;if you spill a
drop everyone in your village will die.&#34; The difference in audience
attention was striking.
&lt;/p&gt;

&lt;p&gt;
Mr. Alda also talked about using improvisational games to help
students open up as well as about &lt;a href=&#34;https://en.wikipedia.org/wiki/Curse_of_knowledge&#34;&gt;the curse of knowledge.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
One of my favorite parts of the talk was when an audience member asked
for a few teaching tips. He replied that he hates tips because out of
context, without the connection to the class, they&#39;re
meaningless. Mr. Alda used as an example:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Imagine that you&#39;re about to give a piano recital at Carnegie Hall
and you asked for a few tips.
&lt;/p&gt;

&lt;p&gt;
If you&#39;ve never played before, those tips aren&#39;t going to help you.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
I&#39;m asked for CS teaching tips all the time, and Mr. Alda very much
captured my feelings on the subject. My friend and Colleague Jim
Cocoros also captured the feeling when he reminded me that the only
&#34;tip&#34; he gives new teachers is &#34;be yourself.&#34; I couldn&#39;t agree more.
&lt;/p&gt;

&lt;p&gt;
It was a delightful and a refreshing evening. I very much appreciate
and admire what Mr. Alda is doing beyond his acting and while I very
much hope he&#39;s able to extend his reach to more high school teachers
as he continues to work on communicating in science.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Looking under the hood</title>
      <link>https://cestlaz.github.io/posts/2015-10-17-under-the-hood/</link>
      <pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-10-17-under-the-hood/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
Just had an interesting conversation with &lt;a href=&#34;http://chrisgrant.co/&#34;&gt;Chris&lt;/a&gt;, one of our &lt;a href=&#34;http://cstuy.org/&#34;&gt;CSTUY&lt;/a&gt;
mentors. Chris is working with one of our more advanced groups of
hackers - they&#39;ll be creating a web based app that with ultimately be
deployed as mobile using &lt;a href=&#34;http://phonegap.com/&#34;&gt;PhoneGap&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The question he had was &#34;&lt;a href=&#34;http://angularjs.org/&#34;&gt;Angular.js&lt;/a&gt; or &lt;a href=&#34;http://backbonejs.org/&#34;&gt;Backbone.js&lt;/a&gt;.&#34;
&lt;/p&gt;

&lt;p&gt;
Chris and I have had this conversation before. I was explaining at the
time why I preferred to use Backbone.js over Angular in my SoftDev
classes. Part of the reason is that the current version of Angular is
already deprecated while the new version isn&#39;t ready for prime time
yet. This means I&#39;d be teaching to a dead end. More importantly, Angular
is a much higher level framework than Backbone. There&#39;s a lot of
&#34;magic&#34; going on. Just a few short lines of code and you&#39;re done.
&lt;/p&gt;

&lt;p&gt;
Backbone is much closer to the metal. It does less work for you so it
let&#39;s me drill down with the kids all the way to the source. This way
the kids understand what&#39;s going on under the hood. As my buddy &lt;a href=&#34;https://www.linkedin.com/in/gerryseidman&#34;&gt;Gerry&lt;/a&gt;
says, &#34;never use a tool you couldn&#39;t write yourself.&#34; I personally
like low level tools like Backbone.js. If you have to get a job
done quickly, it might not be the right tool, but for teaching,
it&#39;s terrific.
&lt;/p&gt;

&lt;p&gt;
I think Chris was surprised when I said that a higher level tool like
Angular could very well be appropriate for our Saturday Hackers and
that I&#39;d certainly support whichever direction Chris wanted to go in
with his team.
&lt;/p&gt;

&lt;p&gt;
Why  might it be right in this case?
&lt;/p&gt;

&lt;p&gt;
Mostly because the hackers only meet once a week. In our Saturday
sessions, we want our kids to learn, but we also need to create an
environment where they can continue to progress on their
projects. Some times, compromise is needed. Angular will let them get
up and running within the constraints of our program and the hackers
will still learn a lot, particularly with people like Chris mentoring them.
&lt;/p&gt;

&lt;p&gt;
That&#39;s the balance we strive to achieve - a good amount of real CS but
tempered with the realities of a once a week program.
&lt;/p&gt;

&lt;p&gt;
We could go the way of many other CS programs out there and
just use tools that do 90% of the work but we like to think we have a
higher standard and I think that&#39;s what makes our team of teachers and
mentors special.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Grading Autograders</title>
      <link>https://cestlaz.github.io/posts/2015-10-16-graders/</link>
      <pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-10-16-graders/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
The other day codehs made an announcement about their new
&lt;a href=&#34;https://medium.com/codehs-product-updates/these-are-the-autograders-you-ve-been-looking-for-bda0fa8fd8a&#34;&gt;autograder&lt;/a&gt;. Fellow CS Teaching veteran Alfred Thompson had his say up
on his &lt;a href=&#34;http://blog.acthompson.net/2015/10/autogradersfor-good-or-for-evil.html&#34;&gt;blog&lt;/a&gt; where he talked about &lt;a href=&#34;https://computinged.wordpress.com/&#34;&gt;Mark Guzdial&lt;/a&gt;&#39;s comment on
autograders leading to less creative assignments.
&lt;/p&gt;

&lt;p&gt;
I very much agree that autograders, due to their rigidness lend
themselves to less creative projects, but thought I&#39;d write up a few
of my own thoughts on autograders.
&lt;/p&gt;

&lt;p&gt;
First and foremost, &lt;b&gt;I HATE GRADING&lt;/b&gt;. It&#39;s one of the worst parts of
my job and grading projects is &lt;b&gt;really&lt;/b&gt; hard to do well.
&lt;/p&gt;

&lt;p&gt;
You&#39;d think an autograder would be a panacea.
&lt;/p&gt;

&lt;p&gt;
It&#39;s not.
&lt;/p&gt;

&lt;p&gt;
In addition to them being very nit-picky &amp;#x2013; got an extra space in your
output? &lt;b&gt;FAIL&lt;/b&gt;. Wrong number of significant digits? &lt;b&gt;FAIL&lt;/b&gt;. Didn&#39;t
handle all those &#34;trick&#34; cases? &lt;b&gt;FAIL&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Since autograders typically check your output against a correct
solution, it&#39;s going to be limited in what it can grade right and
wrong and what&#39;s more, it&#39;s very limited in the feedback it can give.
&lt;/p&gt;

&lt;p&gt;
These are some of the limitations that lead to less creative
projects but that&#39;s not my beef with the autograders.
&lt;/p&gt;

&lt;p&gt;
Why do we give assignments? To assess students? Yes, but also to
inform our instruction. We need to grade the assignments ourselves
because those assignments tell us about our students and teach us how
best to work with them. What&#39;s more, we really don&#39;t just want to see
that finished product, but rather, we want to see the process as
well. Autograders can&#39;t help here.
&lt;/p&gt;

&lt;p&gt;
I do use autograders &amp;#x2013; &lt;a href=&#34;http://codingbat.com/&#34;&gt;codingbat.com&lt;/a&gt; and our own locally developed
&lt;a href=&#34;http://bert.stuy.edu/pbrooks/SchemingBat/scheming.py&#34;&gt;Scheming Bat.&lt;/a&gt; I use them for small homeworks and class assignments
early on. For bigger stuff, I do it myself.
&lt;/p&gt;

&lt;p&gt;
For advanced classes (AP and beyond) we&#39;re all about the GitHub. Not
only can I grab the projects at any time but I can also see how
projects were developed - logs, diffs, &lt;a href=&#34;https://github.com/vynl/vynl-v0/graphs/contributors&#34;&gt;graphs&lt;/a&gt;. All give me insight
into how the students working. Add in class lab time when I get to
interact with the kids and I&#39;ve got a good sense of my student
computer scientists.
&lt;/p&gt;

&lt;p&gt;
In our intro courses, where they&#39;re not ready for GitHub, we use
Dropbox for sharing and collecting assignments. Not quite as good but
we can still see a lot.
&lt;/p&gt;

&lt;p&gt;
At the end of the day, if a teacher doesn&#39;t look at a student&#39;s work
directly, a teacher isn&#39;t going to know everything there is to know
about a student. I can&#39;t imagine a top English teacher not reading a
student&#39;s essays. We&#39;re no different.
&lt;/p&gt;

&lt;p&gt;
It&#39;s time consuming and generally no fun but it&#39;s a big part of &lt;b&gt;real&lt;/b&gt;
education.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting kids up to fail - CS edition</title>
      <link>https://cestlaz.github.io/posts/2015-08-17-setting-up-to-fail-cs/</link>
      <pubDate>Mon, 17 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-08-17-setting-up-to-fail-cs/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;
&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
We talked about setting kids up to fail in math. What about CS?
&lt;/p&gt;

&lt;p&gt;
Well, it&#39;s a little subtler.
&lt;/p&gt;

&lt;p&gt;
I started thinking about this after a conversation with one of my
graduates about Harvard&#39;s famous CS50. Since that conversation, I&#39;ve
spoken to a number of my kids that have gone through CS50 and most
seem to say the same things:
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;They don&#39;t really teach anything
&lt;/li&gt;
&lt;li&gt;The kids rely on a group member who already knows stuff or will
learn all the stuff on their own
&lt;/li&gt;
&lt;li&gt;If it weren&#39;t for my StuyCS background my group would have really
struggled.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
and things like that. I was then told that after CS50 kids go on to
Functional Programming in OCAML and they drop like flies.
&lt;/p&gt;

&lt;p&gt;
Doesn&#39;t sound like a recipe for success.
&lt;/p&gt;

&lt;p&gt;
We&#39;re seeing this at multiple levels and we&#39;re seeing it because very
few places seem to have a plan. A multi year path taking kids from
start to finish. It&#39;s something we&#39;ve done and I&#39;m proud of it.
&lt;/p&gt;

&lt;p&gt;
I think that if we look carefully, we&#39;ll start to see what my
graduates reported happening more and more. Traditional CS sequences
can be pretty unforgiving and unless colleges put in a sensible ramp
up and recognize that not all CS and related majors should go on to
grad school we&#39;re going to have a high rate of kids initially thinking
that CS is for them and then dropping. I do suspect it will get better as colleges
recognize that there&#39;s more than one type of CS major.
&lt;/p&gt;

&lt;p&gt;
It will be interesting to see what happens on the high school
level. Will we see what we&#39;ve seen in math - two years on the first
level course then dump the kids into something like APCS A or will we
see something more sensible?
&lt;/p&gt;

&lt;p&gt;
Where this really gets me is with all those after school and summer
programs. One give away is when a program claims &#34;learn to &lt;span class=&#34;underline&#34;&gt;&lt;span class=&#34;underline&#34;&gt;_&lt;/span&gt;&lt;/span&gt; in 4
weeks,&#34; &#34;our kids learn more than in an AP class&#34;, or something similar.
&lt;/p&gt;

&lt;p&gt;
My team and I have had to &#34;rescue&#34; kids from a number of
them.
&lt;/p&gt;

&lt;p&gt;
These programs take a number of forms:
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;Using simplified environments that export to mobile
&lt;/li&gt;
&lt;li&gt;Gluing together libraries with minimal code
&lt;/li&gt;
&lt;li&gt;Working with an extreme amount of coaching in a short period of
time.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Now, none of these things are necessarily bad but so many of these
programs are designed and run by non-educators.
&lt;/p&gt;

&lt;p&gt;
So, the kids go through the programs, think they know the real deal,
and are hammered when they enroll in a real CS class.
&lt;/p&gt;

&lt;p&gt;
I&#39;ve seen it happen. There was even an article a couple of years ago
which then went on to blame the teacher in spite of the fact that the
program boasts that thier kids &#34;learned more than in APCS.&#34;
&lt;/p&gt;

&lt;p&gt;
Now, all these programs have to do is make sure the kids make
something exciting and that they&#39;re happy. There&#39;s no real
accountability and the guy at the next level will shoulder the blame.
&lt;/p&gt;

&lt;p&gt;
So there you have it, setting kids up to fail.
&lt;/p&gt;

&lt;p&gt;
It&#39;s something I think we&#39;ll have to be more aware of and on guard for
as CS becomes more mainstream.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Shipping a product</title>
      <link>https://cestlaz.github.io/posts/2015-06-19-shipping-product/</link>
      <pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-06-19-shipping-product/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
Back in April, I was at the second annual &#34;Dream It, Code It, Win It!&#34;
awards. Some of our kids had submitted work and were selected as
awardees in the high school division.
&lt;/p&gt;

&lt;p&gt;
It was great to see &lt;a href=&#34;https://twitter.com/Cahnja&#34;&gt;Jack&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/davcahn&#34;&gt;David&lt;/a&gt; Cahn there. Jack and David were
both members of winning high school teams last year and they were back
as college winners this time around.
&lt;/p&gt;

&lt;p&gt;
It was great to see them.
&lt;/p&gt;

&lt;p&gt;
The Cahn brothers spent some time talking to the current crop. They
mentioned one thing that really confirmed that I&#39;ve been on the right
track with my SoftDev class - they said it was their most valuable
experiece at Stuy because they learned how to ship a product. To take
something, as a team, from idea to delivery with all the bumps along
the way. Now, obviously, we don&#39;t do everything - there are no
questions of funding for instance and I think we cover a lot of great
CS but giving the kids a chance to learn to take a project from idea
to delivery and all that entails was a big part of the design of the
course.
&lt;/p&gt;

&lt;p&gt;
With that in mind, I just finished evaluating projects and here&#39;s a
sampling:
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-2&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-2&#34;&gt;
&lt;p&gt;
Stuy kids live all over the city. Nadia, Aida, and Sydney solved the
problem of where to meet your friends when you live on opposite sides
of town:
&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/i_xDQg35T20&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-2-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-2-1&#34;&gt;&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-2-1&#34;&gt;
&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;Live demo: &lt;a href=&#34;http://meetup.jumpingcrab.com/&#34;&gt;http://meetup.jumpingcrab.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/apiccato/meetup&#34;&gt;https://github.com/apiccato/meetup&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-3&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-3&#34;&gt;
&lt;p&gt;
Miranda, Leslia, and Anya built a Chrome plugin and server to
summarize articles:
&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pvRf7fPlV6Q&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-3-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-3-1&#34;&gt;&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-3-1&#34;&gt;
&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;Server: &lt;a href=&#34;http://104.236.53.73/&#34;&gt;http://104.236.53.73/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Chrome plugin: &lt;a href=&#34;https://chrome.google.com/webstore/detail/dmbibehpblbnkacpmiecigdkcomfkhkm/&#34;&gt;https://chrome.google.com/webstore/detail/dmbibehpblbnkacpmiecigdkcomfkhkm/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/mchaiken/summarize&#34;&gt;https://github.com/mchaiken/summarize&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-4&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-4&#34;&gt;
&lt;p&gt;
and Philipp, Richard, Steve, and Ziwei created an anonymous author
attribution system:
&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/XksrKfxEprg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-4-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-4-1&#34;&gt;&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-4-1&#34;&gt;
&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/I-A-I/authorensics&#34;&gt;https://github.com/I-A-I/authorensics&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-5&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-5&#34;&gt;
&lt;p&gt;
Not a SoftDev project, but for good measure, here&#39;s Natan and
Angelika&#39;s Ballroom Dance project - apparently they&#39;re the first two
to actually do a SONG and dance and they&#39;ve both got the pipes:
&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/_xjHFdrJ4jQ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
There were lots of other great projects all up on github:
&lt;a href=&#34;https://github.com/stuycs-softdev/student-work-spring-2015&#34;&gt;https://github.com/stuycs-softdev/student-work-spring-2015&lt;/a&gt; albeit in a
rather disorganized form.
&lt;/p&gt;

&lt;p&gt;
So proud of the work they all did this year.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Jazz Hands!!!!!!</title>
      <link>https://cestlaz.github.io/posts/2015-06-11-jazz-hands/</link>
      <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-06-11-jazz-hands/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;


&lt;div class=&#34;figure&#34;&gt;
&lt;p&gt;&lt;img src=&#34;http:/img/jazz-hands/jazzhands.gif&#34; alt=&#34;jazzhands.gif&#34; width=&#34;300px&#34; align=&#34;center&#34; /&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
The StuyCS Semi Formal, Clyde &#34;Thluffy&#34; Sinclair, and other assorted
&lt;a href=&#34;http://cestlaz.github.io/2015/03/08/antother-day-stuycs.html#.VXmHfN_08bw&#34;&gt;silliness&lt;/a&gt; - one of the reasons StuyCS is a family is that we try to
have fun.
&lt;/p&gt;

&lt;p&gt;
Jazz Hands day was the latest.
&lt;/p&gt;

&lt;p&gt;
I got the idea at JonAlf&#39;s wedding. The wait staff were all wearing
white gloves - all of a sudden it hit me - Jazz Hands!!!! and Jazz
Hands day was born.
&lt;/p&gt;

&lt;p&gt;
The idea:
&lt;/p&gt;

&lt;p&gt;
All of our Junior and Senior CS students, around 350 or so, along with
their teachers would wear white gloves on a specified day. The rules
were throughout the day, in any class, provided there were two or more
CS Jazz Hands students in the class, whenever:
&lt;/p&gt;
&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;a student gave a good thoughtful answer to a question
&lt;/li&gt;
&lt;li&gt;or the teacher made a particularly strong point
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The kids would give a Jazz Hands salute.
&lt;/p&gt;

&lt;p&gt;
Imagine, some kid gives a great answer and 1/3 of the class all of a
sudden does Jazz Hands!!!!
&lt;/p&gt;


&lt;div class=&#34;figure&#34;&gt;
&lt;p&gt;&lt;img src=&#34;http:/img/jazz-hands/jazzhands2.gif&#34; alt=&#34;jazzhands2.gif&#34; width=&#34;300px&#34; align=&#34;center&#34; /&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
Unfortunately, this was an event that I wouldn&#39;t actually be able to
see as the havoc would be wreaked in other classes.
&lt;/p&gt;

&lt;p&gt;
By the time we got to the end of the day, I knew we were on to
something.
&lt;/p&gt;

&lt;p&gt;
Word on the street was that a bunch of teachers thought it was
hilarious. Apparently one teacher pulled the math chair into her class
so she could see.
&lt;/p&gt;

&lt;p&gt;
Then we had at least a few teachers that didn&#39;t get into the spirit
and actually lodged complaints.
&lt;/p&gt;

&lt;p&gt;
Let&#39;s see, we had students, via a non-verbal form of feedback,
indicate that they were totally engaged by acknowledging what they
felt was a good point.
&lt;/p&gt;

&lt;p&gt;
Disruptive?
&lt;/p&gt;

&lt;p&gt;
Imagine that.
&lt;/p&gt;

&lt;p&gt;
I don&#39;t know what makes me want to fine tune this event more - the
positive feedback or the complaints.
&lt;/p&gt;

&lt;p&gt;
``
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Taking stock and tracking progress</title>
      <link>https://cestlaz.github.io/posts/2015-02-11-taking-stock-self-assess/</link>
      <pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-02-11-taking-stock-self-assess/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
When starting the spring semester, students are frequently a little
rusty. They just had a high intensity month of study, tests, and
projects. That was followed by a week of nothing.
&lt;/p&gt;

&lt;p&gt;
I like to start with something lightweight that gets them coding again
and ramps them up to speed.
&lt;/p&gt;

&lt;p&gt;
In SoftDev I started with a brief overview of the HTML5 canvas and
then gave them a small homework assignment to do something fun.
&lt;/p&gt;

&lt;p&gt;
I also remind the kids to self assess where they are and how they&#39;ve
developed as a programmer.
&lt;/p&gt;

&lt;p&gt;
I get a little tired of education &#34;experts&#34; espousing nonsense like you
have to have each talk each day or that you need to assess each kid
multiple times a period. That&#39;s nonsense. With 34 kids in a 40 minute
class and 150 kids a day, that doesn&#39;t fly. Besides, so many concepts
take time to develop, learn, and absorb.
&lt;/p&gt;

&lt;p&gt;
Yes, you can get some instant and short term feedback but a lot more
is revealed over time.
&lt;/p&gt;

&lt;p&gt;
I&#39;m attaching a small sampling of their homework assignments. It was
basically a one day assignment to do something fun with the HTML5
canvas and indeed, it looks like they had fun.
&lt;/p&gt;

&lt;p&gt;
I asked the kids to reflect on what they did now and what they could
do a semester, two, and three semesters ago.
&lt;/p&gt;

&lt;p&gt;
In the beginning they would have had no idea how to approach any of
these. A year ago, they would be a major project. Now, they can knock
these out as a homework assignment.
&lt;/p&gt;

&lt;p&gt;
Once you take a step back to look at how much a student can grow in a
year or so you have to marvel at the results.
&lt;/p&gt;

&lt;p&gt;
At a place like Stuy, the kids frequently and unfairly judge themselves against
super prodigies.
&lt;/p&gt;

&lt;p&gt;
I&#39;m hoping by looking back at what they could do then vs now they&#39;ll
appreciate how awesome they are.
&lt;/p&gt;

&lt;p&gt;
All sources at &lt;a href=&#34;https://github.com/stuycs-softdev/submissions&#34;&gt;https://github.com/stuycs-softdev/submissions&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Enjoy&amp;#x2026;
&lt;/p&gt;

&lt;div id=&#34;outline-container-unnumbered-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;unnumbered-1&#34;&gt;Chain reaction&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-unnumbered-1&#34;&gt;
&lt;/div&gt;&lt;div id=&#34;outline-container-unnumbered-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;unnumbered-2&#34;&gt;click to start the reaction&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-unnumbered-2&#34;&gt;
&lt;/div&gt;&lt;div id=&#34;outline-container-unnumbered-3&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;unnumbered-3&#34;&gt;by Nadia and Sophie&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-unnumbered-3&#34;&gt;
&lt;iframe height=600 width=&#34;80%&#34;
src=&#34;https://cdn.rawgit.com/stuycs-softdev/submissions/master/6/canvas/sophie-nadia/canvas.html&#34;
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-unnumbered-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;unnumbered-4&#34;&gt;MakeOver Party&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-unnumbered-4&#34;&gt;
&lt;/div&gt;&lt;div id=&#34;outline-container-unnumbered-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;unnumbered-5&#34;&gt;Take a picture and apply virtual makeup&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-unnumbered-5&#34;&gt;
&lt;/div&gt;&lt;div id=&#34;outline-container-unnumbered-6&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;unnumbered-6&#34;&gt;by Veronika and Miranda&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-unnumbered-6&#34;&gt;
&lt;iframe height=800 width=&#34;80%&#34;
src=&#34;https://cdn.rawgit.com/stuycs-softdev/submissions/master/7/canvas/miranda-veronika/canvas.html&#34;
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-unnumbered-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;unnumbered-7&#34;&gt;3D Depth Perception Pong&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-unnumbered-7&#34;&gt;
&lt;/div&gt;&lt;div id=&#34;outline-container-unnumbered-8&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;unnumbered-8&#34;&gt;Follow the ball and keep it in the well&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-unnumbered-8&#34;&gt;
&lt;/div&gt;&lt;div id=&#34;outline-container-unnumbered-9&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;unnumbered-9&#34;&gt;by Natan&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-unnumbered-9&#34;&gt;
&lt;iframe height=800 width=&#34;80%&#34;
src=&#34;https://cdn.rawgit.com/stuycs-softdev/submissions/master/6/canvas/NZamansky/index.html&#34;
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-unnumbered-10&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;unnumbered-10&#34;&gt;Can&#39;t really describe this but I love it&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-unnumbered-10&#34;&gt;
&lt;/div&gt;&lt;div id=&#34;outline-container-unnumbered-11&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;unnumbered-11&#34;&gt;Use WASD to move DW around&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-unnumbered-12&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;unnumbered-12&#34;&gt;by Fish&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-unnumbered-12&#34;&gt;
&lt;iframe height=800 width=&#34;80%&#34;
src=&#34;https://cdn.rawgit.com/stuycs-softdev/submissions/master/6/canvas/fishy/dyrlandland.html&#34;
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Kids these days -- they don&#39;t know nuttin</title>
      <link>https://cestlaz.github.io/posts/2015-01-15-kids-know-nuttin/</link>
      <pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-01-15-kids-know-nuttin/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
Yesterday, I took part in a round table discussion on Ed Tech and Tech
Ed, the latter being more, as they say, my wheelhouse. Afterwards a
few of us were chatting and a friend observed that when she first
started to talk to high school kids she was shocked that they really
didn&#39;t know the local tech players - neither names nor companies.
&lt;/p&gt;

&lt;p&gt;
A couple of years ago, another friend was helping me organize an event for
high schoolers. He started to go down a list of well known tech names
and was surprised when I told him that the kids wouldn&#39;t know them.
&lt;/p&gt;

&lt;p&gt;
The first time I experienced this, it was just as big a surprised to
me. I was setting up a big high school event at Foursquare (&lt;a href=&#34;http://cestlaz.github.io/2012/03/31/checking-in-with-family.html#.VLfzl9-c1CU&#34;&gt;post here&lt;/a&gt;)
and was shocked to learn that practically non of the attendees had
heard of the company.
&lt;/p&gt;

&lt;p&gt;
This would never have been the case in the 90s or even the early
2000s. What happened?
&lt;/p&gt;

&lt;p&gt;
I have a theory.
&lt;/p&gt;

&lt;p&gt;
I don&#39;t think it&#39;s just due to the fact that CS is a hot subject
now. It was hot during the 90&#39;s bubble. I&#39;m sure the fact that a wider
range of kids are being exposed to CS is part of this phenomenon but
I don&#39;t think it&#39;s the biggest reason.
&lt;/p&gt;

&lt;p&gt;
I think CS kids back then knew more &amp;#x2013; more of the players, more of the
tools, more about the systems because they had to. In some ways, and I
know I&#39;m vastly overstating things, it&#39;s &#34;too easy&#34; now.
&lt;/p&gt;

&lt;p&gt;
Back in the day, if you wanted to put your thoughts on line you had
to:
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;learn html
&lt;/li&gt;
&lt;li&gt;maybe some PHP, Perl, or Python
&lt;/li&gt;
&lt;li&gt;You probably had to learn a bit about hosting a server
&lt;/li&gt;
&lt;li&gt;you had to deal with registering a domain name
&lt;/li&gt;
&lt;li&gt;and more
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Now, you just go to blogger or tumblr.
&lt;/p&gt;

&lt;p&gt;
Back then, if you wanted to communicate, you had to learn how to learn
the dark art of &lt;a href=&#34;http://en.wikipedia.org/wiki/Internet_Relay_Chat&#34;&gt;irc&lt;/a&gt;, now you have Google chat.
&lt;/p&gt;

&lt;p&gt;
Back then, you want to share photos, you had to learn how to make a
gallery. Now, Facebook.
&lt;/p&gt;

&lt;p&gt;
And of course the list goes on.
&lt;/p&gt;

&lt;p&gt;
Even programming required that you know something about the filesystem
and the basics of working in an operating system. Now between IDEs
both local and cloud based, you can learn all about programming and
never actually create a stand alone program that operates outside of
the IDE sandbox.
&lt;/p&gt;

&lt;p&gt;
Back in the day, if a kid was into CS they had to learn more than
just the in class toolset and this in turn forced them to be in touch
with the tech community both products and players.
&lt;/p&gt;

&lt;p&gt;
I&#39;m not saying the &#34;good old days&#34; were in fact that good and I love
most of the progress we&#39;ve made. Just noting the cultural difference.
&lt;/p&gt;

&lt;p&gt;
It means we should pay more attention to educating our classes on tech
culture, the good, the bad, and the ugly.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Little details we take for granted</title>
      <link>https://cestlaz.github.io/posts/2014-11-21-little-details/</link>
      <pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-11-21-little-details/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;


&lt;div id=&#34;outline-container-unnumbered-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;unnumbered-1&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-unnumbered-1&#34;&gt;
&lt;p&gt;
I&#39;m getting ready for my AP classes this morning. We&#39;re building a
&lt;a href=&#34;http://cestlaz.github.io/2011/12/03/wheres-waldo-text-style.html#.VG8qtt-c2Ak&#34;&gt;word search generator&lt;/a&gt; and we&#39;re at the point where we need to read a
list of words from a file
&lt;/p&gt;

&lt;p&gt;
First, I&#39;d better make sure I can do it. We&#39;re using the java
&lt;b&gt;&lt;b&gt;scanner&lt;/b&gt;&lt;/b&gt;, mostly because it&#39;s easy.
&lt;/p&gt;

&lt;p&gt;
First cut:
&lt;/p&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-java&#34;&gt;&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00ff00;&#34;&gt;wl&lt;/span&gt; {
&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #00ff00;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000ff; font-weight: bold;&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #00ff00;&#34;&gt;String&lt;/span&gt;[] &lt;span style=&#34;color: #ffff00;&#34;&gt;args&lt;/span&gt;) {
&lt;span style=&#34;color: #00ff00;&#34;&gt;Scanner&lt;/span&gt; &lt;span style=&#34;color: #ffff00;&#34;&gt;sc&lt;/span&gt; = &lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #00ff00;&#34;&gt;Scanner&lt;/span&gt;(&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #00ff00;&#34;&gt;File&lt;/span&gt;(&lt;span style=&#34;color: #00ff00;&#34;&gt;&#34;words&#34;&lt;/span&gt;));
&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;while&lt;/span&gt; (sc.hasNext()){
&lt;span style=&#34;color: #00ff00;&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #ffff00;&#34;&gt;s&lt;/span&gt; = sc.next();
System.out.println(s);
}
}
}
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
Oh yes, I forgot the
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
import java.io.*;
import java.util.*;
&lt;/pre&gt;


&lt;p&gt;
Oh, and also the fact that I&#39;ve got deal with exceptions when working
with files:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-java&#34;&gt;&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;try&lt;/span&gt; {
&lt;span style=&#34;color: #00ff00;&#34;&gt;Scanner&lt;/span&gt; &lt;span style=&#34;color: #ffff00;&#34;&gt;sc&lt;/span&gt; = &lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #00ff00;&#34;&gt;Scanner&lt;/span&gt;(&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #00ff00;&#34;&gt;File&lt;/span&gt;(&lt;span style=&#34;color: #00ff00;&#34;&gt;&#34;words&#34;&lt;/span&gt;));
&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;while&lt;/span&gt; (sc.hasNext()){
&lt;span style=&#34;color: #00ff00;&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #ffff00;&#34;&gt;s&lt;/span&gt; = sc.next();
System.out.println(s);
}
} &lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color: #00ff00;&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #ffff00;&#34;&gt;e&lt;/span&gt;){
System.out.println(&lt;span style=&#34;color: #00ff00;&#34;&gt;&#34;Can&#39;t open file.&#34;&lt;/span&gt;);
System.exit(0);
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
But we don&#39;t want to wrap our entire program in an exception:
&lt;/p&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-java&#34;&gt;&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;try&lt;/span&gt; {
&lt;span style=&#34;color: #00ff00;&#34;&gt;Scanner&lt;/span&gt; &lt;span style=&#34;color: #ffff00;&#34;&gt;sc&lt;/span&gt; = &lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #00ff00;&#34;&gt;Scanner&lt;/span&gt;(&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #00ff00;&#34;&gt;File&lt;/span&gt;(&lt;span style=&#34;color: #00ff00;&#34;&gt;&#34;words&#34;&lt;/span&gt;));
} &lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color: #00ff00;&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #ffff00;&#34;&gt;e&lt;/span&gt;){
System.out.println(&lt;span style=&#34;color: #00ff00;&#34;&gt;&#34;Can&#39;t open file.&#34;&lt;/span&gt;);
System.exit(0);
}

&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;while&lt;/span&gt; (sc.hasNext()){
&lt;span style=&#34;color: #00ff00;&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #ffff00;&#34;&gt;s&lt;/span&gt; = sc.next();
System.out.println(s);

}
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
Now it doesn&#39;t work because the &lt;b&gt;&lt;b&gt;Scanner sc&lt;/b&gt;&lt;/b&gt; might not exist after the
try catch block (if an exception occurred), so we need:
&lt;/p&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-java&#34;&gt;&lt;span style=&#34;color: #00ff00;&#34;&gt;Scanner&lt;/span&gt; &lt;span style=&#34;color: #ffff00;&#34;&gt;sc&lt;/span&gt;
&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;try&lt;/span&gt; {
sc = &lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #00ff00;&#34;&gt;Scanner&lt;/span&gt;(&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #00ff00;&#34;&gt;File&lt;/span&gt;(&lt;span style=&#34;color: #00ff00;&#34;&gt;&#34;words&#34;&lt;/span&gt;));
} &lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color: #00ff00;&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #ffff00;&#34;&gt;e&lt;/span&gt;){
System.out.println(&lt;span style=&#34;color: #00ff00;&#34;&gt;&#34;Can&#39;t open file.&#34;&lt;/span&gt;);
System.exit(0);
}

&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;while&lt;/span&gt; (sc.hasNext()){
&lt;span style=&#34;color: #00ff00;&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #ffff00;&#34;&gt;s&lt;/span&gt; = sc.next();
System.out.println(s);

}
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
And now this doesn&#39;t work because &lt;b&gt;&lt;b&gt;sc&lt;/b&gt;&lt;/b&gt; might not have a value so we
finally get to the working version:
&lt;/p&gt;


&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-java&#34;&gt;&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #ff00ff;&#34;&gt;java&lt;/span&gt;.&lt;span style=&#34;color: #ff00ff;&#34;&gt;io&lt;/span&gt;.*;
&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #ff00ff;&#34;&gt;java&lt;/span&gt;.&lt;span style=&#34;color: #ff00ff;&#34;&gt;util&lt;/span&gt;.*;
&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;publ&lt;/span&gt;&lt;span style=&#34;color: #00ff00;&#34;&gt;ic c&lt;/span&gt;&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;lass&lt;/span&gt; &lt;span style=&#34;color: #00ff00;&#34;&gt;wl&lt;/span&gt; {
&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #00ff00;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000ff; font-weight: bold;&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #00ff00;&#34;&gt;String&lt;/span&gt;[] &lt;span style=&#34;color: #ffff00;&#34;&gt;args&lt;/span&gt;) {
&lt;span style=&#34;color: #00ff00;&#34;&gt;Scanner&lt;/span&gt; &lt;span style=&#34;color: #ffff00;&#34;&gt;sc&lt;/span&gt; = &lt;span style=&#34;color: #ff00ff;&#34;&gt;null&lt;/span&gt;;
&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;try&lt;/span&gt; {
sc = &lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #00ff00;&#34;&gt;Scanner&lt;/span&gt;(&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #00ff00;&#34;&gt;File&lt;/span&gt;(&lt;span style=&#34;color: #00ff00;&#34;&gt;&#34;words&#34;&lt;/span&gt;));
} &lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color: #00ff00;&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #ffff00;&#34;&gt;e&lt;/span&gt;){
System.out.println(&lt;span style=&#34;color: #00ff00;&#34;&gt;&#34;Can&#39;t open file.&#34;&lt;/span&gt;);
System.exit(0);
}
&lt;span style=&#34;color: #00ffff; font-weight: bold;&#34;&gt;while&lt;/span&gt; (sc.hasNext()){
&lt;span style=&#34;color: #00ff00;&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #ffff00;&#34;&gt;s&lt;/span&gt; = sc.next();
System.out.println(&lt;span style=&#34;color: #00ff00;&#34;&gt;s&lt;/span&gt;);

}
}
}
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
Really simple program but that&#39;s a long list of things that can go
wrong along the way. Nothing big, but each a stumbling block for a
beginning student that doesn&#39;t have the wealth of experience that
someone like me has.
&lt;/p&gt;

&lt;p&gt;
I had an interesting discussion with one of my seniors the other day
on this subject - all the base knowledge that experienced programmers
have that students don&#39;t and how we have to approach teaching so that
students are supported and not frustrated by these little but
important speed-bumps that they&#39;ll hit along the way.
&lt;/p&gt;

&lt;p&gt;
I hope to write more about this soon, but for now I&#39;ll leave you to
ponder the issue.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hidden Complexity</title>
      <link>https://cestlaz.github.io/posts/2014-11-17-hidden-complexity/</link>
      <pubDate>Mon, 17 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-11-17-hidden-complexity/</guid>
      <description>

&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
I&#39;ve said it many times:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Never use a tool you couldn&#39;t write yourself.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
That is - make sure you understand what&#39;s going on under the hood.
&lt;/p&gt;

&lt;p&gt;
In AP we&#39;ve been playing with ArrayLists. The problem for today?
Create an ArrayList with consecutive integers and then write a routine
that will randomize the ArrayList.
&lt;/p&gt;

&lt;p&gt;
For example, you might start with this ArrayList:
&lt;/p&gt;

&lt;pre class=&#34;example&#34;&gt;
0,1,2,3,4,5
&lt;/pre&gt;

&lt;p&gt;
and end up with
&lt;/p&gt;

&lt;pre class=&#34;example&#34;&gt;
3,5,1,4,2,0
&lt;/pre&gt;

&lt;p&gt;
First cut, the students grabbed a random element from the ArrayList,
removed it, and added it to the end of a new list. Then repeat until
the original list is empty and the new one is randomized. Then return
the list.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-java&#34;&gt;&lt;span style=&#34;color: #a020f0;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #228b22;&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span style=&#34;color: #228b22;&#34;&gt;Integer&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;shuffle1&lt;/span&gt;(&lt;span style=&#34;color: #228b22;&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span style=&#34;color: #228b22;&#34;&gt;Integer&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;l&lt;/span&gt;){
&lt;span style=&#34;color: #228b22;&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span style=&#34;color: #228b22;&#34;&gt;Integer&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;result&lt;/span&gt; = &lt;span style=&#34;color: #a020f0;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #228b22;&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span style=&#34;color: #228b22;&#34;&gt;Integer&lt;/span&gt;&amp;gt;();
&lt;span style=&#34;color: #a020f0;&#34;&gt;while&lt;/span&gt; (l.size()&amp;gt;0){
&lt;span style=&#34;color: #228b22;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;i&lt;/span&gt; = rnd.nextInt(l.size());
&lt;span style=&#34;color: #228b22;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;v&lt;/span&gt; = l.remove(i);
result.add(v);
}
&lt;span style=&#34;color: #a020f0;&#34;&gt;return&lt;/span&gt; result;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Looks good.
&lt;/p&gt;

&lt;p&gt;
Version two was much the same but after it removed a random value, it
added it to the end of the same ArrayList:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-java&#34;&gt;&lt;span style=&#34;color: #a020f0;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #228b22;&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span style=&#34;color: #228b22;&#34;&gt;Integer&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;shuffle2&lt;/span&gt;(&lt;span style=&#34;color: #228b22;&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span style=&#34;color: #228b22;&#34;&gt;Integer&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;l&lt;/span&gt;){
&lt;span style=&#34;color: #228b22;&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span style=&#34;color: #228b22;&#34;&gt;Integer&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;result&lt;/span&gt; = &lt;span style=&#34;color: #a020f0;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #228b22;&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span style=&#34;color: #228b22;&#34;&gt;Integer&lt;/span&gt;&amp;gt;();
&lt;span style=&#34;color: #a020f0;&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #228b22;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;s&lt;/span&gt;=l.size();s&amp;gt;0;s--) {
&lt;span style=&#34;color: #228b22;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;i&lt;/span&gt; = rnd.nextInt(s);
&lt;span style=&#34;color: #228b22;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;v&lt;/span&gt; = l.remove(i);
l.add(v);
}
&lt;span style=&#34;color: #a020f0;&#34;&gt;return&lt;/span&gt; l;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Then it was time to time. Both seemed pretty quick but as our data set
grew things seemed strange:
&lt;/p&gt;
&lt;div class=&#34;row&#34;&gt;
&lt;div class=&#34;c4&#34;&gt;
&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;


&lt;colgroup&gt;
&lt;col  class=&#34;left&#34; /&gt;

&lt;col  class=&#34;left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;left&#34;&gt;Size&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;left&#34;&gt;Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;100,000&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;2 seconds&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;200,000&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;7 seconds&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;400,000&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;26 seonds&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;
We&#39;re just looping through an ArrayList, what&#39;s going on? When we
double the size of the list, it should just take double the time.
&lt;/p&gt;

&lt;p&gt;
Since the class already wrote their own ArrayList implementation, they
were quick to realize that every time we removed an item from the
original Array, we were doing a linear or O(n) operation. That means
our algorithms, which look linear, are in fact O(N&lt;sup&gt;2&lt;/sup&gt;).
&lt;/p&gt;

&lt;p&gt;
Can we do better? You bet. They just changed the remove and add to
using get and set. Instead off removing an item and re-inserting it,
just swap the randomly selected item with the last element:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-java&#34;&gt;&lt;span style=&#34;color: #a020f0;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #228b22;&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span style=&#34;color: #228b22;&#34;&gt;Integer&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;shuffle3&lt;/span&gt;(&lt;span style=&#34;color: #228b22;&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span style=&#34;color: #228b22;&#34;&gt;Integer&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;l&lt;/span&gt;){
&lt;span style=&#34;color: #228b22;&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span style=&#34;color: #228b22;&#34;&gt;Integer&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;result&lt;/span&gt; = &lt;span style=&#34;color: #a020f0;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #228b22;&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span style=&#34;color: #228b22;&#34;&gt;Integer&lt;/span&gt;&amp;gt;();
&lt;span style=&#34;color: #a020f0;&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #228b22;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;s&lt;/span&gt;=l.size();s&amp;gt;0;s--) {
&lt;span style=&#34;color: #228b22;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;i&lt;/span&gt; = rnd.nextInt(s);

&lt;span style=&#34;color: #228b22;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;tmp&lt;/span&gt; = l.get(i);
l.set(i, l.get(s-1));
l.set(s-1,tmp);
}
&lt;span style=&#34;color: #a020f0;&#34;&gt;return&lt;/span&gt; l;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
No removes so no hidden linear component.
&lt;/p&gt;

&lt;p&gt;
The run time?
&lt;/p&gt;
&lt;div class=&#34;row&#34;&gt;
&lt;div class=&#34;c4&#34;&gt;
&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;


&lt;colgroup&gt;
&lt;col  class=&#34;left&#34; /&gt;

&lt;col  class=&#34;left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;left&#34;&gt;Size&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;left&#34;&gt;Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;100,000&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;.15 seconds&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;200,000&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;.16 seconds&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&#34;left&#34;&gt;400,000&lt;/td&gt;
&lt;td class=&#34;left&#34;&gt;.17 seonds&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;
In fact, it took data sets in the size of millions before we even
broke more than a couple of seconds.
&lt;/p&gt;

&lt;p&gt;
The algorithm looks the same but understanding what goes on under the
hood can make a big difference.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Forty minutes to the punch line or &#34;we&#39;ll never look at functions the same way again&#34;</title>
      <link>https://cestlaz.github.io/posts/2014-11-12-decorators/</link>
      <pubDate>Wed, 12 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-11-12-decorators/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;div id=&#34;outline-container-unnumbered-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;unnumbered-1&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-unnumbered-1&#34;&gt;
&lt;p&gt;
How many times do we teach something and leave the kids thinking:
&lt;/p&gt;

&lt;p&gt;
&#34;what&#39;s the point of this?&#34; &#34;When will I use this?&#34; or even just the
plain old fashioned &#34;that&#39;s weird.&#34;
&lt;/p&gt;

&lt;p&gt;
It&#39;s pretty cool when a lesson starts out that way but you get to the
payoff by the end of the class.
&lt;/p&gt;

&lt;p&gt;
Today we started exploring some advanced python.
&lt;/p&gt;

&lt;p&gt;
We started by showing that you can assign functions to variables or
pass them as parameters:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;&lt;span style=&#34;color: #a020f0;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;inc&lt;/span&gt;(x):
&lt;span style=&#34;color: #a020f0;&#34;&gt;return&lt;/span&gt; x+1
&lt;span style=&#34;color: #a020f0;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;dec&lt;/span&gt;(x):
&lt;span style=&#34;color: #a020f0;&#34;&gt;return&lt;/span&gt; x-1

&lt;span style=&#34;color: #a0522d;&#34;&gt;f&lt;/span&gt; = inc
&lt;span style=&#34;color: #a020f0;&#34;&gt;print&lt;/span&gt; f(5)

&lt;span style=&#34;color: #a0522d;&#34;&gt;flist&lt;/span&gt; = [inc,dec]

&lt;span style=&#34;color: #a020f0;&#34;&gt;print&lt;/span&gt; flist[1](5)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
We then looked at closures in python:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;&lt;span style=&#34;color: #a020f0;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;makeAdder&lt;/span&gt;(n):
&lt;span style=&#34;color: #a020f0;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;inner&lt;/span&gt;(x):
&lt;span style=&#34;color: #a020f0;&#34;&gt;return&lt;/span&gt; x+n
&lt;span style=&#34;color: #a020f0;&#34;&gt;return&lt;/span&gt; inner

&lt;span style=&#34;color: #a0522d;&#34;&gt;add3&lt;/span&gt; = makeAdder(3)
&lt;span style=&#34;color: #a0522d;&#34;&gt;add5&lt;/span&gt; = makeAdder(5)

&lt;span style=&#34;color: #a020f0;&#34;&gt;print&lt;/span&gt; add3(10)
&lt;span style=&#34;color: #a020f0;&#34;&gt;print&lt;/span&gt; add5(10)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The idea that we can make a function that builds and returns a
function. When we call &lt;b&gt;&lt;b&gt;makeAdder(3)&lt;/b&gt;&lt;/b&gt;, the 3 is passed as parameter
n so the inner function reduces to &lt;b&gt;&lt;b&gt;return x+3&lt;/b&gt;&lt;/b&gt; and then we return
that inner function. When we later run it: add3(10) it adds
10+3. makeAdder(5) works similarly but passing a 5 in for n instead
of a 3.
&lt;/p&gt;

&lt;p&gt;
Even a somewhat clunky way of doing class type abstractions:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;&lt;span style=&#34;color: #a020f0;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;make_counter&lt;/span&gt;():
&lt;span style=&#34;color: #b22222;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;private &#34;instance&#34; data&lt;/span&gt;
&lt;span style=&#34;color: #b22222;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;has to be a list due to weird python scoping rules&lt;/span&gt;
&lt;span style=&#34;color: #a0522d;&#34;&gt;count&lt;/span&gt; = [0]

&lt;span style=&#34;color: #b22222;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;public methods&lt;/span&gt;
&lt;span style=&#34;color: #a020f0;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;inc&lt;/span&gt;():
&lt;span style=&#34;color: #a0522d;&#34;&gt;count&lt;/span&gt;[0]=count[0]+1
&lt;span style=&#34;color: #a020f0;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;dec&lt;/span&gt;():
&lt;span style=&#34;color: #a0522d;&#34;&gt;count&lt;/span&gt;[0]=count[0]-1
&lt;span style=&#34;color: #a020f0;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;reset&lt;/span&gt;():
&lt;span style=&#34;color: #a0522d;&#34;&gt;count&lt;/span&gt;[0]=0
&lt;span style=&#34;color: #a020f0;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;get&lt;/span&gt;():
&lt;span style=&#34;color: #a020f0;&#34;&gt;return&lt;/span&gt; count[0]

&lt;span style=&#34;color: #b22222;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;send back a dictionary so we have access to all the methods&lt;/span&gt;
&lt;span style=&#34;color: #a020f0;&#34;&gt;return&lt;/span&gt; {&lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;inc&#39;&lt;/span&gt;: inc, &lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;dec&#39;&lt;/span&gt;: dec, &lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;reset&#39;&lt;/span&gt;: reset, &lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;get&#39;&lt;/span&gt;: get}

&lt;span style=&#34;color: #a0522d;&#34;&gt;c1&lt;/span&gt; = make_counter()
&lt;span style=&#34;color: #a0522d;&#34;&gt;c2&lt;/span&gt; = make_counter()

&lt;span style=&#34;color: #b22222;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;we&#39;ve got to use the clunky list notation &lt;/span&gt;
c1[&lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;inc&#39;&lt;/span&gt;]()
c1[&lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;inc&#39;&lt;/span&gt;]()
c1[&lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;inc&#39;&lt;/span&gt;]()
&lt;span style=&#34;color: #a020f0;&#34;&gt;print&lt;/span&gt; c1[&lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;get&#39;&lt;/span&gt;]()
c2[&lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;inc&#39;&lt;/span&gt;]()
&lt;span style=&#34;color: #a020f0;&#34;&gt;print&lt;/span&gt; c2[&lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;get&#39;&lt;/span&gt;]()
c1[&lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;reset&#39;&lt;/span&gt;]()
&lt;span style=&#34;color: #a020f0;&#34;&gt;print&lt;/span&gt; c1[&lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;get&#39;&lt;/span&gt;]()
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Up to now the students are able to see how this works but the why is
unclear.
&lt;/p&gt;

&lt;p&gt;
So now we&#39;ll look at where this is useful.
&lt;/p&gt;

&lt;p&gt;
Let&#39;s suppose we have routines like the following. It returns a
string:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;&lt;span style=&#34;color: #a020f0;&#34;&gt;import&lt;/span&gt; random
&lt;span style=&#34;color: #a020f0;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;get_name&lt;/span&gt;():
&lt;span style=&#34;color: #a0522d;&#34;&gt;names&lt;/span&gt; = [&lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;tom&#39;&lt;/span&gt;,&lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;sue&#39;&lt;/span&gt;,&lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;harry&#39;&lt;/span&gt;,&lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;lisa&#39;&lt;/span&gt;,&lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;sarah&#39;&lt;/span&gt;,&lt;span style=&#34;color: #8b2252;&#34;&gt;&#39;horatio&#39;&lt;/span&gt;]
&lt;span style=&#34;color: #a020f0;&#34;&gt;return&lt;/span&gt; random.choice(names)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
get&lt;sub&gt;name&lt;/sub&gt; and routines like it might be scattered throughout our
code. Let&#39;s suppose, for some strange reason, we want to double the
name every time we use it. A &#34;traditional&#34; way of doing this might be:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;&lt;span style=&#34;color: #a020f0;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;dble&lt;/span&gt;(f):
&lt;span style=&#34;color: #a0522d;&#34;&gt;name&lt;/span&gt; = f()
&lt;span style=&#34;color: #a020f0;&#34;&gt;return&lt;/span&gt; name+name

&lt;span style=&#34;color: #a020f0;&#34;&gt;print&lt;/span&gt; dble(get_name) &lt;span style=&#34;color: #b22222;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;returns something like tomtom&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here, we pass a function which returns a string and then dble returns
that string repeated twice. The problem here is that if we&#39;ve got
get&lt;sub&gt;name&lt;/sub&gt; all over our code base, we have to find it and change each
instance to &lt;b&gt;&lt;b&gt;dble(get&lt;sub&gt;name&lt;/sub&gt;)&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
What if we write it as a function that returns a function:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;&lt;span style=&#34;color: #a020f0;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;doubler&lt;/span&gt;(f):
&lt;span style=&#34;color: #a020f0;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;inner&lt;/span&gt;():
&lt;span style=&#34;color: #a0522d;&#34;&gt;name&lt;/span&gt;=f()
&lt;span style=&#34;color: #a020f0;&#34;&gt;return&lt;/span&gt; name+name
&lt;span style=&#34;color: #a020f0;&#34;&gt;return&lt;/span&gt; inner
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now, in this case, we can do something like:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;make a new function that wraps get_name in &#34;inner&#34;&lt;/span&gt;
&lt;span style=&#34;color: #b22222;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;when we call inner, it returns the string twice&lt;/span&gt;
&lt;span style=&#34;color: #a0522d;&#34;&gt;f&lt;/span&gt; = doubler(get_name)
&lt;span style=&#34;color: #b22222;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;and then later&lt;/span&gt;
&lt;span style=&#34;color: #a020f0;&#34;&gt;print&lt;/span&gt; f() &lt;span style=&#34;color: #b22222;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;will print something like tomtom&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The cool part is that we can also do this:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;&lt;span style=&#34;color: #a0522d;&#34;&gt;get_name&lt;/span&gt; = double(get_name)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And then whenever we call our new &lt;b&gt;&lt;b&gt;get&lt;sub&gt;name&lt;/sub&gt;&lt;/b&gt;&lt;/b&gt; we end up calling the
wrapped function.
&lt;/p&gt;

&lt;p&gt;
This was the first A-ha. We don&#39;t have to change get&lt;sub&gt;name&lt;/sub&gt; all over our
code base - we only have to change it once.
&lt;/p&gt;

&lt;p&gt;
Once we write a function like doubler, instead of re-assigning
get&lt;sub&gt;name&lt;/sub&gt; as we did above, we can do the following:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;&lt;span style=&#34;color: #228b22;&#34;&gt;@doubler&lt;/span&gt;
&lt;span style=&#34;color: #a020f0;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;get_name&lt;/span&gt;():
&lt;span style=&#34;color: #b22222;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;rest of code as defined above&lt;/span&gt;

&lt;span style=&#34;color: #228b22;&#34;&gt;@doubler&lt;/span&gt;():
&lt;span style=&#34;color: #a020f0;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;demo&lt;/span&gt;():
&lt;span style=&#34;color: #a020f0;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #8b2252;&#34;&gt;&#34;hello&#34;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The second example will have demo return &#34;hellohello&#34; whenever we
invoke it.
&lt;/p&gt;

&lt;p&gt;
A Python decorator is merely shorthand for calling a wrapper type
function like doubler.
&lt;/p&gt;

&lt;p&gt;
This was the second A-ha moment &amp;#x2013; we can write functions that
transform functions.
&lt;/p&gt;

&lt;p&gt;
We&#39;ll cover more decorator and closure plumbing tomorrow and then
start doing some fun stuff with these concepts.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Wait, I know that!!!!</title>
      <link>https://cestlaz.github.io/posts/2014-09-23-i-know-that/</link>
      <pubDate>Tue, 23 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-09-23-i-know-that/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
If I&#39;m doing my job right, by the time my kids graduate they can learn
on their own.
&lt;/p&gt;

&lt;p&gt;
It&#39;s like when two years ago, before starting her summer internship,
Batya listed all the tools and technologies she had to work with. When
I pointed out that she hadn&#39;t ever used any of them before and asked
how she was going to deal with it, she replied &#34;I&#39;ll figure it out.&#34;
And she did.
&lt;/p&gt;

&lt;p&gt;
At the end of the summer, Dina told a similar story about her
internship and how she knew she&#39;d figure everything out because of the
solid background she got by going through StuyCS.
&lt;/p&gt;

&lt;p&gt;
I loved both these stories.
&lt;/p&gt;

&lt;p&gt;
But getting the kids there takes time.
&lt;/p&gt;

&lt;p&gt;
Yesterday, in my AP classes, I assigned three &lt;i&gt;codingbat&lt;/i&gt; problems. I
decided to go objects first this time round so we haven&#39;t done any
language constructs. The problems were simple String manipulations but
I added one that needed conditionals.
&lt;/p&gt;

&lt;p&gt;
Today we went over them. Most of the class solved the assignment and
most had either no trouble or had to do just a little work.
&lt;/p&gt;

&lt;p&gt;
I asked what about that last problem might have caused some
difficulty.
&lt;/p&gt;

&lt;p&gt;
They couldn&#39;t figure it out, it seemed pretty straighforward. After a
number of guesses, one student  said:
&lt;/p&gt;

&lt;p&gt;
&#34;Wait, we don&#39;t know ifs&#34;
&lt;/p&gt;

&lt;p&gt;
That was it. They didn&#39;t realize that they had taught themselves
something new.
&lt;/p&gt;

&lt;p&gt;
This, of course, doesn&#39;t just happen.
&lt;/p&gt;

&lt;p&gt;
They&#39;ve seen conditionals in all sorts of guises.
&lt;/p&gt;

&lt;p&gt;
Scheme:
&lt;/p&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-scheme&#34;&gt;(&lt;span style=&#34;color: #a020f0;&#34;&gt;if&lt;/span&gt; boolean_expression
True_part
False_part)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
NetLogo:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
if boolean [True part]

and

ifelse boolean [True part][ False part]
&lt;/pre&gt;

&lt;p&gt;
and Python:
&lt;/p&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;&lt;span style=&#34;color: #a020f0;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #483d8b;&#34;&gt;bool&lt;/span&gt;:
s1
&lt;span style=&#34;color: #a020f0;&#34;&gt;elif&lt;/span&gt; bool2:
s2
&lt;span style=&#34;color: #a020f0;&#34;&gt;else&lt;/span&gt;:
s3
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
and so on.
&lt;/p&gt;

&lt;p&gt;
So they new the concept, from there it was just details.
&lt;/p&gt;

&lt;p&gt;
Some said they just wrote it and it worked. Some said they looked up
sample code. Most didn&#39;t think they were doing anything new.
&lt;/p&gt;

&lt;p&gt;
It was pretty awesome.
&lt;/p&gt;

&lt;p&gt;
It&#39;s still a long road before they graduate, but we&#39;re getting there.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a SHIP - Outreach</title>
      <link>https://cestlaz.github.io/posts/2014-07-20-ship-outreach/</link>
      <pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-07-20-ship-outreach/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;



&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
We&#39;ve got a few more topics to cover in the &lt;b&gt;&lt;b&gt;Building a SHIP&lt;/b&gt;&lt;/b&gt;
series. We still have to cover:
&lt;/p&gt;
&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;The Crew
&lt;/li&gt;
&lt;li&gt;Curricular Choices
&lt;/li&gt;
&lt;li&gt;The long term plan
&lt;/li&gt;
&lt;li&gt;Site and funding
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-2&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-2&#34;&gt;
&lt;p&gt;
But for today, we&#39;ll talk outreach.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-3&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-3&#34;&gt;
&lt;p&gt;
Outreach proved to be particular challenge for SHIP. Our entire crew
is made up of teachers. That meant that we couldn&#39;t communicate with
schools during business hours. That made things particularly tough.  I
could send emails after hours or set up emails to be sent at specific
times during the day, but we couldn&#39;t call while at our day jobs. As a
result, this led to a vary long communication loop and we could never
be sure that information about SHIP was getting to the right people.
&lt;/p&gt;

&lt;p&gt;
We did have a small number of non-teacher volunteers and they were
invaluable but they had limited knowledge from the teaching side.
&lt;/p&gt;

&lt;p&gt;
So, we had the volunteers try to call schools during the day and we
followed up by emailing a flyer and link to a web site. We tried to
emphasize that we needed help from the schools in finding the right
students &amp;#x2013; that is students who might not have even considered
something like SHIP but where we could potentially turn them on to
something new.
&lt;/p&gt;

&lt;p&gt;
In spite of this, we did get over 200 applicants for our 48 slots. I
have no idea how this compares to similar programs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-4&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-4&#34;&gt;
&lt;p&gt;
There were many terrific applications, but there were some head
scratching situations. There were some incomplete applications which I
attribute to students who weren&#39;t really interested in the program,
but I was surprised by two things on the student side.
&lt;/p&gt;

&lt;p&gt;
First, sme times we needed a little more information from a student so we
sent an email to the addresses (primary and backup) that they listed
in the application. Some times students got right back to us. Other
times it took days or even weeks. In one case, we weren&#39;t able to
accept the student because he didn&#39;t get back to us until after the
selection process was over. I know that not everyone reads or responds
to emails promptly but I was surprised since these were cases of
students who wanted to partake in our program.
&lt;/p&gt;

&lt;p&gt;
Another thing that surprised me is that we almost lost a couple of
students because they thought the program would cost too much. We
tried to make it as clear as possible that we offered financial
assistance and in many cases could cover all fees but apparently we
weren&#39;t as clear as I had hoped.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-5&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-5&#34;&gt;
&lt;p&gt;
The one &lt;b&gt;&lt;b&gt;really big&lt;/b&gt;&lt;/b&gt; shock to me involved
recommendations. We required our applicants provide one email
address for someone that agreed to write a recommendation letter and
allowed for a second, optional one. We then contacted these
recomenders. If we didn&#39;t hear back, we sent reminder emails and asked
the applicants to prod the recommenders as well.
&lt;/p&gt;

&lt;p&gt;
We had a return rate of about 10%. This cut across type of school
(public, private, parochial, and charter) and grade (rising 9 through
12). As a teacher myself, I know of some colleagues who don&#39;t actually
write recs they agree to write but I was shocked that we only heard
back from 10%. The end result was that we could use a recommendation
to help an applicant but we didn&#39;t feel that it was fair to penalize a
student just because a teacher didn&#39;t send in a rec.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-6&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-6&#34;&gt;
&lt;p&gt;
As a final though on outreach, it should get easier for us over
time. SHIP is going great and next year, we&#39;ll be a known quantity to
schools. We should also have our cadre of shipmates helping spread the
word and of course, we want them back for another summer of more
advanced work.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Twitch Coding</title>
      <link>https://cestlaz.github.io/posts/2014-04-10-twitch-coding/</link>
      <pubDate>Thu, 10 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-04-10-twitch-coding/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
We have the kids write programs in all sorts of ways
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;on paper
&lt;/li&gt;
&lt;li&gt;solo
&lt;/li&gt;
&lt;li&gt;informally in pairs
&lt;/li&gt;
&lt;li&gt;&#34;pair programming&#34;
&lt;/li&gt;
&lt;li&gt;We have them trade code, pick up each others projects, and more.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
We do lots of different things to engage the kids in a lot of
different ways and I love it when someone comes up with a new
technique.
&lt;/p&gt;


&lt;p&gt;
My friend, colleague, and incidentally, former student, Sam had such
an idea the other day. Sam started his teaching career at Francis
Lewis High School and it took us a while to convince him to join the
team, but he&#39;s been with us for about three years now and he&#39;s terrific.
&lt;/p&gt;

&lt;p&gt;
Sam&#39;s also our resident gamer so I guess I shouldn&#39;t have been
surprised when Sam said he was going to do &lt;a href=&#34;http://www.reddit.com/r/twitchplayspokemon/comments/1y94r8/the_history_of_twitch_plays_pokemon/&#34;&gt;Twitch Pokemon&lt;/a&gt; coding with
his classes. It sounded great.
&lt;/p&gt;

&lt;p&gt;
In Twitch Pokemen, users type moves into a chat window and a bot reads
the commands to control a Pokemon. Sam&#39;s idea was to apply it to a CS class.
&lt;/p&gt;

&lt;p&gt;
I loved the idea so I tried it in my classes.
&lt;/p&gt;

&lt;p&gt;
First cut, I did it with stacks. We had a basic design in mind and then we started the &#34;Twitch Coding.&#34;
&lt;/p&gt;

&lt;p&gt;
We went up and down the rows. When it was a students turn, they could
either add a word, line, or concept, delete one, or change one.
&lt;/p&gt;

&lt;p&gt;
So, for example, if the state of the code was:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-java&#34;&gt;&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #7CB8BB;&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;top&lt;/span&gt;;

&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #7CB8BB;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #93E0E3;&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color: #7CB8BB;&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;s&lt;/span&gt;) {
&lt;span style=&#34;color: #7CB8BB;&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;n&lt;/span&gt; = &lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #7CB8BB;&#34;&gt;Node&lt;/span&gt;(s);
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
a student could:
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;add n.setNext(top) to the push routine
&lt;/li&gt;
&lt;li&gt;change public to private in the declaration of top
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Or the somewhat lame
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;add a // above the push declaration line
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
or something else.
&lt;/p&gt;

&lt;p&gt;
If a student gets stuck, it&#39;s up to the class to &#34;go Price is Right&#34;
on them and give suggestions.
&lt;/p&gt;

&lt;p&gt;
It worked great in one class, forced in another, and somewhere in the
middle in the third. Overall, I was happy with the results.
&lt;/p&gt;


&lt;p&gt;
We tried it again today as we implemented a queue.
&lt;/p&gt;

&lt;p&gt;
This time, we prepped a little better and the results were better.
&lt;/p&gt;

&lt;p&gt;
The idea needs some fine tuning, but I think it&#39;s a fun and different
way to engage the class and I think we&#39;ll be playing with twitch
coding some more in the coming months.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sorting - Subtle Errors</title>
      <link>https://cestlaz.github.io/posts/2014-03-17-subtle-errors-sorting/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-03-17-subtle-errors-sorting/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
Time to wrap up sorting for a while. We just finished quicksort
having gone through a series of lessons
&lt;/p&gt;
&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;We started with &lt;a href=&#34;http://cestlaz.github.io/2014/03/12/select-to-sort.html#.UyJRTh_G8RM&#34;&gt;Quickselect&lt;/a&gt;.
&lt;/li&gt;
&lt;li&gt;Then we did a quicksort, copying to new arrays during the partition
&lt;/li&gt;
&lt;li&gt;Then finally to an in place quicksort.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
For the final quicksort we used a partition algorithm pretty much the
same as the one described &lt;a href=&#34;http://en.wikipedia.org/wiki/Quicksort&#34;&gt;here.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
We started testing using by building a randomly filled array like this:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-java&#34;&gt;&lt;span style=&#34;color: #7CB8BB;&#34;&gt;Random&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;rnd&lt;/span&gt; = &lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #7CB8BB;&#34;&gt;Random&lt;/span&gt;();
&lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;a&lt;/span&gt;[] = &lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt;[n];
&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;i&lt;/span&gt;=0;i&amp;lt;&lt;span style=&#34;color: #7CB8BB;&#34;&gt;n&lt;/span&gt;;i++) {
a[i] = rnd.nextInt(100);
}
qsort(a);
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And everything seemed terrific.
&lt;/p&gt;

&lt;p&gt;
Just like when we did the mergesort, we started to increase n. First
20, then 100, then 1000 and so on.
&lt;/p&gt;

&lt;p&gt;
All of a sudden, we started getting a stack overflow. We only made it
to about 450,000. Mergesort got to arrays of about 40,000,000 items
before we started to have memory problems.
&lt;/p&gt;

&lt;p&gt;
Our algorithm was sound. It worked on everything up to about
450,000. Since Mergesort worked well into the tens of millions, quicksort
should have as well.
&lt;/p&gt;

&lt;p&gt;
What was wrong?
&lt;/p&gt;

&lt;p&gt;
We changed the code a bit:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-java&#34;&gt;&lt;span style=&#34;color: #7CB8BB;&#34;&gt;Random&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;rnd&lt;/span&gt; = &lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #7CB8BB;&#34;&gt;Random&lt;/span&gt;();
&lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;a&lt;/span&gt;[] = &lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt;[n];
&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;i&lt;/span&gt;=0;i&amp;lt;&lt;span style=&#34;color: #7CB8BB;&#34;&gt;n&lt;/span&gt;;i++) {
a[i] = rnd.nextInt(10000);
}
qsort(a);
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Instead of an array of 450,000 values between 0 and 100, our elements
now went fro 0 to 10,000.
&lt;/p&gt;

&lt;p&gt;
All of a sudden things were good.
&lt;/p&gt;

&lt;p&gt;
Why? It wasn&#39;t long before the student saw that 500,000 elements with
values between 0 and 100 meant lots of duplicates. Our partition
didn&#39;t account for that. If we had duplicate pivots, only one is moved
into place, the rest are left unsorted taking us closer to worst case
performance and blowing our stack.
&lt;/p&gt;

&lt;p&gt;
Fortunately there was an easy fix:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-java&#34;&gt;&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #93E0E3;&#34;&gt;partition&lt;/span&gt;(&lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt;[] &lt;span style=&#34;color: #DFAF8F;&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;l&lt;/span&gt;, &lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;r&lt;/span&gt;) {
&lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;tmp&lt;/span&gt;;
&lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;pivotIndex&lt;/span&gt; = l+rnd.nextInt(r-l);
&lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;pivot&lt;/span&gt; = a[pivotIndex];
tmp = a[r];
a[r] = a[pivotIndex];
a[pivotIndex]=tmp;

&lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;wall&lt;/span&gt;=l;
&lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;pcount&lt;/span&gt;=1;
&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;i&lt;/span&gt;=l;i&amp;lt;&lt;span style=&#34;color: #7CB8BB;&#34;&gt;r&lt;/span&gt;;i++) {
&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;if&lt;/span&gt; (a[i]&amp;lt;pivot) {
tmp = a[i];
a[i]=a[wall];
a[wall]=tmp;
wall++;
}
&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;if&lt;/span&gt; (a[i]==pivot)
pcount++;
}
&lt;span style=&#34;color: #5F7F5F;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #7F9F7F;&#34;&gt;now copy over all the pivots&lt;/span&gt;
&lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;rwall&lt;/span&gt;=wall;
tmp = a[rwall];
a[wall]=a[r];
a[r]=tmp;
rwall++;
&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;i&lt;/span&gt;=rwall+1;i&amp;lt;=r;i++) {
&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;if&lt;/span&gt; (a[i]==pivot) {
tmp = a[rwall];
a[rwall]=a[i];
a[i]=tmp;
rwall++;
}
}
&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;return&lt;/span&gt; (wall+rwall)/2;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
When we partition the array, move all the elements equal to the
partition to the middle of the array.
&lt;/p&gt;


&lt;p&gt;
That did the trick.
&lt;/p&gt;

&lt;p&gt;
All of a sudden we were blazing through data sets upwards of
100,000,000 elements.
&lt;/p&gt;


&lt;p&gt;
We&#39;re done for sorting for a while, at least until the heapsort but
it&#39;s been a fun couple of weeks
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From selection to sorting</title>
      <link>https://cestlaz.github.io/posts/2014-03-12-select-to-sort/</link>
      <pubDate>Wed, 12 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-03-12-select-to-sort/</guid>
      <description>&lt;!DOCTYPE html&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://orgmode.org/mathjax/MathJax.js&#34;&gt;&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;assets/static/mj.js&#34;&gt;&lt;/script&gt;

&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
When I first saw the &lt;a href=&#34;http://en.wikipedia.org/wiki/Quicksort&#34;&gt;quicksort&lt;/a&gt; it was in an algorithms class back in
the day. We first learned the quicksort, then choosing a good pivot
element and then as an afterthought we did &lt;a href=&#34;http://en.wikipedia.org/wiki/Quickselect&#34;&gt;quickselect&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Fast forward to teaching. I was never really happy teaching
quicksort. Mergesort is easy to motivate and it&#39;s pretty easy to
write. Quicksort always felt a little forced.
&lt;/p&gt;

&lt;p&gt;
I thought I&#39;d try switching things up this time and doing quickselect
first.
&lt;/p&gt;

&lt;p&gt;
The motivating problem: find the K&lt;sup&gt;th&lt;/sup&gt; smallest item in a list - in our
case the list is an array of ints.
&lt;/p&gt;

&lt;p&gt;
I want to start with the least efficient algorithm so I stack the
deck. I remind them that we&#39;ve been finding the smallest item in a
list for two years now.
&lt;/p&gt;

&lt;p&gt;
They don&#39;t disappoint and suggest something like this:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;&lt;span style=&#34;color: #DFAF8F;&#34;&gt;L&lt;/span&gt; = [10,3,28,82,14,42,66,74,81]

&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #93E0E3;&#34;&gt;findKth&lt;/span&gt;(L,k):
&lt;span style=&#34;color: #DFAF8F;&#34;&gt;omits&lt;/span&gt;=[]
&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #DCDCCC; font-weight: bold;&#34;&gt;range&lt;/span&gt;(k):
&lt;span style=&#34;color: #DFAF8F;&#34;&gt;ans&lt;/span&gt;=&lt;span style=&#34;color: #DCDCCC; font-weight: bold;&#34;&gt;max&lt;/span&gt;(L)
&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;in&lt;/span&gt; L:
&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;if&lt;/span&gt; item &amp;lt; ans &lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;and&lt;/span&gt; item &lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;in&lt;/span&gt; omits:
&lt;span style=&#34;color: #DFAF8F;&#34;&gt;ans&lt;/span&gt;=item
omits.append(ans)
&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;return&lt;/span&gt; ans

&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;print&lt;/span&gt; findKth(L,3)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Clearly an \(O(n^2)\) algorithm.
&lt;/p&gt;


&lt;p&gt;
Can we do better?
&lt;/p&gt;

&lt;p&gt;
Certainly.
&lt;/p&gt;

&lt;p&gt;
The students then suggest sorting the data set first. If we use
mergesort, we can sort in \(O(nLg (n))\) time. This lead to a great
conversation about sorting being so fast it&#39;s practically free and
that you don&#39;t have to hard code everything from scratch. Not only is
sorting the data set then plucking the k&lt;sup&gt;th&lt;/sup&gt; item out much faster, if
you already have a sort written or if you use your language&#39;s
library&#39;s sort, it&#39;s much easier as well:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #93E0E3;&#34;&gt;findKth&lt;/span&gt;(L,k):
&lt;span style=&#34;color: #DFAF8F;&#34;&gt;tmp&lt;/span&gt; = &lt;span style=&#34;color: #DCDCCC; font-weight: bold;&#34;&gt;sorted&lt;/span&gt;(L)
&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;return&lt;/span&gt; tmp[k]
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
But we can do even better. So now we talk about &lt;b&gt;quickselect&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
We pick a random pivot, partition the list a la quicksort (reorder the
list such that all items less than the pivot are to its left, and all
items greater than the pivot are to its right).
&lt;/p&gt;

&lt;p&gt;
We now know that after partitioning. the pivot is in it&#39;s exact
location. If its index is &lt;b&gt;k&lt;/b&gt; then we&#39;re done. If not, we can
recursively &lt;b&gt;quickselect&lt;/b&gt; on either the left or right side.
&lt;/p&gt;

&lt;p&gt;
Pretty cool, but is it faster?
&lt;/p&gt;

&lt;p&gt;
It&#39;s easy to see that if we keep choosing a bad pivot (the smallest or
largest in the list), each iteration takes \(n\) time to partition and
each iteration takes one item out of contention. This takes us back to
\(O(n^2)\).
&lt;/p&gt;

&lt;p&gt;
However&amp;#x2026;
&lt;/p&gt;

&lt;p&gt;
If we choose a good partition &amp;#x2013; at the middle of the list, each
partition takes less and less time. We get a run time of:
&lt;/p&gt;

&lt;p&gt;
\(n+\frac{n}{2} +\frac{n}{4}+\frac{n}{8}+\dots\) and since \(\frac{n}{2}
+\frac{n}{4}+\frac{n}{8}\dots=n\) this becomes an \(O(2n)\), or \(O(n)\) algorithm.
&lt;/p&gt;


&lt;p&gt;
That&#39;s really cool.
&lt;/p&gt;

&lt;p&gt;
Homework was the actual implementation.
&lt;/p&gt;

&lt;p&gt;
I think this might be a better way to approach quicksort. It seems
less forced, plus the class gets to go through the exercise of taking
an algorithm form \(O(n^2)\) to \(O(nlg(n))\) to \(O(n)\).
&lt;/p&gt;


&lt;p&gt;
Next, moving to the quicksort and also showing that we can indeed
avoid those really bad pivots.
&lt;/p&gt;


&lt;h4&gt;Addendum&lt;/h4&gt;

We moved to quicksort today and overall I&#39;m happy with this
approach. The only thing I think needs tweaking is going from the idea
of partitioning to Java code. Java makes it somewhat of a bear.
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Be the ball</title>
      <link>https://cestlaz.github.io/posts/2014-03-09-be-the-ball/</link>
      <pubDate>Sun, 09 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-03-09-be-the-ball/</guid>
      <description>&lt;!DOCTYPE html&gt;

&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;


&lt;div class=&#34;center&#34;&gt; &lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;//www.youtube.com/embed/sWH811TcckU&#34; frameborder=&#34;0&#34;
allowfullscreen&gt;&lt;/iframe&gt; &lt;/div&gt;



&lt;p&gt;
Crystal Furman wrote a nice post titled &lt;a href=&#34;http://teachingcomputerscience.weebly.com/1/post/2014/03/coding-comprehension.html&#34;&gt;Coding Comprehension&lt;/a&gt; about a
week ago. There was a little buzz about it in the APCS Facebook group
and shortly after, Alfred Thompson added his &lt;a href=&#34;http://blog.acthompson.net/2014/03/when-knowing-syntax-is-not-enough.html&#34;&gt;two cents.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
I thought I&#39;d add mine, at least a couple of thoughts.
&lt;/p&gt;

&lt;p&gt;
There are a lot of issues - long term retention, transfer of knowledge
from the basics to more advanced tools, pattern recognition, and more.
&lt;/p&gt;

&lt;p&gt;
It reminded me of Benjamin Zander&#39;s talk &#34;Playing on one Buttock&#34;:
&lt;/p&gt;

&lt;div class=&#34;center&#34;&gt; &lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;//www.youtube.com/embed/r9LCwI5iErE&#34; frameborder=&#34;0&#34;
allowfullscreen&gt;&lt;/iframe&gt; &lt;/div&gt;

&lt;p&gt;
Check out the first five minutes.
&lt;/p&gt;

&lt;p&gt;
Code reading is important, pair programming, where students are
constantly explaining to each other helps, and there are other
techniques.
&lt;/p&gt;

&lt;p&gt;
We can also model thinking like a computer from day one.
&lt;/p&gt;

&lt;p&gt;
Many of us start day one with exercises where students are the
computer. Perhaps using a simplified made up language or maybe by just
throwing some task at the kids and having them write instruction lists
for each other. That&#39;s a great start, but we can continue drawing the
relationship between the way we think and the way a computer works.
&lt;/p&gt;

&lt;p&gt;
Take a simple intro problem &amp;#x2013; finding the largest value in a list of
numbers.
&lt;/p&gt;

&lt;p&gt;
The ultimate solution in Java might be:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-java&#34;&gt;&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #93E0E3;&#34;&gt;findMax&lt;/span&gt;(&lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt;[] &lt;span style=&#34;color: #DFAF8F;&#34;&gt;L&lt;/span&gt;){
maxIndex = 0;
&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #7CB8BB;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #DFAF8F;&#34;&gt;i&lt;/span&gt;=0;i&amp;lt;L.&lt;span style=&#34;color: #7CB8BB;&#34;&gt;length&lt;/span&gt;;i++){
&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;if&lt;/span&gt; (a[i]&amp;lt;a[maxIndex]){
maxIndex = i;
}
}
&lt;span style=&#34;color: #F0DFAF; font-weight: bold;&#34;&gt;return&lt;/span&gt; maxIndex;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Somewhere along the development process, I ask my students how they
would find the largest value in list. If the list was short, they
might just scan it. If the list was very long, they do the same thing
as our Java snippet does - remember the largest so far as we scan down
the list one by one. At first, we just think we&#39;re scanning the list,
but if we slow things down, we see that we&#39;re following pretty much
the same algorithm as what we&#39;d write in code.
&lt;/p&gt;

&lt;p&gt;
I use this technique throughout all my classes - slow ourselves down
and really analyze the steps towards solving the problem. No single
technique is going to teach our kids how to think about and comprehend
code, but it&#39;s another tool in our bag of tricks.
&lt;/p&gt;

&lt;h4&gt;Side note&lt;/h4&gt;

&lt;p&gt;
This is my first post written using &lt;a href=&#34;http://www.emacswiki.org/emacs/&#34;&gt;Emacs&lt;/a&gt; &lt;a href=&#34;http://orgmode.org/&#34;&gt;Org mode&lt;/a&gt;. I&#39;ve been using it
for years but only now discovering how amazing a tool it is.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I guess I&#39;m a dumbass</title>
      <link>https://cestlaz.github.io/posts/2014-02-27-dumbass/</link>
      <pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-02-27-dumbass/</guid>
      <description>&lt;p&gt;I like a fairly informal atmosphere in my classes. Students have to
know that there&amp;rsquo;s a line between teacher and student but I also want
them to feel like we&amp;rsquo;re all part of the Stuy CS family.&lt;/p&gt;
&lt;p&gt;Whenever we start a new term, it takes a while to break down the
walls. The students don&amp;rsquo;t know what to expect of me, can they trust
me? Am I a bozo? Who knows.&lt;/p&gt;
&lt;p&gt;It helps when some of the class had me as a teacher before, but it still takes time.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m glad that this term, things are coming along nicely.&lt;/p&gt;
&lt;p&gt;Let me share what happened in class today.&lt;/p&gt;
&lt;p&gt;I was introducing merge sort - their first nlgn sorting
algorithm. Before class, one of the students slipped off his seat and landed on the floor with a thud. He
was fine although the brief butt, if you would, of jokes.&lt;/p&gt;
&lt;p&gt;I relayed a story - many years ago, Ilya, one of the gang, was accused
of being a dumbass. He responded &amp;ldquo;hey, it&amp;rsquo;s never missed the seat.&amp;rdquo; The
class had a good laugh over it.&lt;/p&gt;
&lt;p&gt;Fast forward a bit.&lt;/p&gt;
&lt;p&gt;I had a deck of cards I wanted sorted. As a Stuy grad, I&amp;rsquo;m as lazy as
the next guy so I didn&amp;rsquo;t want to sort them, but I also didn&amp;rsquo;t want to
violate one of our two class tenets &amp;ldquo;Don&amp;rsquo;t be a jerk&amp;rdquo; so rather than
giving the cards to a student to sort, I split the deck in half and
gave each half to a student.&lt;/p&gt;
&lt;p&gt;They quickly caught on and subdivided the deck and gave away their
halves. We did this until all the students had, at some point had one
or more cards.&lt;/p&gt;
&lt;p&gt;Then we got to the merge part. Each student sorted his or her pile and
passed it back to the student who they got the cards from. This
student then merged the two piles and passed the cards back.&lt;/p&gt;
&lt;p&gt;As the cards made their way back to me a student noted &amp;ldquo;hey, one of my
piles isn&amp;rsquo;t in order.&amp;rdquo; I commented that &amp;ldquo;the algorithm might fail if
at some points you give your cards to a dumbass.&amp;rdquo; This got a good
laugh.&lt;/p&gt;
&lt;p&gt;Finally, two pile of cards made their way to me and I started to merge
then. At which point, I promptly dropped the cards all over the floor.&lt;/p&gt;
&lt;p&gt;One of my students exclaimed: &amp;ldquo;That&amp;rsquo;s what happens when you give you
cards to a dumbass!!!!!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;It was awesome. We all cracked up.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t think I&amp;rsquo;ve been &amp;ldquo;insulted&amp;rdquo; quite so perfectly since my daughter
called me an idiot in class last year (I fed her the straight line and
she didn&amp;rsquo;t disappoint).&lt;/p&gt;
&lt;p&gt;I love it that my kids feel comfortable enough to joke but also know
where the line is.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Change the data</title>
      <link>https://cestlaz.github.io/posts/2014-02-26-change-the-data/</link>
      <pubDate>Wed, 26 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-02-26-change-the-data/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Patient: &amp;ldquo;Doctor, it hurts when I do this.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Doctor: &amp;ldquo;So, don&amp;rsquo;t do that.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We&amp;rsquo;ve been spending time on
&lt;a href=&#34;http://en.wikipedia.org/wiki/State_space_search&#34;&gt;State Space Search&lt;/a&gt;. It&amp;rsquo;s
a great topic. We deal with or at least introduce:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Recursion&lt;/li&gt;
&lt;li&gt;Blind search&lt;/li&gt;
&lt;li&gt;Heuristic search&lt;/li&gt;
&lt;li&gt;foreshadowing things like A* and Dijkstra&amp;rsquo;s algorithm.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and more. Today, however. I want to talk about something else.&lt;/p&gt;
&lt;p&gt;We started by developing a maze solver. It reads a text file
representing the maze and then proceeds to find an exit. One version
of the source code can be found
&lt;a href=&#34;https://github.com/stuycs-apcs-z/classcode/tree/master/3/maze&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s really cool to see how such a short program, about 10 lines of
work code, can solve such an open sounding problem. From there we talk
about state spaces, graphs, etc. We then moved on to the
&lt;a href=&#34;https://github.com/stuycs-apcs-z/classcode/tree/master/3/maze&#34;&gt;Knight&amp;rsquo;s tour&lt;/a&gt;. By
viewing it as a state space problem we can look at it just like the
maze.&lt;/p&gt;
&lt;p&gt;We represented a state as a board with the knight&amp;rsquo;s current position and where it&amp;rsquo;s been. An easy way to do this is to use an array of ints. So we have an empty 5x5 board:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;0 0 0 0 0&lt;/p&gt;
&lt;p&gt;0 0 0 0 0&lt;/p&gt;
&lt;p&gt;0 0 0 0 0&lt;/p&gt;
&lt;p&gt;0 0 0 0 0
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Or a board after a few moves:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;4 0 2 0 0&lt;/p&gt;
&lt;p&gt;0 0 5 0 0&lt;/p&gt;
&lt;p&gt;0 3 0 0 6&lt;/p&gt;
&lt;p&gt;0 0 0 0 0
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;The kids saw three base cases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When our count got up to n^2 (and in fact, we&amp;rsquo;re done)&lt;/li&gt;
&lt;li&gt;When we land on a non-zero space (when we just return or backtrack)&lt;/li&gt;
&lt;li&gt;When we try to move off the board, for an index out of bounds error.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I wanted to look at that third one. We talked for a bit about using an
if or a try/catch but I pointed out that I didn&amp;rsquo;t like either. Looking
at our maze code, we never checked bounds there. Why not. Well it
turns out that our maze had wall all around. It was stored in a 2D
array but the entire outer edge was wall. Why not do the same for the chess board:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;-1 -1 -1 -1 -1 -1 -1 -1 -1&lt;/p&gt;
&lt;p&gt;-1 -1  0  0  0  0  0 -1 -1&lt;/p&gt;
&lt;p&gt;-1 -1  0  0  0  0  0 -1 -1&lt;/p&gt;
&lt;p&gt;-1 -1  0  0  0  0  0 -1 -1&lt;/p&gt;
&lt;p&gt;-1 -1  0  0  0  0  0 -1 -1&lt;/p&gt;
&lt;p&gt;-1 -1  0  0  0  0  0 -1 -1&lt;/p&gt;
&lt;p&gt;-1 -1 -1 -1 -1 -1 -1 -1 -1&lt;/p&gt;
&lt;p&gt;-1 -1 -1 -1 -1 -1 -1 -1 -1
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Now, as long as we start on the board, if the Knight jumps off the
edge, it will end on a -1 square and backtrack. By modifying our data
structure and data to contain a border, we&amp;rsquo;ve eliminated the special
case of index out of bounds.&lt;/p&gt;
&lt;p&gt;I always like doing that.&lt;/p&gt;
&lt;p&gt;####Some Links&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/stuycs-apcs-z/classcode/tree/master/3/knights&#34;&gt;Source code for Knight&amp;rsquo;s tour&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fibonacci by the tail</title>
      <link>https://cestlaz.github.io/posts/2014-02-13-fibonacci/</link>
      <pubDate>Thu, 13 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-02-13-fibonacci/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re ramping up for recursion in my junior classes - state space
search, nlg(n) sorts, etc. As a refresher, we took a quick look at the
Fibonacci numbers.&lt;/p&gt;
&lt;p&gt;Now, some people seem to think that it&amp;rsquo;s a tired problem. It&amp;rsquo;s mathy,
it&amp;rsquo;s played out, it&amp;rsquo;s boring etc.. They just might be missing the
point.&lt;/p&gt;
&lt;p&gt;The beauty isn&amp;rsquo;t in the problem itself, but rather, that it&amp;rsquo;s a
platform on which you can look at many problem solving techniques.&lt;/p&gt;
&lt;p&gt;We can look at the basic, straightforward , imperative solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;++){&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
b&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s straightforward and fast - no recursion needed.&lt;/p&gt;
&lt;p&gt;Next, we can look at the basic recursive version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fib2&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)+&lt;/span&gt;fib2&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The advantages (of recursive solutions in general):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s a direct translation from the recursive mathematical formula.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s elegant, clean, and concise.&lt;/li&gt;
&lt;li&gt;It can make hard problems much easier (see: &lt;a href=&#34;http://cestlaz.github.io/2010/01/10/towers-of-hanoi.html#.Uv1m4N_EvZ8&#34;&gt;Towers, Hanoi&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;We can use same thought process that led to this solution to solve
problems like finding our way out of a maze.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The downside:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It can be VERY slow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, how do we address this?&lt;/p&gt;
&lt;p&gt;One way is via &lt;strong&gt;memoization&lt;/strong&gt; - when we find a value, store it in a
table, then we can use the look up table instead of recalculating over
and over:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;public int[] fibnums = new int[100000];
public int fib3(int n) {
if (n&amp;lt;=1)
return 1;
else if (fibnums[n] != 0)
return fibnums[n];
else {
fibnums[n] fib3(n-1)+fib3(n-2);
return fibnums[n];
}
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
This is a terrific thing to show a class since it&#39;s easy for students
to wrap their heads around, it really speeds things up, and it&#39;s a
precursor to lots of neat algorithms.

Finally, we can look at re-writing Fibonacci using tail
recursion. This one can be a little hard for students to grasp. I like
building it up from the iterative solution. In that solution, we use
**a**, and **b** to &amp;quot;walk down&amp;quot; the list of Fibonacci numbers. At any point in time, **a** and **b** represent where we are in the sequence. We also use **c** but that&#39;s really just a temporary place to add a and b together.

The problem with doing this in a recursive solution is that we can&#39;t
have **a** and **b** as local variables as each recursive call will
have new **a** and **b**s and no information will be transferred.

Since we&#39;re working in Java, it doesn&#39;t take long for some students to come up with the idea of using instance variables to store a and b and just use the recursion for the &amp;quot;loop.&amp;quot;:

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
b&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fib4&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


Great, but using instance variables in this way is very inelegant and messy. Better, use extra parameters to store the values from call to call:

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fib4&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

Looking at Fib5(5) we get for n, a, and b:

* 5,1,1
* 4 1,2
* 3,2,3
* 2,3,5
* 1,5,8

At which point we just return the 8

Clean, elegant, fast, and easy to understand.

Each of these four techniques are important and will be used time and time again and here we have one simple problem that allows us to explore them all.

#### Some Links

[Project Euler: Problem #2 - Even Fibonacci numbers](http://maikolsolis.wordpress.com/2014/01/18/project-euler-problem-2-even-fibonacci-numbers/)

[Memoized Fibonacci Numbers with Java 8](http://java.dzone.com/articles/memoized-fibonacci-numbers)

[The quadratic formula and Fibonacci numbers](http://mikesmathpage.wordpress.com/2014/02/07/the-quadratic-formula-and-fibonacci-numbers/)

[Monte Carlo Simulations, Fibonacci Numbers, and Other Number Tests: Why Developers Still Need The Basics](http://blog.smartbear.com/programming/why-developers-
still-need-the-basics/)

[TED: Arthur Benjamin: The magic of Fibonacci numbers - Arthur Benjamin (2013)](http://www.ted.com/talks/arthur_benjamin_the_magic_of_fibonacci_numbers.html)

[Fibonacci Numbers in the Real World](http://lee-phillips.org/lispmath/)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Rot13 - Gateway &lt;s&gt;Drugs&lt;/s&gt; Techniques</title>
      <link>https://cestlaz.github.io/posts/2014-01-07-rot13-gateway/</link>
      <pubDate>Tue, 07 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-01-07-rot13-gateway/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve written before about &lt;a href=&#34;http://cestlaz.github.io/2013/08/07/That_One_Inspirational_Curriculum.html#.UsyYlN_EvZ8&#34;&gt;That One Inspirational Curriculum&lt;/a&gt; -
the idea that it&amp;rsquo;s not the topic in the syllabus but rather what the
teacher does with it.&lt;/p&gt;
&lt;p&gt;Some times a simple problem can lead to some really neat concepts.&lt;/p&gt;
&lt;p&gt;Take what we did in my AP classes over the past couple of days.&lt;/p&gt;
&lt;p&gt;I wanted a nice little warm up after the break so we wrote a simple
&lt;a href=&#34;http://www.rot-n.com/&#34;&gt;rotation cipher&lt;/a&gt;. We started with a little
encode routine - take a string and rotate the letters by some
offset. For example if we use an offset of 3, &amp;lsquo;hello&amp;rsquo; becomes
&amp;lsquo;khoor&amp;rsquo; - each letter being shifted over thee places.&lt;/p&gt;
&lt;p&gt;Pretty easy for the class but even a simple problem like this lets us
talk about a few things, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we can exploit the ASCII ordering but have to remember to deal with
the offsets. That is in ASCII, an  &amp;lsquo;a&amp;rsquo; is 97, we can&amp;rsquo;t just calculate c =
(c+offset)%26. We have to first shift the letter down to 0, add and
mod, and then shift back c = ((c-&amp;lsquo;a&amp;rsquo;) +offset)%26 + &amp;lsquo;a&amp;rsquo;&lt;/li&gt;
&lt;li&gt;We can talk about neat Internet history such as how
(rot13)[http://en.wikipedia.org/wiki/ROT13] was used to hide
spoilers and offensive material on the internet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I then ran a program that broke the encryption. I also showed the
students how it didn&amp;rsquo;t work on single words but did on full sentences.&lt;/p&gt;
&lt;p&gt;By hand, decodingn even a simple cipher is a pain.&lt;/p&gt;
&lt;p&gt;With computer assist, it&amp;rsquo;s easy - just print out all 26 possible rotations and pull out the right one.&lt;/p&gt;
&lt;p&gt;Our question was how do we have the computer do it all on its own?&lt;/p&gt;
&lt;p&gt;I asked them to think about how they might write a program to
accomplish this &amp;ndash; and that&amp;rsquo;s when the magic starts.&lt;/p&gt;
&lt;p&gt;They came up with a few interesting ideas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For each of the 26 rotations, choose the one with the most vowels.&lt;/li&gt;
&lt;li&gt;For each word in each rotation, give a point for each word with a vowel and choose the rotation with the highest score.&lt;/li&gt;
&lt;li&gt;Look for common short words in each rotation and then check other words against a dictionary.&lt;/li&gt;
&lt;li&gt;Do the letters appear with the same frequencies as in the English language&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We noticed that all of these suggestions are based on our knowledge of
English. What if the message was in a different language or even a
different alphabet?&lt;/p&gt;
&lt;p&gt;We decided to use choice 4 - the letter frequencies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Magic part 1 - using known data to figure out a pattern for unknown data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Even if we don&amp;rsquo;t know the frequencies, if we can get a sample document in our language, we can figure them out. We downloaded a text from Project Gutenberg and used it to build
an array of 26 elements called &lt;em&gt;CorpusFreqs&lt;/em&gt;. CorpusFreqs[0] would hold the
frequency of the letter &amp;lsquo;a&amp;rsquo; in our sample document (that is, how many
times &amp;lsquo;a&amp;rsquo; appears over the total number of letters in our document),
CorpusFreqs[1] the frequency of &amp;lsquo;b&amp;rsquo; etc.&lt;/p&gt;
&lt;p&gt;Now we have a model that we can use to compare our rotations to.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Magic part 2 - wow, that 9th grade math is actually useful&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At this point, it usually isn&amp;rsquo;t clear how to compare our rotations to
the model frequencies we calculated. Time to simplify,&lt;/p&gt;
&lt;p&gt;We can look at another problem: Selecting a house.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt;  if we can only have one criteria, what would it be?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; Neighborhood&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; Ok, let&amp;rsquo;s rate each neighborhood between 0 and 100&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; We can draw two houses on a line, which is better?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; The one with the larger value!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; What if we add a third house? Which is it more similar to?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; The one it&amp;rsquo;s closer to.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; Well, what if we add another feature? Cost - let&amp;rsquo;s map low cost to 100 and high cost to 0 and all the other costs in between.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; If we want to visualize a house, how can we do it?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; We can use a graph - like x,y points use location,cost points.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we do it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; This is the least desirable house (0,0) and this is the best one (1,1).
I plot two houses and ask&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; Which is more desirable?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; That one (they indicate the one closer to 1,1).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; How can you tell&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; It&amp;rsquo;s closer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; How do we figure it out?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; The Distance Formula!!!!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So now we add a third feature - size. It&amp;rsquo;s pretty easy to show that
the distance formula extends to three-space and in fact to even higher
dimensions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Magic part 3 - from 3 dimensions to 26&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So now, we bring it back to our cipher. For the house example, we used
points in 1,2, and 3 dimensions (and we actually talked about it in
4D) so we used 1 through 4-space vectors to represent the points and
used Euclidean distance formula to see what houses were similar to
each other, or what points where near to each other&lt;/p&gt;
&lt;p&gt;From there, it&amp;rsquo;s easy to see that the frequency array we built from ou sample text is a
26-space vector and that we can build a similar vector for each
rotation.&lt;/p&gt;
&lt;p&gt;From there we can use the distance formula to see how close each
rotation is to the sample document vector. The rotation with the
closest vector is pobably our solution.&lt;/p&gt;
&lt;p&gt;So from a simple warm up problem we&amp;rsquo;re at the gateway to some serious techniques that will come back time and time again as the students move through their CS education and careers.&lt;/p&gt;
&lt;p&gt;Fun!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bucket Sorting</title>
      <link>https://cestlaz.github.io/posts/2013-11-27-bucket-sorts/</link>
      <pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-11-27-bucket-sorts/</guid>
      <description>&lt;p&gt;In spite of the Java based annoyances I mentioned last time, I decided
to go ahead and do Radix sort with my AP students. I usually don&amp;rsquo;t
cover it in AP Computer Science, but I like getting the kids to think
about using arrays as buckets as it&amp;rsquo;s a new way of thinking for them and it does give a non-trivial application that combines ararys and ArrayLists.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a nice little algorithm. You start with an Array of integers:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Then, place them in buckets based on the least significant digit:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;We then copy the numbers from the buckets back into the original array, keeping the order of the buckets (0-&amp;gt;9).&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;We then repeat this process on the 2nd least significant digit:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;And so on until we&amp;rsquo;re done:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;It&amp;rsquo;s a nice algorithm to teach on a number of fronts.&lt;/p&gt;
&lt;p&gt;First, we get to combine Arrays and ArrayLists. Since we&amp;rsquo;ll always
have 10 digits, the &amp;ldquo;bucket list&amp;rdquo; is of fixed size, while the
individual bucket lengths vary. This leads to the Array of ArrayLists
and we&amp;rsquo;ve got a single platform to compare and contrast the two. Which
is better when and why?&lt;/p&gt;
&lt;p&gt;The algorithm itself is also worth talking about.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s relatively simple - we did it by hand before implementing it.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s got some history worth discussing.&lt;/li&gt;
&lt;li&gt;There are a number of other questions we can approach&lt;/li&gt;
&lt;li&gt;How can we deal with negatives?&lt;/li&gt;
&lt;li&gt;What about strings?&lt;/li&gt;
&lt;li&gt;Will it always work (what about floating point numbers).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, we can talk about speed &amp;ndash; they&amp;rsquo;re testing that now and we&amp;rsquo;ll discuss our Radix sort vs the built in Arrays.sort() on Monday.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll do the n^2 and nLog(n) sorts a little later, but I think this
was a detour well worth taking.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching Languages</title>
      <link>https://cestlaz.github.io/posts/2013-11-23-teaching-languages/</link>
      <pubDate>Sat, 23 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-11-23-teaching-languages/</guid>
      <description>&lt;p&gt;Java&amp;rsquo;s never been my favorite language either for using or for
teaching.&lt;/p&gt;
&lt;p&gt;As a programmer, after starting with languages like Fortran
and Pascal, I really cut my teeth with C. More recently, Python has
been my go to language to get real work done.&lt;/p&gt;
&lt;p&gt;From a teaching point of view most languages have good points
and bad ones. When the AP class went from Pascal to C++ I lamented
losing the simplicity and the low cost of entry. On the other hand,
C++ gave us objects (not that I&amp;rsquo;m a big OOP guy), separate files, the
ability to use tons of real world libraries and more.&lt;/p&gt;
&lt;p&gt;Moving to Java simplified things in a number of ways but removed
memory management. If we didn&amp;rsquo;t teach that along with the stack frame
in our Systems class, I think our kids would be missing something very
important.&lt;/p&gt;
&lt;p&gt;I was reminded of some of Java&amp;rsquo;s limitations as a teaching language over the past couple of days.&lt;/p&gt;
&lt;p&gt;As posted earlier, I had my AP students create their own class to
mimic the Java ArrayList. Before introducing the ArrayList in Java, I
wanted to introduce generics:&lt;/p&gt;
&lt;p&gt;public class myList&lt;!-- raw HTML omitted --&gt; {
T[] data;
public myList() {
data = new T[10];
}
// much more not shown
}&lt;/p&gt;
&lt;p&gt;Turns out, you can no longer do this.&lt;/p&gt;
&lt;p&gt;After doing some searching, there does appear to be a way to get this
effect but it was certainly not something I wanted to do with my
classes. I was looking for something more pedagogically sound - an
easy way to show the concept and a way to springboard to an ArrayList.&lt;/p&gt;
&lt;p&gt;Oh well&amp;hellip;&lt;/p&gt;
&lt;p&gt;So, we finished ArrayLists and I was mapping out a plan for Monday. I
thought Radix sort would be cool &amp;ndash; we already introduced using an
array to tally votes when we did the mode. This seemed to be a natural
extension. It would combine Arrays and ArrayLists and illustrate when each is appropriate.&lt;/p&gt;
&lt;p&gt;First the kids would set up an array of 10 buckets, each being an ArrayList:&lt;/p&gt;
&lt;p&gt;public class Buckets {
ArrayList&lt;!-- raw HTML omitted --&gt;[] buckets;
public Buckets() {
buckets = new ArrayList&lt;!-- raw HTML omitted --&gt;[10];
for (int i=0;i&amp;lt;10;i++)
buckets[i] = new ArrayList&lt;!-- raw HTML omitted --&gt;();
}
// much more not shown
}&lt;/p&gt;
&lt;p&gt;Unfortunately, Java type safety once again reared its ugly head. OK,
maybe not ugly to a programmer, but ugly to a teacher. You can&amp;rsquo;t do
it. You can do it with an old school ArrayList without the generic:
&lt;code&gt;ArrayList[] buckets = new Arraylist[10];&lt;/code&gt; but of course, this
leaves you open to type mismatch problems.&lt;/p&gt;
&lt;p&gt;Once again, Java provides a convoluted workaround that might be fine
for a professional programmer, but for a student, it would be nuts.&lt;/p&gt;
&lt;p&gt;I might go ahead with the Radix sort lesson anyway, we&amp;rsquo;ll see, but it
would be nice if I could teach this level of course without having to
fight the implementation language.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build it first</title>
      <link>https://cestlaz.github.io/posts/2013-11-19-build_it/</link>
      <pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-11-19-build_it/</guid>
      <description>&lt;p&gt;The subtitle of this post is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;and why my students are going to hate me tomorrow.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When my good friend Gerry Seidman talks to my classes, he frequently
says &amp;ldquo;never use a data structure or algorithm you couldn&amp;rsquo;t build yourself.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;This doesn&amp;rsquo;t mean that you have to write everything from scratch, just
that you should have some knowledge as to what&amp;rsquo;s going on under the
hood. I find that all too often young programmers just rely on APIs
and libraries and really don&amp;rsquo;t know how their computers and programs are working.&lt;/p&gt;
&lt;p&gt;And it&amp;rsquo;s never too early to start.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve been spending time talking about arrays recently. Now, most of
my students have some exposure to Python and so we started talking
about the flexibility and power of the Python list vs the limited
facilities of the Java array.&lt;/p&gt;
&lt;p&gt;How to solve the problem and make Java easier to work with? Let&amp;rsquo;s
write our own list class. We started simple:&lt;/p&gt;
&lt;p&gt;public class myList {
private int[] data;
private int numItems;&lt;/p&gt;
&lt;p&gt;public myList() {
data = new int[5];
numItems = 0;
}&lt;/p&gt;
&lt;p&gt;// append to the end of the list
public add(int d) {
if (numItems &amp;gt;= data.length) {
tmp = new int[data.length+data.length/2];
for (int i=0;i&amp;lt;numItems;i++)
tmp[i]=data[i];
data = tmp;
}&lt;/p&gt;
&lt;p&gt;data[numItems]=d;
numItems = numItems + 1;
}
}&lt;/p&gt;
&lt;p&gt;from there we added functionality such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inserting in arbitrary locations&lt;/li&gt;
&lt;li&gt;Removing items from the list&lt;/li&gt;
&lt;li&gt;Searching for an item&lt;/li&gt;
&lt;li&gt;Setting the item at a location to a value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And of course we were also able to talk about things like refactoring
out growing the array into a private method.&lt;/p&gt;
&lt;p&gt;And tonight the classes are changing the internal array from int[] to String[].&lt;/p&gt;
&lt;p&gt;Of course, what we&amp;rsquo;re building is an ArrayList. Tomorrow we&amp;rsquo;ll reveal
that little fact and of course the classes will all hate me, but then,
they&amp;rsquo;ll really understand what&amp;rsquo;s going on under the hood.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stuyablo II</title>
      <link>https://cestlaz.github.io/posts/2013-10-27-stuyabloii/</link>
      <pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-10-27-stuyabloii/</guid>
      <description>&lt;p&gt;Last week in my AP classes, we were working on inheritance.&lt;/p&gt;
&lt;p&gt;So, what to do?&lt;/p&gt;
&lt;p&gt;Last time around I had my classes work on a &amp;ldquo;speed dating&amp;rdquo; program -
StuyDater. Back then JonAlf had his classes work on Stuyablo, that
classic dungeon crawl.&lt;/p&gt;
&lt;p&gt;I still plan on reworking the StuyDater project, but first I decided
to do my take on Stuyablo. Of course, we&amp;rsquo;ve improved on it. This time
it&amp;rsquo;s &lt;strong&gt;Stuyablo II&lt;/strong&gt;. The next guy will have to do &lt;strong&gt;Stuyablo III - in
3D&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We used the concept of a base class &lt;strong&gt;Character&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;public class Character {
private int health;
private String name;&lt;/p&gt;
&lt;p&gt;public String toString() {
return Name;
}&lt;/p&gt;
&lt;p&gt;// etc
}
And then some derived classes such as:&lt;/p&gt;
&lt;p&gt;public class Wizard extends Character {
private int mana;
// etc
}&lt;/p&gt;
&lt;p&gt;We spend time dealing with public vs private vs protected, issues with
constructors, super and the like but then the weekend was upon us.&lt;/p&gt;
&lt;p&gt;So, what was the assignment - we broke up into groups. Each group had
to design one aspect of the project. Some groups had to decide on what
would make up a player character. Perhaps a fighter or a wizard. What
base level attributes are needed? What methods? What do they need as
parameters and what do they return? What will the combat system look
like?&lt;/p&gt;
&lt;p&gt;Another groups had to work on non player characters. Yet others
designed the game driver.&lt;/p&gt;
&lt;p&gt;None of them were supposed to actually write finished code.&lt;/p&gt;
&lt;p&gt;I asked them to bounce around ideas on our mailing list over the
weekend.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s been amazing to watch the discussion. It&amp;rsquo;s now Saturday evening
and throughout the day there&amp;rsquo;s been a constant flow of ideas and
discussion. I love it when the classes are into the projects.&lt;/p&gt;
&lt;p&gt;Monday we&amp;rsquo;re going to sync up, finalize the design, and then start
writing this thing.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s going to be fun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Databases - the next day</title>
      <link>https://cestlaz.github.io/posts/2013-10-09-database-followup/</link>
      <pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-10-09-database-followup/</guid>
      <description>&lt;p&gt;Two days ago I asked the students, in small groups, to come up with a design to store a school (or school district) database.&lt;/p&gt;
&lt;p&gt;Yesterday we discussed the designs.&lt;/p&gt;
&lt;p&gt;All the students took our brand of AP Computer Science last year - a
superset of the old AB curriculum and in that class they implemented a
number of data structures such as binary search trees and hash tables,
but they really didn&amp;rsquo;t have an opportunity to design something more
comprehensive.&lt;/p&gt;
&lt;p&gt;At the start, suggestions were based around simple monolithic
designs. A class to represent a student, an array or hash table of
these classes and in each object, an array of grades or something like
that.&lt;/p&gt;
&lt;p&gt;Soon the discussion turned to optimizing search based on different
&amp;ldquo;keys.&amp;rdquo; Searching by student id or searching by name. This led to the
idea of indices. For example, if our main data set is sorted by name, we can make auxiliary lists sorted by id or grades and use those to point into our main data set.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This was followed by less monolithic ideas &amp;ndash; essentially ideas behind
linking different tables using key fields. For example, a student
table with student id and a transcript table where each line has a
student id, a class, grade, teacher, and date.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Pretty sophisticated ideas.&lt;/p&gt;
&lt;p&gt;From there we talked about assorted data structures that we could use with these ideas.&lt;/p&gt;
&lt;p&gt;I think it was a productive day.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Databases - putting it all together</title>
      <link>https://cestlaz.github.io/posts/2013-10-07-databases/</link>
      <pubDate>Mon, 07 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-10-07-databases/</guid>
      <description>&lt;p&gt;So, we&amp;rsquo;re into the second year of my Software Development class. It&amp;rsquo;s a
little different since last time, I taught many of the kids in
AP. This time, they&amp;rsquo;re mostly new to me.&lt;/p&gt;
&lt;p&gt;In AP, everything is low level. The students build linked lists,
binary search trees, heaps, hash tables, graphs and the like. It&amp;rsquo;s all
about building the data structure. The Node, if you would.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re about to start talking about databases. We&amp;rsquo;ll probably spend a
couple of days on relational databases and SQL and then some time with
MongoDB.&lt;/p&gt;
&lt;p&gt;There can be a big gap between a single lower level data structure and
something as complex as a database.&lt;/p&gt;
&lt;p&gt;I wanted to learn more about the kids and also
see how they would go from last years material to solving a larger
problem.&lt;/p&gt;
&lt;p&gt;So today we talked about designing a database. Actually, we haven&amp;rsquo;t
even gotten there yet. We actually talked about what data we&amp;rsquo;d want to
store if we were building a database for a school. Sounds like a
typical class assignment.&lt;/p&gt;
&lt;p&gt;Turns out, there&amp;rsquo;s lots of data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Personal info like name, id number, address&lt;/li&gt;
&lt;li&gt;Transcript based data including:&lt;/li&gt;
&lt;li&gt;grade&lt;/li&gt;
&lt;li&gt;class code&lt;/li&gt;
&lt;li&gt;class section&lt;/li&gt;
&lt;li&gt;time stamp&lt;/li&gt;
&lt;li&gt;teacher&lt;/li&gt;
&lt;li&gt;Teacher information&lt;/li&gt;
&lt;li&gt;Attendance Information&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And more.&lt;/p&gt;
&lt;p&gt;The kids were then broken into groups.&lt;/p&gt;
&lt;p&gt;The assignment:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Assume you&amp;rsquo;re working in Java. You can use all the tools covered last years. Both built in like HashMaps and TreeMaps and those that you built like search trees or heaps.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/blockquote&gt;
&lt;p&gt;It was great hearing the discussions. Some groups based things on Java
Classes, some on hash tables, some trees. Some groups started with
efficiency concerns and wondered what types of queries they would
need. I was really pleased with the level of activity and the types of
concerns the students had.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m really looking forward to tomorrow when we discuss the designs and move on from there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Real Data - Part II</title>
      <link>https://cestlaz.github.io/posts/2013-05-20-real_data_part_ii/</link>
      <pubDate>Mon, 20 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-05-20-real_data_part_ii/</guid>
      <description>&lt;p&gt;About a month ago, I talked about using &lt;a href=&#34;http://cestlaz.github.io/2013/04/14/Real_Data.html#.UZjTjqDctKk&#34;&gt;real
data&lt;/a&gt;
with our intro classes. After looking at the correlation between
school&amp;rsquo;s SAT scores and free and reduced lunch rates, it was time to
turn the students loose.&lt;/p&gt;
&lt;p&gt;The assignment: Find some interesting data out and do something with
it. Make a web page that shows what you did and what you
discoverde. We had already looked at the NYC Data Mine as well as a
few other sources but students were encouraged to find new data sourcess.&lt;/p&gt;
&lt;p&gt;The results were terrific. On top of the requirements, some students
figured out how to incorporate Google Maps, graphs, and other niceties
well beyond what we&amp;rsquo;ve covered in class.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Explorations included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://149.89.150.100/~veronika.azzara/compsci_project/maps.py&#34;&gt;311 Calls in NYC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://149.89.150.100/~vanessa.miraj/untitled%20text%203.html&#34;&gt;Movie earnings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://149.89.150.100/~lily.chen/fooddata.html&#34;&gt;Food pricing over time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://149.89.150.100/~ivette.chen/healthiest-state-rankings.py&#34;&gt;Red Meat and Health&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://149.89.150.100/~hilary.tung/data/pie%20vs%20cake.py&#34;&gt;Cake comparisons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and even&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://149.89.150.100/~kyle.oleksiuk/Kyle&amp;amp;AnishProject2.html&#34;&gt;Pokemon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;rsquo;s just a sampling.&lt;/p&gt;
&lt;p&gt;Well done guys.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Madlib Madness</title>
      <link>https://cestlaz.github.io/posts/2013-04-30-madlib_madness/</link>
      <pubDate>Tue, 30 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-04-30-madlib_madness/</guid>
      <description>&lt;p&gt;Earlier in the term, our intro classes spent a little time learning
some basic HTML. We don&amp;rsquo;t spend a lot of time on it, just enough so
that the students can present their work in a static web site. The end
goal, though, was to programatically generate the web sites - there&amp;rsquo;s
nothing quite as empowering to a student as when they can present their
work to the world.&lt;/p&gt;
&lt;p&gt;Finally, it&amp;rsquo;s all coming together.&lt;/p&gt;
&lt;p&gt;Now that the classes are comfortable with Python, we can have some
fun. We all remember Mad Libs - that wacky word game where you select
unknowingly select words to substitute into a basic story and
hilarity ensues.&lt;/p&gt;
&lt;p&gt;We did our own versions using Python files, lists and
dictionaries.&lt;/p&gt;
&lt;p&gt;Here are some of the results:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;http://homer.stuy.edu/~richard.zhan/19-Madlibs.py&#34;&gt;http://homer.stuy.edu/~richard.zhan/19-Madlibs.py&lt;/a&gt;
&lt;!-- raw HTML omitted --&gt;
2. &lt;!-- raw HTML omitted --&gt;
&lt;a href=&#34;http://homer.stuy.edu/~veronika.azzara/madlibifystory.py&#34;&gt;http://homer.stuy.edu/~veronika.azzara/madlibifystory.py&lt;/a&gt;
&lt;!-- raw HTML omitted --&gt;
3. &lt;!-- raw HTML omitted --&gt;
&lt;a href=&#34;http://homer.stuy.edu/~belinda.liang/18-MadLibsMiniProject.py&#34;&gt;http://homer.stuy.edu/~belinda.liang/18-MadLibsMiniProject.py&lt;/a&gt;
&lt;!-- raw HTML omitted --&gt;
4. &lt;!-- raw HTML omitted --&gt;
&lt;a href=&#34;http://homer.stuy.edu/~kyle.oleksiuk/MadlibifyProject5.py&#34;&gt;http://homer.stuy.edu/~kyle.oleksiuk/MadlibifyProject5.py&lt;/a&gt;
&lt;!-- raw HTML omitted --&gt;
5. &lt;!-- raw HTML omitted --&gt;
&lt;a href=&#34;http://homer.stuy.edu/~phillip.huynh/story.py&#34;&gt;http://homer.stuy.edu/~phillip.huynh/story.py&lt;/a&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;The students wrote a basic story with substitution points. Their
programs then randomly replaced these points with words from an
assortment of categorized lists.&lt;/p&gt;
&lt;p&gt;Enjoy!!!!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Real Data</title>
      <link>https://cestlaz.github.io/posts/2013-04-14-real_data/</link>
      <pubDate>Sun, 14 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-04-14-real_data/</guid>
      <description>&lt;p&gt;When looking for assignments for our classes, in addition to trying to
craft assignments that develop and reinforce key ideas, we also strive
to come up with ideas that &amp;ldquo;speak&amp;rdquo; to the students and keep their
interest. We write small games, use problems within the student&amp;rsquo;s
experiences, and in general try to find problems that are appealing.&lt;/p&gt;
&lt;p&gt;This is much easier to do when the kids can read data from a file. The
tool we&amp;rsquo;re using with our sophomores right now is Python and Python
makes reading files very easy. Combining file input with basic string
functions and all of a sudden, we can read and parse comma separated
values.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; open(filename)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readlines():
l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;True, this doesn&amp;rsquo;t handle quotes and embedded commas, but that just
leads to a discussion on cleaning up data and when we do list
comprehensions, things get even slicker.&lt;/p&gt;
&lt;p&gt;We could just make up some sample data, for example, student test scores:&lt;/p&gt;
&lt;p&gt;Tom,95,87,97,93&lt;/p&gt;
&lt;p&gt;Sarah,98,98,84,92&lt;/p&gt;
&lt;p&gt;Harry,90,90,90,90&lt;/p&gt;
&lt;p&gt;Sue,94,95,96,97&lt;/p&gt;
&lt;p&gt;But it&amp;rsquo;s so much more fun with the wealth of CSV data waiting to be
grabbed. If your kids like sports, you can check
out &lt;!-- raw HTML omitted --&gt;baseball-reference.com&lt;!-- raw HTML omitted --&gt;
or it&amp;rsquo;s counterparts for basketball or football.&lt;/p&gt;
&lt;p&gt;We decided to look at government data instead.&lt;/p&gt;
&lt;p&gt;Federal data can be found at &lt;!-- raw HTML omitted --&gt;data.gov&lt;!-- raw HTML omitted --&gt; but we focused on &lt;!-- raw HTML omitted --&gt;New York City&lt;!-- raw HTML omitted --&gt;. We
settled
on &lt;!-- raw HTML omitted --&gt;SAT&lt;!-- raw HTML omitted --&gt;
data. SAT math, reading, and writing scores for all NYC public
schools. Something Stuy kids are very interested in. We were able to
look for comparable schools, which schools had large spreads between
math and verbal, which schools had score increases over time, etc.&lt;/p&gt;
&lt;p&gt;Much more interesting to look at real SAT data than made up student
grade info.&lt;/p&gt;
&lt;p&gt;Tomorrow we&amp;rsquo;ll look at combining data sets &amp;ndash; looking at
the relationship between SAT scores and school ratings and
demographics. It should be interesting. Later, we&amp;rsquo;ll grab books
from &lt;!-- raw HTML omitted --&gt;Project Gutenberg&lt;!-- raw HTML omitted --&gt; and see
how we can analyze large texts.&lt;/p&gt;
&lt;p&gt;The moral of the story - there&amp;rsquo;s lots of great data easily accessible
&amp;ndash; let&amp;rsquo;s use it to motivate and engage our students.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;UPDATE:&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s taken me a while to post this, and in the meantime we analyzed
the SAT data from one NYC data set and matched it with a data set of
demographic data:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;The graph shows a strong correlation between schools with a high number of
students eligable for free lunch (the Y-axis) and low SAT scores (the
X-axis). This led to a very interesting conversation on the effects of
poverty.&lt;/p&gt;
&lt;p&gt;We also noticed a couple of outliers. There&amp;rsquo;s one school at about
(1400,82). High poverty (free lunch) and national average SAT. Also two
schools with low free lunch numbers and middling SAT scores
(1400,17ish).&lt;/p&gt;
&lt;p&gt;The (1400,82) point turns out to be a school that caters to English
Language Learners and we presume has a large number of recent
immigrants (partially noted by the name and also by the fact that
their SAT math scores far surpassed the English ones).&lt;/p&gt;
&lt;p&gt;Great discussions ensued all due to applying CS to real world data.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Who won the election -- Quadratic to Linear Time!!!!!</title>
      <link>https://cestlaz.github.io/posts/2013-03-23-who_won_the_election-quadratic_to_linear_time/</link>
      <pubDate>Sat, 23 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2013-03-23-who_won_the_election-quadratic_to_linear_time/</guid>
      <description>&lt;p&gt;Last week was crazy. Busy, stressful, late night after late night. It
ended, though, on a great note.&lt;/p&gt;
&lt;p&gt;A young lady in my intro class found me in my office near the end of the day:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Student: Mr. Z, I wanted to make sure to catch you before vacation!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Me: What&amp;rsquo;s up?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Student: I wanted to tell you that today&amp;rsquo;s lesson was AWESOME!!!!!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wow. I&amp;rsquo;ve been teaching 23 years and that&amp;rsquo;s never happened before!!!!&lt;/p&gt;
&lt;p&gt;So, what was the hubbub about?&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve been doing list processing in Python over the past few days. We already did the basics, such as finding the largest element in a list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_max&lt;/span&gt;(L):
  maxval &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
  i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;len(L):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; L[i]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;maxval:
     maxval&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;L[i]
  i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; maxVal&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;ve also done basic searching, counting elements, removing elements, etc.&lt;/p&gt;
&lt;p&gt;Today we started with finding the mode of a list of grades.&lt;/p&gt;
&lt;p&gt;Most students approached the problem as a maximum problem. Assume the
first item is the mode and find it&amp;rsquo;s frequency, then proceed through
the list each time seeing if the current node occurs more fequently
than the &amp;ldquo;mode so far.&amp;rdquo; Pretty much the same idea as find_max (but in this case, returning a list of all the modes).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mode&lt;/span&gt;(L):
  modecount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count( L[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] )
  modes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ L[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] ]
  i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(L):
    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(L[i])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; modecount:
      modecount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c
      modes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ L[i] ]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;modecount &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; L[i] &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; modes:
      modes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append( L[i] )
    i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; modes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pretty cool. The kids are doing something pretty sophisticated here.&lt;/p&gt;
&lt;p&gt;Time to look deeper. We started running this on larger and larger data
sets. Things started really slowing down at about 20K. We then timed
things to get some numbers (thanks
&lt;a href=&#34;http://stackoverflow.com/questions/5998245/get-current-time-in-milliseconds-in-python&#34;&gt;StackOverflow&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;What was going on. The students pretty quickly honed in on the line
that called L.count(L[i]) &amp;ndash; &lt;strong&gt;Hidden Complexity&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We haven&amp;rsquo;t done big-O notation but the class easily saw that count had
to go through the entire data set and we ended up with an N^2
algorithm. For example, if we have 10 items, the main loop executes 10
times and each time, count goes through the entire list (10 items) as
well. If we go to 100 items, it becomes 100x100.&lt;/p&gt;
&lt;p&gt;What to do????&lt;/p&gt;
&lt;p&gt;Time to talk about what&amp;rsquo;s probably the most discussed instance of mode
finding - elections. The winner is &amp;ldquo;the mode of the ballots.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Of course we don&amp;rsquo;t use the above algorithm. We usually tally or count the ballots. We go through the ballots once, each time adding one to the appropriate candidates &amp;ldquo;bucket.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cestlaz.github.io/img/tally.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;From here, it&amp;rsquo;s a short step to see that we can use a list. It&amp;rsquo;s
indices represent the grade values and the data in the list the counts
or tallies:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fastmode&lt;/span&gt;(L):
  i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  counts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;max(L)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
    counts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    i&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(L):
    counts[ L[i] ] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  modecount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(counts)
  modes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
  i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(counts):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; counts[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;modecount:
    modes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(i)
    i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; modes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We go through the list once to build the tallies and then the &amp;ldquo;tally&amp;rdquo;
list once to get the modes. Simple, straightforward, and linear
time!!!!!!!!!&lt;/p&gt;
&lt;p&gt;The original routine started to hit a roadblock at about 20K items,
here we got to one million without breaking a sweat.&lt;/p&gt;
&lt;p&gt;The take away:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get it working first.&lt;/li&gt;
&lt;li&gt;Then profile to find your bottleneck&lt;/li&gt;
&lt;li&gt;Look at the problem in a different way&lt;/li&gt;
&lt;li&gt;Using data structures in a clever way can really improve performance.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Layers of a lesson</title>
      <link>https://cestlaz.github.io/posts/2012-12-17-layers-of-a-lesson/</link>
      <pubDate>Mon, 17 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2012-12-17-layers-of-a-lesson/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;div align=&#34;center&#34;&gt;
&lt;img width=&#34;50%&#34; src=&#34;https://cestlaz.github.io/img/turtle-anim.gif&#34; class=&#34;&#34; alt=&#34;&#34; /&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;p&gt;
My last post I was talking about the fact that as teachers, our
knowledge and experience is frequently trivialized. The tenor of the
times is that anyone can design a course, anyone can teach, and in
fact, we don&#39;t even need teachers, just videos or computer based
systems. If you&#39;ve ever tutored a friend, you&#39;re more than qualified.

&lt;p&gt;
That might be a strong statement but everywhere you look you see
&#34;education&#34; programs designed and implemented by non teachers. It
seems that it&#39;s believed that teaching only involves the most
superficial of transfers of information.

&lt;p&gt;
Today, I thought I&#39;d look at a lesson I taught the other week. How
I&#39;ve seen similar material presented and how my colleagues and I might treat
the subject.

&lt;p&gt;
We use &lt;a href=&#34;http://ccl.northwestern.edu/netlogo/&#34;&gt;NetLogo&lt;/a&gt; in
our Sophomore level intro course. It&#39;s a highly parallel version of
logo. It&#39;s very visual, it&#39;s great for modeling and you can introduce
deep, meaningful concepts such as parallel processing in a gentle
manner.

&lt;p&gt;
Early on the kids have to learn how to manipulate the turtles. In
NetLogo you write a single program and it&#39;s run by all the turtles &#34;at
once.&#34; The image above is one of their early &#34;experiments.&#34; Have the
turtles wiggle out of the center, but when they get to an invisible
border, start spinning. They do a number of variations on this theme.

&lt;p&gt;
A solution might look like this:

&lt;pre&gt;
; asked in a turtle context
to gospin
ifelse abs xcor &lt; 8 or abs ycor &lt; 8
[ wiggle ] ; wiggle implementation not shown
[ left 5 ]
end
&lt;/pre&gt;

&lt;p&gt;
Let&#39;s call level one just talking about the solution by looking at the
program as a sequence of instructions. Specifically relating the
instructions to the problem, showing how it solves it, and that&#39;s it.

&lt;p&gt;
This is the simplest level. A book, video, or online courseware can
approach teaching at this level. A non computer scientist teacher or a
non teacher computer scientist could do so as well. Students might
learn a bit but I wouldn&#39;t hope for much inspiration or
creativity to come out of it.

&lt;p&gt;
Let&#39;s move to level two.
&lt;p&gt;
Here we might talk about &#34;what the turtles are doing.&#34; They&#39;re always
doing something, either wiggling or spinning. This is a step in the
right direction. When done right, the students start thinking about
the problem in a more general sense but they&#39;re still looking at the
problem as something that exists only in the world of NetLogo. They
are more likely develop patterns than in level one, but it&#39;s still
limited.

&lt;p&gt;
Level three is where things get interesting. On the surface, the
problem is just a nice introduction to programming turtles in
NetLogo. At a deeper level, it&#39;s an opportunity to introduce the kids
to State Machines. A new way of thinking about problems and problem
solving.

&lt;p&gt;
Students understand the idea of a &#34;state.&#34; For example, in class,
they&#39;re in a &#34;seated state,&#34; maybe in a &#34;note taking state,&#34; etc. It&#39;s
easy to see that they don&#39;t know what their day will bring but they
constantly make decisions based on their &#34;state.&#34; Likewise, they can
think about the turtle as in a state. It&#39;s either in a wiggling state
or a spinning state and based on their situation they can either
continue in their current state or transition to the other one:

&lt;div align=&#34;center&#34;&gt;
&lt;img width=&#34;50%&#34; src=&#34;https://cestlaz.github.io/img/spin-state.png&#34; class=&#34;&#34; alt=&#34;&#34; /&gt;
&lt;/div&gt;

This opens up a new way of thinking and it&#39;s easy to see how this
extends to other problems, for example, a ghost from pacman:

&lt;div align=&#34;center&#34;&gt;
&lt;img width=&#34;50%&#34; src=&#34;https://cestlaz.github.io/img/pacman-ghost-state.png&#34; class=&#34;&#34; alt=&#34;&#34; /&gt;
&lt;/div&gt;

A good teacher thinks about working across these levels. He adjusts
based on the class and looks for opportunities to develop these deeper
concepts.
</description>
    </item>
    
    <item>
      <title>Real Projects</title>
      <link>https://cestlaz.github.io/posts/2012-12-09-real-projects/</link>
      <pubDate>Sun, 09 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2012-12-09-real-projects/</guid>
      <description>&lt;!DOCTYPE html&gt;


This post was supposed to be about varsity academic teams but I wanted
to share something else first.

&lt;p&gt;
For years I was unhappy with our &#34;research&#34; course but due to the
misguided views of our past administration, I pretty much had to keep
it running. Over the same time, I was frustrated by the fact that
there was so much missing in our students computer science related
education. Specifically, kids don&#39;t really get to experience creating
large &#34;real&#34; systems from beginning to end. I was also frustrated by
the fact that the previous administration prevented me from creating a
course to address this problem.


&lt;p&gt;
Due to a particular set of circumstances, I was able to
convert our research course into what is now my &#34;Software Development&#34;
course.

&lt;p&gt;
So far, I&#39;m very happy with the results.

&lt;p&gt;
The classes just finished their latest projects. Over the course of
about three week, mostly on their own time, working around homework
and other obligations, student groups designed, developed, tested and
deployed a range of applications.

&lt;p&gt;
All the programs
use &lt;a href=&#34;flask.pocoo.org&#34;&gt;Flask&lt;/a&gt; as a web framework. Many
use &lt;a href=&#34;mongodb.org&#34;&gt;MongoDB&lt;/a&gt; to store data and they used a
range of web resources and apis. The students were a little limited by
the time frame of the project and the fact that I just started
teaching them how to use javascript mid project, but they really did a
terrific job.

&lt;p&gt;
A few in particular were a lot of fun:

&lt;p&gt;
&lt;div align=&#34;center&#34;&gt;
&lt;a href=&#34;http://ml7.stuycs.org:7207&#34;&gt;
&lt;img width=&#34;400px&#34; src=&#34;https://cestlaz.github.io/img/survival-guide.png&#34;/&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;
The &lt;a href=&#34;http://ml7.stuycs.org:7207&#34;&gt;Survival Guide&lt;/a&gt; used
Google Maps to help prepare you for all sorts of disasters ranging
from Hurricanes, to Alien Invasions, to the Zombie Apocalypse.

&lt;p&gt;
A &lt;a href=&#34;http://ml7.stuycs.org:6202&#34;&gt;Movie recommender&lt;/a&gt; That used
MoveDB, YouTube, and the NY Times API to find and show info about
movies and actors.

&lt;p&gt;
&lt;div align=&#34;center&#34;&gt;
&lt;a href=&#34;http://ml7.stuycs.org:7203&#34;&gt;
&lt;img width=&#34;400px&#34; src=&#34;https://cestlaz.github.io/img/recipe-pricer.png&#34;/&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;a href=&#34;http://ml7.stuycs.org:7203&#34;&gt;Recipe Pricer&lt;/a&gt; scrapes &lt;a href=&#34;http://allrecipes.com&#34;&gt;allrecipes.com&lt;/a&gt; for a
recipe then uses Google&#39;s shopping API to price out the ingredients
(with some interesting results).

&lt;p&gt;
&lt;div align=&#34;center&#34;&gt;
&lt;a href=&#34;http://ml7.stuycs.org:7205&#34;&gt;
&lt;img width=&#34;400px&#34; src=&#34;https://cestlaz.github.io/img/stuy-page.png&#34;/&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;
One group remade the &lt;a href=&#34;http://ml7.stuycs.org:7205&#34;&gt;Stuyvesant
Home Page&lt;/a&gt; but since they&#39;re using a Twilio test account you won&#39;t
be able to see the really neat stuff they did.

&lt;p&gt;
and

&lt;p&gt;
&lt;a href=&#34;http://ml7.stuycs.org:6206&#34;&gt;Tweet Stat&lt;/a&gt; tells you how well
your favorite celebrity spells.

&lt;p&gt;
This is just a sampling.

&lt;p&gt;
You can see all of them at &lt;a href=&#34;http://ml7.stuycs.org/project2-results.html&#34;&gt;Our Projects Page&lt;/a&gt; and all the code is up on GitHub (linked from the page).

&lt;p&gt;
I&#39;d encourage you to take a look. It would be terrific if you could
give the class feedback either by commenting here or on the project
page.

&lt;p&gt;
I can&#39;t wait to see what they do for their next projects.

&lt;p&gt;
Special thanks to Ben, Moisey and the entire &lt;a href=&#34;http://digitalocean.com&#34;&gt;DigitalOcean&lt;/a&gt; team for providing us with server space for all of this.
</description>
    </item>
    
    <item>
      <title>Sorting from the top and from the bottom</title>
      <link>https://cestlaz.github.io/posts/2010-03-14-sorting-from-top-and-from-bottom/</link>
      <pubDate>Sun, 14 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2010-03-14-sorting-from-top-and-from-bottom/</guid>
      <description>&lt;!DOCTYPE html&gt;

&lt;div id=&#34;content&#34;&gt;&lt;h1 class=&#34;title&#34;&gt;Sorting from the top and from the bottom&lt;/h1&gt; &lt;p&gt;I&#39;ve been meaning to write this post for a couple of weeks, but some times life just gets in the way. &lt;/p&gt;&lt;p&gt;I&#39;ve always thought it important to arm students with as many different tools with which to attack problems as possible. As such, the courses I teach use a number of different languages, each highlighting a different paradigm and thought process. The hope is that by the end of the sequence, they can look at problems from many different angles. &lt;/p&gt;&lt;p&gt;In my advanced placement classes, we recently studied sorting algorithms.  It think the quicksort is a good example of a problem that can be looked at from multiple points of view. &lt;/p&gt;&lt;p&gt;In my experiences talking to teachers and students who cut there teeth using languages like Java, C, or C++, much of the discussion deals with the actual partitioning of the array. Comparing elements, swapping them and arriving in the middle. One might end up with something like this as a first cut: &lt;/p&gt;   &lt;pre class=&#34;src src-java&#34;&gt;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 1:  &lt;/span&gt;&lt;span style=&#34;color: #a020f0;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #228b22;&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;qsort&lt;/span&gt;(&lt;span style=&#34;color: #228b22;&#34;&gt;int&lt;/span&gt;[] &lt;span style=&#34;color: #a0522d;&#34;&gt;a&lt;/span&gt;,&lt;span style=&#34;color: #228b22;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;l&lt;/span&gt;, &lt;span style=&#34;color: #228b22;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;h&lt;/span&gt;)&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 2:  &lt;/span&gt;{&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 3:  &lt;/span&gt;&lt;span style=&#34;color: #a020f0;&#34;&gt;if&lt;/span&gt; (l&amp;gt;=h)&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 4:  &lt;/span&gt;  &lt;span style=&#34;color: #a020f0;&#34;&gt;return&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 5:  &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 6:  &lt;/span&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;/* &lt;/span&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;Just use lowest index as pivot for now */&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 7:  &lt;/span&gt;&lt;span style=&#34;color: #228b22;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;pivot&lt;/span&gt; = a[l];&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 8:  &lt;/span&gt;&lt;span style=&#34;color: #228b22;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;low&lt;/span&gt;=l;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 9:  &lt;/span&gt;&lt;span style=&#34;color: #228b22;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;high&lt;/span&gt;=h;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;10:  &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;11:  &lt;/span&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;/* &lt;/span&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;partition the data set around the pivot value */&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;12:  &lt;/span&gt;&lt;span style=&#34;color: #a020f0;&#34;&gt;while&lt;/span&gt; (l&amp;lt;=h)&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;13:  &lt;/span&gt;{&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;14:  &lt;/span&gt;  &lt;span style=&#34;color: #a020f0;&#34;&gt;while&lt;/span&gt; (a[l]&amp;lt;pivot)&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;15:  &lt;/span&gt;    l++;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;16:  &lt;/span&gt;  &lt;span style=&#34;color: #a020f0;&#34;&gt;while&lt;/span&gt; (a[h]&amp;gt;pivot)&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;17:  &lt;/span&gt;    h--;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;18:  &lt;/span&gt;  &lt;span style=&#34;color: #a020f0;&#34;&gt;if&lt;/span&gt; (l&amp;lt;=h)&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;19:  &lt;/span&gt;  {&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;20:  &lt;/span&gt;    &lt;span style=&#34;color: #228b22;&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a0522d;&#34;&gt;tmp&lt;/span&gt;=a[l];&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;21:  &lt;/span&gt;    a[l]=a[h];&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;22:  &lt;/span&gt;    a[h]=tmp;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;23:  &lt;/span&gt;    l++;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;24:  &lt;/span&gt;    h--; &lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;25:  &lt;/span&gt;  }&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;26:  &lt;/span&gt;}&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;27:  &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;28:  &lt;/span&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;/* &lt;/span&gt;&lt;span style=&#34;color: #b22222;&#34;&gt;sort items below and above the pivot */&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;29:  &lt;/span&gt;qsort(a,low,l-1);&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;30:  &lt;/span&gt;qsort(a,l,high);&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;31:  &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;32:  &lt;/span&gt;}&lt;br /&gt;&lt;/pre&gt;    &lt;p&gt;A fair amount of time and detail is spent dealing with the low level movement of data within the array . This is important &amp;ndash; good stuff, but it takes the emphasis away from the higher level elegance of the algorithm. &lt;/p&gt;&lt;p&gt;The quicksort can be described as: &lt;/p&gt;  &lt;ol&gt;&lt;li&gt; If the size of the list is &lt;= 1, return.&lt;/li&gt;&lt;li&gt;&lt;ol&gt;&lt;li&gt; Select a pivot element&lt;/li&gt;&lt;li&gt; Generate the list L of items smaller than the pivot&lt;/li&gt;&lt;li&gt; Generate the list H of items larger than the pivot&lt;/li&gt;&lt;li&gt; the sorted list is qsort(L)+pivot+qsort(R)&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt; &lt;p&gt;Having seen some scheme in their intro class, our students have a tool with which we can describe the quicksort in terms much closer to the description (allowing for the fact that this doesn&#39;t deal with multiple values equal to the pivot correctly): &lt;/p&gt;    &lt;pre class=&#34;src src-scheme&#34;&gt;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 1:  &lt;/span&gt;(&lt;span style=&#34;color: #a020f0;&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;makefilter&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 2:  &lt;/span&gt;  (&lt;span style=&#34;color: #a020f0;&#34;&gt;lambda&lt;/span&gt; (op x)&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 3:  &lt;/span&gt;    (&lt;span style=&#34;color: #a020f0;&#34;&gt;lambda&lt;/span&gt; (n) (op x n))))&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 4:  &lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 5:  &lt;/span&gt;(&lt;span style=&#34;color: #a020f0;&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;qsort&lt;/span&gt; &lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 6:  &lt;/span&gt;  (&lt;span style=&#34;color: #a020f0;&#34;&gt;lambda&lt;/span&gt; (l)&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 7:  &lt;/span&gt;    (&lt;span style=&#34;color: #a020f0;&#34;&gt;cond&lt;/span&gt; ((null? l) &#39;())&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 8:  &lt;/span&gt;          (&lt;span style=&#34;color: #a020f0;&#34;&gt;else&lt;/span&gt; (append (qsort (filter (makefilter &amp;gt; (car l)) l))&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt; 9:  &lt;/span&gt;                        (list (car l))&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;10:  &lt;/span&gt;                        (qsort (filter (makefilter &amp;lt; (car l)) l)))))))&lt;br /&gt;&lt;/pre&gt;    &lt;p&gt;This allows us to discuss the quicksort at a much higher level and focus on things like selecting a good pivot or the analysis of the run time. I believe this makes it much easier to really understand what&#39;s going on. &lt;/p&gt;&lt;p&gt;Having discussed it in this functional context, we can also look at the same thing in a scripting language such as python: &lt;/p&gt;   &lt;pre class=&#34;src src-python&#34;&gt;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;1:  &lt;/span&gt;&lt;span style=&#34;color: #a020f0;&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;qsort&lt;/span&gt;(l):&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;2:  &lt;/span&gt;    &lt;span style=&#34;color: #a020f0;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #a020f0;&#34;&gt;len&lt;/span&gt;(l)&amp;lt;=1:&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;3:  &lt;/span&gt;        &lt;span style=&#34;color: #a020f0;&#34;&gt;return&lt;/span&gt; l&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;4:  &lt;/span&gt;    &lt;span style=&#34;color: #a020f0;&#34;&gt;else:&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;5:  &lt;/span&gt;        &lt;span style=&#34;color: #a020f0;&#34;&gt;return&lt;/span&gt; qsort([x &lt;span style=&#34;color: #a020f0;&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color: #a020f0;&#34;&gt;in&lt;/span&gt; l[1:] &lt;span style=&#34;color: #a020f0;&#34;&gt;if&lt;/span&gt; x &amp;lt;= l[0]]) + [l[0]]+\&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;6:  &lt;/span&gt;            qsort([x &lt;span style=&#34;color: #a020f0;&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color: #a020f0;&#34;&gt;in&lt;/span&gt; l[1:] &lt;span style=&#34;color: #a020f0;&#34;&gt;if&lt;/span&gt; x &amp;gt; l[0]])&lt;br /&gt;&lt;span class=&#34;linenr&#34;&gt;7:  &lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;    &lt;p&gt;Again, the focus is on the algorithm, not the array or list manipulation. &lt;/p&gt;&lt;p&gt;Looking at the problem from both the more abstract side, which in this case functional languages allow, and the more concrete, as we did in Java gives our students more tools with which to attack problems. &lt;/p&gt;&lt;p&gt;Just some food for thought. &lt;/p&gt;       &lt;/div&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;img width=&#39;1&#39; height=&#39;1&#39; src=&#39;https://blogger.googleusercontent.com/tracker/468689896075458340-2070280110494147035?l=cestlaz.blogspot.com&#39; alt=&#39;&#39; /&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s Next</title>
      <link>https://cestlaz.github.io/posts/2010-02-18-whats-next/</link>
      <pubDate>Thu, 18 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2010-02-18-whats-next/</guid>
      <description>&lt;!DOCTYPE html&gt;

Just a short follow up on the last post.&lt;br /&gt;&lt;br /&gt;In thinking about how I frequently programs, once I have a plan, I work on one part of the project, and then ask myself &#34;what&#39;s next?&#34; That is, what is the next step towards completion.&lt;br /&gt; &lt;br /&gt;It reminded me about a guest speaker we had a about a year and a half ago at one of our &#34;professional development&#34; days. For the past two years, our school has had &#34;writing across the curriculum&#34; as one of it&#39;s goals. While it&#39;s a laudable idea, I find the rationale for this goal to be poorly communicated to our faculty and the implementation weak at best.&lt;br /&gt;&lt;br /&gt;Regardless, the guest speaker, &lt;a href=&#34;http://en.wikipedia.org/wiki/William_Zinsser&#34;&gt;William Zinsser&lt;/a&gt;, made a few good points.&lt;br /&gt;&lt;br /&gt; The most important reason for most of us to write is to convey ideas or arguments. In short, communication. Many students have problems organizing and ordering their thoughts and as a result, their writing is all over the place. Zinsser simplified it to the following:&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;What does the audience know?&lt;/li&gt;&lt;li&gt;What do they need to know next?&lt;/li&gt;&lt;/ol&gt;That drives your next sentence. You continue this 1-2 punch until you&#39;ve communicated your ideas.&lt;br /&gt;&lt;br /&gt;This makes loads of sense, but here I was 40 years old and it was the first time I heard writing explained this way. What really struck me, however was that this concept wasn&#39;t new at all. Every ninth or tenth grader goes through this process time and time again.&lt;br /&gt;&lt;br /&gt;Think about geometric proof. We have some given information and a conclusion we wish to prove. At each step along the way its:&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;What do we know so far?&lt;/li&gt;&lt;li&gt;What&#39;s the next step to get us closer to the conclusion?&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;Same idea.&lt;br /&gt;&lt;br /&gt;The same can be said for program development.&lt;br /&gt;&lt;br /&gt;Of course this makes tremendous sense since all thee things: writing, proof, and programming, are methods of communication.&lt;br /&gt;&lt;br /&gt;Just something to think about.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;img width=&#39;1&#39; height=&#39;1&#39; src=&#39;https://blogger.googleusercontent.com/tracker/468689896075458340-1983623605693836355?l=cestlaz.blogspot.com&#39; alt=&#39;&#39; /&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Towers of Hanoi</title>
      <link>https://cestlaz.github.io/posts/2010-01-10-towers-of-hanoi/</link>
      <pubDate>Sun, 10 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2010-01-10-towers-of-hanoi/</guid>
      <description>&lt;!DOCTYPE html&gt;

&lt;div class=&#34;figure&#34;&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/_7YN3bkG0cSc/S0pFwojEDmI/AAAAAAAAFa8/WMWXtwK6nxo/s1600-h/Hanoi.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://3.bp.blogspot.com/_7YN3bkG0cSc/S0pFwojEDmI/AAAAAAAAFa8/WMWXtwK6nxo/s320/Hanoi.jpg&#34; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;Closed out last week teaching the &lt;a href=&#34;http://www.cut-the-knot.org/recurrence/hanoi.shtml&#34;&gt;Towers of Hanoi&lt;/a&gt;. It&#39;s a wonderful topic. Not because it&#39;s so interesting in and of itself, but as a platform from which you can explore any number of interesting topics.&lt;br /&gt;&lt;br /&gt;Many books appropriate for the AP (AB) curriculum mention the towers, but to my knowledge most only scratch the surface. I randomly grabbed two books that I consider good from the shelf before writing this. One that I actually use when I teach AP comp sci and another more appropriate for a follow up course. Both discuss the towers, but merely show a solution and talk about the run time a little.&lt;br /&gt;&lt;br /&gt;So many possibilities left out. &lt;br /&gt;&lt;br /&gt;I usually do these lessons with my sophomores but since many of my AP students (juniors) hadn&#39;t ever seened the problem, I felt it was worth covering. &lt;br /&gt;&lt;br /&gt;By looking at a few small examples, 1 disk, two disks, three disks, four disks, it&#39;s easy to notice the symetry in the solutions ultimately leading the this short routine: &lt;br /&gt;&lt;pre class=&#34;src src-java&#34;&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class=&#34;src src-java&#34;&gt; 1:  hanoi(n,src,dst,tmp) {&lt;br /&gt; 2:    &lt;span style=&#34;color: #a020f0;&#34;&gt;if&lt;/span&gt; (n==1)&lt;br /&gt; 3:      System.out.println(&lt;span style=&#34;color: #8b2252;&#34;&gt;&#34;Move from &#34;&lt;/span&gt;+src+&lt;span style=&#34;color: #8b2252;&#34;&gt;&#34; to &#34;&lt;/span&gt;+dst);&lt;br /&gt; 4:    &lt;span style=&#34;color: #a020f0;&#34;&gt;else&lt;/span&gt;&lt;br /&gt; 5:    {&lt;br /&gt; 6:      hanoi(n-1,src,tmp.dst);&lt;br /&gt; 7:      hanoi(1,src,dst,tmp);&lt;br /&gt; 8:      hanoi(n-1,tmp,dst,src);&lt;br /&gt; 9:    }&lt;br /&gt;10:  }  &lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Now, the fun can really start: &lt;br /&gt;&lt;br /&gt;We want to talk about the correctness of our algorithm and also how many moves it will take, that is, the run time. First, we&#39;ll use inductive ideas to show our algorithm is correct. This &#34;proof&#34; (we do it somewhat informally) can be enlightening. As sophomores, the only proofs students have seen are those statement/reason things they do in math class. Here we can introduce them to the idea that proof is just an &#34;irrefutable argument&#34; and apply it in a more practical setting. &lt;br /&gt;&lt;br /&gt;From there we look at run time, that is, how many moves will it take to solve the n disk problem. It&#39;s easy to see the pattern of T(N) = 2T(n-1)+1 . Students will usually see that we can rewrite this as T(N)=2&lt;sup&gt;N&lt;/sup&gt;-1 which we can also prove by induction.&lt;br /&gt;&lt;br /&gt;Now we can see the ramifications of the run time. At 1 million moves per second, it works out to close to 600,000 years. This in and of itself is revealing, we can&#39;t just &#34;get a faster computer.&#34;  Here we can discuss &lt;a href=&#34;http://en.wikipedia.org/wiki/Moore%27s_law&#34;&gt;Moore&#39;s Law&lt;/a&gt; and the physical limits on our computers, making sure to make appropriate reference to &lt;a href=&#34;http://en.wikipedia.org/wiki/Grace_Hopper&#34;&gt;Grace Hopper&lt;/a&gt; and her &lt;a href=&#34;http://www.flickr.com/photos/shinythings/154816771/&#34;&gt;nanosecond&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;This leads to a discussion alternate approaches such as parallel processing, but that doesn&#39;t work if our problem can only be solved sequentially.&lt;br /&gt;&lt;br /&gt;The rest of the class is used discussing other hard problems and other approaches including heuristics, probabalistic, randomized, and anything else that comes up. &lt;br /&gt;&lt;br /&gt;So, there you have it. From this one simple problem we get to introduce students to: &lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li id=&#34;sec-1&#34;&gt;Alternate forms of proof (specificall induction) &lt;br /&gt;&lt;/li&gt;&lt;li id=&#34;sec-2&#34;&gt;Intractable problems &lt;br /&gt;&lt;/li&gt;&lt;li id=&#34;sec-3&#34;&gt;Unsolvable problem &lt;br /&gt;&lt;/li&gt;&lt;li id=&#34;sec-4&#34;&gt;Moores law and the limits of our computing power &lt;br /&gt;&lt;/li&gt;&lt;li id=&#34;sec-5&#34;&gt;Alternate approaches to computing &amp;nbsp; &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li id=&#34;sec-5&#34;&gt;Parallel programming &lt;br /&gt;&lt;/li&gt;&lt;li id=&#34;sec-5.2&#34;&gt;Protein based computers &lt;br /&gt;&lt;/li&gt;&lt;li id=&#34;sec-5.3&#34;&gt;Randomized algorithms &lt;br /&gt;&lt;/li&gt;&lt;li id=&#34;sec-5.4&#34;&gt;Probabalistic algorithms &lt;br /&gt;&lt;/li&gt;&lt;li id=&#34;sec-5.5&#34;&gt;Heuristics&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;img width=&#39;1&#39; height=&#39;1&#39; src=&#39;https://blogger.googleusercontent.com/tracker/468689896075458340-6512019415176840666?l=cestlaz.blogspot.com&#39; alt=&#39;&#39; /&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Looking for interesting questions</title>
      <link>https://cestlaz.github.io/posts/2010-01-03-looking-for-interesting-questions/</link>
      <pubDate>Sun, 03 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2010-01-03-looking-for-interesting-questions/</guid>
      <description>&lt;!DOCTYPE html&gt;

For the winter break, I assigned &lt;a href=&#34;http://apcentral.collegeboard.com/apc/public/repository/ap08_comp_sci_a_frq.pdf&#34;&gt;this&lt;/a&gt; set of A exam questions (actually, just the three that don&#39;t deal with the case study) to my AP classes. I wanted to assign something that wasn&#39;t particularly heavy but I didn&#39;t want my students to forget everything over break. &lt;br/&gt;&lt;br/&gt;As with most AP exam questions, they&#39;re long, wordy, and somewhat brain dead. They take a long time to read, but they frequently take you step by step through what they want you to do. &lt;br/&gt;&lt;br/&gt;I remember the first time I really thought about this. It was back when the exam was given in Pascal. The curriculum required that classes cover one of the nlogn sorts but didn&#39;t specify which one. One of the free response questions literally walked the students, step by step, through the merge sort. Part one had them split an array in to two parts, part two had them write a routine that merged two sorted arrays (and explained step by step how to do it). You could get a perfect score and still know nothing about the algorithm, or even about writing a recursive routine (since the question told you exactly what to do). &lt;br/&gt;&lt;br/&gt;I hate these types of questions. The exam tests coders, not computer scientists. Programming competition problems (such as from the  &lt;a href=&#34;http://www.uwp.edu/sws/usaco/&#34;&gt;USACO&lt;/a&gt;) are much more interesting, but from a beginners point of view they have their own problems. Beginners might not have enough tools to attack them, and at times they&#39;re all or nothing – they&#39;re not set up to develop a simple, working solution that you can then improve on. &lt;br/&gt;&lt;br/&gt;So, I&#39;m always looking for interesting questions for my students. Problems that a student can attack with a minimal skill set, but can be refined through analysis or upon studying more advanced techniques. &lt;br/&gt;&lt;br/&gt;I guess the first problem of this nature that I usually do with my AP students, usually deals with counting frequencies of test student test scores, identifying students by their four digit ID number. Most students start by creating a huge list all the tests for all the students, but some, and soon all, realize that by using the ID number as an index into an array, they can solve this type of problem much more efficiently. Looking at this technique early also sets the stage for looking at topics such as radix sorting and hashing later on. &lt;br/&gt;&lt;br/&gt;This weekend I stumbled upon &lt;a href=&#34;http://20bits.com/articles/interview-questions-two-bowling-balls/&#34;&gt;this&lt;/a&gt; problem and we&#39;ll probably look at in in class some time this week. I like it because you can easily get a naive solution, but it lends it self to a step wise refinement that works well in the classroom.  &lt;br/&gt;&lt;br/&gt;A few years ago, I also discovered a wonderful article by David Ginat, titled &#34;Effective binary perspectives in algorithmic problem solving&#34; which you can get if you are an ACM member &lt;a href=&#34;http://portal.acm.org/citation.cfm?id=772942&amp;amp;dl=&#34;&gt;here&lt;/a&gt;. &lt;br/&gt;&lt;br/&gt;Both the stuff in Ginat&#39;s piece and the bowling ball article are nice because they can be handled naively with brute force approaches using arrays, but with a little cleverness you can do much better. &lt;br/&gt;&lt;br/&gt;Of course, as students progress through our classes, we have more flexibility as to types of questions. For example, once we do search and other recursive algorithms a few weeks from now, I can present problems that lead to dynamic programming solutions.  &lt;br/&gt;&lt;br/&gt;I&#39;d love to hear any interesting accessible problems you&#39;ve come across in your computing careers.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;img width=&#39;1&#39; height=&#39;1&#39; src=&#39;https://blogger.googleusercontent.com/tracker/468689896075458340-7947206663945758208?l=cestlaz.blogspot.com&#39; alt=&#39;&#39; /&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>