<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>emacs on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/emacs/</link>
    <description>C&#39;est la Z (emacs)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Jun 2020 11:58:11 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/emacs/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Using Emacs 73 - Ripgrep and updating the blog</title>
      <link>https://cestlaz.github.io/post/using-emacs-72-rg/</link>
      <pubDate>Sun, 14 Jun 2020 11:58:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-72-rg/</guid>
      <description>&lt;p&gt;
As I said in my &lt;a href=&#34;As I mentioned in my &#34;&gt;last post&lt;/a&gt;, I&amp;#39;m moving to a new Hugo theme. I decided
on &lt;a href=&#34;https://github.com/mitrichius/hugo-theme-anubis&#34;&gt;Anubis&lt;/a&gt;. It&amp;#39;s simple and clean. Unfortunately, in this change over,
many things broke. Specifically, all my embedded html. Using earlier
version of Hugo I could directly embed HTML and it would render. Now I
have to bracket the HTML with special org markup - &lt;strong&gt;#+begin_export html&lt;/strong&gt; and &lt;strong&gt;#+end_export html&lt;/strong&gt;. 
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
#+begin_export html
&amp;lt;h1&amp;gt;html stuff to render goes in here &amp;lt;/h1&amp;gt;
#+end_export
&lt;/pre&gt;
&lt;p&gt;
Minimally I had to find all my embedded videos and all my embedded
Tweets. There&amp;#39;s probably a lot more. Fortunately with Emacs this is
pretty easy. I used &lt;a href=&#34;https://github.com/dajva/rg.el&#34;&gt;rg.el&lt;/a&gt; which is an Emacs front end to &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;. If
you don&amp;#39;t know ripgrep, it&amp;#39;s kind of like a super fast, super enhanced grep on
steroids. 
&lt;/p&gt;
&lt;p&gt;
In Emacs, I was able to do a ripgrep search which created a buffer
containing all the embedded html fragments from all my blog posts
across all the directories. I then used Emacs&amp;#39; &lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep&#34;&gt;wgrep&lt;/a&gt; feature which
allowed me to edit that combined buffer and save all the results back
to the original files. 
&lt;/p&gt;
&lt;p&gt;
All in all it just took a few minutes. There are still some things I
have to clean up from older posts but at least the site is workable now.
&lt;/p&gt;
&lt;p&gt;
Check out the video for a walkthrough:
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/OcR-Ke2CiPo&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 72 - Customizing Elfeed</title>
      <link>https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/</link>
      <pubDate>Thu, 21 May 2020 14:47:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/</guid>
      <description>&lt;p&gt;
I made this video write after I made the &lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-71-openwith/&#34;&gt;openwith&lt;/a&gt; one so even though
I don&amp;#39;t mention anything in this video, I wanted to share some updates
on dired and openwith.
&lt;/p&gt;
&lt;p&gt;
I got a lot of suggestions on alternate ways to achieve the workflow I
was seeking - being able to open a file using an external viewer. One
person noted that under newer versions of Emacs, the &lt;code&gt;W&lt;/code&gt; key is bound
to the command &lt;code&gt;(browse-url-of-dired-file)&lt;/code&gt; which does exactly what I
wanted. Problem solved with no customizing or extra packages. 
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s a good thing I got a solution when I did - I needed it. I&amp;#39;ve been
reviewing applications for my new Teacher Certification program. It&amp;#39;s
a 21 credit graduate program that results in participants receiving a
brand spanking new New York State Computer Science teaching
license. The applications consist of a bunch of files incuding PDFs,
images (photos), doc and text files and source code samples. I&amp;#39;ve got
all the applications in a Google drive which I&amp;#39;ve downloaded and now I
can just drop into dired and go through each directory, hit &lt;code&gt;enter&lt;/code&gt; for
source code and it&amp;#39;s loaded in an Emacs buffer and &lt;code&gt;W&lt;/code&gt; for everything
else.
&lt;/p&gt;
&lt;p&gt;
Now for today&amp;#39;s video. It&amp;#39;s about a small customization I made to the
elfeed RSS reader. It&amp;#39;s also about the advantages and limitations of
Emacs built in documentation. I&amp;#39;m not particularly strong in elisp -
I&amp;#39;m a dabbler at best but even so, using Emac&amp;#39;s built in help I was
able to get to elisp code that was very close to what I wanted to do
and then customize it. It also looks at the limitations - there still
some code that I looked at that I have no clue as to what it does.
&lt;/p&gt;
&lt;p&gt;
Specifically, elfeed lets you open a link in an external brower by
hitting &lt;code&gt;b&lt;/code&gt;. That&amp;#39;s how I like reading most of my feeds. I&amp;#39;ll scroll
up and down and hit &lt;code&gt;b&lt;/code&gt; for what I want to read. The trouble is that
when you hit &lt;code&gt;b&lt;/code&gt; focus goes to the browser and at the same time,
elfeed marks the entry as read and advances. I want it not to mark as
read. After I made the video, I decided I also didn&amp;#39;t want elfeed to
advance to the next story. 
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what I did.
&lt;/p&gt;
&lt;p&gt;
I went in to elfeed and instead of typing &lt;code&gt;b&lt;/code&gt; on an entry, I ran
&lt;code&gt;(describe-key&lt;/code&gt;)~ which is bound to &lt;code&gt;C-h k&lt;/code&gt;. I then typed &lt;code&gt;b&lt;/code&gt; which
revealed that it ran &lt;code&gt;elfeed-search-browse-url&lt;/code&gt;. I followed the
hyperlinks in the help to open &lt;code&gt;elfeed-search.el&lt;/code&gt; and found the
function. From there I just copied it over to my Emacs config, tweaked
it and voila, problem solved.
&lt;/p&gt;
&lt;p&gt;
The video has all the details. Enjoy.
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/G1NGNR40lB4&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 71 Openwith</title>
      <link>https://cestlaz.github.io/post/using-emacs-71-openwith/</link>
      <pubDate>Wed, 13 May 2020 11:45:39 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-71-openwith/</guid>
      <description>&lt;p&gt;
I spend most of my time in Emacs but still use the shell and browser
for some things. One of the things I use my shell for is to launch
libreoffice to view and edit docx files and spreadsheets, evince for
pdf files and imagemagick for image files. Yes, I know I can view all
of these in Emacs but there are a few limitations:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Emacs chokes on large files
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
I can&amp;#39;t edit the docx file or the image
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
So, I hop to the shell and launch the program I need on the files in
question. It&amp;#39;s fine but it does mean I end up with two windows for
each operation - the terminal from which I run, say, libreoffice and
libreoffice itself. I will also have my browser and one ore more Emacs
windows open so things can get a bit cluttered.
&lt;/p&gt;
&lt;p&gt;
Now, on the Emacs side, one tool that I still haven&amp;#39;t gotten myself to
regularly use is dired. I figured dired could be made to do what I
want - quickly and easily launch programs to view and edit my files.
&lt;/p&gt;
&lt;p&gt;
By default, dired opens files in a new Emacs buffer. That&amp;#39;s fine for
text files but not the behavior I want for docx and other files. It
turns out there are a number of good solutions. The one that I&amp;#39;ll
likely stick with is &lt;a href=&#34;https://github.com/jpkotta/openwith/tree/1dc89670822966fab6e656f6519fdd7f01e8301a&#34;&gt;openwith&lt;/a&gt; but there are other options as
well. Check out the video for more:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/_qjJ5UzInRI&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 70 Org Protocol</title>
      <link>https://cestlaz.github.io/post/using-emacs-70-org-protocol/</link>
      <pubDate>Fri, 27 Mar 2020 15:15:28 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-70-org-protocol/</guid>
      <description>&lt;p&gt;
I spent part of today cleaning up my Emacs workflow. Specifically, how
I capture emails and links into org-mode
&lt;/p&gt;
&lt;p&gt;
I already wrote about how I used org-capture (&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-23-capture-1/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-24-capture-2/&#34;&gt;here&lt;/a&gt;). It&amp;#39;s
pretty clean and easy but there was one thing that always nagged at
me. When I capture from mu4e within Emacs by hitting &lt;code&gt;C-c m&lt;/code&gt; it&amp;#39;s set
up to automatically populate the capture template with a link to the
email labelled with the email&amp;#39;s subject. When I do it from Gmail or
to store a web link as a bookmark, I have to copy and paste the link
in manually.
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s where &lt;a href=&#34;https://orgmode.org/worg/org-contrib/org-protocol.html&#34;&gt;org-protocol&lt;/a&gt; comes in. We can use org-protocol to link
between a browser and Emacs. 
&lt;/p&gt;
&lt;p&gt;
First you have to run Emacs as a server. You can start the Emacs
server using &lt;code&gt;(server-start)&lt;/code&gt; but I always run emacs using a shortcut
key bound to &lt;code&gt;emacsclient -c -a &amp;#34;&amp;#34;&lt;/code&gt;. This runs emacsclient and
connects to my running Emacs server but if the server isn&amp;#39;t running it
starts it. That meant that I only had to add &lt;code&gt;(require &amp;#39;org-protocol)&lt;/code&gt;
to my Emacs config file.
&lt;/p&gt;
&lt;p&gt;
I followed the instructions in the documentation by typing in these
lines:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;gconftool-2 -s /desktop/gnome/url-handlers/org-protocol/command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/usr/local/bin/emacsclient %s&amp;#39;&lt;/span&gt; --type String

gconftool-2 -s /desktop/gnome/url-handlers/org-protocol/enabled --type Boolean true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
but that didn&amp;#39;t seem to work.
&lt;/p&gt;
&lt;p&gt;
I ended up following the instructions I found in &lt;a href=&#34;https://stackoverflow.com/questions/7464951/how-to-make-org-protocol-work&#34;&gt;this post&lt;/a&gt; creating a
file named &lt;code&gt;org-protocol.desktop&lt;/code&gt; in the folder
 &lt;code&gt;~/.local/share/applications&lt;/code&gt; containing:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Desktop Entry&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;org-protocol
Exec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;emacsclient %u
Type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Application
Terminal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false
Categories&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;System;
MimeType&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x-scheme-handler/org-protocol;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
and then running &lt;code&gt;update-desktop-database
~/.local/share/applications/&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
This seemed to do the trick. 
&lt;/p&gt;
&lt;p&gt;
I also modified my link capture template: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Link&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Sync/orgfiles/links.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Links&amp;#34;&lt;/span&gt;)
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %a %^g\n %?\n %T\n %i&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Finally, to get things basically to work, I installed &lt;a href=&#34;https://github.com/sprig/org-capture-extension&#34;&gt;this&lt;/a&gt;
extension. I configured it to use my &amp;#34;l&amp;#34; or link capture
template. Once everything was installed I went to a web site and
clicked the plugin. I was popped into Emacs with the capture template
up and filled in. I did it again, this time marking text and hitting
the button and again everything worked.
&lt;/p&gt;
&lt;p&gt;
Looking at the template, the &lt;code&gt;%a&lt;/code&gt; is replaced by the web page link,
the &lt;code&gt;%i&lt;/code&gt; with the marked text, the &lt;code&gt;%T&lt;/code&gt; with the timestamp and the
cursor is left at the &lt;code&gt;%?&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
I wanted to make one more change. I wanted to also use this for
storing Gmail links. The problem was that I wanted my links to be
sored in a file named &lt;code&gt;links.org&lt;/code&gt; while I wanted my Gmails stored
under my main org file &lt;code&gt;i.org&lt;/code&gt;. By reading the org-protocol page I
found that I could just create a bookmark.
&lt;/p&gt;
&lt;p&gt;
Copied mostly from the docs, I made a bookmark with this as the link
(all in one line):
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;javascript&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-protocol://capture://m/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
      encodeURIComponent(&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
      encodeURIComponent(document.&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
      encodeURIComponent(window.&lt;span style=&#34;color:#a6e22e&#34;&gt;getSelection&lt;/span&gt;())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
It worked perfectly. 
&lt;/p&gt;
&lt;p&gt;
This time I used this as the template:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mail To Do&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Sync/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;To Do and Notes&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* TODO %a\n %?&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:prepend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s it. Now I can store emails in Emacs or Gmail as well as
bookmarks without any cut and paste. 
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a video with the walkthrough:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/FYKcVKg0OCU&#34;&gt;https://www.youtube.com/embed/FYKcVKg0OCU&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 69 Floobits</title>
      <link>https://cestlaz.github.io/post/using-emacs-69-floobits/</link>
      <pubDate>Sat, 21 Mar 2020 10:52:37 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-69-floobits/</guid>
      <description>&lt;p&gt;
Hunter, like most other schools has gone remote. I taught my first two
&lt;a href=&#34;https://cestlaz.github.io/post/teaching-online-day-01/&#34;&gt;online classes&lt;/a&gt; on Thursday. Currently, I&amp;#39;m using Zoom for synchronous
stuff and a mailing list and slack for async. 
&lt;/p&gt;
&lt;p&gt;
There are still some missing pieces. When we&amp;#39;re all together, it&amp;#39;s
easy to look at a student&amp;#39;s work and talk them through issues. It&amp;#39;s
also easy to get students to work together, at least to a point. With
everyone locked up in their own homes, real time collaboration is
harder. Sure, we can use tools like GitHub issues and pull requests
for async code commentary but what about live help and pairing? If
we want to use an online environment, &lt;a href=&#34;https://repl.it&#34;&gt;repl.it&lt;/a&gt;  - a platform I very
much like fits the bill. On the other hand, what do you use if you
want to work collaboratively in real time using a local editor. 
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s where &lt;a href=&#34;https://floobits.com&#34;&gt;Floobits&lt;/a&gt; comes in. Floobits is a platform that provides
for collaborative live editing. It works with Emacs, Neovim, Sublime
Text, Atom, and IntelliJ (and maybe all the Jetbrains IDEs). They
support a free tier which only has public workspaces but that&amp;#39;s fine,
as far as I&amp;#39;m concerned, for educational purposes. 
&lt;/p&gt;
&lt;p&gt;
Check out the video to see how I set it up:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/-0x4PV1EB5w&#34;&gt;https://www.youtube.com/embed/-0x4PV1EB5w&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 68 - Tramp and org-publish</title>
      <link>https://cestlaz.github.io/post/using-emacs-68-tramp-org-publish/</link>
      <pubDate>Sat, 14 Mar 2020 20:57:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-68-tramp-org-publish/</guid>
      <description>&lt;p&gt;
I maintain a couple of small simple web sites. One provides
information about my undergraduate &lt;a href=&#34;http://info.huntercs.org/scholars/&#34;&gt;honors CS program&lt;/a&gt; and another that
isn&amp;#39;t live yet is a FAQ for my &lt;a href=&#34;http://info.huntercs.org/teacher_ed/faq.html&#34;&gt;CS teacher certification program&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Traditionally I would use ssh to connect to the host machine, fire up
Emacs and edit the html files to update the sites. I always forget
that with Emacs we can do better.
&lt;/p&gt;
&lt;p&gt;
One way is with &lt;a href=&#34;https://www.emacswiki.org/emacs/TrampMode&#34;&gt;Tramp Mode&lt;/a&gt;. I was reminded of this by JCS&amp;#39;s recent
&lt;a href=&#34;https://irreal.org/blog/?p=8705&#34;&gt;post&lt;/a&gt;. With Tramp, you can open a file on a remote host and edit it in
place. This means I get my full Emacs config but am editing the file
over there!!! It&amp;#39;s very slick but I always forget about it even though
I had already made &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-25-tramp/&#34;&gt;a video on it&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Tramp is cool but I was still editing the html directly. I figured it
would be easier to just use org-mode but that required figuring out
how to make the html produced by org-mode look nice. Fortunately, it&amp;#39;s
not hard.
&lt;/p&gt;
&lt;p&gt;
We can turn off the default CSS used by org-mode
using:
&lt;/p&gt;
&lt;div class=&#34;src src-org&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#+OPTIONS&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: html-style:nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Or if we want add custom CSS using one or more of these:
&lt;/p&gt;
&lt;div class=&#34;src src-org&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#+HTML_HEAD&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;style1.css&amp;#34; /&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#+HTML_HEAD_EXTRA&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: &amp;lt;link rel=&amp;#34;alternate stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;style2.css&amp;#34; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We can also embed html and custom CSS in our org-files.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://orgmode.org/manual/CSS-support.html&#34;&gt;This page&lt;/a&gt; from the org-mode documentation also lists many of the html
components that are styled by default. 
&lt;/p&gt;
&lt;p&gt;
Armed with custom CSS we can use the org-mode exporting facilities to
convert the file to a web page but the final step is to use
&lt;a href=&#34;https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html&#34;&gt;org-publish&lt;/a&gt;. This lets us export one or more org-mode files and save
the result in some specified directory. You can also publish static
files like CSS files and images to go with the org to html
files. Finally by using the tramp syntax we can publish to a remote
host. 
&lt;/p&gt;
&lt;p&gt;
The goes through all of this. 
&lt;/p&gt;
&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/tlCOsigPjk8&#34;&gt;https://www.youtube.com/embed/tlCOsigPjk8&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 67 - Emacs vs Vi a rant with some historical perspective</title>
      <link>https://cestlaz.github.io/post/using-emacs-67-emacs-rant/</link>
      <pubDate>Sun, 23 Feb 2020 07:57:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-67-emacs-rant/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been meaning to do my version of the Emacs VI rant for a while. A
few years ago I staged out a video showing what it would be like for a
beginner to start with Emacs, Vim, Atom, and Sublime Text but decided
it would be long, unwieldy and clunky to present - particularly when
it came to customization. 
&lt;/p&gt;
&lt;p&gt;
I tabled it for a while but recently have been seeing a bunch of
threads, videos and posts talking about Emacs and Vim. Some are really
well done, balanced and sensible like Derek Taylor&amp;#39;s over on
&lt;a href=&#34;https://www.youtube.com/watch?v=VaBdlcYaZLQ&#34;&gt;DistroTube&lt;/a&gt;. On the other hand, I saw plenty of what makes me
nuts. People claiming things like style is objectively better than
the other or was created with speed or ergonomics in mind so is
superior and the like.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my take. I think it&amp;#39;s a little different than some of the other
rants because I look a bit at history and evolution and also at the
day to day reality of editing. Hope you enjoy it.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/0M6erlK57go&#34;&gt;https://www.youtube.com/embed/0M6erlK57go&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 66 - an eshell switcher in elisp</title>
      <link>https://cestlaz.github.io/post/using-emacs-66-eshell-elisp/</link>
      <pubDate>Sat, 08 Feb 2020 08:12:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-66-eshell-elisp/</guid>
      <description>&lt;p&gt;
I thought it was time to give &lt;a href=&#34;https://masteringemacs.org/article/complete-guide-mastering-eshell&#34;&gt;eshell&lt;/a&gt; in Emacs another try. It has some
pretty cool features but for whatever reason, I&amp;#39;ve never really been
able to adopt Emacs as my go to shell.
&lt;/p&gt;
&lt;p&gt;
Eshell out of the box is pretty cool but could use some
enhancements. When launching at login it doesn&amp;#39;t know about the path
you set in your .bashrc or .zshrc in my case files. It just seemed to
have problems with paths in general but that was fixed with the
exce-path-from-shell package. The prompt also needed some fixing up
along with some other tweaks. 
&lt;/p&gt;
&lt;p&gt;
I found &lt;a href=&#34;https://github.com/manateelazycat/aweshell&#34;&gt;aweshell&lt;/a&gt; which looked promising but it wasn&amp;#39;t on melpa so I
had to clone it separately. I also noticed that it basically tied
together some packages I could download myself and added a shell
switcher but didn&amp;#39;t bind the keys.
&lt;/p&gt;
&lt;p&gt;
I thought I&amp;#39;d dive into elisp -something I haven&amp;#39;t done in a while to
write my own.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my current complete eshell config:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;(use-package exec-path-from-shell
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (exec-path-from-shell-initialize))


    (use-package fish-completion
    :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
    :config
    (global-fish-completion-mode))
  &lt;span style=&#34;color:#75715e&#34;&gt;;; (use-package eshell-prompt-extras &lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; :ensure t&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; :config&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; (setq epe-show-python-info nil)&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; )&lt;/span&gt;

  (use-package eshell-git-prompt
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (eshell-git-prompt-use-theme &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;git-radar&lt;/span&gt;)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
And here&amp;#39;s the code I ended up with for my shell switcher:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;+BEGIN_SRC emacs-lisp
  (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cl-lib&lt;/span&gt;)
  (defun select-or-create (arg)
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Commentary ARG.&amp;#34;&lt;/span&gt;
    (if (string= arg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New eshell&amp;#34;&lt;/span&gt;)
        (eshell &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
      (switch-to-buffer arg)))
  (defun eshell-switcher (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; arg)
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Commentary ARG.&amp;#34;&lt;/span&gt;
    (interactive)
    (let* (
           (buffers (cl-remove-if-not (lambda (n) (&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-local-value&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;major-mode&lt;/span&gt; n) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eshell-mode&lt;/span&gt;)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-list&lt;/span&gt;)) )
           (names (&lt;span style=&#34;color:#a6e22e&#34;&gt;mapcar&lt;/span&gt; (lambda (n) (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-name&lt;/span&gt; n)) buffers))
           (num-buffers (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; buffers) )
           (in-eshellp (&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; major-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eshell-mode&lt;/span&gt;)))
      (cond ((&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; num-buffers &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) (eshell (or arg &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)))
            ((not in-eshellp) (switch-to-buffer (&lt;span style=&#34;color:#a6e22e&#34;&gt;car&lt;/span&gt; buffers)))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (select-or-create (&lt;span style=&#34;color:#a6e22e&#34;&gt;completing-read&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Select Shell:&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New eshell&amp;#34;&lt;/span&gt; names)))))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
I currently bound eshell-switcher to &lt;code&gt;CTRL-z e&lt;/code&gt;. 
&lt;/p&gt;
&lt;p&gt;
The video goes through the whole process:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/-dIjFZBDt64&#34;&gt;https://www.youtube.com/embed/-dIjFZBDt64&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 65 - Live Python</title>
      <link>https://cestlaz.github.io/post/using-emacs-65-live-python/</link>
      <pubDate>Sun, 02 Feb 2020 13:13:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-65-live-python/</guid>
      <description>&lt;p&gt;
The other day I stumbled upon Emacs&amp;#39;s &lt;a href=&#34;https://github.com/donkirkby/live-py-plugin&#34;&gt;Live Coding&lt;/a&gt; plugin. It takes
interactive coding up to the next level. 
&lt;/p&gt;
&lt;p&gt;
Normally, when you code Python, if you&amp;#39;re working in a REPL, every
time you hit &amp;lt;Enter&amp;gt; the line you just typed is evaluated. When you&amp;#39;re
working ina source file, you&amp;#39;re just editing until you send the file
into a Python interpreter.
&lt;/p&gt;
&lt;p&gt;
With this module, your file is continually evaluated as you type and
it shows you the results in a side window. 
&lt;/p&gt;
&lt;p&gt;
If you type in:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(c&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;c)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
The live python window will display something like:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
If you change one of the variables, everything updates.
&lt;/p&gt;
&lt;p&gt;
It gets even cooler when you add loops, functions, and even recursion.
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s also support for unit testing.
&lt;/p&gt;
&lt;p&gt;
It works, to varying degrees with Emacs, PyCharmm, Sublime Text and
there&amp;#39;s even a browser version. Emacs handles the basics and it seems
that the Sublime Text version adds support for some graphing. PyCharm
has that plus turtle graphics.
&lt;/p&gt;
&lt;p&gt;
While this is &lt;strong&gt;very&lt;/strong&gt; cool, to be honest, I don&amp;#39;t know how useful this
is going to be but I&amp;#39;m very excited to play with it in the Fall when
I&amp;#39;ll be teaching Python again.
&lt;/p&gt;
&lt;p&gt;
Check out this short video to see it in action:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/bYy90EUAh98&#34;&gt;https://www.youtube.com/embed/bYy90EUAh98&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 64 - Notmuch</title>
      <link>https://cestlaz.github.io/post/using-emacs-64-notmuch/</link>
      <pubDate>Sat, 18 Jan 2020 08:52:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-64-notmuch/</guid>
      <description>
&lt;p&gt;
I&amp;#39;ve been using the gmail web interface for a long time. My first
email or at least the oldest one still in the system dates back to Oct
18, 2004 7:29am. It was a letter to a buddy about an indoor turkey
fryer and if he needed a lift to Fairway the following morning to
shop.
&lt;/p&gt;
&lt;p&gt;
Before that, I used my &lt;a href=&#34;http://panix.com&#34;&gt;Panix&lt;/a&gt; shell account - probably with &lt;a href=&#34;https://en.wikipedia.org/wiki/Pine_%2528email_client%2529&#34;&gt;PINE&lt;/a&gt;. Work
email was using my own servers at Stuy along with either PINE or Emacs
using VM mode which has long been deprecated.
&lt;/p&gt;
&lt;p&gt;
I haven&amp;#39;t bitten the bullet and left gmail yet but I thought it was
time to move my personal email over to an Emacs client. I currently
use &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/&#34;&gt;MU4E&lt;/a&gt; and am pretty happy with it but figured I&amp;#39;d give another
contender a try - &lt;a href=&#34;https://notmuchmail.org/&#34;&gt;Notmuch&lt;/a&gt;. Both rely on some other backend to pull
email form an imap server. I&amp;#39;m currently using mbsync. I&amp;#39;m not
thrilled with it but then, I&amp;#39;m not thrilled with offlineimap which is,
as best I can figure the only other alternative.
&lt;/p&gt;
&lt;p&gt;
In the video I&amp;#39;ll show a bit about notmuch and how it comapres to
mu4e. Both are nice packages and I&amp;#39;d love one email client that
combined the best of both and maybe added a bit more shine.
&lt;/p&gt;
&lt;p&gt;
At their cores, both mu4e and notmuch are built on top of &lt;a href=&#34;https://xapian.org/&#34;&gt;xapain&lt;/a&gt; and
leverage search to manage your emails. Here are a few of the key
differences:
&lt;/p&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Mu4e
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Folder based
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Easier to handle separate email accounts (and keep them separate)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Better org-mode integration
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Automatically calls your IMAP sync program
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Changes things on the server (moves, deletes etc.)
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Notmuch
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Tags based
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Doesn&amp;#39;t touch or change anything on the serer (doesn&amp;#39;t delete or
move things there, just tags locally)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Combines multiple accounts to appear as one
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Both have a nice search based interface.
&lt;/p&gt;
&lt;p&gt;
Right now, the fact that notmuch doesn&amp;#39;t seamlessly delete emails
from the server might be a deal breaker for me. I have a limited quota
at Hunter so I really do have to watch the overall amount of storage I
use.
&lt;/p&gt;
&lt;p&gt;
For now, I&amp;#39;m going to start pulling down my email and seeing how I
like mu4e for all my email needs. I&amp;#39;ll probably play a bit more with
notmuch as well and who knows….
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my post and video on setting up and using mu4e:
&lt;/p&gt;
&lt;p&gt;
https://cestlaz.github.io/posts/using-emacs-39-mu4e/
&lt;/p&gt;
&lt;p&gt;
And here&amp;#39;s the current one on notmuch:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/GlrsoIwJ-UM&#34;&gt;https://www.youtube.com/embed/GlrsoIwJ-UM&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 63 ClojureScript</title>
      <link>https://cestlaz.github.io/post/using-emacs-63-clojurescript/</link>
      <pubDate>Thu, 09 Jan 2020 08:11:52 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-63-clojurescript/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been playing with ClojureScipt for my web projects recently and
really like it. Much more fun than any of the JavaScript frameworks
I&amp;#39;ve used. 
&lt;/p&gt;
&lt;p&gt;
Still, getting started was somewhat difficult due to the number of
options in tooling and uneven documentation and learning resources.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a video that shows how I use Emacs for ClojureScript
development but the focus of the video is on how to get started with
ClojureScript and Emacs takes a back seat other than an example of my
workflow.
&lt;/p&gt;
&lt;p&gt;
On the Clojurscript side I&amp;#39;m using &lt;a href=&#34;https://shadow-cljs.org/&#34;&gt;shadow-cljs&lt;/a&gt; which I like very much
along with &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;tailwindcss&lt;/a&gt; for styling. I also mention &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;NVM&lt;/a&gt; for managing
node/npm etc. which you&amp;#39;ll also need. 
&lt;/p&gt;
&lt;p&gt;
On the Emacs side you&amp;#39;ll see a bit of &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;cider&lt;/a&gt; along with &lt;a href=&#34;https://github.com/Fuco1/smartparens&#34;&gt;smartparens&lt;/a&gt; and
you can find my full config at &lt;a href=&#34;https://github.com/zamansky/dot-emacs.&#34;&gt;https://github.com/zamansky/dot-emacs.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I was thinking about also making the following ClojureScript videos if
the communities find value in them and I have time:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
How to create reusable components like an input field with label.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Creating a simple Electron app using shadow-cljs.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Creating something with both  server side and client side.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Also open to suggestions
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
I don&amp;#39;t pretend to be a cljs or webdev master so please let me know if
I&amp;#39;m doing anything horribly wrong and let me know if you want more.
&lt;/p&gt;
&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/BZNJi5pP8fU&#34;&gt;https://www.youtube.com/embed/BZNJi5pP8fU&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 62 Magit Forge</title>
      <link>https://cestlaz.github.io/post/using-emacs-62-magit-forge/</link>
      <pubDate>Tue, 19 Nov 2019 12:25:58 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-62-magit-forge/</guid>
      <description>&lt;p&gt;
Ever since I started looking at Magit as a &amp;#34;git dashboard&amp;#34; instead of
as a &amp;#34;git interface&amp;#34; it&amp;#39;s been yet another Emacs killer app to me. I
just recently started playing with &lt;a href=&#34;https://github.com/magit/forge&#34;&gt;forge&lt;/a&gt; which allows &lt;a href=&#34;https://github.com/magit/magit&#34;&gt;Magit&lt;/a&gt; to
interface and interact with git &amp;#34;forges&amp;#34; like GitHub. This allows you
to work on issues and pull requests without ever leaving Emacs.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a video on how easy it is. The video doesn&amp;#39;t show this but the
first time you fire forge up it will prompt you for credentials. 
&lt;/p&gt;
&lt;p&gt;
Also, if you aren&amp;#39;t familiar with GitHub issues, check out the
post/video I made a few days ago (&lt;a href=&#34;https://cestlaz.github.io/post/git-issues/&#34;&gt;link&lt;/a&gt;) and you can check out my
earlier post/video on Magit as well (&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-47-magit/&#34;&gt;link&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/wgI8r3Nx_BI&#34;&gt;https://www.youtube.com/embed/wgI8r3Nx_BI&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 61 - org-msg</title>
      <link>https://cestlaz.github.io/post/using-emacs-61-org-msg/</link>
      <pubDate>Sat, 16 Nov 2019 05:00:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-61-org-msg/</guid>
      <description>&lt;p&gt;
By living in Emacs I get a consistent interface across all sorts of
tasks - programming, lesson planning, making presentations, preparing
documents, and yes, even email. I&amp;#39;ve been using &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-39-mu4e/&#34;&gt;mu4e&lt;/a&gt; as my Emacs email
client for a while now. Currently, I&amp;#39;m using Emacs for my work email
and Gmail for personal. I&amp;#39;ve been thinking of going whole hog to mu4e
and possibly migrating from Gmail to a new email provider for the
personal stuff but there are still a few pain points with Emacs email:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
rich text emails (embedded links, images, etc)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
calendar integration
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
contacts 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
periodic Maildir sync problems with mbsync
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Calendar integration isn&amp;#39;t a make or break issue and contacts with
mu4e is good enough so that leaves two pain points. Formatted emails
which I think is now pretty much solved (see below) and the Maildir
stuff.
&lt;/p&gt;
&lt;p&gt;
On the Maildir side, I&amp;#39;m trying deal with my email across four
machines - work laptop, work desktop, home laptop, home desktop. I
originally synced each one separately and that worked but I was having
archive problems - it seems that I was only archiving on the local
machine so if I archived an email at work and I needed to get to it at
home, I was out of luck. 
&lt;/p&gt;
&lt;p&gt;
Then, I moved to sharing my Maildir using Syncthing - an opensource
Dropbox-alike. That mostly worked but if I wasn&amp;#39;t careful I&amp;#39;d get
syncing errors where I have to go into my Maildir directory and
manually rename or remove messages - a real pain.
&lt;/p&gt;
&lt;p&gt;
If anyone out there has a solution (and &lt;a href=&#34;http://pragmaticemacs.com/emacs/fixing-duplicate-uid-errors-when-using-mbsync-and-mu4e/&#34;&gt;this&lt;/a&gt; fix doesn&amp;#39;t fully work
for me), I&amp;#39;d love to hear about it.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s get back to the formatted email. I was already to create an
email in org mode using &lt;code&gt;org-mu4e-compose-org-mode&lt;/code&gt; which I think is
built in to either org-mode or mu4e but it&amp;#39;s limited. It formats
tables, outlines, and source blocks but I can&amp;#39;t easily make a source
block for something like &lt;strong&gt;dot&lt;/strong&gt; or &lt;strong&gt;ditaa&lt;/strong&gt; and embed the result. I
found a solution recently. It&amp;#39;s &lt;a href=&#34;https://github.com/jeremy-compostella/org-msg&#34;&gt;org-msg&lt;/a&gt; - a terrific package that lets
you compose an email in org-mode. It seems to have better support than
org-mu4e-compose-org-mode. It does the basic formatting, tables, etc
and also executes source blocks. The only thing that was missing for
me was LaTeX formatting but I use that so rarely I don&amp;#39;t really care.
&lt;/p&gt;
&lt;p&gt;
The package author, Jeremy Compostella, is also very responsive. When
I first installed org-msg it wasn&amp;#39;t integrating seamlessly with
mu4e. It was still workable but I had to manually insert some
configuration at the top of all my emails. I opened an issue on this
and within a day it was fixed.
&lt;/p&gt;
&lt;p&gt;
It also has a very cool preview mode so you can see what you&amp;#39;re
sending. On that, though, I did have an issue but I&amp;#39;m pretty sure it&amp;#39;s
an Emacs / org-mode issue and not an org-msg issue. On my desktop,
when I run the preview, it opens my browser with the email formatted
correctly. When I do the same on my laptop, it runs GitHub Classroom
Assistant - an application I installed and use for other
purposes. I&amp;#39;ve had this happen before with other emacs xdg things. If
anyone else has seen this and better has a solution, I&amp;#39;d love to hear
about that as well.
&lt;/p&gt;
&lt;p&gt;
Anyway, here&amp;#39;s a video that shows org-msg in action:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/cPZe0AGOUJU&#34;&gt;https://www.youtube.com/embed/cPZe0AGOUJU&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 60 - Restclient</title>
      <link>https://cestlaz.github.io/post/using-emacs-60-restclient/</link>
      <pubDate>Fri, 25 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-60-restclient/</guid>
      <description>&lt;p&gt;
I started to work on a web application the other day. It&amp;#39;s nothing
special but if I ever finish it, it will be a pretty complete
project. The backend will be a &lt;a href=&#34;https://restapitutorial.com/&#34;&gt;REST&lt;/a&gt; API and I&amp;#39;m planning on writing
the frontend in Clojurescript. 
&lt;/p&gt;
&lt;p&gt;
The problem with developing a web application like this is that you
can&amp;#39;t really write the front end until you have enough of the backend
to provide data. Also, writing the backend would be much easier if you
already had a front end to test it with. 
&lt;/p&gt;
&lt;p&gt;
Pretty annoying.
&lt;/p&gt;
&lt;p&gt;
What you basically have to do is use some system to make all the API
calls with all the required data. The most fundamental way to do this
is to use a command line tool like &lt;a href=&#34;https://curl.haxx.se/&#34;&gt;curl&lt;/a&gt;. For example, from a terminal
I might write something like this to make a login call:
&lt;/p&gt;
&lt;div class=&#34;src src-curl&#34;&gt;
&lt;pre&gt;&lt;code class=&#34;language-curl&#34; data-lang=&#34;curl&#34;&gt;curl --data &amp;#34;email=myemail&amp;amp;password=mypassword&amp;#34; https://localhost:8080/login&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
It works but is clunky and you end up using the mouse a lot to cut and
paste data.
&lt;/p&gt;
&lt;p&gt;
Web browsers like Firefox and Chrome also have extensions (&lt;a href=&#34;https://techbeacon.com/app-dev-testing/5-top-open-source-api-testing-tools-how-choose&#34;&gt;link&lt;/a&gt;, &lt;a href=&#34;https://www.guru99.com/testing-rest-api-manually.html&#34;&gt;link&lt;/a&gt;)
but I find them somewhat bulky with their mouse / form based
interfaces.
&lt;/p&gt;
&lt;p&gt;
Emacs to the rescue!!!!!!!!
&lt;/p&gt;
&lt;p&gt;
I discovered &lt;a href=&#34;https://github.com/pashky/restclient.el&#34;&gt;restclient&lt;/a&gt; for Emacs a couple of years ago but only now
am reaping the benefits. It&amp;#39;s really amazing. I can easily set up REST
querries, use all the editing power of Emacs, and even save the
queries for later.
&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t find this until after I made the video but you can even use
restclient in &lt;a href=&#34;https://github.com/alf/ob-restclient.el&#34;&gt;org-mode&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s all very cool.
&lt;/p&gt;
&lt;p&gt;
Details in the video:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/L7Jcoe3oHTs&#34;&gt;https://www.youtube.com/embed/L7Jcoe3oHTs&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
&lt;p&gt;
Enjoy.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 59 - markdown</title>
      <link>https://cestlaz.github.io/post/using-emacs-59-markdown/</link>
      <pubDate>Fri, 18 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-59-markdown/</guid>
      <description>&lt;p&gt;
Org-mode is my markup of choice. I spend the vast majority of my time working
on text files working in org-mode. Since GitHUb started rendering
org-mode files in their site I&amp;#39;ve also used org-mode for things like
Readme files in my projects. I even force it on my students at
times. When I make an assignment, I seed it with an org-mode file that
they have to modify - that is - fill in things like their names, group
members etc..
&lt;/p&gt;
&lt;p&gt;
That said, sometimes I have to work in plain old &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;markdown&lt;/a&gt;. This is
almost always when I&amp;#39;m working on something collaboratively and more
often than not it&amp;#39;s documentation on a project living on GitHub.
&lt;/p&gt;
&lt;p&gt;
So, given that I have to work with Markdown, time to use some Emacs
magic to make it easy and fun.
&lt;/p&gt;
&lt;p&gt;
To start, Emacs has a &lt;a href=&#34;https://github.com/jrblevin/markdown-mode/tree/f3c54e34cc5228001af36a5301883325319f21d4&#34;&gt;markdown mode&lt;/a&gt; along with a bunch of previewing
and rendering modes. I settled on &lt;a href=&#34;https://github.com/seagle0128/grip-mode/tree/4c7014c8151e522b9dd94f878478087bf92ab10e&#34;&gt;grip mode&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
You can check out the video to see grip-mode along with some of the
other modes I tried here:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/IlhkYmUU-ns&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/ifram&gt;e
&lt;p&gt;
Enjoy.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 58 - lsp-mode</title>
      <link>https://cestlaz.github.io/post/using-emacs-58-lsp-mode/</link>
      <pubDate>Mon, 07 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-58-lsp-mode/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been wanting to check out &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; under Emacs for a while
now. LSP stands for &lt;a href=&#34;https://langserver.org/&#34;&gt;Language Protocol Service&lt;/a&gt;. The idea is that you
have a standard interface between your editor and some language
server. If you program in multiple languages and each has an LSP
server you end up, in theory, with a simpler configuration and a
consistent interface.
&lt;/p&gt;
&lt;p&gt;
This certainly sounds more appealing than how we did it in the old
days where you have some ad hoc configuraiton for each language you
work in. At times I&amp;#39;m working or dabbling in a whole bunch of
languages. At times, my Emacs configuration has had separate sections
for each of the following languages:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Emacs Lisp
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Python
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Java
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
C and C++
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Clojure
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Processing
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Scheme
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Haskell
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Rust
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
OCaml
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
and more. 
&lt;/p&gt;
&lt;p&gt;
This can get messy.
&lt;/p&gt;
&lt;p&gt;
So, LSP sounds cool but when I&amp;#39;ve tried to get it going in the past
I&amp;#39;ve always had troubles. This time, I tried a different approach. I
decided to declare .emacs.d bankruptcy. I cleared out my .emacs.d
directory and started fresh. Not really fresh - I copied over The
critical parts of my configuration to start with - Swiper, email and
org config and a few other things. Then I got lsp-mode working for
Python and C++. Now I&amp;#39;m going to migrate over more of my old
configuration as I discover I want, miss, or need things. We&amp;#39;ll see
how it goes.
&lt;/p&gt;
&lt;p&gt;
The new configuration can be found here:
&lt;a href=&#34;https://github.com/zamansky/dot-emacs&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/dot-emacs&#34;&gt;https://github.com/zamansky/dot-emacs&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Check out the video to see the details:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/zg6JJI-kwhE&#34;&gt;https://www.youtube.com/embed/zg6JJI-kwhE&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 57 Dired Narrow</title>
      <link>https://cestlaz.github.io/post/using-emacs-57-dired-narrow/</link>
      <pubDate>Sun, 07 Apr 2019 11:57:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-57-dired-narrow/</guid>
      <description>&lt;p&gt;
One of Emacs power features that I&amp;#39;ve never quite gotten into is
&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html&#34;&gt;dired&lt;/a&gt;, the Directory Editor. I&amp;#39;ve already done a &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-38-dired/&#34;&gt;video on the package&lt;/a&gt;.
It&amp;#39;s really cool and I do use it at times but I still haven&amp;#39;t started
using it for my day to day.
&lt;/p&gt;
&lt;p&gt;
Well, I just started using a couple of packages that might change
this. They&amp;#39;re part of a set of dired addons that you can check out at the
&lt;a href=&#34;https://github.com/Fuco1/dired-hacks/tree/2c1234592aee91dcd9401bcd67213e6a4a464fd9&#34;&gt;dired hacks&lt;/a&gt; page. The specific ones I&amp;#39;m talkign about are
&lt;code&gt;dired-subtree&lt;/code&gt; and &lt;code&gt;dired-narrow&lt;/code&gt;. &lt;code&gt;dired-subtree&lt;/code&gt; is cool but it&amp;#39;s
not the game changer. &lt;code&gt;dired-narrow&lt;/code&gt; is. One of my issues with
dired is that I can&amp;#39;t see all the files I&amp;#39;m operating on easily at the
same time. If I&amp;#39;m marking a large number of files to delete I want to
be able to see all of them at once so I&amp;#39;m sure I&amp;#39;m not making a
mistake. &lt;code&gt;dired-narrow&lt;/code&gt; lets me easily do this.
&lt;/p&gt;
&lt;p&gt;
Check out the video to see the details:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pZzDayi5lRo&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 56 - Dictionaries</title>
      <link>https://cestlaz.github.io/post/using-emacs-56-dictionaries/</link>
      <pubDate>Mon, 28 Jan 2019 16:58:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-56-dictionaries/</guid>
      <description>&lt;p&gt;
One of the great things about Emacs is that it&amp;#39;s not just for writing
programs. Sure, you can set it up as an IDE for just about every
programming language under the sun but that&amp;#39;s just the tip of the
iceberg. I use Emacs for just about all my text processing. This
includes writing blog posts, reading and writing emails, creating
lesson plans and pretty much anything and everything having to do with
text.
&lt;/p&gt;
&lt;p&gt;
Emacs has some nice packages that make it really easy to integrate
dictionary and thesaurus lookups into your work flow.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a short video showing you how to set things up:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Jtgulzjq7hk&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 55 - Irony Completions</title>
      <link>https://cestlaz.github.io/post/using-emacs-55-irony-completions/</link>
      <pubDate>Mon, 21 Jan 2019 08:27:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-55-irony-completions/</guid>
      <description>&lt;p&gt;
Last year I put together a &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-32-cpp/&#34;&gt;post and video&lt;/a&gt; on some basics of Emacs for
C++ development. In the video I didn&amp;#39;t quite get completions fully
working. I also used ggtags in that video but find myself using
&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-33-projectile-jump&#34;&gt;dumb-jump&lt;/a&gt; more frequently.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a quick video showing how to set up &lt;a href=&#34;https://github.com/Sarcasm/irony-mode&#34;&gt;irony-mode&lt;/a&gt; which uses
libclang for completions. It&amp;#39;s pretty slick. Now the only thing I
think I&amp;#39;m missing is header file completions. If you&amp;#39;ve got a good
setup for that, please share.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/GRdZuc1Z4WI&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 54 Org Tables</title>
      <link>https://cestlaz.github.io/post/using-emacs-54-org-tables/</link>
      <pubDate>Mon, 14 Jan 2019 11:34:13 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-54-org-tables/</guid>
      <description>&lt;p&gt;
As you know I use Emacs for all sorts of things. In addition to
coding, I use it for email, my schedule, note taking, and much much
more. As part of my job at Hunter, I read and evaluate some of the
Macaulay Honors College applications. I also have to evaluate all the
applicants to my CS honors program. I described how I use Org-mode and
Emacs to help with that &lt;a href=&#34;https://cestlaz-nikola.github.io/posts/using-emacs-44-pdf/&#34;&gt;here&lt;/a&gt;. Processing the Macaulay applications
though is somewhat different. 
&lt;/p&gt;
&lt;p&gt;
I was given a list of student names and IDs as well as online access
to their applications. If I wasn&amp;#39;t an Emacs user I&amp;#39;d probably dump the
list into a spreadsheet and go from there. It turns out, Org-mode has
a really nice table editor with just the spreadsheet functionality
that I needed. I had the ability to perform basic calculations on the
data while also keeping the power of Emacs for editing purpose.
&lt;/p&gt;
&lt;p&gt;
Check out the video to see how it all works. 
&lt;/p&gt;
&lt;p&gt;
For more information, you can check out this &lt;a href=&#34;https://orgmode.org/worg/org-tutorials/org-spreadsheet-intro.html&#34;&gt;tutorial&lt;/a&gt; on Org-mode
table formulas and the Org-mode &lt;a href=&#34;https://orgmode.org/manual/The-Spreadsheet.html#The-Spreadsheet&#34;&gt;documentation.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Enjoy!
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/5vGGgfs0q3k&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 53 Emailing Org Agenda</title>
      <link>https://cestlaz.github.io/post/using-emacs-53-emailing-org-agenda/</link>
      <pubDate>Sat, 03 Nov 2018 08:55:23 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-53-emailing-org-agenda/</guid>
      <description>&lt;p&gt;
I use both org-mode and Google Calendar for scheduling. I like Google
Calendar because:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
It&amp;#39;s pretty universal so I can issue and accept calendar invites.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
It works well with my phone and other mobile devices.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The rest of my family doesn&amp;#39;t live in Emacs :-(.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I prefer using org-mode beacuse:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Emacs
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
I prefer, for the most part, to control my data.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I partially sync the two platforms. I&amp;#39;ve already talked about &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-26-gcal/&#34;&gt;syncing
Google Calendar and org-mode&lt;/a&gt;. Right now, I&amp;#39;m just pulling from Google
rather than also pushing up from org-mode because I&amp;#39;m still getting
double entry issues. This means that I have my entire schedule in
Emacs but only part of it in my Google calendar.
&lt;/p&gt;
&lt;p&gt;
To help resolve the problem, I do a few things. First, I sync my
orgfiles on all my computers. I used to do this with Dropbox but am
now moving over to &lt;a href=&#34;https://syncthing.net/&#34;&gt;Syncthing&lt;/a&gt;. I also like to set up a &lt;a href=&#34;http://digitalocean.com&#34;&gt;Digital Ocean&lt;/a&gt;
droplet so that I have a single machine that&amp;#39;s always on.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve set things up to have that droplet send me an email with my
agenda. It turns out that org has commands to do things with Emacs
from the command line:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
org-batch-agenda
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
org-batch-store-agenda-views
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
org-batch-agenda-csv 
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
They can be run from the command line to output a formatted agenda as
a string:
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;emacs --batch -l ~/.emacs.d/init.el  -eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(org-batch-agenda &amp;#34;a&amp;#34; org-agenda-span 14)&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
or as csv:
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;emacs --batch -l ~/.emacs.d/init.el  -eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(org-batch-agenda-csv &amp;#34;a&amp;#34; org-agenda-span 14)&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gcal&lt;/td&gt;
&lt;td&gt;Stuy recruiting&lt;/td&gt;
&lt;td&gt;2018-10-29&lt;/td&gt;
&lt;td&gt;15:40-16:40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gcal&lt;/td&gt;
&lt;td&gt;RBS Workshop 3&lt;/td&gt;
&lt;td&gt;2018-10-29&lt;/td&gt;
&lt;td&gt;17:30-21:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gcal&lt;/td&gt;
&lt;td&gt;FDR High School&lt;/td&gt;
&lt;td&gt;2018-10-30&lt;/td&gt;
&lt;td&gt;7:45- 8:45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;soe-cal&lt;/td&gt;
&lt;td&gt;ACERT -  LUNCH  SEMINAR&lt;/td&gt;
&lt;td&gt;2018-10-30&lt;/td&gt;
&lt;td&gt;12:00-14:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gcal&lt;/td&gt;
&lt;td&gt;Maxim Vengerov Carnegie Hall&lt;/td&gt;
&lt;td&gt;2018-10-30&lt;/td&gt;
&lt;td&gt;20:00-21:00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Note that you have to specify the location of the startup file
(~/emacs.d/init.e;) since when you run emacs in batch mode it won&amp;#39;t
load your normal config by default
&lt;/p&gt;
&lt;p&gt;
In the video you&amp;#39;ll see how I use my DigitalOcean dropplet, set up
with the Postfix mail server and Syncthing to send me an email with my
agenda every morning.
&lt;/p&gt;
&lt;p&gt;
The command I actually use to send the email is:
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;/usr/bin/emacs --batch -l ~/.emacs  -eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(org-batch-agenda &amp;#34;a&amp;#34; org-agenda-span 14)&amp;#39;&lt;/span&gt; 2&amp;gt;/dev/null | mail -s &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mike&amp;#39;s Agenda for &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;date +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\%A \%D&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; zamansky@gmail.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
which I put in a crontab entry to get it to run every day.
&lt;/p&gt;
&lt;p&gt;
If people want, I can make a runthrough of setting up the actual
dropplet and SyncThing.
&lt;/p&gt;
&lt;p&gt;
Enjoy!
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wus8R1TWYZ4&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 52 - Eyebrowse</title>
      <link>https://cestlaz.github.io/post/using-emacs-52-eyebrowse/</link>
      <pubDate>Tue, 30 Oct 2018 14:35:15 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-52-eyebrowse/</guid>
      <description>&lt;p&gt;
I was originally going to do a video on how I set things up so that I
get an email every morning with my org-mode agenda but that&amp;#39;s going to
be something of an ordeal. I have to create a droploet on Digital
Ocean, set up SyncThing and a mail server and lots of other things.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll get to that video at some point but in the meantime I saw &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/9rvboq/what_emacs_packages_have_upped_your_game_recently/&#34;&gt;this
thread&lt;/a&gt; on the Emacs subreddit.
&lt;/p&gt;
&lt;p&gt;
It asked about packages people used to &amp;#34;up their Emacs game.&amp;#34; I&amp;#39;ve
done videos on some of the packages mentioned and there were some
packages that I&amp;#39;d never heard of that I now have to check out. 
&lt;/p&gt;
&lt;p&gt;
One of the packages, &lt;a href=&#34;https://github.com/wasamasa/eyebrowse&#34;&gt;eyebrowse&lt;/a&gt; was one that I&amp;#39;ve been meaning to play
with for a while. Eyebrowse allows you to easily keep track of
window/buffer configurations. It&amp;#39;s pretty easy and pretty cool.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a quick video overview:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/s6IXj0bS7L8&#34;&gt;https://www.youtube.com/embed/s6IXj0bS7L8&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 51 - Day to day work with org-mode</title>
      <link>https://cestlaz.github.io/post/using-emacs-51-dtd-org/</link>
      <pubDate>Wed, 24 Oct 2018 17:30:45 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-51-dtd-org/</guid>
      <description>&lt;p&gt;
I can&amp;#39;t believe that I haven&amp;#39;t made a video since the beginning of
summer!!!
&lt;/p&gt;
&lt;p&gt;
Part of the reason is that I haven&amp;#39;t had any video ideas that have
motivated me and the other reason is that the Fall is my busiest
season.
&lt;/p&gt;
&lt;p&gt;
In any event, here&amp;#39;s the latest installment.
&lt;/p&gt;
&lt;p&gt;
Take a look at how I use Emacs and more specifically org-mode for my
day to day work. Sometimes I use the fancy power tools but to be
honest, most of the time, I stick to the basics. 
&lt;/p&gt;
&lt;p&gt;
The point is that you don&amp;#39;t have to be a real guru to use org-mode to
help you with organization and to increase productivity. Just a few
simple commands and you can accomplish a lot.
&lt;/p&gt;
&lt;p&gt;
I hope you enjoy it.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/C6nbjqn5Uxw&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Series</title>
      <link>https://cestlaz.github.io/stories/emacs/</link>
      <pubDate>Wed, 19 Sep 2018 19:02:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/stories/emacs/</guid>
      <description>
&lt;h3 id=&#34;headline-1&#34;&gt;
Link to current configuration: &lt;a href=&#34;https://github.com/zamansky/using-emacs&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/dot-emacs&#34;&gt;https://github.com/zamansky/dot-emacs&lt;/a&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-introduction&#34;&gt;Introduction&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-1-setup&#34;&gt;Video 1 - Setting up the package manager&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-2-org&#34;&gt;Video 2 - Intro to Org Mode&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-3-elisp&#34;&gt;Video 3 - How to think about Emacs&lt;/a&gt; 
&lt;/h3&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-4-buffers&#34;&gt;Video 4 - Buffers&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-5-windows&#34;&gt;Video 5 - Windows&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-6-swiper&#34;&gt;Video 6 - Search / Swiper&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-9&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-7-avy&#34;&gt;Video 7 - Navigation / avy&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-10&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-8-autocomplete&#34;&gt;Video 8 - Autocomplete&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-11&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-9-themes&#34;&gt;Video 9 - Themes&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-12&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-10-org-init&#34;&gt;Video 10 - Org init files&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-13&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-11-reveal&#34;&gt;Video 11 - org-reveal / reveal.js&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-14&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-12-python&#34;&gt;Video 12 - Python, Flycheck, Jedi&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-15&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-13-yasnippet&#34;&gt;Video 13 - Python, Yasnippet&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-16&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-14-thoughts&#34;&gt;Video 14 - Thoughts on Using Emacs&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-17&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-15-macros&#34;&gt;Video 15 - Macros&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-18&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-16-undo-tree&#34;&gt;Video 16 - Undo Tree&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-19&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-17-misc&#34;&gt;Video 17 - Small packages&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-20&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-18-narrow&#34;&gt;Video 18 - narrowing and iedit&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-21&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-19-live&#34;&gt;Video 19 - moving to a live config&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-22&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-20-yanking&#34;&gt;Video 20 - Yanking&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-23&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-21-web-mode&#34;&gt;Video 21-web-mode&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-24&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-22-emacsclient&#34;&gt;Video 22-emacsclient&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-25&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-23-capture-1&#34;&gt;Video 23 - capture 1&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-26&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-24-capture-2&#34;&gt;Video 24 - capture 2&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-27&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-25-tramp&#34;&gt;Video 25 - Tramp&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-28&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-26-gcal&#34;&gt;Video 26 - Google Calendar and Org Agenda&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-29&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-27-shell&#34;&gt;Video 27 - Shell and eshell&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-30&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-27-rectangles&#34;&gt;Video 28 - Rectangles&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-31&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-29-elfeed&#34;&gt;Video 29 - elfeed 1 &lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-32&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-30-elfeed-2&#34;&gt;Video 30 - elfeed 2 - Hydras &lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-33&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-31-elfeed-3&#34;&gt;Video 31 - elfeed 3 - macros&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-34&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-32-cpp&#34;&gt;Video 32 - C++&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-35&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-33-projectile-jump&#34;&gt;Video 33 - Projectile Dumb-jump&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-36&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet&#34;&gt;Video 34 - ibuffer and emmet&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-37&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-35-blogging&#34;&gt;Video 35 - blogging&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-38&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp&#34;&gt;Video 36 - A Touch of Elisp&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-39&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-37-treemacs&#34;&gt;Video 37 - Treemacs file browser&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-40&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-38-dired&#34;&gt;Video 38 - dired&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-41&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-39-mu4e&#34;&gt;Video 39 - mu4e&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-42&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-40-atomic-chrome&#34;&gt;Video 40 - Atomic chrome&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-43&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-41-pandoc&#34;&gt;Video 41 - Pandoc&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-44&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-42-git-gutter&#34;&gt;Video 42 - Git Gutter and Timemachine&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-45&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-43-music&#34;&gt;Video 43 - Music&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-46&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-44-pdf&#34;&gt;Video 44 - pdf&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-47&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-45-company&#34;&gt;Video 45 - Company or Autocomplete&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-48&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets&#34;&gt;Video 46 - auto yasnippets&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-49&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-47-magit&#34;&gt;Video 47 - Magit&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-50&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-48-silversearcher&#34;&gt;Video 48 - silversearcher&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-51&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-49-mu4e-conversation&#34;&gt;Video 49 - mu4e conversation&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-52&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-50-presentations&#34;&gt;Video 50 - presentations&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-53&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-51-dtd-org&#34;&gt;Video 51 - Day to day with org-mode&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-54&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-52-eyebrowse&#34;&gt;Video 52 - eyebrowse&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-55&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-53-emailing-org-agenda&#34;&gt;Video 53 - Emailing org-agenda&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-56&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-54-org-tables&#34;&gt;Video 54 - Org Tables&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-57&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-55-irony-completions&#34;&gt;Video 55 - Irony Completions&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-58&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-56-dictionaries&#34;&gt;Video 56 - Dictionaries&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-59&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-57-dired-narrow&#34;&gt;Video 57 - Dired Narrow&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-60&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-58-lsp-mode&#34;&gt;Video 58 - lsp-mode&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-61&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-59-markdown&#34;&gt;Video 59 - markdown&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-62&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-60-restclient&#34;&gt;Video 60 - restclient&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-63&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-61-org-msg&#34;&gt;Video 61 - org-msg&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-64&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-62-magit-forge&#34;&gt;Video 62 - Magit Forge&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-65&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-63-clojurescript&#34;&gt;Video 63 - ClojureScript&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-66&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-64-notmuch&#34;&gt;Video 64 - Notmuch&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-67&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-65-live-python&#34;&gt;Video 65 - Live Python&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-68&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-66-eshell-elisp&#34;&gt;Video 66 - Eshell - Elisp&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-69&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-67-emacs-rant&#34;&gt;Video 67 - Emacs vs Vi(m)&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-70&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-68-tramp-org-publish&#34;&gt;Video 68 - Tramp and org-publish&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-71&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-69-floobits&#34;&gt;Video 69 - Floobits&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-72&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-70-org-protocol&#34;&gt;Video 70 - org-protocol&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-73&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-71-openwith&#34;&gt;Video 71 - openwith&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-74&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed&#34;&gt;Video 72 - customizing elfeed&lt;/a&gt;
&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Rite Of Passage Projects</title>
      <link>https://cestlaz.github.io/posts/rite-of-passage-projects/</link>
      <pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/rite-of-passage-projects/</guid>
      <description>&lt;p&gt;
JCS&amp;#39;s &lt;a href=&#34;https://irreal.org/blog/?p=7414#comment-4045190612&#34;&gt;post&lt;/a&gt; on Irreal today brought me back. It was about &lt;a href=&#34;https://en.wikipedia.org/wiki/Brief_(text_editor)&#34;&gt;Brief&lt;/a&gt; which
was the editing hotness back in the day. I played with it a little
really mostly used Emacs clones for real work when I was stuck on
MS-DOS systems. Usually either &lt;a href=&#34;https://en.wikipedia.org/wiki/JOVE&#34;&gt;JOVE&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Epsilon_(text_editor)&#34;&gt;Epsilon&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
In the comments Jon reminded me about the &lt;a href=&#34;https://en.wikipedia.org/wiki/MKS_Toolkit&#34;&gt;MKS Toolkit&lt;/a&gt;
which brought most everyday Unix tools to DOS along with a shell and
a version of Vi. I didn&amp;#39;t use Vi much and I only used their shell
until I wrote my own.
&lt;/p&gt;
&lt;p&gt;
This got me thinking about &amp;#34;rite of passage&amp;#34; projects. I was in
college in the mid to late 80s. It was the heyday of the
IBM-PC. Schools still used older time sharing systems like DEC-20s and
Vaxen but the PC was all the rage. The cool thing about them was that
you had full control and access to the machine and it was simple
enough to get your head around pretty much everything about it. The
downside was that MS-DOS was very limited and of course there was
little to no networking going on.
&lt;/p&gt;
&lt;p&gt;
On the one hand, you could dive into the low level machine language
stuff very easily. Get Norton&amp;#39;s book:
&lt;/p&gt;
&lt;img src=&#34;https://covers.openlibrary.org/b/id/7446489-L.jpg&#34; alt=&#34;https://covers.openlibrary.org/b/id/7446489-L.jpg&#34; title=&#34;https://covers.openlibrary.org/b/id/7446489-L.jpg&#34; align=&#34;center&#34; height=&#34;250&#34;/&gt;
&lt;p&gt;
and you&amp;#39;re on your way.
&lt;/p&gt;
&lt;p&gt;
On the other hand many student&amp;#39;s graduated with no concept of time
sharing and the ramifications of sharing a system or resources were
foreign to many kids.
&lt;/p&gt;
&lt;p&gt;
Even though we always look back to the &amp;#34;good old days,&amp;#34; in many ways
things weren&amp;#39;t much different. I got a very strong background in
academic CS from NYU (Courant Institute) but just like today, there
was no real preparation for the real world.If you wanted to really develop your
coding chops you had to work on side projects.
&lt;/p&gt;
&lt;p&gt;
I seem to recall, a typical &amp;#34;rite of passage&amp;#34; side project was writing
your own shell. It didn&amp;#39;t have to be anything as powerful as BASH or
ZSH but it would typically be much more powerful than DOS and much
more Unixy.
&lt;/p&gt;
&lt;p&gt;
I recall writing my first shell down in UC-49 of Tisch Hall when the
computer labs weren&amp;#39;t busy. I wrote it in C which was what the cool
kids used back then. Specifically I used the &lt;a href=&#34;https://en.wikipedia.org/wiki/Mark_Williams_Company&#34;&gt;Let&amp;#39;s C&lt;/a&gt; compiler from the
Mark Williams company. This was before Turbo C 2.0 so Let&amp;#39;s C was
pretty much the only game in town for a cheap Unix style C compiler
for DOS. There was also Run/C but that was a C interpreter, not a
compiler. I also used that to learn C. Funny story - I certainly
didn&amp;#39;t know this at the time but Run/C was written by Peter
Brooks. Peter and I would later meet when he became my colleague at
Stuyvesant teaching CS and I now have the privilege of being able to
call him friend. I joke that I owe him ~ $100 for the interpreter from
back in the day.
&lt;/p&gt;
&lt;p&gt;
Since this was on DOS, I couldn&amp;#39;t do real Unix style pipes like
&lt;code&gt;cat file | sort | uniq -c | sort -n&lt;/code&gt; but I did simulate it with redirection and temporary
files. It also supported aliases, simple scripts and I think a few
other things.
&lt;/p&gt;
&lt;p&gt;
I was pretty happy with it and used it for a couple of years. It was
also one of the first substantial programs I wrote. I learned a lot
from doing it.
&lt;/p&gt;
&lt;p&gt;
Another &amp;#34;rite of passage&amp;#34; program that was common back then was a
text based window library. Somethig like ncurses that would allow you
to make text based windows and menus on the text only screen. I also
wrote one of these and actually got to use it for a project when I
started working at Goldman.
&lt;/p&gt;
&lt;p&gt;
I guess the third &amp;#34;rite of passage&amp;#34; project I remember was writing a C
compiler but that was different because it was for a class. It was a
significant project but the class didn&amp;#39;t really help with writing a
large program in general - it was all about the compiler and all the
theory behind it. Great course but not one in software engineering.
&lt;/p&gt;
&lt;p&gt;
Nowadays the projects have changed. Text based windowing is long gone
and while I still think writing a shell is a useful and rewarding
exercise it&amp;#39;s not scratching an itch the way it did back when we were
stuck on DOS. I guess writing a full stack web app is probably a
pretty typical one for students these days.
&lt;/p&gt;
&lt;p&gt;
Any others?
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 50 - presentations</title>
      <link>https://cestlaz.github.io/posts/using-emacs-50-presentations/</link>
      <pubDate>Sat, 30 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-50-presentations/</guid>
      <description>&lt;p&gt;
Next weekend I&amp;#39;ll be attending the Computer Science Teachers
Association&amp;#39;s &lt;a href=&#34;https://www.csteachers.org/general/custom.asp?page=2018Conference&#34;&gt;annual conference.&lt;/a&gt; It&amp;#39;s probably the biggest conference
focussed on K12 Computer Science education. This year, in addition to
attending, I&amp;#39;ll be giving a talk on preservice and inservice CS
teacher preparation programs. I&amp;#39;ll be talking about the new New York
State certification requirements along with what we&amp;#39;re rolling out at
Hunter College.
&lt;/p&gt;
&lt;p&gt;
This means putting together a slide deck for the session. When I have
to work collaboratively with non-Emacs users, I will usually go to
Google Docs for presentations. It works and the collaborative aspects
are nice but tools like Google Docs and Powerpoint are designed around
composing slides manually. I much prefer to use a tool where I can
focus on writing my presentation and have the tool turn it into a
presentation.
&lt;/p&gt;
&lt;p&gt;
Org-mode is of course the ideal tool. As an outliner, it lends itself
to organizing a talk:
&lt;/p&gt;
&lt;div class=&#34;src src-org&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;,* topic 1
the content for slide one
,* topic 2
the content for slide two
,* topic 3
etc.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I can embed code, tables, images, and more. I can also cycle
visibility so I can focus on individual sections. Org-mode also has a
number of export options to take a plain org file which is just ascii
with markup and export it as a presentation. In the video, I&amp;#39;ll take a
quick look at &lt;code&gt;ox-beamer&lt;/code&gt;, which exports to a Beamer presentation in LaTeX and then a PDF,
&lt;code&gt;epresent&lt;/code&gt; which presents right in Emacs and finally &lt;code&gt;ox-reveal&lt;/code&gt; wich
creates a &lt;code&gt;reveal.js&lt;/code&gt; presentation. I ultimately decide to continue to
use &lt;code&gt;ox-reveal&lt;/code&gt; as it&amp;#39;s pretty simple and flexible and I can also directly serve
the final presentation from my own laptop, a usb drive, or directly
from GitHub.
&lt;/p&gt;
&lt;p&gt;
Check out the video to see how. If you want more information on using
&lt;code&gt;ox-reveal&lt;/code&gt; check out my earlier &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-11-reveal&#34;&gt;Using Emacs post and video&lt;/a&gt;.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/bRoSpJ23Kzk&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 49 mu4e-conversation</title>
      <link>https://cestlaz.github.io/posts/using-emacs-49-mu4e-conversation/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-49-mu4e-conversation/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been using Emacs for email for a couple of years now. Not for
everything, for now my personal email is still Gmail but work is sent
and read through Emacs. I&amp;#39;m currently using &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/mu4e.html&#34;&gt;mu4e&lt;/a&gt; and while it has a
few quirks and limitations, I like it very much. You can take a look
on how I configure and use it &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-39-mu4e/&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
The other day I saw &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/8qryri/mu4econversation_single_buffer_fullthread_display/&#34;&gt;this&lt;/a&gt; thread on Emacs about a new package -
&lt;a href=&#34;https://gitlab.com/ambrevar/mu4e-conversation&#34;&gt;mu4e-conversation&lt;/a&gt;. It&amp;#39;s a package that deals with email threads.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s pretty cool. You can invoke it whenever you&amp;#39;re in the headers
view you can just run &lt;code&gt;M-x mu4e-conversation&lt;/code&gt; and it combines all the
email messages in the current thread into a single buffer.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s pretty nice.
&lt;/p&gt;
&lt;p&gt;
You can navigate between messages in the thread with &lt;code&gt;C-c C-n&lt;/code&gt; and
&lt;code&gt;C-c C-p&lt;/code&gt; and use most if not all of the usual mu4e goodness but on
top of that you can also toggle what the author calls tree mode by
hitting &lt;code&gt;V&lt;/code&gt;. Tree mode turns the thread into an org-mode tree - also
extremely cool.
&lt;/p&gt;
&lt;p&gt;
On top of this, you can also make mu4e your default viewing mode by
setting a single variable with &lt;code&gt;(setq mu4e-view-func &amp;#39;mu4e-conversation)&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Although it&amp;#39;s very cool, I&amp;#39;m not sure if mu4e-conversation will find
its way into my workflow or not and probably won&amp;#39;t know for a
while. This is mostly due to the fact that it&amp;#39;s summer so work email
slows down and I won&amp;#39;t have too many long threads to play with this
on.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll report back once I give it a fair shake but in the meantime if
anyone out there has had the time to play with it, let us know what
you think.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/V5efS8uXANI&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 48 Silversearcher</title>
      <link>https://cestlaz.github.io/posts/using-emacs-48-silversearcher/</link>
      <pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-48-silversearcher/</guid>
      <description>&lt;p&gt;
A couple of days ago I wrote about on my &lt;a href=&#34;http://cestlaz.github.io/posts/unit-tests-grading-workflow&#34;&gt;lab grading workflow&lt;/a&gt;. In the
post I mentioned that I used Emacs to easily navigate between student
folders and files so I can actually look at their work in addition to
their programs output and test results.
&lt;/p&gt;
&lt;p&gt;
The key is a combination of &lt;code&gt;dired&lt;/code&gt; and &lt;a href=&#34;https://github.com/Wilfred/ag.el&#34;&gt;ag&lt;/a&gt;, Emacs&amp;#39;s interface to &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;the
Silver Searcher&lt;/a&gt; which is something like a recursive code grep on
steroids. I also briefly try to show &lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep&#34;&gt;wgrep&lt;/a&gt; in the video which allows
you to edit Emacs grep buffers, effectively allowing you to make
changes across a set of files all at once. It ended up not working
with silversearcher - if anyone out there knows why, please chime in.
&lt;/p&gt;
&lt;p&gt;
Enjoy:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/-sFTkCQ774o&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Unit Tests Grading Workflow</title>
      <link>https://cestlaz.github.io/posts/unit-tests-grading-workflow/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/unit-tests-grading-workflow/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve talked before about unit testing (&lt;a href=&#34;http://cestlaz.github.io/posts/testing-testing&#34;&gt;here&lt;/a&gt;, and &lt;a href=&#34;http://cestlaz.github.io/posts/testing-part2&#34;&gt;here&lt;/a&gt;). My premise is
that in addition to being an important industry technique, it&amp;#39;s a
sound practice for students studying CS. I also contend that it can
make grading easier on the teacher. Maybe not as easy as an
auto-grader but those have &lt;a href=&#34;https://cestlaz.github.io/posts/2015-10-16-graders.html/#.WtplHHXwZhE&#34;&gt;their own problems&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Since I spent most of today grading I thought I&amp;#39;d share my current
workflow and how unit tests have made me more efficient.
&lt;/p&gt;
&lt;p&gt;
I have each student make a single GitHub repo for all individual
homeworks, labs and small projects. They&amp;#39;ll make additional repos for
larger and group projects. They fill out a Google form to give me the
repo link. I download the form and end up with a CSV file something like this:
&lt;/p&gt;
&lt;div class=&#34;src src-csv&#34;&gt;
&lt;pre&gt;&lt;code class=&#34;language-csv&#34; data-lang=&#34;csv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csv&#34; data-lang=&#34;csv&#34;&gt;Doe, John, git@github.com:johndoe/mymoework.git
Doe, Jane, git@github.com:janedoe/labs.git
etc.&lt;/code&gt;&lt;/pre&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
My goal is to clone each students repo into a directory and then
throughout the term, they add assignments to their own repos using the
names and specifications I give them. For example, after assigning
three assignments, I could pull everything from their repos and I
would have a directory structure something like this:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
hw
├── doe_jane
│   ├── hw_01
│   ├── hw_02
│   └── hw_03
│
└── doe_john
├── hw_01
└── hw_02
&lt;/pre&gt;
&lt;p&gt;
To get there, I have to change the csv file to a small shell script:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone git@github.com:johndoe/mymoework.git doe_john
git clone git@github.com:janedoe/labs.git doe_jane
etc.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I usually do this in Emacs with a macro.
&lt;/p&gt;
&lt;p&gt;
Now I&amp;#39;m ready to go.
&lt;/p&gt;
&lt;p&gt;
Whenever there&amp;#39;s a new assignment, I just have to update all the
repos. I go into the root hw directory and loop through all the
subdirectoryes:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cs /path/to/hw_root
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;ls&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
cd /path/to/hw_root/$i
git pull
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
At this point I could go into each repo but we can do better. Since I
have all of my students submit a Makefile with a default target to
build an executable named &lt;code&gt;main&lt;/code&gt; and also a target named &lt;code&gt;tests&lt;/code&gt; which
will build an executable to run the unit tests named &lt;code&gt;tests&lt;/code&gt; I do this
instead of a straight pull:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cs /path/to/hw_root
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;ls&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
cd /path/to/hw_root/$i
git pull
cd hw_03 &lt;span style=&#34;color:#75715e&#34;&gt;# or whatever assignment I&amp;#39;m grading&lt;/span&gt;
make tests
make
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now, if I want, I can go into each directory, run the tests by typing
&lt;code&gt;./tests&lt;/code&gt;  and the hw or project with &lt;code&gt;./main&lt;/code&gt;. I can also add a
couple of lines to the for loop above like:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$i&lt;span style=&#34;color:#e6db74&#34;&gt; Test Report\n----------------\n&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /path/to/hw_root/test_report
./tests &amp;gt;&amp;gt; /path/to/hw_root/test_rport
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;----------------------\n\n&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This gives me a single file with everyone&amp;#39;s test results. Either by
doing this or by running the tests in each folder manually I can
quickly see what works and what doesn&amp;#39;t.
&lt;/p&gt;
&lt;p&gt;
While I&amp;#39;m doing this, I have Emacs up and with &lt;strong&gt;dired mode&lt;/strong&gt; and more
specifically &lt;strong&gt;ag-dired-regexp&lt;/strong&gt; which lets me easily
navigate to any student&amp;#39;s files. Combined with the test results I can
quickly evaluate the entire assignment.
&lt;/p&gt;
&lt;p&gt;
Put all of this together and it makes grading somewhat bearable. I can
work through well written, correct assignments extremely quickly and
drill down into the other projects efficiently as well.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 47 - Magit</title>
      <link>https://cestlaz.github.io/posts/using-emacs-47-magit/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-47-magit/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been holding off on doing a &lt;a href=&#34;https://magit.vc/&#34;&gt;Magit&lt;/a&gt; video for a while. Mostly
because I wasn&amp;#39;t using it exclusively and also because there are
already a number of good Magit videos and resources out there.
&lt;/p&gt;
&lt;p&gt;
What changed? Along with the new version of Magin, Jonas Bernoulli
wrote up &lt;a href=&#34;https://emacsair.me/2017/09/01/magit-walk-through/&#34;&gt;a walkthrough of the Magit interface&lt;/a&gt;. For whatever reason,
it all finally clicked.
&lt;/p&gt;
&lt;p&gt;
In spite of what the documentation says, Magit &lt;strong&gt;is not&lt;/strong&gt; an interface
for git. Magit is a &lt;strong&gt;command and control&lt;/strong&gt; center for git. You can
launch it just to execute some git commands but you can also leave it
up and running in an Emacs window or frame as a constant project
overview.
&lt;/p&gt;
&lt;p&gt;
Wow. Mind blown!!!
&lt;/p&gt;
&lt;p&gt;
If you use Emacs for Deveopment, you &lt;strong&gt;have to&lt;/strong&gt; use Magit. If you don&amp;#39;t
use Emacs, you can load it on the side for Magit. If you&amp;#39;re not a
developer, learn to code so you can use Magit!!!!!
&lt;/p&gt;
&lt;p&gt;
I tried to do justice to the package in the video. Magit along with &lt;a href=&#34;https://orgmode.org/&#34;&gt;Org
Mode&lt;/a&gt; are arguably Emacs killer apps - enough in and of themselves to
justify using Emacs.
&lt;/p&gt;
&lt;p&gt;
Check out the video:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/1IYsiHXR620&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 46 Auto Yasnippets</title>
      <link>https://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets/</guid>
      <description>&lt;p&gt;
The other day I discovered &lt;a href=&#34;https://github.com/abo-abo/auto-yasnippet&#34;&gt;auto-yasnippet&lt;/a&gt;, another great package by
&lt;a href=&#34;https://github.com/abo-abo&#34;&gt;Oleh Krehel&lt;/a&gt; or abo-abo.
&lt;/p&gt;
&lt;p&gt;
It looks like it&amp;#39;s going to be a great way to solve a particular
problem that come up now and again.
&lt;/p&gt;
&lt;p&gt;
There are plenty of times when I want to create a number of similar
but slightly different blocks of text. The example on the project
site  is:
&lt;/p&gt;
&lt;div class=&#34;src src-c&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You could use multiple cursors, a macro, or other methods to put in
the common text but you still have to deal with the parts of each line
that are unique, the red, green, and blue.
&lt;/p&gt;
&lt;p&gt;
You could use a yasnippet but it&amp;#39;s unlikely that you&amp;#39;ll have a snippet
for every occasion. This is where auto-yasnippet comes in. You would
write the first line but add  a tilda as a placeholder:
&lt;/p&gt;
&lt;div class=&#34;src src-c&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and then invoke &lt;code&gt;aya-create&lt;/code&gt;. This will get rid of the tildas and
create the auto-snippet. Then when you run &lt;code&gt;aya-expand&lt;/code&gt; it will put in
the snippet with the tilda locations as placeholders.
&lt;/p&gt;
&lt;p&gt;
Very cool.
&lt;/p&gt;
&lt;p&gt;
Check out the video:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/utrMabxgXbg&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 45 - Company or Autocomplete</title>
      <link>https://cestlaz.github.io/posts/using-emacs-45-company/</link>
      <pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-45-company/</guid>
      <description>
&lt;p&gt;
This is a good time to be an Emacs user. In addition to all of the
great packages and tools being developed there seem to be more people
regularly blogging and making videos about Emacs than ever before.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;http://planet.emacsen.org/&#34;&gt;Planet Emacsen&lt;/a&gt; aggregates a ton of Emcas blogs and Emacs Legend Sacha
Chua posts what&amp;#39;s going on in emacs every week on her &lt;a href=&#34;http://sachachua.com/blog/category/geek/emacs/&#34;&gt;blog&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
on the video front, &lt;a href=&#34;https://www.youtube.com/channel/ucdetz7akmws0_gnjog01d2g&#34;&gt;uncle dave&lt;/a&gt; has recently joined the ranks of emacs
video producers. sometimes we&amp;#39;ll cover the same topic. dave made a
video on swiper the other week and i made one a year ago. the other
week we both made videos on mpd almost on the same day but dave
focussed on emms and i focussed on simple-mpc. i think this
is great because it gives different perspectives.
&lt;/p&gt;
&lt;p&gt;
today, i watched dave&amp;#39;s video on &lt;a href=&#34;https://www.youtube.com/watch?v=xewzfruru6k&amp;amp;t=854s&#34;&gt;company&lt;/a&gt; mode for auto
completion. I&amp;#39;ve always used &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-8-autocomplete/&#34;&gt;autocomplete&lt;/a&gt; mode. I thought it would be
a good time for me to see how the other half lived.
&lt;/p&gt;
&lt;p&gt;
You can find my configurations up on GitHub
(&lt;a href=&#34;https://github.com/zamansky/using-emacs&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs&#34;&gt;https://github.com/zamansky/using-emacs&lt;/a&gt;&lt;/a&gt;). The master branch is using
autocomplete and the company-test branch for company. I&amp;#39;ve also pulled
out the relevant code and am placing it down under the video.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what I&amp;#39;ve found so far:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/srFQwTvbaxY&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Company config (so far):
&lt;/h2&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package company
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(setq company-idle-delay &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
(setq company-minimum-prefix-length &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
(global-company-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))

(use-package company-irony
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;company-backends&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;company-irony&lt;/span&gt;))

(use-package irony
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c++-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;irony-mode&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;irony-mode&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;irony-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;irony-cdb-autosetup-compile-options&lt;/span&gt;))

(use-package irony-eldoc
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;irony-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;irony-eldoc))

(use-package company-jedi
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jedi:setup&lt;/span&gt;))

(defun my/python-mode-hook ()
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;company-backends&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;company-jedi&lt;/span&gt;))

(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;my/python-mode-hook&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Autocomplete config
&lt;/h2&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package auto-complete
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(progn
(ac-config-default)
(global-auto-complete-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
))

(setq py-python-command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python3&amp;#34;&lt;/span&gt;)
(setq python-shell-interpreter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python3&amp;#34;&lt;/span&gt;)

(use-package jedi
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jedi:setup&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jedi:ac-setup&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 44 - An org-mode workflow for application processing</title>
      <link>https://cestlaz.github.io/posts/using-emacs-44-pdf/</link>
      <pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-44-pdf/</guid>
      <description>&lt;p&gt;
One of my titles at Hunter College is Director of the Daedalus CS
Honors program. It&amp;#39;s something like a Hunter specific, CS specific
version of the CUNY Macaulay Honors program.
&lt;/p&gt;
&lt;p&gt;
Hunter gives all its students the ability to get a great computer
science education at a fraction of the cost of a private institution
and if you&amp;#39;re a Daedalus scholar you also get a scholarship, a laptop,
special classes (with me :-) ), activities and more. Just the other
day we visited  &lt;a href=&#34;http://samsungnext.com/&#34;&gt;Samsung Next&lt;/a&gt; accelerator and earlier in the year we
made our annual visit to &lt;a href=&#34;http://www.catskillsconf.com/&#34;&gt;Catskills Conf&lt;/a&gt;, arguably my favorite event of
the year.
&lt;/p&gt;
&lt;p&gt;
When deciding on which students to recommend for acceptance, I try to
glean as much information as I can about each applicant. When I feel
there&amp;#39;s not enough information, I&amp;#39;ve been known to reach out to
recommenders and other sources for more. But first I go through the
applications. For each student, I&amp;#39;m provided with a pdf file with a
bunch of data and also an entry in an internal Hunter online form with
even more.
&lt;/p&gt;
&lt;p&gt;
For the first cohort, this wasn&amp;#39;t a big deal. I hadn&amp;#39;t even started at
Hunter when the applications closed so there was no
outreach. Everything was after the fact so there were very few
students to evaluate.
&lt;/p&gt;
&lt;p&gt;
Last year, I was able to do some outreach and we had around 60 or so
applications for a little over 20 spots.
&lt;/p&gt;
&lt;p&gt;
This year, there are well over 100 applicants (and we&amp;#39;re looking to
grow the program by a large number of students). All of a sudden, it
wasn&amp;#39;t so easy to navigate all the pdf files.
&lt;/p&gt;
&lt;p&gt;
Emacs to the rescue. Using a combination of org-mod,  &lt;a href=&#34;https://github.com/politza/pdf-tools&#34;&gt;pdf-tools&lt;/a&gt;, and
&lt;a href=&#34;https://melpa.org/#/org-pdfview&#34;&gt;org-pdfview&lt;/a&gt; I&amp;#39;ve come up with a workflow that I very much like.
&lt;/p&gt;
&lt;p&gt;
Take a look and let me know what you think:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/LFO2UbzbZhA&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 43 - Music with MPD</title>
      <link>https://cestlaz.github.io/posts/using-emacs-43-music/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-43-music/</guid>
      <description>&lt;p&gt;
I like to listen to music at work. Sometimes I just stream from
YouTube, Soundcloud, Spotify or some other online source but if you&amp;#39;re
a person of a certain age, like me, you probably have quite an mp3
collection. All those CDs that have been ripped not to mention some
converted vinyl.
&lt;/p&gt;
&lt;p&gt;
I used to use the &lt;a href=&#34;https://www.musicpd.org/&#34;&gt;Music Player Daemon&lt;/a&gt; or MPD back in the day. It would
run in the background and you could connect to it using lots of
&lt;a href=&#34;https://www.musicpd.org/clients/&#34;&gt;clients&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
When I was running Ubuntu and Mint Linux, I had some trouble setting
up MPD but the process is much smoother using Manjaro which is Arch
based and I&amp;#39;m currently enjoying.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a video on how I set up MPD and also use Emacs to control it.
&lt;/p&gt;
&lt;p&gt;
Coincidentally, on the same day I recorded this, &lt;a href=&#34;https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g/feed&#34;&gt;Uncle Dave&lt;/a&gt; put up a
similar &lt;a href=&#34;https://www.youtube.com/watch?v=xTVN8UDScqk&#34;&gt;video&lt;/a&gt;. Dave also sets up MPD on an Arch based linux but he
uses EMMS for his player. I ultimately end up with Simple-MPC with
briefs stops at the built in MPC mode and Mingus along the way.
&lt;/p&gt;
&lt;p&gt;
Enjoy.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/LWd60rc_rQ0&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 42 - Git Gutter and Time Machine</title>
      <link>https://cestlaz.github.io/posts/using-emacs-42-git-gutter/</link>
      <pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-42-git-gutter/</guid>
      <description>&lt;p&gt;
One day I&amp;#39;ll do a Magit video but since there are already some good
ones out there I thought I&amp;#39;d share a couple of other great git related
packages.
&lt;/p&gt;
&lt;p&gt;
The first is &lt;a href=&#34;https://github.com/syohex/emacs-git-gutter/tree/00c05264af046b5ce248e5b0bc42f117d9c27a09&#34;&gt;Git Gutter&lt;/a&gt; which adds markers on the side gutter of your
buffer so you know what&amp;#39;s changed since you&amp;#39;re last commit. I pretty
much use it exclusively for that visual but it can also be used to
cmmit and revert individual chunks of your changes.
&lt;/p&gt;
&lt;p&gt;
The second is &lt;a href=&#34;https://github.com/pidu/git-timemachine&#34;&gt;Git Timemachine&lt;/a&gt; which lets you move forward and back
between commits.
&lt;/p&gt;
&lt;p&gt;
The video demos both.
&lt;/p&gt;
&lt;p&gt;
Enjoy
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/P-mLxkb-EE8&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 41 Pandoc</title>
      <link>https://cestlaz.github.io/posts/using-emacs-41-pandoc/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-41-pandoc/</guid>
      <description>&lt;p&gt;
Another Emacs quick hit today. Actually, not really Emacs. Today&amp;#39;s
video is a quick, really quick, look at &lt;a href=&#34;https://pandoc.org/&#34;&gt;Pandoc&lt;/a&gt;. Pandoc is a document
converter.
&lt;/p&gt;
&lt;p&gt;
Here are the formats that Pandoc can covert read from:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Markdown, CommonMark, PHP Markdown Extra, GitHub-Flavored Markdown,
MultiMarkdown, and (subsets of) Textile, reStructuredText, HTML,
LaTeX, MediaWiki markup, TWiki markup, TikiWiki markup, Creole 1.0,
Haddock markup, OPML, Emacs Org mode, DocBook, JATS, Muse, txt2tags,
Vimwiki, EPUB, ODT, and Word docx.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
And here are the ones it can write to:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
plain text, Markdown, CommonMark, PHP Markdown Extra, GitHub-Flavored
Markdown, MultiMarkdown, reStructuredText, XHTML, HTML5, LaTeX
(including beamer slide shows), ConTeXt, RTF, OPML, DocBook, JATS,
OpenDocument, ODT, Word docx, GNU Texinfo, MediaWiki markup, DokuWiki
markup, ZimWiki markup, Haddock markup, EPUB (v2 or v3), FictionBook2,
Textile, groff man, groff ms, Emacs Org mode, AsciiDoc, InDesign ICML,
TEI Simple, Muse, PowerPoint slide shows and Slidy, Slideous,
DZSlides, reveal.js, PDF
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That&amp;#39;s pretty impressive
&lt;/p&gt;
&lt;p&gt;
I was faced with an html file describing a lab for all the CSCI13500
students at Hunter. I wanted to modify it for my class and that was
going to be a bear. I also wanted an easy way to have it render up on
GitHub. With pandoc, it was trivial. I just typed:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pandoc -f html -t org -o lab3.org lab3.html&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
which converted the file to org-mode. This was trivial to edit and
then I uploaded it to GitHub as the lab&amp;#39;s Readme.org file which GitHub
automatically renders on the project page.
&lt;/p&gt;
&lt;p&gt;
Pandoc for the win.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve also used pandoc to move between org-mode and word files.
&lt;/p&gt;
&lt;p&gt;
If you haven&amp;#39;t checked out pandoc, you should.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/qVUZsH-MDRM&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 40 - Atomic Chrome</title>
      <link>https://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</link>
      <pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</guid>
      <description>
&lt;p&gt;
Thanks to everyone who voted for topics or commented with suggestions
for videos. I&amp;#39;ll try to get to them in the coming months.
&lt;/p&gt;
&lt;p&gt;
Today is just a quick hit on Atomic Chrome - an Emacs package and
browser extension that allows you to edit web form inputs with Emacs.
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
UPDATE
&lt;/h2&gt;
&lt;p&gt;
I forgot to mention that you can set a shortcut key, at least in chrome rather than
clicking on the icon. This makes things much smoother.
&lt;/p&gt;
&lt;p&gt;
All you have to do is:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Go to &lt;strong&gt;&lt;strong&gt;chrome://extensions&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
On the bottom of the page you&amp;#39;ll see a button to set &lt;strong&gt;&lt;strong&gt;keyboard shortcuts&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Set the shortcut for Atomic Chrome
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Enjoy:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wyPZws66Sic&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 2017 Recap</title>
      <link>https://cestlaz.github.io/posts/using-emacs-2017-recap/</link>
      <pubDate>Fri, 29 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-2017-recap/</guid>
      <description>&lt;p&gt;
This past year I recorded 14 Using Emacs videos. This is on top of the
25 videos I made last year. The fall off in production is
understandable. I got through my day to day configuration in the
late 20s and since then the videos have just been on things I&amp;#39;ve
rediscovered, things that became useful and things that I just found
interesting. It was also a busier year.
&lt;/p&gt;
&lt;p&gt;
Why did I start the series? Mostly for my students. There&amp;#39;s the built
in Emacs tutorial and other beginner resources but how do you go from
the basics to a real working configuration? For years I would show my
kids Emacs and use it in class but there was never a path for them to
follow from beginner to craftsman. I hoped the videos would fill the
void.
&lt;/p&gt;
&lt;p&gt;
It probably didn&amp;#39;t. I don&amp;#39;t think I&amp;#39;m getting greater Emacs adoption
from my students but on the other hand, I&amp;#39;ve found making the series
rewarding for other reasons.
&lt;/p&gt;
&lt;p&gt;
First and foremost, it&amp;#39;s allowed me to be an active contributing
member of the Emacs community. I haven&amp;#39;t written any Emacs packages
nor am I an active guy on any Emacs forums but this is a way I can do
my part.
&lt;/p&gt;
&lt;p&gt;
Second, although there hasn&amp;#39;t been a great deal of comments on the
videos or blog posts I&amp;#39;ve gotten to know a few people that I wouldn&amp;#39;t
have gotten to know otherwise.
&lt;/p&gt;
&lt;p&gt;
It also shows that that if you put things out there people might find
it useful. I don&amp;#39;t know how many people saw my Emacs posts at the
start but a year and half later I&amp;#39;ve got 1,700 YouTube
subscribers. Sure, that&amp;#39;s nothing compared to many YouTubers but
for a guy making schlocky videos at his desk about an as much as I hate to admit it
non-maintream editor, I think it&amp;#39;s pretty cool.
&lt;/p&gt;
&lt;p&gt;
The question is what to make videos on moving forward?
&lt;/p&gt;
&lt;p&gt;
I thought I&amp;#39;d throw it out to the community. Here&amp;#39;s an embedded
poll. Feel free to suggest other topics either on the blog or
as a Twitter reply.
&lt;/p&gt;
&lt;p&gt;
I can&amp;#39;t promise I&amp;#39;ll get to all or any but I&amp;#39;ll certainly check out
the popular suggestions.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;&lt;a href=&#34;http://www.easypolls.net/ext/scripts/emPoll.js?p=5a46abd4e4b04ebe73ddc4de&#34;&gt;http://www.easypolls.net/ext/scripts/emPoll.js?p=5a46abd4e4b04ebe73ddc4de&lt;/a&gt;&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;a class=&amp;#34;OPP-powered-by&amp;#34; href=&amp;#34;&lt;a href=&#34;http://www.objectplanet.com/opinio/&#34;&gt;http://www.objectplanet.com/opinio/&lt;/a&gt;&amp;#34; style=&amp;#34;text-decoration:none;&amp;#34;&amp;gt;&amp;lt;div style=&amp;#34;font: 9px arial; color: gray;&amp;#34;&amp;gt;survey service&amp;lt;/div&amp;gt;&amp;lt;/a&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 39 - mu4e</title>
      <link>https://cestlaz.github.io/posts/using-emacs-39-mu4e/</link>
      <pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-39-mu4e/</guid>
      <description>
&lt;p&gt;
I generally use three email accounts. My personal one, work one, and
one for my non-profit. For a couple of years, I&amp;#39;ve been using mu4e
under Emacs for both my work and non-profit email accounts and gmail
for my personal account.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve had lots of requests for a video on what I do but I&amp;#39;ve been
hesitant for two reasons:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
There are parts of my configuration that are copied from others and
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
I really don&amp;#39;t understand.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
I wasn&amp;#39;t happy with the complexity and some of the tooling.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
While there are still parts of my configuration that I&amp;#39;m not 100%
clear on I&amp;#39;ve cleaned up the tooling and complexity by using mu4e only
for my work email for the time being and by switching to mbsync.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a writeup on configuring things with video at the end.
&lt;/p&gt;
&lt;p&gt;
Unless you run an email server on your local machine using mu4e can be
thought of as three parts.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Get the email from the server to the local machine using IMAP.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Setting up mu.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Access the email locally from Emacs.
&lt;/p&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Part 1 Getting the email to your local machine using mbsync
&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
I found his terrific blog post by &lt;a href=&#34;https://twitter.com/robstewartUK&#34;&gt;Rob Stewart&lt;/a&gt; on setting up &lt;a href=&#34;http://www.macs.hw.ac.uk/~rs46/posts/2014-01-13-mu4e-email-client.html&#34;&gt;mbsync and
mu4e&lt;/a&gt;. Read it over. I basically followed his directions for setting up
&lt;a href=&#34;https://sourceforge.net/p/isync/isync/ci/master/tree/&#34;&gt;mbsync&lt;/a&gt;. To build from source under Linux, I used the sequence:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./autogen.sh
./configure
make
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I followed Rob&amp;#39;s instructions basically verbatim for the password and
authentication stuff so I suggest you do the same.
&lt;/p&gt;
&lt;p&gt;
You&amp;#39;ll also have to make sure to make the necessary email directories
manually. I describe all of this in the video.
&lt;/p&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Part 2 - setting up mu.
&lt;/h3&gt;
&lt;p&gt;
To set up mu, clone it from git://github.com/djcb/mu.git and build
it. You can find dependencies &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html&#34;&gt;here&lt;/a&gt; and then follow the same sequence
used to build mbsync listed above.
&lt;/p&gt;
&lt;p&gt;
Since I store my local email under a folder &lt;code&gt;Maildir&lt;/code&gt;  which is what
mu defaults to I can start using it by indexing my emails:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mu index&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video shows some examples of using mu from the command line and
you can look at the mu cheatsheet &lt;a href=&#34;http://www.djcbsoftware.nl/code/mu/cheatsheet.html&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Setting up mu4e in emacs
&lt;/h3&gt;
&lt;p&gt;
Finally, you can set up mu4e in emacs. Take a look at Rob&amp;#39;s
configuration in his post or my &lt;a href=&#34;https://github.com/zamansky/using-emacs/blob/master/mu4econfig-sample.el&#34;&gt;sample&lt;/a&gt; config. You&amp;#39;ll have to take a
few minutes to go through either and make the appropriate changes but
the required changes should be cleared.
&lt;/p&gt;
&lt;p&gt;
The video goes through all of this and then a brief demo of how I use
mu4e.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m very happy with it and plan to integrate my non-profit email and
maybe even personal email into it soon.
&lt;/p&gt;
&lt;p&gt;
Enjoy:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/newRHXKm4H4&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allow=&#34;encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 38 - dired</title>
      <link>https://cestlaz.github.io/posts/using-emacs-38-dired/</link>
      <pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-38-dired/</guid>
      <description>&lt;p&gt;
The 38th installment of Using Emacs is about &lt;strong&gt;&lt;strong&gt;dired&lt;/strong&gt;&lt;/strong&gt;, Emacs&amp;#39; built
in mode for navigating and working with directories.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not a dired power user and in fact am just now making a real
effort to explore it and work it into my daily workflow and
with that in mind, I&amp;#39;d love to hear some configuration and
use suggestions from people who use it regularly.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the configuration I use:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package dired+
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dired+&lt;/span&gt;)
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
which merely adds dired+ into the mix.
&lt;/p&gt;
&lt;p&gt;
I also started playing with &lt;a href=&#34;https://github.com/joddie/pcre2el&#34;&gt;pcre2el&lt;/a&gt; which allows me to use the more
usual regex syntax in place of Emacs regex syntax in both dired and
other places. This is a big win for me since I never remember all the
escaping rules for Emacs regex.
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package pcre2el
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(pcre-mode)
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Finally, abo-abo and jcs have both written about new features in ,
Ivy/Swiper/Counsel that allow you to use ivy-occur to dump results
into a dired buffer (&lt;a href=&#34;http://irreal.org/blog/?p=6760&#34;&gt;link&lt;/a&gt;, &lt;a href=&#34;https://oremacs.com/2017/11/18/dired-occur/&#34;&gt;link&lt;/a&gt;) but to get that to work, I needed to
install &lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep&#34;&gt;wgrep&lt;/a&gt; and also had to install and setup &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; which looks to be
useful.
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package wgrep
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
)

(setq counsel-fzf-cmd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/zamansky/.fzf/bin/fzf -f %s&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
To help get started here are links to a couple of cheat sheets:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf&#34;&gt;dired reference card&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://harryrschwartz.com/assets/documents/dired-cheatsheet.pdf&#34;&gt;another dired cheat sheet&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I&amp;#39;ll probably use dired more frequently but again, would love to hear
how other people are using it.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Fg7HmmRYWy8&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 37 - Treemacs file browser</title>
      <link>https://cestlaz.github.io/posts/using-emacs-37-treemacs/</link>
      <pubDate>Sun, 24 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-37-treemacs/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been meaning to get back to making Emacs videos but I&amp;#39;ve been
having trouble figuring out what to record.
&lt;/p&gt;
&lt;p&gt;
People have asked for &lt;a href=&#34;https://github.com/magit/magit&#34;&gt;Magit&lt;/a&gt; but I only use the basics and I think
there are already some great videos on it out there. I&amp;#39;d also like to
get more comfortable with DIRED mode and then do a video on it but I&amp;#39;m
not there yet. I&amp;#39;ve also been looking into packages that manage
workspaces like Eyebrowse and Persp-mode but neither are really doing
it for my workflow.
&lt;/p&gt;
&lt;p&gt;
This morning I saw an post on the &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/7249jt/introducing_treemacs_a_modern_file_project/&#34;&gt;Emacs subreddit&lt;/a&gt; about &lt;a href=&#34;https://github.com/Alexander-Miller/treemacs#treemacs---a-tree-layout-file-explorer-for-emacs&#34;&gt;Treemacs&lt;/a&gt; - a
sidebar file browser similar to what the Atom editor has. It&amp;#39;s pretty
slick. I particularly like the integration with &lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;projectile&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I suspect I won&amp;#39;t integrate a file browser side bar into my workflow -
I&amp;#39;ve probably spent too many years with Emacs built in buffer commands
but if like that type of interface, definitely check Treemacs out.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ACg6RnVdw8k&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 36 - A Touch of Elisp</title>
      <link>https://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/</link>
      <pubDate>Sun, 30 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been working on a vue.js project this summer. During the school
year I really can&amp;#39;t dive into code so it&amp;#39;s been fun.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve already showed you most of the Emacs tools I use for
development. Projectile, Ace-Window, IBuffer, Swiper / Ivy and
all. One thing I couldn&amp;#39;t easily do was arrange windows the way I
wanted.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been setting up Emacs with one large window and a couple of
smaller ones:
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/touch-elisp.png&#34; alt=&#34;/img/touch-elisp.png&#34; title=&#34;/img/touch-elisp.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;
I can easily switch the buffer in the window and I can easily switch
windows but what I wanted to do was swap the buffer in the large
window with one of the smaller buffers and leave focus in the larger
buffer:
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/touch-elisp2.png&#34; alt=&#34;/img/touch-elisp2.png&#34; title=&#34;/img/touch-elisp2.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;
I started looking at perspective mode and persp mode but neither work
with the latest Emacs. After poking around at other packages I
realized that ace-window does most of what I wanted. Ace-window has a
function that swaps the buffers in two windows named
&lt;code&gt;ace-swap-window&lt;/code&gt;. The only problem is that it leaves the focus on the
window you swap to not the one you started in. Ace-window also has
&lt;code&gt;aw-flip-window&lt;/code&gt; which then returns the cursor to the previous window.
&lt;/p&gt;
&lt;p&gt;
With a little elisp, we get the behavior I was looking for which I
then bound to &lt;code&gt;C-1 z&lt;/code&gt;:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun z/swap-windowsn ()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
(interactive)
(ace-swap-window)
(aw-flip-window)
)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; z-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z/swap-windows&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video goes into more details but it shows that if you&amp;#39;re not
afraid to explore a bit you can pretty much get Emacs to do whatever
you want.
&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/NQhud2ZNd1w&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 35 - Blogging</title>
      <link>https://cestlaz.github.io/posts/using-emacs-35-blogging/</link>
      <pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-35-blogging/</guid>
      <description>&lt;p&gt;
Very little new Emacs in today&amp;#39;s episode of Using Emacs. The video
shows my old blogging workflow and what I&amp;#39;m playing with now.
&lt;/p&gt;
&lt;p&gt;
The only new Emacs covered is the &lt;a href=&#34;https://github.com/rejeep/prodigy.el&#34;&gt;prodigy&lt;/a&gt; package which lets you run
services under Emacs. I use it to run &lt;a href=&#34;https://getnikola.com/blog/index.html&#34;&gt;Nikola&lt;/a&gt;&amp;#39;s development server but
I think prodigy will also be useful when I start writing that knitting
application I promised my wife.
&lt;/p&gt;
&lt;p&gt;
When I started this blog, I used Jekyll. It was simple and worked with
GitHub pages. I wrote about why I transitioned to Nikola &lt;a href=&#34;https://cestlaz.github.io/posts/2016-04-14-i-hate-ruby/&#34;&gt;here&lt;/a&gt; and
&lt;a href=&#34;https://cestlaz.github.io/posts/2016-04-17-emacs-jekyll-nikola/&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s not much more to say here so enjoy the video:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wSeTic9obKw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 34 - ibuffer and emmet</title>
      <link>https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/</link>
      <pubDate>Thu, 15 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/</guid>
      <description>&lt;p&gt;
A couple of quick, unrelated packages today.
&lt;/p&gt;
&lt;p&gt;
first up, ibuffer. If you keep Emacs open all the time, you&amp;#39;ll start
to accumulate buffers. Last time, I talked about using &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-33-projectile-jump&#34;&gt;projectile&lt;/a&gt; and
how that can help when navigating between buffers. IBuffer is another
one.
&lt;/p&gt;
&lt;p&gt;
Out of the box, &lt;code&gt;C-x C-b&lt;/code&gt; is bound to the Emacs &lt;strong&gt;&lt;strong&gt;list-buffers&lt;/strong&gt;&lt;/strong&gt;
command. It brings up a buffer with all the buffers listed inside
it. You can navigate that buffer and hit enter on a particular buffer
to go to it. You can also mark buffers and then operate on all the
marked buffers. Hitting &lt;strong&gt;&lt;strong&gt;h&lt;/strong&gt;&lt;/strong&gt; in the list-buffers buffer brings up
more details.
&lt;/p&gt;
&lt;p&gt;
IBuffer is like list-buffers on steroids. It looks much nicer and I
think it has more functionality (again hitting &lt;strong&gt;&lt;strong&gt;h&lt;/strong&gt;&lt;/strong&gt; in the buffer
brings up help).
&lt;/p&gt;
&lt;p&gt;
IBuffer really shines though, once you start customizing it. I found
&lt;a href=&#34;http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html&#34;&gt;this&lt;/a&gt; post by Martin Owen which shows how to customize the way ibuffer
appears. You can group buffers however you want or even omit some from
the listing.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my configuration (mostly stolen from Owen):
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x C-b&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ibuffer&lt;/span&gt;)
(setq ibuffer-saved-filter-groups
(quote ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dired&amp;#34;&lt;/span&gt; (mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; dired-mode))
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org&amp;#34;&lt;/span&gt; (name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^.*org$&amp;#34;&lt;/span&gt;))

(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;web&amp;#34;&lt;/span&gt; (or (mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; web-mode) (mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; js2-mode)))
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt; (or (mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; eshell-mode) (mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; shell-mode)))
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mu4e&amp;#34;&lt;/span&gt; (name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\*mu4e\*&amp;#34;&lt;/span&gt;))
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;programming&amp;#34;&lt;/span&gt; (or
(mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; python-mode)
(mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; c++-mode)))
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emacs&amp;#34;&lt;/span&gt; (or
(name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^\\*scratch\\*$&amp;#34;&lt;/span&gt;)
(name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^\\*Messages\\*$&amp;#34;&lt;/span&gt;)))
))))
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ibuffer-mode-hook&lt;/span&gt;
(lambda ()
(ibuffer-auto-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
(ibuffer-switch-to-saved-filter-groups &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;;; don&amp;#39;t show these&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(add-to-list &amp;#39;ibuffer-never-show-predicates &amp;#34;zowie&amp;#34;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; Don&amp;#39;t show filter groups if there are no buffers in that group&lt;/span&gt;
(setq ibuffer-show-empty-filter-groups &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Don&amp;#39;t ask for confirmation to delete marked buffers&lt;/span&gt;
(setq ibuffer-expert &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video also shows &lt;a href=&#34;https://github.com/smihica/emmet-mode&#34;&gt;emmet&lt;/a&gt; mode. A terrific mode for quickly creating
HTML and CSS. I tried it a long time ago when it was called zencoding
and found it lacking but after watching &lt;a href=&#34;https://www.youtube.com/watch?v=gGPv7jsQGpc&amp;amp;t=329s&#34;&gt;this video&lt;/a&gt; at Build Fun Things
I started playing with it again. It&amp;#39;s a real winner.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the config I&amp;#39;m using:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package emmet-mode
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sgml-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;emmet-mode&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; Auto-start on any markup modes&lt;/span&gt;
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;web-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;emmet-mode&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; Auto-start on any markup modes&lt;/span&gt;
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;css-mode-hook&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;emmet-mode&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; enable Emmet&amp;#39;s css abbreviation.&lt;/span&gt;
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Check them both out:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/yUfA-7wWNKA&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 33 - projectile, dumb-jump</title>
      <link>https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</link>
      <pubDate>Fri, 28 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</guid>
      <description>&lt;p&gt;
If you keep Emacs open all the time you end up accumulating lots of
buffers. That can make navigating a little bit awkward.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;Projectile&lt;/a&gt; is a really nice package that makes navigating in and
between projects much easier. I also have &lt;a href=&#34;https://github.com/ericdanan/counsel-projectile&#34;&gt;counsel-projectile&lt;/a&gt;
installed.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my configuration:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; projectile&lt;/span&gt;
(use-package projectile
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(projectile-global-mode)
(setq projectile-completion-system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ivy&lt;/span&gt;))

(use-package counsel-projectile
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(counsel-projectile-on))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Projectile considers a sub-directory tree to be a project if it&amp;#39;s a
git or other source control repo, if it&amp;#39;s created by tool like lein,
maven, or sbt, or if you put an empty file named &lt;strong&gt;&lt;strong&gt;.projectile&lt;/strong&gt;&lt;/strong&gt; in
the root directory of the project.
&lt;/p&gt;
&lt;p&gt;
Projectile learns about projects when you open a file in that project
and then stores that information in an Emacs bookmark file in your
.emacs.d directory.
&lt;/p&gt;
&lt;p&gt;
You can switch between projects using &lt;code&gt;C-c p&lt;/code&gt; and when in a project,
load another file using &lt;code&gt;C-c f&lt;/code&gt;. If you use the &lt;strong&gt;&lt;strong&gt;which-key&lt;/strong&gt;&lt;/strong&gt; package
as I do, just type &lt;code&gt;C-c&lt;/code&gt; - the projectile prefix and then which-key
will bring up help.
&lt;/p&gt;
&lt;p&gt;
The video goes through some of my favorite features and you can find
the full documentation can be found &lt;a href=&#34;http://projectile.readthedocs.io/en/latest/&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
The other package I show is &lt;a href=&#34;https://github.com/jacktasia/dumb-jump&#34;&gt;dumb-jump&lt;/a&gt;. It&amp;#39;s basically a zero (or
almost zero) configuration tags replacement. Really nice.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my current config:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package dumb-jump
:bind ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-g o&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; dumb-jump-go-other-window)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-g j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; dumb-jump-go)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-g x&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; dumb-jump-go-prefer-external)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-g z&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; dumb-jump-go-prefer-external-other-window))
:config (setq dumb-jump-selector &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ivy&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; (setq dumb-jump-selector &amp;#39;helm)&lt;/span&gt;
:ensure)

:config
&lt;span style=&#34;color:#75715e&#34;&gt;;; (setq dumb-jump-selector &amp;#39;ivy) ;; (setq dumb-jump-selector &amp;#39;helm)&lt;/span&gt;
:init
(dumb-jump-mode)
:ensure
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Enjoy.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wBfZzaff77g&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 32 - C&#43;&#43;</title>
      <link>https://cestlaz.github.io/posts/using-emacs-32-cpp/</link>
      <pubDate>Sat, 04 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-32-cpp/</guid>
      <description>&lt;p&gt;
This video is specifically for my students or any students out there
who are starting with C++ and emacs. The videos also longer than usual, coming in
at a little over 20 minutes.
&lt;/p&gt;
&lt;p&gt;
The big difference is instead of building on my &lt;a href=&#34;https://github.com/zamansky/using-emacs&#34;&gt;existing config&lt;/a&gt;, the
code at the bottom is a complete standalone configuration. It&amp;#39;s all
pulled from the main config with one additional package.
&lt;/p&gt;
&lt;p&gt;
By taking the code at the bottom and putting in into a file named &lt;strong&gt;&lt;strong&gt;init.el&lt;/strong&gt;&lt;/strong&gt; in a
directory off of your home directory named &lt;strong&gt;&lt;strong&gt;.emacs.d&lt;/strong&gt;&lt;/strong&gt; and run emacs,
it will install everything and you&amp;#39;ll be good to go.
&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;ve been following this series, the only new package is &lt;a href=&#34;https://github.com/leoliu/ggtags&#34;&gt;ggtags&lt;/a&gt;
and the configuration code is:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; tags for code navigation&lt;/span&gt;
(use-package ggtags
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c-mode-common-hook&lt;/span&gt;
(lambda ()
(when (derived-mode-p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c-mode&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c++-mode&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;java-mode&lt;/span&gt;)
(ggtags-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
For people new to the series, the top section sets up the emacs
package manager. After that we install:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Package&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;which-key&lt;/td&gt;
&lt;td&gt;brings up contextual key binding help&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;auto-complete&lt;/td&gt;
&lt;td&gt;just as the name says&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flycheck&lt;/td&gt;
&lt;td&gt;in line, live syntax checking&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yasnippet&lt;/td&gt;
&lt;td&gt;snippets and expansion&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ggtags&lt;/td&gt;
&lt;td&gt;source code navigation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;color-theme&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;moe-theme&lt;/td&gt;
&lt;td&gt;just because&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
The video also show me using &lt;strong&gt;&lt;strong&gt;counsel-ag&lt;/strong&gt;&lt;/strong&gt; which is part of the
swiper/counsel package. You can check that out &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-6-swiper&#34;&gt;here&lt;/a&gt; as well as some
other packages I use like &lt;strong&gt;&lt;strong&gt;smartparens&lt;/strong&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;strong&gt;hungry-delete&lt;/strong&gt;&lt;/strong&gt; and
probably a few more.
&lt;/p&gt;
&lt;p&gt;
You can look at my complete configuration or the other videos for
details.
&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re an experienced C++ developer and use emacs, please share
tips, tricks, and suggestions. I haven&amp;#39;t done serious C++ work in over
a decade and while I did professional development in C in a past life,
never in C++.
&lt;/p&gt;
&lt;p&gt;
The packages used here are not C++ specific - I use them for Java,
Python, Clojure, and Javascript development as well.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the configuration code:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; set up package sources&lt;/span&gt;
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package&lt;/span&gt;)
(setq package-enable-at-startup &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package-archives&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;melpa&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://melpa.org/packages/&amp;#34;&lt;/span&gt;))
(package-initialize)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Bootstrap `use-package&amp;#39;&lt;/span&gt;
(unless (package-installed-p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package&lt;/span&gt;)
(package-refresh-contents)
(package-install &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;;; small interface tweaks&lt;/span&gt;
(setq inhibit-startup-message &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(tool-bar-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;fset&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yes-or-no-p&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y-or-n-p&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f5&amp;gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;revert-buffer&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; bring up help for key bindings&lt;/span&gt;
(use-package which-key
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(which-key-mode))


&lt;span style=&#34;color:#75715e&#34;&gt;;; Auto completion&lt;/span&gt;
(use-package auto-complete
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(progn
(ac-config-default)
(global-auto-complete-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
))


&lt;span style=&#34;color:#75715e&#34;&gt;;; on the fly syntax checking&lt;/span&gt;
(use-package flycheck
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(global-flycheck-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;;; snippets and snippet expansion&lt;/span&gt;
(use-package yasnippet
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(yas-global-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))


&lt;span style=&#34;color:#75715e&#34;&gt;;; tags for code navigation&lt;/span&gt;
(use-package ggtags
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c-mode-common-hook&lt;/span&gt;
(lambda ()
(when (derived-mode-p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c-mode&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c++-mode&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;java-mode&lt;/span&gt;)
(ggtags-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))
)


&lt;span style=&#34;color:#75715e&#34;&gt;;; Theme&lt;/span&gt;
(use-package color-theme
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(use-package moe-theme
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(moe-light)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/7SQmleA4EMo&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Enjoy.
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 31 - elfeed part 3 - macros</title>
      <link>https://cestlaz.github.io/posts/using-emacs-31-elfeed-3/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-31-elfeed-3/</guid>
      <description>&lt;p&gt;
In &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-30-elfeed-2&#34;&gt;part 2&lt;/a&gt; I talked about how I used &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;Hyrdas&lt;/a&gt; to quickly navigate through
elfeed tags. It was a nice step up but the fact that I still had to
manually edit my configuration code for every new tag to update the
hydra was a problem.
&lt;/p&gt;
&lt;p&gt;
Basically, I had to somehow or other, take a list of all the active
tags and with it build a &lt;strong&gt;&lt;strong&gt;defhydra&lt;/strong&gt;&lt;/strong&gt; command that will then make my
Hydra.
&lt;/p&gt;
&lt;p&gt;
Fortunately, emacs, being a lisp, has macros. I&amp;#39;m not talking about
keyboard macros which I talked about in &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-15-macros/#.WLbj5t9idKQ&#34;&gt;episode 15&lt;/a&gt; but rather &lt;a href=&#34;http://wiki.c2.com/?LispMacro&#34;&gt;Lisp
style macros&lt;/a&gt;. Macros let you transform code and then execute the
transformed code.
&lt;/p&gt;
&lt;p&gt;
The example I give in the video:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defmacro infix (a op b)
&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;op &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;b))

(infix &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; evaluates to 11&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This transforms the &lt;strong&gt;&lt;strong&gt;3+8&lt;/strong&gt;&lt;/strong&gt; into &lt;strong&gt;&lt;strong&gt;(+ 3 8)&lt;/strong&gt;&lt;/strong&gt; and then evaluates it to
be 11.
&lt;/p&gt;
&lt;p&gt;
We can use this idea with our Hydra.
&lt;/p&gt;
&lt;p&gt;
We can use the call &lt;strong&gt;&lt;strong&gt;elfeed-db-get-all-tags&lt;/strong&gt;&lt;/strong&gt; to get a list of all
the tags in our database. I decided that if I had an uppercase letter
in the tag, I&amp;#39;d use the lowercase version of that letter as my &amp;#34;hotkey&amp;#34;
and if it didn&amp;#39;t, I&amp;#39;d just use the first letter.
&lt;/p&gt;
&lt;p&gt;
So, given a tag list of:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(active blogs cs eDucation emacs local misc sports star tech unread webcomics)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I&amp;#39;d want a &amp;#34;hotkey&amp;#34; of &lt;strong&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/strong&gt; for logs and &lt;strong&gt;&lt;strong&gt;d&lt;/strong&gt;&lt;/strong&gt; for eDucation.
&lt;/p&gt;
&lt;p&gt;
The routine &lt;strong&gt;&lt;strong&gt;z/hasCap&lt;/strong&gt;&lt;/strong&gt; tests to see if a tag has a capital letter in
it and &lt;strong&gt;&lt;strong&gt;z/get-hydra-option-key&lt;/strong&gt;&lt;/strong&gt; returns the final &amp;#34;hotkey:&amp;#34;
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun z/hasCap (s) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
(let ((case-fold-search &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))
(string-match-p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[[:upper:]]&amp;#34;&lt;/span&gt; s)
))


(defun z/get-hydra-option-key (s)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;returns single upper case letter (converted to lower) or first&amp;#34;&lt;/span&gt;
(interactive)
(let ( (loc (z/hasCap s)))
(if loc
(&lt;span style=&#34;color:#a6e22e&#34;&gt;downcase&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;substring&lt;/span&gt; s loc (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; loc &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;substring&lt;/span&gt; s &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;mz/make-elfeed-cats&lt;/strong&gt;&lt;/strong&gt; takes a list of tags and returns a list of
items where each item is in the form expected by the hydra definition:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +tagname&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tagname&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun mz/make-elfeed-cats (tags)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Returns a list of lists. Each one is line for the hydra configuratio in the form
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(c function hint)&amp;#34;&lt;/span&gt;
(interactive)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;mapcar&lt;/span&gt; (lambda (tag)
(let* (
(tagstring (&lt;span style=&#34;color:#a6e22e&#34;&gt;symbol-name&lt;/span&gt; tag))
(c (z/get-hydra-option-key tagstring))
)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; c (&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(elfeed-search-set-filter) (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +%s&amp;#34;&lt;/span&gt; tagstring) ))tagstring  )))
tags))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Finally, here&amp;#39;s our macro:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defmacro mz/make-elfeed-hydra ()
&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(defhydra mz/hydra-elfeed ()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filter&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;,@&lt;/span&gt;(mz/make-elfeed-cats (elfeed-db-get-all-tags))
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +star&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starred&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt; elfeed-toggle-star &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mark&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@1-day-ago&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Today&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt; bjm/elfeed-save-db-and-bury &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Quit Elfeed&amp;#34;&lt;/span&gt; :color blue)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quit&amp;#34;&lt;/span&gt; :color blue)
))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The line that starts with &lt;strong&gt;&lt;strong&gt;,@&lt;/strong&gt;&lt;/strong&gt; calls the routine that builds lines
of code for all the tags in the database and the macro leaves me with
the defhydra I need.
&lt;/p&gt;
&lt;p&gt;
I then redefine the hydra every time I need it, just in case tags
changed:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun mz/make-and-run-elfeed-hydra ()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
(interactive)
(mz/make-elfeed-hydra)
(mz/hydra-elfeed/body))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and bind &lt;strong&gt;&lt;strong&gt;mz/make-and-run-elfeed-hydra&lt;/strong&gt;&lt;/strong&gt; to j and J in my elfeed
keymap (this code goes in the bind section of my use-package elfeed
section):
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; mz/make-and-run-elfeed-hydra)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; mz/make-and-run-elfeed-hydra)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
As long as I remember to name my tags in a way that they don&amp;#39;t
conflict with one another I can quickly navigate all around elfeed.
&lt;/p&gt;
&lt;p&gt;
Macros FTW!!!!
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the video:
&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/5zuSUbAHH8c&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Enjoy.
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 30 - elfeed part 2 - Hydras</title>
      <link>https://cestlaz.github.io/posts/using-emacs-30-elfeed-2/</link>
      <pubDate>Sat, 25 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-30-elfeed-2/</guid>
      <description>&lt;p&gt;
In &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-29%2520elfeed/&#34;&gt;part 1&lt;/a&gt;, I talked about &lt;a href=&#34;https://github.com/skeeto/elfeed&#34;&gt;elfeed&lt;/a&gt;, a really awesome feed reader for
emacs. Generally, I&amp;#39;m really liking it but there&amp;#39;s been one problem -
not being able to navigate quickly between groups of feeds with a
keystroke or two.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s emacs so there has to be a solution.
&lt;/p&gt;
&lt;p&gt;
Enter &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;hydra&lt;/a&gt; - a terrific emacs package from the same guy who brought
us &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;swiper&lt;/a&gt;, another one of my favorite emacs packages.
&lt;/p&gt;
&lt;p&gt;
Basically, Hydra allows us to create Hydras - a collection of emacs
commands tied o a single prefix along with a nice interface and help
system.
&lt;/p&gt;
&lt;p&gt;
Truth be told, I don&amp;#39;t use hydra as much anymore since &lt;a href=&#34;https://github.com/justbur/emacs-which-key&#34;&gt;which-key&lt;/a&gt;
does such a great job most of the time. Which-key, however, is no help
here.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the code to install hydra along with a some of sample Hydra&amp;#39;s
I use:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package hydra
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Hydra for modes that toggle on and off&lt;/span&gt;
(global-set-key
(kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x t&amp;#34;&lt;/span&gt;)
(defhydra toggle (:color blue)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;toggle&amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; abbrev-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abbrev&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; flyspell-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flyspell&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt; toggle-debug-on-error &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;debug&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; fci-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fCi&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;f&amp;#34;&lt;/span&gt; auto-fill-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fill&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; toggle-truncate-lines &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;truncate&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt; whitespace-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;whitespace&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cancel&amp;#34;&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;;; Hydra for navigation&lt;/span&gt;
(global-set-key
(kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x j&amp;#34;&lt;/span&gt;)
(defhydra gotoline
( :pre (linum-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
:post (linum-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;))
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;goto&amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; (lambda () (interactive)(move-to-window-line-top-bottom &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; (lambda () (interactive)(move-to-window-line-top-bottom &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bottom&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt; (lambda () (interactive)(move-to-window-line-top-bottom)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;middle&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt; (lambda () (interactive)(end-of-buffer)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; recenter-top-bottom &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;recenter&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt; next-line &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;down&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt; (lambda () (interactive) (&lt;span style=&#34;color:#a6e22e&#34;&gt;forward-line&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;))  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;up&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt; goto-line &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;goto-line&amp;#34;&lt;/span&gt;)
))

&lt;span style=&#34;color:#75715e&#34;&gt;;; Hydra for some org-mode stuff&lt;/span&gt;
(global-set-key
(kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c t&amp;#34;&lt;/span&gt;)
(defhydra hydra-global-org (:color blue)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Org&amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; org-timer-start &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Start Timer&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; org-timer-stop &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Stop Timer&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt; org-timer-set-timer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set Timer&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; This one requires you be in an orgmode doc, as it sets the timer for the header&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt; org-timer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Print Timer&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; output timer value to buffer&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt; (org-clock-in &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clock-In&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt; org-clock-out &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clock-Out&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; you might also want (setq org-log-note-clock-out t)&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; org-clock-goto &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clock Goto&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; global visit the clocked task&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; org-capture &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Capture&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; Don&amp;#39;t forget to define the captures you want http://orgmode.org/manual/Capture.html&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; (or )rg-capture-goto-last-stored &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Last Capture&amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Take a look at the &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;Hydra&lt;/a&gt; home page for detailed information.
&lt;/p&gt;
&lt;p&gt;
With Hydra installed, I can creat one for navigating in elfeed:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(defhydra mz/hydra-elfeed ()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filter&amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +cs&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cs&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +emacs&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emacs&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +education&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;education&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +star&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starred&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt; elfeed-toggle-star &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mark&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@1-day-ago&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Today&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt; bjm/elfeed-save-db-and-bury &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Quit Elfeed&amp;#34;&lt;/span&gt; :color blue)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quit&amp;#34;&lt;/span&gt; :color blue)
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and add a binding to the elfeed key map:
&lt;/p&gt;
&lt;p&gt;
#+BEGIN_SRC emacs-lisp
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package elfeed
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:bind (:map elfeed-search-mode-map
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; bjm/elfeed-save-db-and-bury)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; bjm/elfeed-save-db-and-bury)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-toggle-star)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-toggle-star)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; mz/hydra-elfeed/body)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; mz/hydra-elfeed/body)))

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;+End_SRC

This isn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t&lt;/span&gt; the actual Hydra I use -- we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt; to that in the next
installment where I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll&lt;/span&gt; show how to make a Hydra on the fly that
contains keys for all your elfeed tags but this is a reasonable example.

Here&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s&lt;/span&gt; the video:

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;+begin_export html
 &amp;lt;iframe width=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;560&amp;#34;&lt;/span&gt; height=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;315&amp;#34;&lt;/span&gt; src=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.youtube.com/embed/tjnK1rkO7RU&amp;#34;&lt;/span&gt; frameborder=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
 &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;+end_export html
 

Enjoy.
Relevant links:
&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; Video series overview page:
&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; http://cestlaz.github.io/stories/emacs
&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; Code:
&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; [[https://github.com/zamansky/using-emacs/tree/master][https://github.com/zamansky/using-emacs/tree/master]]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 29 -elfeed part 1</title>
      <link>https://cestlaz.github.io/posts/using-emacs-29-elfeed/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-29-elfeed/</guid>
      <description>&lt;p&gt;
Since the demise of Google Reader, I&amp;#39;ve been using &lt;a href=&#34;http://feedly.com&#34;&gt;Feedly&lt;/a&gt; to read my
streams. Feedly&amp;#39;s a nice product and it&amp;#39;s been working well for me for
quite some time.
&lt;/p&gt;
&lt;p&gt;
A few days ago, I decided to see what emacs had to offer on the feed
reader front. One solution was Gnus but then I&amp;#39;ve never been able to
get my head around Gnus. Another was &lt;a href=&#34;https://github.com/skeeto/elfeed&#34;&gt;elfeed&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I thought I&amp;#39;d give elfeed a go.
&lt;/p&gt;
&lt;p&gt;
Combined with elfeed-goodies and elfeed-org it&amp;#39;s a pretty nice
solution. You can easily search by either keywords or tags and tags
are particularly easy to set up with elfeed-org.
&lt;/p&gt;
&lt;p&gt;
If I want to display all the items from the last month, I hit &lt;strong&gt;&lt;strong&gt;s&lt;/strong&gt;&lt;/strong&gt; (for
search) and enter the query:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;@6-months-ago&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
For only unread posts:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;@6-months-ago +unread&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
For unread posts tagged emacs:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;@6-months-ago +unread +emacs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And for everything in the past 24 hours, read or not:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;@1-day-ago&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It&amp;#39;s pretty easy and pretty slick. The only thing missing is easy
single key navigation. There&amp;#39;s one solution to that problem over at
&lt;a href=&#34;http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/&#34;&gt;Pragmatic Emacs&lt;/a&gt; and I&amp;#39;ll present another one in the next two posts.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m using some of the code from pragmatic emacs (the functions that start
with &lt;strong&gt;&lt;strong&gt;bjm&lt;/strong&gt;&lt;/strong&gt;) which makes things easier when sharing the elfeed
database on Dropbox (see the Pragmatic Emacs post above for details) and also a couple of routines I found via web
search).
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my basic configuration:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq elfeed-db-directory &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/shared/elfeeddb&amp;#34;&lt;/span&gt;)


(defun elfeed-mark-all-as-read ()
(interactive)
(mark-whole-buffer)
(elfeed-search-untag-all-unread))


&lt;span style=&#34;color:#75715e&#34;&gt;;;functions to support syncing .elfeed between machines&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;makes sure elfeed reads index from disk before launching&lt;/span&gt;
(defun bjm/elfeed-load-db-and-open ()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrapper to load the elfeed db from disk before opening&amp;#34;&lt;/span&gt;
(interactive)
(elfeed-db-load)
(elfeed)
(elfeed-search-update--force))

&lt;span style=&#34;color:#75715e&#34;&gt;;;write to disk when quiting&lt;/span&gt;
(defun bjm/elfeed-save-db-and-bury ()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrapper to save the elfeed db to disk before burying buffer&amp;#34;&lt;/span&gt;
(interactive)
(elfeed-db-save)
(quit-window))



(defalias &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elfeed-toggle-star&lt;/span&gt;
(elfeed-expose &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;elfeed-search-toggle-all &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;star&lt;/span&gt;))

(use-package elfeed
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:bind (:map elfeed-search-mode-map
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; bjm/elfeed-save-db-and-bury)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; bjm/elfeed-save-db-and-bury)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-toggle-star)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-toggle-star)
)
)

(use-package elfeed-goodies
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(elfeed-goodies/setup))


(use-package elfeed-org
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(elfeed-org)
(setq rmh-elfeed-org-files (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/shared/elfeed.org&amp;#34;&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Check out elfeed and make sure to go to the links provided on the main
&lt;a href=&#34;https://github.com/skeeto/elfeed&#34;&gt;elfeed&lt;/a&gt; page.
&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pOFqzK1Ymr4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Enjoy.
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 28 -Rectangles</title>
      <link>https://cestlaz.github.io/posts/using-emacs-28-rectangles/</link>
      <pubDate>Thu, 09 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-28-rectangles/</guid>
      <description>&lt;p&gt;
One of my favorite but little used emacs features is rectangular
editing. It&amp;#39;s little used because I don&amp;#39;t need it all that often. It&amp;#39;s
one of my favorites because when I do need it, it&amp;#39;s just so amazingly
useful.
&lt;/p&gt;
&lt;p&gt;
The idea is you can mark a rectangle of text, cut it and later paste
it.  This means that if you have three columns of text:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
a b c
d e f
g h i
j k l
&lt;/pre&gt;
&lt;p&gt;
You can easily mark the middle column (b e h k) or even just the b e
and h, cut it and paste it elsewhere as a rectangle. You can also open
up a rectangular region (filled with whitespace). There are a couple
of other niceties but that&amp;#39;s the basic idea.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a link to all the functions:
&lt;/p&gt;
&lt;p&gt;
https://www.gnu.org/software/emacs/manual/html_node/emacs/Rectangles.html
&lt;/p&gt;
&lt;p&gt;
And the video:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pcA5NeEudgU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Enjoy.
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 27 - shell and eshell</title>
      <link>https://cestlaz.github.io/posts/using-emacs-27-shell/</link>
      <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-27-shell/</guid>
      <description>&lt;p&gt;
While I use emacs for all all sorts of things, one of the things I
haven&amp;#39;t done much is run shells from within emacs. I&amp;#39;m not sure
why. I&amp;#39;m a command line wonk and adding command line goodness and
emacs together seems like a natural. Maybe it&amp;#39;s because back in the
day I spent a lot of time on MS-DOS systems. You could get a
reasonable Unixy facsimile using tools like the &lt;a href=&#34;https://en.wikipedia.org/wiki/MKS_Toolkit&#34;&gt;MKS toolkit&lt;/a&gt; and I like
so many other young computer scientists wrote our own small shells
when we learned C so I used that insted of command.com.
&lt;/p&gt;
&lt;p&gt;
In any event, I&amp;#39;m trying to use the shell within emacs more.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a quick video showing both &lt;strong&gt;&lt;strong&gt;shell&lt;/strong&gt;&lt;/strong&gt;, which runs whatever your
default shell is in an emacs buffer and &lt;strong&gt;&lt;strong&gt;eshell&lt;/strong&gt;&lt;/strong&gt; which is emacs own
shell.
&lt;/p&gt;
&lt;p&gt;
I use a couple of packages to smooth over a couple of things.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/porterjamesj/virtualenvwrapper.el&#34;&gt;Virtuelenvwrapper&lt;/a&gt; smooths things voer with the python virtaulenv and
virtualenvwrapper linux packages:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package virtualenvwrapper
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(venv-initialize-interactive-shells)
(venv-initialize-eshell))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Only relevant if you use Python and virtualenvs.
&lt;/p&gt;
&lt;p&gt;
and more importantly, &lt;a href=&#34;https://github.com/killdash9/better-shell&#34;&gt;better shell&lt;/a&gt;:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package better-shell
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:bind ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; better-shell-shell)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; better-shell-remote-open)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
cleans things up when using a termianl to connect to a remote machine.
&lt;/p&gt;
&lt;p&gt;
If you use a shell from within emacs as part of your workflow, please
post how, or better, make a video!!!!
&lt;/p&gt;
&lt;p&gt;
Enjoy
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pjhRFMUxBB4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 26 - Google Calendar, Org Agenda</title>
      <link>https://cestlaz.github.io/posts/using-emacs-26-gcal/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-26-gcal/</guid>
      <description>&lt;p&gt;
A while ago I did a couple of videos on how I use org-capture
(&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-23-capture-1/&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-24-capture-2/&#34;&gt;part 2&lt;/a&gt;). I didn&amp;#39;t get into a big part of org-capture - how I
use org-mode and capture to manage my calendar and todo lists.
&lt;/p&gt;
&lt;p&gt;
I was waiting to see if I liked my current setup - using &lt;a href=&#34;https://github.com/myuhe/org-gcal.el&#34;&gt;org-gcal&lt;/a&gt; to
sync with my Google Calendar for appointments while using my main org
file for my todo list.
&lt;/p&gt;
&lt;p&gt;
Coincidentally, Rainer König recently put up a video on how he &lt;a href=&#34;https://www.youtube.com/watch?v=cIzzjSaq2N8&amp;amp;amp;list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE&amp;amp;amp;index=33&#34;&gt;syncs
with his Google calendar&lt;/a&gt;. He uses a different method than the one I
present in this video so make sure to check out his approach. In fact,
you should check out his entire &lt;a href=&#34;https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE&#34;&gt;series on org-mode&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the code I use install org-gcal. The video steps through
setting up things on the Google side. You&amp;#39;ll have to replace the
&lt;strong&gt;&lt;strong&gt;client ID&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;client secrets&lt;/strong&gt;&lt;/strong&gt; in the code below as well as use
your calendar name and whatever org file you want to sync with.
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq package-check-signature &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)


(use-package org-gcal
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(setq org-gcal-client-id &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;oauth 2.0 client ID&amp;#34;&lt;/span&gt;
org-gcal-client-secret &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client secret&amp;#34;&lt;/span&gt;
org-gcal-file-alist &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zamansky@gmail.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/gcal.org&amp;#34;&lt;/span&gt;))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I use these two hooks to sync things semi-automatically. The first
hook syncs whenever I load the agenda. Since this happens in the
background, if I just added something to my calendar, I might have to
reload the agenda by hitting &lt;strong&gt;&lt;strong&gt;r&lt;/strong&gt;&lt;/strong&gt; in the agenda view.
&lt;/p&gt;
&lt;p&gt;
The second hook syncs with my Google calendar when I capture.
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-agenda-mode-hook&lt;/span&gt; (lambda () (org-gcal-sync) ))
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-capture-after-finalize-hook&lt;/span&gt; (lambda () (org-gcal-sync) ))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Here are the rest of my settings. The org files I want to include in
my agenda views:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
gcal.org – the one I&amp;#39;m syncing
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
i.org – my main org file for todo items (the todo capture places
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
things in here)
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
schedule.org – my old schedule before I was syncing with
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Google. Not active anymore. I should probably remove it.
&lt;/p&gt;
&lt;p&gt;
Also, my capture settings:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-agenda-files (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/gcal.org&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/schedule.org&amp;#34;&lt;/span&gt;))


(setq org-capture-templates
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Appointment&amp;#34;&lt;/span&gt; entry (file  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/gcal.org&amp;#34;&lt;/span&gt; )
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Link&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/links.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Links&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %? %^L %^g \n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog idea&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog Topics:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;To Do Item&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;To Do&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* TODO %?\n%u&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Note&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Note space&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%u&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Journal&amp;#34;&lt;/span&gt; entry (file+datetree &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/journal.org&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\nEntered on %U\n  %i\n  %a&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Screencast&amp;#34;&lt;/span&gt; entry (file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/screencastnotes.org&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%i\n&amp;#34;&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The end result is that I can add an event in my Google calendar (or
accept a calendar invite) and it appears in my org-mode
agenda. Likewise, I can add a scheduled event using capture and it
will sync up to Google. I can also just add an event by editing
gcal.org but then would have to run &lt;strong&gt;&lt;strong&gt;org-gcal-post-at-point&lt;/strong&gt;&lt;/strong&gt; to send
it up to Google.
&lt;/p&gt;
&lt;p&gt;
Now, I can use bring up a regular agenda &lt;strong&gt;&lt;strong&gt;C-a a&lt;/strong&gt;&lt;/strong&gt;, my todo list &lt;strong&gt;&lt;strong&gt;C-a
t&lt;/strong&gt;&lt;/strong&gt; or by adding a custom agenda command:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-agenda-custom-commands
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Simple agenda view&amp;#34;&lt;/span&gt;
((agenda &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
(alltodo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
a combined agenda and todo view using &lt;strong&gt;&lt;strong&gt;C-a n&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
Finally, there&amp;#39;s &lt;a href=&#34;https://github.com/kiwanami/emacs-calfw&#34;&gt;calfw&lt;/a&gt;. It&amp;#39;s a nice tool to view calendars in
Google. I don&amp;#39;t use it much anymore but it is nice:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package calfw
:ensure &lt;span style=&#34;color:#75715e&#34;&gt;;TODO:&lt;/span&gt;
:config
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;calfw&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;calfw-org&lt;/span&gt;)
(setq cfw:org-overwrite-default-keybinding &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;calfw-ical&lt;/span&gt;)

(defun mycalendar ()
(interactive)
(cfw:open-calendar-buffer
:contents-sources
(&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; (cfw:org-create-source &amp;#34;Green&amp;#34;)  ; orgmode source&lt;/span&gt;
(cfw:ical-create-source &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gcal&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://somecalnedaraddress&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IndianRed&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; devorah calender&lt;/span&gt;
(cfw:ical-create-source &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gcal&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://anothercalendaraddress&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IndianRed&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; google calendar ICS&lt;/span&gt;
)))
(setq cfw:org-overwrite-default-keybinding &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))

(use-package calfw-gcal
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;calfw-gcal&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;p&gt;
Better version:
&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/vO_RF2dK7M0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Old, bad version:
&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/RyNBtfu9AJ4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 25 - Tramp</title>
      <link>https://cestlaz.github.io/posts/using-emacs-25-tramp/</link>
      <pubDate>Mon, 26 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-25-tramp/</guid>
      <description>&lt;p&gt;
Today&amp;#39;s video talks about using emacs &lt;a href=&#34;https://www.emacswiki.org/emacs/TrampMode&#34;&gt;Tramp&lt;/a&gt; mode.
&lt;/p&gt;
&lt;p&gt;
Tramp mode allows you to edit remote files using your local emacs. I usually do this over ssh.
&lt;/p&gt;
&lt;p&gt;
To edit a file on a machine &lt;strong&gt;&lt;strong&gt;www.cstuy.org&lt;/strong&gt;&lt;/strong&gt; I would first
&lt;strong&gt;&lt;strong&gt;find-file&lt;/strong&gt;&lt;/strong&gt; using &lt;strong&gt;&lt;strong&gt;C-c C-f&lt;/strong&gt;&lt;/strong&gt; and then for the file name to open:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;/ssh:www.cstuy.org:/home/zamansky/sc/testfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
this would open the file &lt;strong&gt;&lt;strong&gt;testfile&lt;/strong&gt;&lt;/strong&gt; in the absolute directory
&lt;strong&gt;&lt;strong&gt;/home/zamansky/sc&lt;/strong&gt;&lt;/strong&gt;. If my username on the remote machine is
different:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;/ssh:username@www.cstuy.org:/home/zamansky/sc/testfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And I can also work relative to my home directory:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;/ssh:username@www.cstuy.org:sc/testfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
If I just hit enter after the machine name and &lt;strong&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/strong&gt; -
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;/ssh:username@www.cstuy.org:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I end up in a dired buffer on the remote machine.
&lt;/p&gt;
&lt;p&gt;
Likewise if I run a &lt;strong&gt;&lt;strong&gt;shell&lt;/strong&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;strong&gt;eshell&lt;/strong&gt;&lt;/strong&gt; in the tramp buffer, it
will run the shell on the remote machine. In the video I showed how
shell didn&amp;#39;t work because locally, I&amp;#39;m configured to use zsh and I
don&amp;#39;t have zsh installed remotely. Eshell, however, worked fine.
&lt;/p&gt;
&lt;p&gt;
Using tramp in this way gives us all of the power of our local emacs
configuration to edit a file on a remote machine.
&lt;/p&gt;
&lt;p&gt;
You can also use tramp to edit local files as root using sudo:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;sudo::/tmp/sc/rootfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Note the double colon.
&lt;/p&gt;
&lt;p&gt;
Finally, you can do the double-whammy - remote root editing:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;ssh::www.cstu.org|sudo:www.cstuy.org:/home/zamansky/sc/rootfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
If you use zsh and any of this freezes, just do a search on &amp;#34;zsh
tramp&amp;#34; and the top couple of hits will tell you what to add to your
configuration files to fix things.
&lt;/p&gt;
&lt;p&gt;
Finally, I mentioned in the video that I don&amp;#39;t use tramp all that much
anymore. That&amp;#39;s mostly because I don&amp;#39;t do much remote editing
anymore. I used it more when I was administering a number of machines
at Stuyvesant.
&lt;/p&gt;
&lt;p&gt;
I still use it periodically, but I also use &lt;a href=&#34;https://github.com/libfuse/sshfs&#34;&gt;sshfs&lt;/a&gt;, a Linux tool (which
may be available for other operating systems) that allows me to mount
a directory tree from a remote machine and use it on my local machine.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Iqh50fgbIVk&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 24 - Org Capture 2</title>
      <link>https://cestlaz.github.io/posts/using-emacs-24-capture-2/</link>
      <pubDate>Sat, 03 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-24-capture-2/</guid>
      <description>&lt;p&gt;
Not much in today&amp;#39;s actual post. The video is a continuation of the last one on &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-23-capture-1&#34;&gt;org-capture&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
The video goes over how I set things up to pop up a new frame to do a
capture even if emacs isn&amp;#39;t on screen (as long as it&amp;#39;s running) by
hitting &lt;strong&gt;&lt;strong&gt;F1&lt;/strong&gt;&lt;/strong&gt;. I would  have preferred to bind to &lt;strong&gt;&lt;strong&gt;C-c c&lt;/strong&gt;&lt;/strong&gt; - the
same as within emacs but I havn&amp;#39;t figured out how to do that in Ubuntu
or Mint Linux yet.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the elisp code for the configuration file to do the heavy
lifting. I can&amp;#39;t for th elife of me remember who&amp;#39;s blog I found it
on. If anyone knows, please leave a comment - I&amp;#39;d like to give credit
where credit&amp;#39;s due:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defadvice org-capture-finalize
(after delete-capture-frame activate)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Advise capture-finalize to close the frame&amp;#34;&lt;/span&gt;
(if (&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;capture&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;frame-parameter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&lt;/span&gt;))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;delete-frame&lt;/span&gt;)))

(defadvice org-capture-destroy
(after delete-capture-frame activate)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Advise capture-destroy to close the frame&amp;#34;&lt;/span&gt;
(if (&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;capture&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;frame-parameter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&lt;/span&gt;))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;delete-frame&lt;/span&gt;)))

(use-package noflet
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; )
(defun make-capture-frame ()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Create a new frame and run org-capture.&amp;#34;&lt;/span&gt;
(interactive)
(make-frame &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;capture&amp;#34;&lt;/span&gt;)))
(select-frame-by-name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;capture&amp;#34;&lt;/span&gt;)
(delete-other-windows)
(noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
(org-capture)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The command I bind to the keyboard shortcut in my window manager:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;emacsclient -ne &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(make-capture-frame)&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
There will be a third capture video in a few weeks where I&amp;#39;ll talk
about scheduling and agendas. Right now, I&amp;#39;m playing with org-gcal to
sync with my Google calendar and want to figure out a config I&amp;#39;m happy
with before making that video.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/gjr9mP01oWE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 23 - Org Capture 1</title>
      <link>https://cestlaz.github.io/posts/using-emacs-23-capture-1/</link>
      <pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-23-capture-1/</guid>
      <description>&lt;p&gt;
Org mode has an amazing feature - &lt;strong&gt;&lt;strong&gt;org-capture&lt;/strong&gt;&lt;/strong&gt;. I only started
using it recently but it&amp;#39;s really awesome.
&lt;/p&gt;
&lt;p&gt;
What took me so long?
&lt;/p&gt;
&lt;p&gt;
Probably that the manual seemed a little intimidating.
&lt;/p&gt;
&lt;p&gt;
It really isn&amp;#39;t hard, though. Combined with what I&amp;#39;ll go over in the
next video and post (and a future one for Google calendar sync) it&amp;#39;s
what I use for:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
recording blog ideas
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
managing bookmarks
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
taking short Notes
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
managing my calendar.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I use the binding:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c c&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-capture&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
By default, running org-capture brings up a form to capture a &amp;#34;task&amp;#34;
but things get really cool when you start making your own capture
templates. With capture templates, you can speed up recording
information and then tell org-mode to store it where you want it.
&lt;/p&gt;
&lt;p&gt;
Here are my template settings.
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-capture-templates
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Appointment&amp;#34;&lt;/span&gt; entry (file  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/gcal.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Appointments&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Note&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/notes.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Notes&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* Note %?\n%T&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Link&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/links.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Links&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %? %^L %^g \n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog idea&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog Topics:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;To Do Item&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;To Do Items&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Journal&amp;#34;&lt;/span&gt; entry (file+datetree &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/journal.org&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\nEntered on %U\n  %i\n  %a&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Screencast&amp;#34;&lt;/span&gt; entry (file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/screencastnotes.org&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%i\n&amp;#34;&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Let&amp;#39;s look at the &lt;strong&gt;&lt;strong&gt;Blog&lt;/strong&gt;&lt;/strong&gt; entry:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog idea&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog Topics:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It&amp;#39;s a list with a bunch of options. The first string &lt;strong&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/strong&gt; is the
key to type to select this template, &lt;strong&gt;&lt;strong&gt;Blog idea&lt;/strong&gt;&lt;/strong&gt; is the actual name
for this template.
&lt;/p&gt;
&lt;p&gt;
The next item, &lt;strong&gt;&lt;strong&gt;entry&lt;/strong&gt;&lt;/strong&gt; describes the type of template you&amp;#39;re
creating. &lt;strong&gt;&lt;strong&gt;entry&lt;/strong&gt;&lt;/strong&gt; says you&amp;#39;re going to create an org node with a
headline which can then be added to an org-file. You can also have
your template create things like an org list &lt;strong&gt;&lt;strong&gt;item&lt;/strong&gt;&lt;/strong&gt; a checkbox
&lt;strong&gt;&lt;strong&gt;checkitem&lt;/strong&gt;&lt;/strong&gt; or even &lt;strong&gt;&lt;strong&gt;plain&lt;/strong&gt;&lt;/strong&gt; text. You can see the full set of
options &lt;a href=&#34;http://orgmode.org/manual/Template-elements.html#Template-elements&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Next, in parentheses, you have the target - where to store the captured
info. The &lt;strong&gt;&lt;strong&gt;Blog idea&lt;/strong&gt;&lt;/strong&gt; template says &lt;strong&gt;&lt;strong&gt;file+headline&lt;/strong&gt;&lt;/strong&gt; followed by a
filename in quotes and a headline in quotes. This says to store the
new org heading you&amp;#39;re capturing in the file
&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34; under the heading &amp;#34;Blog Topics:&amp;#34; Contrast
this to the &lt;strong&gt;&lt;strong&gt;appointments&lt;/strong&gt;&lt;/strong&gt; template which just specifies &lt;strong&gt;&lt;strong&gt;file&lt;/strong&gt;&lt;/strong&gt;
and a filename. The &lt;strong&gt;&lt;strong&gt;appointments&lt;/strong&gt;&lt;/strong&gt; template will just append the new
appointment to its specified file whereas &lt;strong&gt;&lt;strong&gt;Blog idea&lt;/strong&gt;&lt;/strong&gt; will prepend
(due to the &lt;strong&gt;&lt;strong&gt;:prepend&lt;/strong&gt;&lt;/strong&gt; option at the end of the template) to the
&amp;#34;Blog Topics:&amp;#34; heading in &lt;strong&gt;&lt;strong&gt;i.org&lt;/strong&gt;&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
After this we have the actual template: &amp;#34;* %?\n%T&amp;#34; - the %? and %T are
placeholders for substitutions. The &lt;strong&gt;&lt;strong&gt;%T&lt;/strong&gt;&lt;/strong&gt; prompts for a date with a
timestamp and the &lt;strong&gt;&lt;strong&gt;%?&lt;/strong&gt;&lt;/strong&gt; is where to leave the cursor for final input
before saving the capture.
&lt;/p&gt;
&lt;p&gt;
Finally, &lt;strong&gt;&lt;strong&gt;:prepend&lt;/strong&gt;&lt;/strong&gt; and other options can be found at the above link.
&lt;/p&gt;
&lt;p&gt;
All the substitutions can be found in &lt;a href=&#34;http://orgmode.org/manual/Template-expansion.html#Template-expansion&#34;&gt;the docs&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Once you&amp;#39;ve set up your templates, it&amp;#39;s quick and easy to capture
information.
&lt;/p&gt;
&lt;p&gt;
This video shows the basics. The next one shows how to pop up a
capture even when you&amp;#39;re not in emacs and how I use org-capture to
maintain my web bookmarks.
&lt;/p&gt;
&lt;p&gt;
More information on capture templates can be found &lt;a href=&#34;http://orgmode.org/manual/Capture-templates.html&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/-wPfxuxIfeU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 21 - web mode</title>
      <link>https://cestlaz.github.io/posts/using-emacs-21-web-mode/</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-21-web-mode/</guid>
      <description>&lt;p&gt;
Quick post today.
&lt;/p&gt;
&lt;p&gt;
The video goes over web-mode - my preferred weapon for html and all the goodies you embed in an html file.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s multi-modal so it acts sensibly regardless of wether you&amp;#39;re editing html, css, javascript or even templates in a single file.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/strong&gt; In the video, web-mode wasn&amp;#39;t automatically inserting
quotes. I had to set hte following variable to fix this:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-listp&#34;&gt;
&lt;pre&gt;&lt;code class=&#34;language-emacs-listp&#34; data-lang=&#34;emacs-listp&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-emacs-listp&#34; data-lang=&#34;emacs-listp&#34;&gt;(setq web-mode-enable-auto-quoting t)&lt;/code&gt;&lt;/pre&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Giving the final configuration I&amp;#39;m currently using:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package web-mode
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;auto-mode-alist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\.html?\\&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; web-mode))
(setq web-mode-engines-alist
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;django&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\.html\\&amp;#39;&amp;#34;&lt;/span&gt;)))
(setq web-mode-ac-sources-alist
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (ac-source-css-property))
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;html&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (ac-source-words-in-buffer ac-source-abbrev))))

(setq web-mode-enable-auto-closing &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(setq web-mode-enable-auto-quoting &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;; this fixes the quote problem I mentioned&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The web-mode &lt;a href=&#34;http://web-mode.org&#34;&gt;documentation&lt;/a&gt; has more information including a nice chart of all the key bindings.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/69bQa5n23jc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 22 - emacsclient</title>
      <link>https://cestlaz.github.io/posts/using-emacs-22-emacsclient/</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-22-emacsclient/</guid>
      <description>&lt;p&gt;
Another quick hit today.
&lt;/p&gt;
&lt;p&gt;
This video is really setting the stage for hte next two, where I talk about org-mode capturing.
&lt;/p&gt;
&lt;p&gt;
Today, we&amp;#39;re demoing the use of the emacs server and client.
&lt;/p&gt;
&lt;p&gt;
Back in the old days, emacs took a LOOONG time to load. A complex
conviguration could take on the order of 10 to 20 seconds. This
resulted in people loading emacs at the start of the day and leaving
it up forever. While load times aren&amp;#39;t much of an issue anymore, it&amp;#39;s
still nice to leave emacs around all the time.
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s where running emacs as a server comes in.. I set up a keyboard shortcut my window manager to run:
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;emacsclient -a &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; -c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Rather than trying to run emacs, this tries to connect to an already
running emacs server. The &lt;strong&gt;&lt;strong&gt;-c&lt;/strong&gt;&lt;/strong&gt; creates a new frame. Instead if you
use &lt;strong&gt;&lt;strong&gt;-t&lt;/strong&gt;&lt;/strong&gt; it will open emacs in the terminal. The &lt;strong&gt;&lt;strong&gt;-a &amp;#34;&amp;#34;&lt;/strong&gt;&lt;/strong&gt; tells
emacs to run itself as a server (daemon) if it isn&amp;#39;t already running.
&lt;/p&gt;
&lt;p&gt;
Later on, running &lt;strong&gt;&lt;strong&gt;emacsclient -c&lt;/strong&gt;&lt;/strong&gt; will very quickly bring up a new frame to the server.
&lt;/p&gt;
&lt;p&gt;
In addition to instant loading, Running emacs this way has the
advantage, or some may say disadvantage of keeping buffers around
forever since you just keep emacs up and running.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/9AHGsCtsClg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 20 - yanking</title>
      <link>https://cestlaz.github.io/posts/using-emacs-20-yanking/</link>
      <pubDate>Sun, 13 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-20-yanking/</guid>
      <description>&lt;p&gt;
Today&amp;#39;s video is a bit of a follow up on the last one as well as a few
miscillaneous configuration.
&lt;/p&gt;
&lt;p&gt;
We got some comments on alternate ways to load a file if it exists -
it&amp;#39;s always cool to see how different people end up doing similar things.
&lt;/p&gt;
&lt;p&gt;
We then talk about three little configurations. Two I found out about
reading Jon Sander&amp;#39;s (jcs) blog &lt;a href=&#34;http://irreal.org/blog&#34;&gt;Irreal&lt;/a&gt;. Jon&amp;#39;s blog is a terrific
source of emacs info - if you don&amp;#39;t subscribe, you should.
&lt;/p&gt;
&lt;p&gt;
I go over using counsel for working with the kill-ring. The command
counsel-yank-pop acts as a replamcement for yank-pop and it lets you
easily yank anything from the kill ring - not just the most previously
killed/whacked piece.
&lt;/p&gt;
&lt;p&gt;
You just hit &lt;strong&gt;&lt;strong&gt;M-y&lt;/strong&gt;&lt;/strong&gt; and then either keep hitting it or use up and
down to select what you want to yank.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the original post from Irreal: &lt;a href=&#34;http://irreal.org/blog/?p=5707&#34;&gt;http://irreal.org/blog/?p=5707&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I then briefly talk about smoothing things over between the system
clipboard and the kill ring, also from Irreal:
&lt;a href=&#34;http://irreal.org/blog/?p=5702&#34;&gt;http://irreal.org/blog/?p=5702&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Finally, I talk about auto-revert-mode - this monitors files on your
file system and when they change, they reload your buffer. I find this
very useful to keep multiple machines in sync when I&amp;#39;m working with
files in a could based filesystem like Dropbox or Owncloud.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/LReZI7VAy8w&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 19 - moving to a live config</title>
      <link>https://cestlaz.github.io/posts/using-emacs-19-live/</link>
      <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-19-live/</guid>
      <description>&lt;p&gt;
Some of the videos I want to make are going to be much easier to do if
I&amp;#39;m working in my own account where my whole file tree is available.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s also a little annoying changing between my full emacs config and
the one I&amp;#39;m developing here.
&lt;/p&gt;
&lt;p&gt;
So, I decided to move to this config for my real config and as I make
more videos move parts of my old configuration over to this new one.
&lt;/p&gt;
&lt;p&gt;
The only problem is that I &lt;strong&gt;&lt;strong&gt;need&lt;/strong&gt;&lt;/strong&gt; some of my current config right
now – things like my email setup.
&lt;/p&gt;
&lt;p&gt;
This video talks about how I&amp;#39;m going to set things up to take care of
everything.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/8RwQNXOjSis&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 18 - Narrowing and iedit</title>
      <link>https://cestlaz.github.io/posts/using-emacs-18-narrow/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-18-narrow/</guid>
      <description>&lt;p&gt;
I meant to cover these last time but decided not to so as to keep the
videos to about 10 minutes each.
&lt;/p&gt;
&lt;p&gt;
First up this time round is &lt;a href=&#34;https://github.com/victorhge/iedit&#34;&gt;iedit&lt;/a&gt; - a really cool mode that lets you
select all the instances of the marked selection at the same time and
edit them all at once. By default it&amp;#39;s bound to &lt;strong&gt;&lt;strong&gt;C-l&lt;/strong&gt;&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
For example, let&amp;#39;s say you had the following code:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You could mark one instance of &lt;strong&gt;&lt;strong&gt;somevar&lt;/strong&gt;&lt;/strong&gt;, hit &lt;strong&gt;&lt;strong&gt;C-;&lt;/strong&gt;&lt;/strong&gt; and you&amp;#39;d be
editing them all at once. When you&amp;#39;re done, you hit &lt;strong&gt;&lt;strong&gt;C-;&lt;/strong&gt;&lt;/strong&gt; again and
everything is un-selected.
&lt;/p&gt;
&lt;p&gt;
There are other ways to modify multiple instances of a selection. You
can always search and replace or use Magnar Sveen&amp;#39;s really cool
&lt;a href=&#34;https://github.com/magnars/multiple-cursors.el&#34;&gt;multiple cursors&lt;/a&gt; package and I&amp;#39;m sure there are others but I like
iedit since it&amp;#39;s small and simple. It also works for rectangular
editing but I didn&amp;#39;t cover that in the video. I&amp;#39;ll probably demo it
when I cover rectangular editing in general.
&lt;/p&gt;
&lt;p&gt;
Iedit has limitations. For insance, since it works globally, it isn&amp;#39;t
perfect for renaming variables. If the above code snippet was part of
a larger program with many other instances of &lt;strong&gt;&lt;strong&gt;somevar&lt;/strong&gt;&lt;/strong&gt;, iedit
wouldn&amp;#39;t, by itself, be as useful.
&lt;/p&gt;
&lt;p&gt;
You could reach for a language specific refactoring package but for
me, that&amp;#39;s where &lt;strong&gt;&lt;strong&gt;narrowing&lt;/strong&gt;&lt;/strong&gt; comes in. You can mark a region and
tell emcas to &lt;strong&gt;&lt;strong&gt;narrow-to-region&lt;/strong&gt;&lt;/strong&gt; which hides everything outside the
region and temporarily (until you &lt;strong&gt;&lt;strong&gt;widen&lt;/strong&gt;&lt;/strong&gt;) treats the region as the
whole document.
&lt;/p&gt;
&lt;p&gt;
So, you could narrow to the section of code you want to edit and then
use iedit from within.
&lt;/p&gt;
&lt;p&gt;
To make things easier, I grabed &lt;a href=&#34;http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html&#34;&gt;narrow-or-winden-dwim&lt;/a&gt; from &lt;a href=&#34;http://endlessparentheses.com/&#34;&gt;Endless
Parentheses&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I think the video makes the behaviour pretty clear.
&lt;/p&gt;
&lt;p&gt;
Enjoy
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/xne0kS1DfVs&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 17 - misc small packages</title>
      <link>https://cestlaz.github.io/posts/using-emacs-17-misc/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-17-misc/</guid>
      <description>
&lt;p&gt;
I&amp;#39;m working on getting enough of my real configuration into this
series so that I can dump my current one and use this one all them
time and grow it back up an episode at a time.
&lt;/p&gt;
&lt;p&gt;
I think we&amp;#39;re almost there.
&lt;/p&gt;
&lt;p&gt;
This time, we&amp;#39;re looking at a few small packages that I use all the
time.
&lt;/p&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Highlight line Mode
&lt;/h3&gt;
&lt;div class=&#34;src src-emacs-listp&#34;&gt;
&lt;pre&gt;&lt;code class=&#34;language-emacs-listp&#34; data-lang=&#34;emacs-listp&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-emacs-listp&#34; data-lang=&#34;emacs-listp&#34;&gt;(global-hl-line-mode t)&lt;/code&gt;&lt;/pre&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
this turns on highlight line mode.  It makes it easy to see the line
the cursor&amp;#39;s on. Nothing huge, I just like it.
&lt;/p&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
&lt;a href=&#34;https://github.com/Malabarba/beacon&#34;&gt;Beacon mode&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/Malabarba/beacon&#34;&gt;Beacon mode&lt;/a&gt; flashes the cursor whenever you scroll. It makes things
easy to locate the cursor when scrolling
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; flashes the cursor&amp;#39;s line when you scroll&lt;/span&gt;
(use-package beacon
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(beacon-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;; this color looks good for the zenburn theme but not for the one&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; I&amp;#39;m using for the videos&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; (setq beacon-color &amp;#34;#666600&amp;#34;)&lt;/span&gt;
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
&lt;a href=&#34;https://github.com/nflath/hungry-delete&#34;&gt;Hungry Delete mode&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/nflath/hungry-delete&#34;&gt;This mode&lt;/a&gt; deletes all the whitespace after the cursor (or before it)
when you use delete or backspace.
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; deletes all the whitespace when you hit backspace or delete&lt;/span&gt;
(use-package hungry-delete
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(global-hungry-delete-mode))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
&lt;a href=&#34;https://github.com/magnars/expand-region.el&#34;&gt;Expand Region&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/magnars&#34;&gt;Magnar Sveen&amp;#39;s&lt;/a&gt; awesome expand region mode is a must have. He also
wrote the amazing &lt;a href=&#34;https://github.com/magnars/multiple-cursors.el&#34;&gt;multiple cursors&lt;/a&gt; package. I highly recommend
checking out his work.
&lt;/p&gt;
&lt;p&gt;
Expand region expands the marked region by semantic units. It&amp;#39;s my go
to way of marking text for manipulation
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; expand the marked region in semantic increments (negative prefix to reduce region)&lt;/span&gt;
(use-package expand-region
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-=&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;er/expand-region&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I also tried to look at aggressive indent but that had some problems
so we&amp;#39;ll come back to that later.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/vKIFi1h0I5Y&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 16 - Undo Tree</title>
      <link>https://cestlaz.github.io/posts/using-emacs-16-undo-tree/</link>
      <pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-16-undo-tree/</guid>
      <description>&lt;p&gt;
If you use emacs, you should keep an eye on Jon Snader&amp;#39;s &lt;a href=&#34;http://irreal.org/blog/&#34;&gt;blog&lt;/a&gt;,
&lt;a href=&#34;http://irreal.org/blog/&#34;&gt;irreal.org&lt;/a&gt;. A few days he posted on &lt;a href=&#34;http://irreal.org/blog/?p=5621&#34;&gt;Undo Tree&lt;/a&gt; - a package that extends
Emacs&amp;#39;s built in undo functionality.
&lt;/p&gt;
&lt;p&gt;
Basic emacs has undo, bound to &lt;strong&gt;&lt;strong&gt;C-/&lt;/strong&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;strong&gt;C-_&lt;/strong&gt;&lt;/strong&gt; but that&amp;#39;s about
it. Undo tree, which you can set up with:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package undo-tree
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(global-undo-tree-mode))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
adds two key features. First is redo, which you get by adding the
shift key to the undo keychords.
&lt;/p&gt;
&lt;p&gt;
The other, is the visual undo tree. You can bring that up wit &lt;strong&gt;&lt;strong&gt;C-x
u&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
Once you bring up the undo tree, you can use the up and down arrows or
&lt;strong&gt;&lt;strong&gt;C-n&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;C-p&lt;/strong&gt;&lt;/strong&gt; to move between undo and redos. When you get to
what you want, just quit the undo tree visualizer with &lt;strong&gt;&lt;strong&gt;q&lt;/strong&gt;&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
The cool part is that once you undo a few things and add new stuff,
you get a tree that you can navigate through using the arrows.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s much easier to get the flavor of this by watching the video
(which also has a lame example of using artist-mode which I&amp;#39;ll come
back t at some point).
&lt;/p&gt;
&lt;p&gt;
Enjoy.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/zL0FJ-jbDPU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>User friendly - I do not think that means what you think it means</title>
      <link>https://cestlaz.github.io/posts/user-friendly/</link>
      <pubDate>Wed, 28 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/user-friendly/</guid>
      <description>&lt;p&gt;
Saw this post the other day: &lt;a href=&#34;https://pupeno.com/2016/09/26/emacs-is-hurting-clojure/&#34;&gt;Emacs is hurting Clojure&lt;/a&gt; and this response: &lt;a href=&#34;http://irreal.org/blog/?p=5597&#34;&gt;Is Emacs Really HJard to Learn / Use&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
This called to mind those countless discussions about tools being user
friendly. I&amp;#39;m frequently on the unpopular side of these
discussions. Linux vs Windows vs Mac, Shell vs GUI, Emacs vs
fill-in-the-blank-editor-or-IDE and on and on.
&lt;/p&gt;
&lt;p&gt;
Don&amp;#39;t use Emacs, it isn&amp;#39;t user
friendly. Don&amp;#39;t use Linux, it isn&amp;#39;t user friendly.
&lt;/p&gt;
&lt;p&gt;
The thing is, I don&amp;#39;t think that word means what they think it does.
&lt;/p&gt;
&lt;p&gt;
I tell my kids that Linux and the shell is amazingly user friendly and
Windows and Macs aren&amp;#39;t user friendly at all. Windows, rather, is
&amp;#34;Learner Friendly.&amp;#34; For years, it&amp;#39;s been easy to learn what you can do
on Windows or Mac (as used via the GUI, not dropping to a shell) but
the truth is you can&amp;#39;t do that much. They&amp;#39;re designed as program
loaders not tool kits.
&lt;/p&gt;
&lt;p&gt;
You can learn how to get around and load programs and files very
quickly - much more quickly at first than using a command line
interface. The problem is, at that point, you hit a wall. No doubt
those operating systems are more learner friendly than Linux and the
shell but once you learn the command line, it can be leveraged for all
sorts of things and pretty easily at that - user friendly (see these
posts for some examples: &lt;a href=&#34;http://localhost:8000/categories/cli/&#34;&gt;Shell posts&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
This is important because we have our students use all sorts of tools
and we should be thinking about things like usability but we really
should be thinking about them a little differently.
&lt;/p&gt;
&lt;p&gt;
First, is it learner friendly. Part of this is cost of
entry. Linux has a high cost of entry. On the other hand, while Emacs
might look uglier than other modern editors, the cost of entry is
pretty much the same as any other editor - click or type a command and then you can use
the mouse and drop down menus to get started. Vim, in my opinion, on
the other hand has a higher cost of entry due to its modal nature.
&lt;/p&gt;
&lt;p&gt;
So, there&amp;#39;s no reason not to use Emacs (vs another editor) but you
might pause before using Linux. My approach is to start as if it were
Windows - use the gui, icons and menus, and then slowly introduce the
command line.
&lt;/p&gt;
&lt;p&gt;
Once your past the cost of entry, the we can think about being learner
friendly. As I mentioned, Linux, not so much. Emacs, sure - just like
any other editor with drop downs that then give you keyboard
equivalents.
&lt;/p&gt;
&lt;p&gt;
The keyboard equivalents lead us to another part of learner friendly
– discoverability - can you easily discover new things about the
tool. Here Emacs shines. Linux, maybe not so much.
&lt;/p&gt;
&lt;p&gt;
Once past learner friendly we get to user friendly. The core question
is &amp;#34;can I do what I need to and want to do easily.&amp;#34; For most people, it
comes down to - the tool I know is user friendly and the one I don&amp;#39;t
know and don&amp;#39;t want to take the time to know isn&amp;#39;t. There are some
things that are cumbersome no matter what, but really, when we say
user friendly, most people mean &amp;#34;what I like.&amp;#34; To me, it&amp;#39;s a little
more - is the tool expressive and powerful as well.
&lt;/p&gt;
&lt;p&gt;
So, why is this important? First, we shouldn&amp;#39;t allow our biases to
color the way we expose our kids to tools but at the same time, we
should pay attention to learnability, cost of entry, discoverability,
and indeed, true user friendliness.
&lt;/p&gt;
&lt;table border-spacing=&#34;10px&#34; padding=&#34;10px&#34; rules=&#34;all&#34; frame=&#34;border&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Low Power&lt;/th&gt;
&lt;th&gt;High Power&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;strong&gt;Low Learnability&lt;/strong&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;CP/M&lt;/td&gt;
&lt;td&gt;Linux Shell, Mac Terminal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;strong&gt;High Learnability&lt;/strong&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Windows / Mac OS GUI&lt;/td&gt;
&lt;td&gt;Most editors, including Emacs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
So, let&amp;#39;s stop with this &amp;#34;your tool isn&amp;#39;t easy to use&amp;#34; nonsense. Any
tool we don&amp;#39;t know isn&amp;#39;t easy to use until we learn it. Let&amp;#39;s focus on
the path to learning the useful ones.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 15 - Macros</title>
      <link>https://cestlaz.github.io/posts/using-emacs-15-macros/</link>
      <pubDate>Fri, 02 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-15-macros/</guid>
      <description>&lt;p&gt;
I originally planned on do some videos on C++ development but I&amp;#39;m just
not feeling it. Probably because I&amp;#39;m excited to be working with my
new class and we&amp;#39;re working in Python. We&amp;#39;re not going to be using
C+++ for a few months so I&amp;#39;ll get to those videos a little later.
&lt;/p&gt;
&lt;p&gt;
Today, I want to cover what I consider a leatherman or multi-tool for
Emacs. Something that isn&amp;#39;t perfect for any particular job but can get
almost any job done: Macros.
&lt;/p&gt;
&lt;p&gt;
In their simplest form, macros let you record and play back
keystrokes.
&lt;/p&gt;
&lt;p&gt;
The video goes over the specifics.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Y1oVNBuIoXo&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Here are the main functions / keystrokes.
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;kmacro-start-macro-or-insert-counter&lt;/td&gt;
&lt;td&gt;F3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kmacro-end-and-call-macro&lt;/td&gt;
&lt;td&gt;F4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kmacro-name-last-macro&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert-kbd-macro&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
This covers most of my use of macros but there&amp;#39;s more. You can adjust
or set the counter, edit old macros and there&amp;#39;s even a way to have a
macro pause for input in the middle.
&lt;/p&gt;
&lt;p&gt;
Here are some links with more information:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html#Keyboard-Macros&#34;&gt;Emacs manual on macros&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://ergoemacs.org/emacs/emacs_macro_example.html&#34;&gt;http://ergoemacs.org/emacs/emacs_macro_example.html&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://emacs-fu.blogspot.com/2010/07/keyboard-macros.html&#34;&gt;http://emacs-fu.blogspot.com/2010/07/keyboard-macros.html&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
If you&amp;#39;re interested in checking out &lt;a href=&#34;http://repl.it&#34;&gt;Repl.it&lt;/a&gt;, which I reference in the
video, check out &lt;a href=&#34;http://cestlaz.github.io/posts/new-term-new-tool-replit/#.V8n_Ed9vH0o%0A&#34;&gt;my blog post&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 14 - Thoughts</title>
      <link>https://cestlaz.github.io/posts/using-emacs-14-thoughts/</link>
      <pubDate>Wed, 17 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-14-thoughts/</guid>
      <description>&lt;p&gt;
Sorry for the incosistancy of the posts. I hope to get to that one
video a week soon but I&amp;#39;ve still got a hectic couple of weeks ahead.
&lt;/p&gt;
&lt;p&gt;
No new material this week, or at least very little. This week, I talk
about some thoughts on the &amp;#34;Using Emacs&amp;#34; series.
&lt;/p&gt;
&lt;p&gt;
In the video I talk about Sacha Chua and her work as a leader in the
Emacs community. Check out her stuff here: &lt;a href=&#34;http://sachachua.com/blog/&#34;&gt;http://sachachua.com/blog/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the video - I hope you enjoy it.
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/tSx_sGgoVNk&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
As always, please leave feedback here or on the video.
&lt;/p&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 13 - Yasnippet</title>
      <link>https://cestlaz.github.io/posts/using-emacs-13-yasnippet/</link>
      <pubDate>Thu, 04 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-13-yasnippet/</guid>
      <description>&lt;p&gt;
It turns out that &lt;a href=&#34;https://github.com/jorgenschaefer/elpy&#34;&gt;Elpy&lt;/a&gt;, a popular emacs package for python development
is much easier to set up than I remember. It turns out all you need
is:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package elpy
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(elpy-enable))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video shows how to install and a bit of use. I don&amp;#39;t think it&amp;#39;s a
package I&amp;#39;m going to use much since I use other tools to do similar
things but it&amp;#39;s worth checking out.
&lt;/p&gt;
&lt;p&gt;
The main event this week is &lt;a href=&#34;https://github.com/joaotavora/yasnippet&#34;&gt;yasnippet&lt;/a&gt;, a package that lets you expand
text aliases. Let&amp;#39;s say you want to put the fairly standard:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
in my file. I can just type &lt;strong&gt;&lt;strong&gt;ifm&lt;/strong&gt;&lt;/strong&gt; and then hit the &lt;strong&gt;&lt;strong&gt;TAB&lt;/strong&gt;&lt;/strong&gt; key and
it would expand to the above code. Yasnippet also lets you leave
placeholders for variables, function names and more. It&amp;#39;s a pretty
neat package.
&lt;/p&gt;
&lt;p&gt;
I use it for boilerplate code. The example in the video shows how I
set up a snippet for the boilerplate code used when creating an
application with the &lt;strong&gt;&lt;strong&gt;Flask&lt;/strong&gt;&lt;/strong&gt; python microframework.
&lt;/p&gt;
&lt;p&gt;
Setting up yasnippet is as easy as:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package yasnippet
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(yas-global-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and it has built in support for &lt;a href=&#34;https://github.com/AndreaCrotti/yasnippet-snippets/tree/9ce0b05f4b4d693831e67dd65d660716a8192e8d&#34;&gt;tons of langauges&lt;/a&gt;. You can also easily
create your own snippets. See the documentation for details on the
file format. Just create a text file for the snippet and place it in a
subidectory under the snippets subdirectory of .emacs.d. The name of
the subdirectory should be the name of the emacs mode for which the
snippet is defined. I put up the snippet I use for flask so feel free
to check that out.
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/4aYMa8f6B0o&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Yasnippet:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/joaotavora/yasnippet&#34;&gt;Home Page&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://joaotavora.github.io/yasnippet/&#34;&gt;Docs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/AndreaCrotti/yasnippet-snippets/tree/9ce0b05f4b4d693831e67dd65d660716a8192e8d&#34;&gt;Included snippets&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Elpy:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/jorgenschaefer/elpy&#34;&gt;Home Page&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Flask:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://flask.pocoo.org&#34;&gt;Flask Home Page&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 12 - Flycheck, Jedi, Python</title>
      <link>https://cestlaz.github.io/posts/using-emacs-12-python/</link>
      <pubDate>Wed, 27 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-12-python/</guid>
      <description>&lt;p&gt;
This week, we&amp;#39;re going to look at my setup for Python programming.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m an educator, not a professional developer so I&amp;#39;m not working in
huge code bases with dozens or more files at a time. I do periodically
work in medium size code bases and will talk about cross file
navigation and project management later on. There are also more
powerful emacs Python packages. One being &lt;a href=&#34;https://github.com/jorgenschaefer/elpy&#34;&gt;elpy&lt;/a&gt;. Elpy looks pretty cool
but for me, it&amp;#39;s overkill.
&lt;/p&gt;
&lt;p&gt;
Today&amp;#39;s about the basics.
&lt;/p&gt;
&lt;p&gt;
The first tool I show is &lt;a href=&#34;http://www.flycheck.org/en/latest/&#34;&gt;flycheck&lt;/a&gt;. It does code checking on the fly
and supports &lt;a href=&#34;http://www.flycheck.org/en/latest/languages.html#flycheck-languages&#34;&gt;tons of languages&lt;/a&gt;. You might have to install some
external checkers though. For instance, I installed &lt;strong&gt;&lt;strong&gt;pylint&lt;/strong&gt;&lt;/strong&gt; for
python syntax checking with:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo pip install pylint&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Cofiguring flycheck is as easy as:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package flycheck
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(global-flycheck-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video all shows how I like to run Python from within emacs.
&lt;/p&gt;
&lt;p&gt;
The other tool I use is &lt;a href=&#34;https://github.com/tkf/emacs-jedi&#34;&gt;Jedi&lt;/a&gt;. It provides more extensive completion
for Python.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the setup:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package jedi
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jedi:setup&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jedi:ac-setup&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The last hook sets up the autocomplete.
&lt;/p&gt;
&lt;p&gt;
For jedi to work, you&amp;#39;ll need to install the jedi server which is done
in emacs by running &lt;strong&gt;&lt;strong&gt;M-x jedi:install-server&lt;/strong&gt;&lt;/strong&gt;. For that to work,
though, you&amp;#39;ll need to have &lt;a href=&#34;http://docs.python-guide.org/en/latest/dev/virtualenvs/&#34;&gt;Python Virtualenv&lt;/a&gt; istalled. I did that
with:
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;/strong&gt; I just got a report that you might need to also install epc (&lt;strong&gt;&lt;strong&gt;sudo pip install epc&lt;/strong&gt;&lt;/strong&gt;).
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo pip install virtualenv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Here&amp;#39;s the video:
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wbj_Wjm1Tuw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Flycheck:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://flycheck.org&#34;&gt;Flycheck home page&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.pylint.org/&#34;&gt;Pylint&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://flake8.pycqa.org/en/latest/&#34;&gt;Flake8&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Jedi:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/davidhalter/jedi&#34;&gt;Jedi&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://virtualenv.pypa.io/en/stable/&#34;&gt;Virtualenv&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 11 - Reveal.js presentations</title>
      <link>https://cestlaz.github.io/posts/using-emacs-11-reveal/</link>
      <pubDate>Tue, 19 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-11-reveal/</guid>
      <description>&lt;p&gt;
Happy to be back after a couple of weeks.
&lt;/p&gt;
&lt;p&gt;
My wife and son spent some time in San Francisco, Mountain View, and
Seattle. The main reason was to see our daughter who&amp;#39;s interning out
there for the summer but it was also a great opportunity to catch up
with over 100 former students. If you&amp;#39;re interested in seeing more, I
wrote a bit about it &lt;a href=&#34;http://cestlaz.github.io/posts/end-to-act-1/#.V45OGt9vGAk&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I was originally going to start talking about Python development but
then saw &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/4sp0xs/emacs_org_mode_and_revealjs/&#34;&gt;this&lt;/a&gt; post on reddit about &lt;a href=&#34;https://github.com/hakimel/reveal.js/&#34;&gt;reveal.js&lt;/a&gt; and using it with
org-mode. Since reveal.js with org-mode  is my goto presentation tool
I thought I&amp;#39;d do a video on that before getting back to &amp;#34;your
regularly schedueld program.&amp;#34;
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/psDpCpcIVYs&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
The main package you have to use for reveal.js presentations in
org-mode is org-reveal. The package to install is &lt;strong&gt;&lt;strong&gt;ox-reveal&lt;/strong&gt;&lt;/strong&gt;. I also
installed &lt;strong&gt;&lt;strong&gt;htmlize&lt;/strong&gt;&lt;/strong&gt; for syntax highlighting. Here&amp;#39;s the code from
our configuration file:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package ox-reveal
:ensure ox-reveal)

(setq org-reveal-root &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://cdn.jsdelivr.net/reveal.js/3.0.0/&amp;#34;&lt;/span&gt;)
(setq org-reveal-mathjax &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)

(use-package htmlize
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The org-reveal-root setq tells your presentation where to find the
reveal.js code. In this example, we&amp;#39;re getting from the cloud. You can
also install it locally.
&lt;/p&gt;
&lt;p&gt;
The org-reveal-mathjax is just so that LaTeX equations will look nice.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m hoping the video is pretty self-explanitory and the org-reveal
&lt;a href=&#34;https://github.com/yjwen/org-reveal%0A&#34;&gt;home page&lt;/a&gt; is pretty thorough but since the documentation is lagging a
bit behind the code and due to some versioning issues, here are a
couple of things to watch out for:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
I made a &lt;strong&gt;&lt;strong&gt;samples&lt;/strong&gt;&lt;/strong&gt; folder where I&amp;#39;ll put code for this series that
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
isn&amp;#39;t part of the configurations.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
I showed &lt;strong&gt;&lt;strong&gt;:frag (roll-in)&lt;/strong&gt;&lt;/strong&gt; as an example of revealing list items
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
one at a time. Those parens are important and are needed but weren&amp;#39;t
in earlier versions - this took me far too long to figure out.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
If you read the docs you&amp;#39;ll see that there are many more transitions
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
and you can mix and match them on a page.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
You might have to upgrade your emacs packages. If you
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;list-packages&lt;/strong&gt;&lt;/strong&gt;  in eamcs it will tell you if you have packages to
upgrade. You mark them for upgrading by typing &lt;strong&gt;&lt;strong&gt;U&lt;/strong&gt;&lt;/strong&gt; and then do the
upgrade with &lt;strong&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/strong&gt;. If this doesn&amp;#39;t work, you can try getting rid fo
the &lt;strong&gt;&lt;strong&gt;elpa&lt;/strong&gt;&lt;/strong&gt; folder and then re-installing.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
The &lt;a href=&#34;http://github.com/zamansky/mazelesson&#34;&gt;mazelesson&lt;/a&gt; sample presentation shows more features, many that we
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
haven&amp;#39;t covered yet. Check it out but remember that it&amp;#39;s for an
earlier version of org-reveal.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Github pages and rawgit are cool.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Hope you enjoy this. Please add any reveal.js tips and tricks of your
own.
&lt;/p&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Reveal.js related linls:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/hakimel/reveal.js/&#34;&gt;reveal.js home page&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/yjwen/org-reveal%0A&#34;&gt;org-reveal home page&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://github.com/zamansky/mazelesson&#34;&gt;Sample org reveal site (mazelesson from video)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
rawgit.com - serving stuff from github
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Github pages: &lt;a href=&#34;https://pages.github.com/&#34;&gt;https://pages.github.com/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 10 - org init files</title>
      <link>https://cestlaz.github.io/posts/using-emacs-10-org-init/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-10-org-init/</guid>
      <description>&lt;p&gt;
I&amp;#39;ll be traveling for the next couple of weeks so I probably won&amp;#39;t
have time for another video until mid to late July. I&amp;#39;ll probably
write a post about this series and do some regular blogging over that
time but probably no new videos for a couple of weeks.
&lt;/p&gt;
&lt;p&gt;
Also, a couple of notes about the series:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Instead of making a separate git branch for each episode, I&amp;#39;m just
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
adding on to the master branch on GitHub. If you&amp;#39;re not familiar
with Git and GitHub don&amp;#39;t worry about this. Hardly anyone will
notice a difference.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
If this theme doesn&amp;#39;t show well on video, please let me know, I&amp;#39;ll
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
change it.
&lt;/p&gt;
&lt;p&gt;
Ok, now to this installments video.
&lt;/p&gt;
&lt;p&gt;
It talks about using org-mode to store our emacs init file.
&lt;/p&gt;
&lt;p&gt;
The first key is that you can put code-blocks in org-mode:
&lt;/p&gt;
&lt;div class=&#34;src src-org&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;,#+BEGIN_SRC emacs-lisp
(emacs-lisp code goes here)
(more emacs lisp goes here)
(and you can have even more here)
,#+END_SRC&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Since it&amp;#39;s elisp you can run the individual line using the usual &lt;strong&gt;&lt;strong&gt;C-x C-e&lt;/strong&gt;&lt;/strong&gt;
but you can run the entire block by placing your cursor anywhere in
the block and typing &lt;strong&gt;&lt;strong&gt;C-c C-c&lt;/strong&gt;&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
One minor annoyance about editing code blocks is that it doesn&amp;#39;t do
syntax highlighting or auto indentation. To solve this, emacs lets you
pull up an editing buffer by typing &lt;strong&gt;&lt;strong&gt;C-c &amp;#39;&lt;/strong&gt;&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
You&amp;#39;re supposed to be able to save your changes with &lt;strong&gt;&lt;strong&gt;C-c &amp;#39;&lt;/strong&gt;&lt;/strong&gt; again
or &lt;strong&gt;&lt;strong&gt;C-x C-s&lt;/strong&gt;&lt;/strong&gt; and kill the buffer without saving changes with &lt;strong&gt;&lt;strong&gt;C-x
C-k&lt;/strong&gt;&lt;/strong&gt;
but the version of org-mode that came with my version of emacs
didn&amp;#39;t support it - I had to install a newer version of org-mode from
melpa.
&lt;/p&gt;
&lt;p&gt;
I couldn&amp;#39;t figure out how to do this via use-package, but if this
problem happens to you, you can just type &lt;strong&gt;&lt;strong&gt;Alt-x package-install&lt;/strong&gt;&lt;/strong&gt;
and then type &lt;strong&gt;&lt;strong&gt;org&lt;/strong&gt;&lt;/strong&gt; and hit enter to install it.
&lt;/p&gt;
&lt;p&gt;
Once you do that, you might have to reload emacs but then everything
should work.
&lt;/p&gt;
&lt;p&gt;
This lets us move most of our configuration to a separate file. We&amp;#39;re
calling it &lt;strong&gt;&lt;strong&gt;myinit.org&lt;/strong&gt;&lt;/strong&gt; and storing it in our .emacs.d
directory. You can use any name &lt;strong&gt;&lt;strong&gt;except&lt;/strong&gt;&lt;/strong&gt; init.org as I mentioned in
the video.
&lt;/p&gt;
&lt;p&gt;
The file&amp;#39;s a little big so here&amp;#39;s a link to it:
&lt;a href=&#34;https://github.com/zamansky/using-emacs/blob/master/myinit.org&#34;&gt;https://github.com/zamansky/using-emacs/blob/master/myinit.org&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Notice how GitHub formats it to look all nice.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the raw file so you can see the gory details:
&lt;a href=&#34;https://raw.githubusercontent.com/zamansky/using-emacs/master/myinit.org&#34;&gt;https://raw.githubusercontent.com/zamansky/using-emacs/master/myinit.org&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Since we&amp;#39;re loading the file in overview mode, when we load it in
emacs we see:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; interface tweaks
&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; try
&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; which key
&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; Org mode
&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; Ace windows for easy window switching
&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; Swiper &lt;span style=&#34;color:#a6e22e&#34;&gt;/&lt;/span&gt; Ivy &lt;span style=&#34;color:#a6e22e&#34;&gt;/&lt;/span&gt; Counsel
&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; Avy &lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; navigate by searching for a letter on the screen and jumping to it
&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; Autocomplete
&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; Themes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We can tab open and close each section and add text to clarify things
around the code blocks.
&lt;/p&gt;
&lt;p&gt;
All that&amp;#39;s left in &lt;strong&gt;&lt;strong&gt;init.el&lt;/strong&gt;&lt;/strong&gt; is:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package&lt;/span&gt;)
(setq package-enable-at-startup &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package-archives&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;melpa&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://melpa.org/packages/&amp;#34;&lt;/span&gt;))
(package-initialize)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Bootstrap `use-package&amp;#39;&lt;/span&gt;
(unless (package-installed-p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package&lt;/span&gt;)
(package-refresh-contents)
(package-install &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package&lt;/span&gt;))

(org-babel-load-file (&lt;span style=&#34;color:#a6e22e&#34;&gt;expand-file-name&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/.emacs.d/myinit.org&amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
With the last line performing the magic of loading our org file and
running all the code blocks.
&lt;/p&gt;
&lt;p&gt;
Finally, we added a couple of small interface changes:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fset&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yes-or-no-p&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y-or-n-p&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f5&amp;gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;revert-buffer&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The first line lets us type y or n instead of yes or no and the second
let&amp;#39;s us reload a file into our current buffer using the &lt;strong&gt;&lt;strong&gt;f5&lt;/strong&gt;&lt;/strong&gt; key.
&lt;/p&gt;
&lt;p&gt;
I hope you enjoy this video and find it useful:
&lt;/p&gt;
 &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/EX9PKK3EMaw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 9 - Themes</title>
      <link>https://cestlaz.github.io/posts/using-emacs-9-themes/</link>
      <pubDate>Tue, 28 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-9-themes/</guid>
      <description>&lt;p&gt;
Now that we have a nice basic configuration, let&amp;#39;s make Emacs look a
little nicer.
&lt;/p&gt;
&lt;p&gt;
Like most editors, Emacs can be extensively themed.
&lt;/p&gt;
&lt;p&gt;
As shown in the video, you can quickly see the built in themes using
the &lt;strong&gt;&lt;strong&gt;customize-themes&lt;/strong&gt;&lt;/strong&gt; command.
&lt;/p&gt;
&lt;p&gt;
You can load one of these themes by using the &lt;strong&gt;&lt;strong&gt;load-theme&lt;/strong&gt;&lt;/strong&gt; command
interactively or, more likely by putting:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(load-theme &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leuven&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
in your init.el. The above code loads the built in &lt;strong&gt;&lt;strong&gt;leuven&lt;/strong&gt;&lt;/strong&gt; theme.
&lt;/p&gt;
&lt;p&gt;
I prefer the &lt;strong&gt;&lt;strong&gt;zenburn&lt;/strong&gt;&lt;/strong&gt; theme. For that, you have to load the zenburn
package. Here&amp;#39;s the code in our init.el:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package zenburn-theme
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config (load-theme &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zenburn&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In the video, I also mention the color theme package.
&lt;/p&gt;
&lt;p&gt;
So, customize away.
&lt;/p&gt;
&lt;p&gt;
In the links, you&amp;#39;ll find some links to some Emacs theme gallery sites
to help find something you like.
&lt;/p&gt;
&lt;p&gt;
Thanks for reading and watching and as always, please leave comments,
suggestions and favorite themes.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the video:
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/cod2ABxlrV8&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Zenburn theme home page: &lt;a href=&#34;https://github.com/bbatsov/zenburn-emacs&#34;&gt;https://github.com/bbatsov/zenburn-emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Emacs theme gallery: &lt;a href=&#34;https://pawelbx.github.io/emacs-theme-gallery/&#34;&gt;https://pawelbx.github.io/emacs-theme-gallery/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Another one: &lt;a href=&#34;https://emacsthemes.com/&#34;&gt;https://emacsthemes.com/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-9-themes&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-9-themes&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 8 - Autocomplete</title>
      <link>https://cestlaz.github.io/posts/using-emacs-8-autocomplete/</link>
      <pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-8-autocomplete/</guid>
      <description>&lt;p&gt;
Out of the box, Emacs supports various types of completion.
&lt;/p&gt;
&lt;p&gt;
Tab completion for filenames and commands basically work right out of
the box and Emacs has built in modes like &lt;a href=&#34;https://www.emacswiki.org/emacs/AbbrevMode&#34;&gt;Abbrev&lt;/a&gt;, &lt;a href=&#34;https://www.emacswiki.org/emacs/HippieExpand&#34;&gt;Hippie Expand&lt;/a&gt;, and
&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Dynamic-Abbrevs.html&#34;&gt;Dabbrev&lt;/a&gt; provide a manner of completion for in buffer text.
&lt;/p&gt;
&lt;p&gt;
I briefly show Dabbrev (Dynamic Abbrevs) in the video and if you&amp;#39;re
interested in the others, follow the links.
&lt;/p&gt;
&lt;p&gt;
We saw ow the built in Ido mode and third party packages like Ivy,
which I prefer, and Helm make for better completions on functions,
filenames, and the like and Emacs also has third party packages for in
buffer completion.
&lt;/p&gt;
&lt;p&gt;
The two main contenders are &lt;a href=&#34;https://github.com/auto-complete/auto-complete&#34;&gt;auto-complete Mode&lt;/a&gt; and &lt;a href=&#34;http://company-mode.github.io/%0A&#34;&gt;company Mode&lt;/a&gt;. I use
auto-complete, others swear by company. The video shows the basics of
auto-complete mode but check both out and decide for yourself.
&lt;/p&gt;
&lt;p&gt;
If you feel strongly about one or the other, please share in the
comments.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a basic configuration:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package auto-complete
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(progn
(ac-config-default)
(global-auto-complete-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We&amp;#39;ll modify this as move along in the series.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the video:
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/5FBVhdyU4dA&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Autocomplete home page: &lt;a href=&#34;https://github.com/auto-complete/auto-complete&#34;&gt;https://github.com/auto-complete/auto-complete&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Autocomplete manual: &lt;a href=&#34;http://auto-complete.org/doc/manual.html&#34;&gt;http://auto-complete.org/doc/manual.html&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-8-autocompete&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-8-autocompete&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 7- Navigation with Avy</title>
      <link>https://cestlaz.github.io/posts/using-emacs-7-avy/</link>
      <pubDate>Fri, 24 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-7-avy/</guid>
      <description>&lt;p&gt;
Here&amp;#39;s a really cool navigation method that I&amp;#39;ve been meaning to use
more. Avy is a replacement for ace-jump mode which is an
implementation of easymotion, a vim plugin.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s pretty cool and lets you quickly navigate to any spot on the
screen.
&lt;/p&gt;
&lt;p&gt;
After triggering avy, or more specifically the &lt;strong&gt;&lt;strong&gt;avy-goto-char&lt;/strong&gt;&lt;/strong&gt;
function, emacs prompts you for a single character. When you type it,
all instances of the character that start out words change to a
highlighted letter. Type the highlighted letter and you jump to that
location.
&lt;/p&gt;
&lt;p&gt;
The avy package comes with a bunch of options including a 2 character
search variant, a timed variant which drops into search, and more.
&lt;/p&gt;
&lt;p&gt;
The Avy home page has all the details.
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ziytRbASKeU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Here&amp;#39;s the configuration I&amp;#39;m using:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package avy
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:bind (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; avy-goto-char))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You can check the &lt;a href=&#34;https://github.com/abo-abo/avy&#34;&gt;avy home page&lt;/a&gt; for their recommended configuration
which you get by configuring this way instead:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package avy
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(avy-setup-default))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Avy: &lt;a href=&#34;https://github.com/abo-abo/avy&#34;&gt;https://github.com/abo-abo/avy&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-7-avy&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-7-avy&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Better Comments or tooling as a time sink</title>
      <link>https://cestlaz.github.io/posts/better-comments/</link>
      <pubDate>Wed, 22 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/better-comments/</guid>
      <description>&lt;p&gt;
The other day my friend and fellow CS Ed Blogger &lt;a href=&#34;https://twitter.com/alfredtwo&#34;&gt;Alfred Thompson&lt;/a&gt; wrote
about &lt;a href=&#34;http://blog.acthompson.net/2016/06/better-comments-in-visual-studio.html&#34;&gt;Better Comments&lt;/a&gt;, an extension for visual studio that displays
comments that are marked up  with special characters in order to
highlight them. Here&amp;#39;s a screenshot:
&lt;/p&gt;
&lt;p&gt;
https://raw.githubusercontent.com/omsharp/BetterComments/master/screenshots/ClassificationC.png
&lt;/p&gt;
&lt;p&gt;
So, the first thing I though was &amp;#34;I bet emacs could do that pretty
easily&amp;#34; and down the rabbit hole I went.
&lt;/p&gt;
&lt;p&gt;
I had to figure out something about how emacs themes and font-locking
(emacs for syntax highlighting) works and of course spent far too much
time learning about Emacs, my favored tool, rather than getting actual
work done, but I came up with this:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(make-face &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-important&lt;/span&gt;)
(set-face-foreground &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-important&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#00ff00&amp;#34;&lt;/span&gt;)

(make-face &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-todo&lt;/span&gt;)
(set-face-foreground &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-todo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#ff0000&amp;#34;&lt;/span&gt;)

(make-face &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-strike&lt;/span&gt;)
(set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-strike&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; :strike-through &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)

(defun add-custom-keyw()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;adds a few special keywords&amp;#34;&lt;/span&gt;
(font-lock-add-keywords
&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cx \\(.+\\)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-strike&lt;/span&gt; prepend)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ct \\(.+\\)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-todo&lt;/span&gt; prepend)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ci \\(.+\\)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-important&lt;/span&gt; prepend)
)
))
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add-custom-keyw&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;js2-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add-custom-keyw&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;js-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add-custom-keyw&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It&amp;#39;s a hack but it does indeed work. In action, it looks something
like this:
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/3TLw1yOMKMc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Truth be told, it really colors anything following cx, ct, or ci, not
just in comments – I have to look a bit more into how emacs handles
comments to figure that one out.
&lt;/p&gt;
&lt;p&gt;
In any event, even though I spent too much time doing this, it&amp;#39;s nice
to know I&amp;#39;m working in a tool in which I can.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;&lt;/strong&gt; Thanks to user ncsuwolf on /r/emacs on reddit, here&amp;#39;s a
fully working, more properly done solution:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defface font-lock-comment-strike
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (:strike-through &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)))
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;For strike-through comments&amp;#34;&lt;/span&gt;)

(defface font-lock-comment-important
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (:foreground &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#00ff00&amp;#34;&lt;/span&gt;)))
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;For important&amp;#34;&lt;/span&gt;)
(defface font-lock-comment-todo
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (:foreground &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#ff0000&amp;#34;&lt;/span&gt;))
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;For todo comments&amp;#34;&lt;/span&gt;)
(defun add-custom-keyw()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;adds a few special keywords&amp;#34;&lt;/span&gt;
(font-lock-add-keywords
&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\s&amp;lt;+x[[:space:]]*\\(.*?\\)[[:space:]]*\\s&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-strike&lt;/span&gt; prepend)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\s&amp;lt;+t[[:space:]]*\\(.*?\\)[[:space:]]*\\s&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-todo&lt;/span&gt; prepend)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\s&amp;lt;+i[[:space:]]*\\(.*?\\)[[:space:]]*\\s&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-important&lt;/span&gt; prepend))))

(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;prog-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;add-custom-keyw)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 6 - Searching a Swiper</title>
      <link>https://cestlaz.github.io/posts/using-emacs-6-swiper/</link>
      <pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-6-swiper/</guid>
      <description>&lt;p&gt;
This video is all about using incremental search to navigate through your emacs buffers.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/0mwwN0S1dnQ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
You can use the default incremental searchb, bound to &lt;strong&gt;&lt;strong&gt;C-s&lt;/strong&gt;&lt;/strong&gt; for
isearch-forward &lt;strong&gt;&lt;strong&gt;C-r&lt;/strong&gt;&lt;/strong&gt; to search backwards (reverse).
&lt;/p&gt;
&lt;p&gt;
They work really well as is but I prefer using &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;Swiper&lt;/a&gt;. The video demos
both and the &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;Swiper&lt;/a&gt; home page has loads of details.
&lt;/p&gt;
&lt;p&gt;
Part of the Swiper package includes ivy and counsel which I use instead of ido.
&lt;/p&gt;
&lt;p&gt;
The video also mentions lorem-ipsum mode for generating text quickly and &lt;strong&gt;&lt;strong&gt;describe-mode&lt;/strong&gt;&lt;/strong&gt; in the help system.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the code we added for swiper:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; it looks like counsel is a requirement for swiper&lt;/span&gt;
(use-package counsel
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
)

(use-package swiper
:ensure try
:config
(progn
(ivy-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
(setq ivy-use-virtual-buffers &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(global-set-key &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\C-s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;swiper&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c C-r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ivy-resume&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f6&amp;gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ivy-resume&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-x&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-M-x&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x C-f&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-find-file&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f1&amp;gt; f&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-describe-function&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f1&amp;gt; v&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-describe-variable&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f1&amp;gt; l&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-load-library&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f2&amp;gt; i&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-info-lookup-symbol&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f2&amp;gt; u&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-unicode-char&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c g&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-git&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c j&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-git-grep&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c k&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-ag&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x l&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-locate&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-S-o&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-rhythmbox&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; read-expression-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-expression-history&lt;/span&gt;)
))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and we commented out the ido stuff:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; using swiper so ido no longer needed&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;(setq ido-enable-flex-matching t)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;(setq ido-everywhere t)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;(ido-mode 1)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
If you want to see a nice video specifically on swiper by the author, here it is:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/VvnJQpTFVDc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Swiper: &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;&lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;https://github.com/abo-abo/swiper&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The Swiper Manual: &lt;a href=&#34;http://oremacs.com/swiper/&#34;&gt;http://oremacs.com/swiper/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-6-swiper&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-6-swiper&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 5 - Windows</title>
      <link>https://cestlaz.github.io/posts/using-emacs-5-windows/</link>
      <pubDate>Tue, 14 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-5-windows/</guid>
      <description>&lt;p&gt;
Sorry for the delay in getting this next video / post up. I spent the
last part of last week at &lt;a href=&#34;http://go.personaldemocracy.com/&#34;&gt;The Personal Democracy Forum 2016&lt;/a&gt; which is really an exceptional conference.
&lt;/p&gt;
&lt;p&gt;
I posted a bit about it in my &lt;a href=&#34;http://cestlaz.github.io/posts/pdf2016-lost-in-the-silo/#.V2B9th9vGAk&#34;&gt;last post&lt;/a&gt; and plan to write some more on it, but for now, more Emacs.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/D6OUMVbPKSA&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
This video concerns using windows. By using buffers and windows and
the basics you got from the tutorial, you shouldn&amp;#39;t have to ever leave emacs.
&lt;/p&gt;
&lt;p&gt;
From here, we&amp;#39;ll be able to start going over effective Emacs and then
using it for things like development or document creation.
&lt;/p&gt;
&lt;p&gt;
Some of the key window bindings:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;what it does&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C-x 2&lt;/td&gt;
&lt;td&gt;split-window-below (vertically)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C-x 3&lt;/td&gt;
&lt;td&gt;split-window-right (horizontally)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C-x 0&lt;/td&gt;
&lt;td&gt;delete-window (this one)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C-x 1&lt;/td&gt;
&lt;td&gt;delete-other-windows&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C-x o&lt;/td&gt;
&lt;td&gt;other-window (moves foxus to the next window&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
You also have frames which use &lt;strong&gt;&lt;strong&gt;C-x 5&lt;/strong&gt;&lt;/strong&gt; as the prefix, so &lt;strong&gt;&lt;strong&gt;C-x 5 2&lt;/strong&gt;&lt;/strong&gt;
creats a new frame and &lt;strong&gt;&lt;strong&gt;C-x 5 1&lt;/strong&gt;&lt;/strong&gt; closes the other frames.
&lt;/p&gt;
&lt;p&gt;
Remember, you can always use the help system, in particular &lt;strong&gt;&lt;strong&gt;C-x k&lt;/strong&gt;&lt;/strong&gt;
to describe a key and &lt;strong&gt;&lt;strong&gt;C-x f&lt;/strong&gt;&lt;/strong&gt; to describe a function.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;C-x o&lt;/strong&gt;&lt;/strong&gt; can be a little clunky so some people like to use
&lt;strong&gt;&lt;strong&gt;windmove&lt;/strong&gt;&lt;/strong&gt; which lets you move between windows by holding the shift
key and with the arrows. To set that up, you can add this to your
&lt;strong&gt;&lt;strong&gt;init.el&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(windmove&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;keybindings)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I prefer using &lt;strong&gt;&lt;strong&gt;ace-window&lt;/strong&gt;&lt;/strong&gt; mode which still uses &lt;strong&gt;&lt;strong&gt;C-x o&lt;/strong&gt;&lt;/strong&gt;:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;; add this to init&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;el
(use&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;package ace&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;window
:ensure t
:init
(progn
(&lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;set&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;key [remap other&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;window] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ace-window)&lt;/span&gt;
(custom&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;set&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;faces
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(aw-leading-char-face&lt;/span&gt;
((t (:inherit ace&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;jump&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;face&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;foreground :height &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt;)))))
))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The other mode I mention in the video is winner mode:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(winner&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Which will allow you to use &lt;strong&gt;&lt;strong&gt;C-c left or right&lt;/strong&gt;&lt;/strong&gt; to move through past
window configurations.
&lt;/p&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Ace window mode: &lt;a href=&#34;https://github.com/abo-abo/ace-window&#34;&gt;https://github.com/abo-abo/ace-window&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-5-windows&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-5-windows&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 3 - How to think about Emacs</title>
      <link>https://cestlaz.github.io/posts/using-emacs-3-elisp/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-3-elisp/</guid>
      <description>  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/nyQxRarVYH4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Many people think of Emacs as an editor. I like to think of it as an Elisp interpreter where you live code documents.
&lt;/p&gt;
&lt;p&gt;
In some ways, it&amp;#39;s like those new fangled interactive programming environments where you type in code and the updates are reflected instantly.
&lt;/p&gt;
&lt;p&gt;
In this video, I try to explain the way I think about Emacs and why it&amp;#39;s so cool.
&lt;/p&gt;
&lt;p&gt;
The only change we made to our configuration was adding:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(tool&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bar&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mode &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Which gets rid of the tool bar at the top.
&lt;/p&gt;
&lt;p&gt;
Next time, we start talking about efficiently using Emacs.
&lt;/p&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-2-org&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-3-elisp&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-3-elisp&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 4 - Buffers</title>
      <link>https://cestlaz.github.io/posts/using-emacs-4-buffers/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-4-buffers/</guid>
      <description>  &lt;iframe width=&#34;480&#34; height=&#34;270&#34; src=&#34;https://www.youtube.com/embed/v5eTK5lC0xs&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Now that we&amp;#39;re past the intro material, we&amp;#39;ll start looking at emacs
features one at a time. This will let you focus on using the one
feature we&amp;#39;re covering, fit it into your work flow, and really get
comfortable with it.
&lt;/p&gt;
&lt;p&gt;
This time we&amp;#39;ll dive into using Emacs effectively with buffers.
&lt;/p&gt;
&lt;p&gt;
Watch the video and then make a real effort to use buffers over the
next few emacs sessions. Before you know it, they&amp;#39;ll be a natural part
of your work flow.
&lt;/p&gt;
&lt;p&gt;
The idea of incrementally learning a tool this way seems to be called
&lt;a href=&#34;http://sachachua.com/blog/2015/01/developing-emacs-micro-habits-text-automation/&#34;&gt;developing micro-habits&lt;/a&gt; and I first read about the idea from &lt;a href=&#34;https://twitter.com/sachac&#34;&gt;Sacha
Chua&lt;/a&gt; who is an amazing member of the emacs community.
&lt;/p&gt;
&lt;p&gt;
When seeing beginners, I&amp;#39;ll frequently observe this work flow:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Open a terminal
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Load emacs on a file
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Edit the file
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Save and quit emacs
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Try to compile and run the program (since usually this is in a programming class)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
repeat
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
If the beginner needs to see multiple files at once, they fire up multiple separate emacs.
&lt;/p&gt;
&lt;p&gt;
All of this causes me physical pain.
&lt;/p&gt;
&lt;p&gt;
In emacs, your editor can load several buffers at once, each
associated with a separate file. You can quickly switch between them,
search across them, and more. The video will get you started.
&lt;/p&gt;
&lt;p&gt;
The video also mentions &lt;strong&gt;ido&lt;/strong&gt; mode. To set up &lt;strong&gt;ido&lt;/strong&gt; mode, add the
following code to your init.el:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(setq ido&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;enable&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;flex&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;matching t)
(setq ido&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;everywhere t)
(ido&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And here&amp;#39;s a great little write up on it by &lt;a href=&#34;https://www.masteringemacs.org/reading-guide&#34;&gt;Mickey Petersen&lt;/a&gt;:
&lt;/p&gt;
&lt;p&gt;
https://www.masteringemacs.org/article/introduction-to-ido-mode
&lt;/p&gt;
&lt;p&gt;
As I mentioned in the video, I actually use another mode for completions (&lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;swiper&lt;/a&gt;),
which I&amp;#39;ll cover in a future video and another popular option is &lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;helm&lt;/a&gt;
which we&amp;#39;ll also cover.
&lt;/p&gt;
&lt;p&gt;
For buffers, the keys to remember are:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C-x b&lt;/td&gt;
&lt;td&gt;switch-buffer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C-x C-b&lt;/td&gt;
&lt;td&gt;list-buffers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
To use ibuffer, which is more powerful than list-buffers you can add
either:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(defalias &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;list-buffers &amp;#39;&lt;/span&gt;ibuffer) ; make ibuffer default&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Or if you want to open ibuffer in another Window:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(defalias &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;list-buffers &amp;#39;&lt;/span&gt;ibuffer&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;other&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;window) ; make ibuffer default&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Here are a couple of useful links on ibuffer and buffer switching:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://ergoemacs.org/emacs/emacs_buffer_switching.html&#34;&gt;http://ergoemacs.org/emacs/emacs_buffer_switching.html&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://mytechrants.wordpress.com/2010/03/25/emacs-tip-of-the-day-start-using-ibuffer-asap/&#34;&gt;https://mytechrants.wordpress.com/2010/03/25/emacs-tip-of-the-day-start-using-ibuffer-asap/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Finally, if you like a tab bar, you can add the following to your
init.el:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(use&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;package tabbar
:ensure t
:config (tabbar&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
There&amp;#39;s also a package &lt;a href=&#34;https://github.com/mattfidler/tabbar-ruler.el&#34;&gt;tabbar-ruler&lt;/a&gt; which is supposed to make the
tabbar look nicer but since I don&amp;#39;t use the tabbar at all, I haven&amp;#39;t
checked it out.
&lt;/p&gt;
&lt;p&gt;
Hope this gets you using emacs more effectively.
&lt;/p&gt;
&lt;p&gt;
Stay tuned for our next video on window management.
&lt;/p&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-4-buffers&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-4-buffers&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-4-buffers&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - Intro to Org Mode</title>
      <link>https://cestlaz.github.io/posts/using-emacs-2-org/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-2-org/</guid>
      <description>  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/x5KiYDd9s8k?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
This video is a brief introduction to org-mode, a mode I use for all
sorts of things.
&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll dive into org-mode later in the series. Right now I just want
you to see the basics since we&amp;#39;ll be using org-mode for any notes that
are written up during this series.
&lt;/p&gt;
&lt;p&gt;
Actually, all my blog posts are written in org-mode.
&lt;/p&gt;
&lt;p&gt;
Here are the important lines to add to your Emacs &lt;strong&gt;init.el&lt;/strong&gt; file  to
get the nice looking bullets when in org-mode:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(use&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;package org&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bullets
:ensure t
:config
(add&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-mode-hook (lambda () (org-bullets-mode 1))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
About a month ago, Emacs user Harry Schwartz gave a nice overview talk
on org-mode. If you want to get a better idea as to all the things you
can do with it, check it out: &lt;a href=&#34;https://www.youtube.com/watch?v=SzA2YODtgK4&#34;&gt;https://www.youtube.com/watch?v=SzA2YODtgK4&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Next time, we&amp;#39;ll look at a little Elisp. After that, we&amp;#39;ll dive in to
using Emacs effectively and efficiently.
&lt;/p&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-2-org&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-2-org&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-2-org&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Packages
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/sabof/org-bullets&#34;&gt;org-bullets&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - Introduction</title>
      <link>https://cestlaz.github.io/posts/using-emacs-introduction/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-introduction/</guid>
      <description>
&lt;p&gt;
I&amp;#39;m sure I&amp;#39;ve mentioned that I&amp;#39;ve been an Emacs wonk for
decades. Since the mid-80&amp;#39;s in fact. I&amp;#39;ve spent time using other
editors, word processors, and development tools but always find my way
back.
&lt;/p&gt;
&lt;p&gt;
I recommend that budding computer science students develop a good tool
set and encourage them to explore Emacs but while it&amp;#39;s pretty easy to
load Emacs and find your way around, particularly if you use the mouse
and menus there isn&amp;#39;t a clear path to take you from beginner to using
it as an efficient tool let alone customizing it.
&lt;/p&gt;
&lt;p&gt;
Inspired by &lt;a href=&#34;https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q/featured&#34;&gt;Mattias Petter Johansson&lt;/a&gt;, or MPJ who make a weekly video,
I decided to try to create a series of YouTube videos and matching
blog posts. I&amp;#39;ll try to post one a week and I&amp;#39;ll try to keep the
videos, at least after the first couple to just a few minutes and have
them focus on &lt;a href=&#34;http://sachachua.com/blog/2015/01/developing-emacs-micro-habits-text-automation/&#34;&gt;micro-habits&lt;/a&gt; - one or two small things that you can
bring to your work flow and internalize.
&lt;/p&gt;
&lt;p&gt;
The first three four (this one and the next three) will focus on
setting things up. After this post we&amp;#39;ll have
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Setting up the package manager
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Intro to org-mode (just so that you recognize the markup)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Intro to Elisp (just so you have an idea of those configuration
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
lines)
&lt;/p&gt;
&lt;p&gt;
and then we&amp;#39;re off to the races. Here&amp;#39;s what I&amp;#39;m thinking about for
the first few topics after the above mentioned ones:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Efficient Navigation
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Windows and Buffers
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Theming
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Auto Completion
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
and then a series of short topics to show some of my favorite editing
tools. We&amp;#39;ll also cover some larger topics including:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Python Development
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
C/C++ Development
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Document Preparation
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Scheduling / Calendaring / Note Taking
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I&amp;#39;ll put together an index to these posts along with any ancillary
materials here: &lt;a href=&#34;https://cestlaz.github.io/stories/emacs&#34;&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/a&gt;.
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Getting started
&lt;/h2&gt;
&lt;p&gt;
This series is going to assume you&amp;#39;ve installed emacs and worked your
way through the included tutorial.
&lt;/p&gt;
&lt;p&gt;
To help you get to that point, here are some links to posts and sites
that I&amp;#39;ve found useful:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://www.braveclojure.com/basic-emacs/&#34;&gt;http://www.braveclojure.com/basic-emacs/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.masteringemacs.org/article/beginners-guide-to-emacs&#34;&gt;https://www.masteringemacs.org/article/beginners-guide-to-emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs&#34;&gt;http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-use-the-emacs-editor-in-linux&#34;&gt;https://www.digitalocean.com/community/tutorials/how-to-use-the-emacs-editor-in-linux&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
And here&amp;#39;s a 10 minute getting started guide:
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/K3_SFerNIeI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
So, stay tuned.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - Setting up the Package Manager</title>
      <link>https://cestlaz.github.io/posts/using-emacs-1-setup/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-1-setup/</guid>
      <description>&lt;p&gt;
This video will step you through setting up Emacs to use &lt;a href=&#34;http://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt; for packages.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/49kBWM3RQQ8?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
We configured emacs by creating a folder named &lt;strong&gt;.emacs.d&lt;/strong&gt; and creating a
file within it named &lt;strong&gt;init.el&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the contents of that file:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(setq inhibit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;startup&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;message t)


(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package)&lt;/span&gt;
(setq package&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;enable&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;at&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;startup nil)
(add&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package-archives&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(&amp;#34;melpa&amp;#34; . &amp;#34;https://melpa.org/packages/&amp;#34;))&lt;/span&gt;

(package&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;initialize)

;; Bootstrap &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;use&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;package&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
(unless (package&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;installed&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package)&lt;/span&gt;
(package&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;refresh&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;contents)
(package&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;install &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package))&lt;/span&gt;

(use&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;package &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
:ensure t)

(use&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;package which&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;key
:ensure t
:config
(which&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mode))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The last two &lt;strong&gt;inituse-package&lt;/strong&gt; clauses install two helpful packages:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;try&lt;/strong&gt;: let&amp;#39;s you try packages without installing them.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;which-key&lt;/strong&gt;: brings up help on key combinations.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Relavent links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-1-setup&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-1-setup&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-1-setup&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Melpa and packages
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://melpa.org&#34;&gt;&lt;a href=&#34;http://melpa.org&#34;&gt;http://melpa.org&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/justbur/emacs-which-key&#34;&gt;which-key&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/larstvei/Try&#34;&gt;try&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Know your tools - intermediate Emacs</title>
      <link>https://cestlaz.github.io/posts/2015-10-28-emacs-intermediate/</link>
      <pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-10-28-emacs-intermediate/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;
&lt;div id=&#34;outline-container-orgheadline1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline1&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline1&#34;&gt;
&lt;p&gt;
A good workman is known by his tools, or so the saying goes. My tools
of choice are my terminal shell and Emacs.
&lt;/p&gt;

&lt;p&gt;
I suppose if I was a full time developer working with a limited set of
tools I might like an IDE like JetBrains or Eclipse but no matter how
many alternatives I try, I always end back in Emacs.
&lt;/p&gt;

&lt;p&gt;
I recommend that my students spend time not only in Emacs but also in
tools like Vim or Sublime Text.
&lt;/p&gt;

&lt;p&gt;
I do warn them, though, that as a commercial product, Sublime might
not be around forever, I mean before Sublime was sublime, TextMate was
sublime. If you go back to the 1980s, Brief was sublime.
&lt;/p&gt;

&lt;p&gt;
Commercial tools come and go but I&#39;ve been using Emacs since the mid
eighties.
&lt;/p&gt;

&lt;p&gt;
A few students have been asking me for some pointers on going past the
basics of Emacs so here we go.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id=&#34;outline-container-orgheadline2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline2&#34;&gt;Notes&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline2&#34;&gt;
&lt;p&gt;
This post just has some getting started notes. There are mode powerful
and advanced ways of doing most things.
&lt;/p&gt;

&lt;p&gt;
I think I&#39;ll just talk about a few of the basics here and will write
about code development with Emacs in a later post.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-orgheadline3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline3&#34;&gt;Starting out&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline3&#34;&gt;
&lt;p&gt;
Once you&#39;re OK with the basics (by using the built in tutorial or
on line resources) start to fore yourself to get to know:
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-orgheadline4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;orgheadline4&#34;&gt;Buffers&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-orgheadline4&#34;&gt;
&lt;p&gt;
when you find a new file &lt;b&gt;&lt;b&gt;(C-x C-f)&lt;/b&gt;&lt;/b&gt; it opens it into a new
buffer. You can also open a new buffer using &lt;b&gt;&lt;b&gt;C-x b&lt;/b&gt;&lt;/b&gt; and rather than
selecting a buffer typing in a new buffer name.
&lt;/p&gt;

&lt;p&gt;
Each buffer can hold a file and you can switch quickly between them
using &lt;b&gt;&lt;b&gt;C-x b&lt;/b&gt;&lt;/b&gt; and hitting &lt;b&gt;&amp;lt;Enter&amp;gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
You can kill the current buffer with &lt;b&gt;&lt;b&gt;C-x k&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Using buffers lets you edit multiple files in a project quickly and
efficiently.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-orgheadline5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;orgheadline5&#34;&gt;Windows&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-orgheadline5&#34;&gt;
&lt;p&gt;
Your Emacs frame can be split into multiple windows. &lt;b&gt;&lt;b&gt;C-x 2&lt;/b&gt;&lt;/b&gt; splits
the window top and bottom, &lt;b&gt;&lt;b&gt;C-x3&lt;/b&gt;&lt;/b&gt; left and right. You can switch
between windows using &lt;b&gt;&lt;b&gt;C-x o&lt;/b&gt;&lt;/b&gt; for other window. Switching to one
window is done with &lt;b&gt;&lt;b&gt;C-x 1&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-orgheadline6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline6&#34;&gt;Getting Help&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline6&#34;&gt;
&lt;p&gt;
Get to know the built in help. You can always use functions like
&lt;b&gt;&lt;b&gt;M-x describe-function&lt;/b&gt;&lt;/b&gt; or &lt;b&gt;&lt;b&gt;M-x describe-key&lt;/b&gt;&lt;/b&gt; and of course
you can use completion to help speed things up but the help functions
are bound to:
&lt;/p&gt;
&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;C-h k  for describe key&lt;/li&gt;
&lt;li&gt;C-h f  for describe function&lt;/li&gt;
&lt;li&gt;C-h a for search for command&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
You can usually type &lt;b&gt;&lt;b&gt;q&lt;/b&gt;&lt;/b&gt; to close the help.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-orgheadline7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline7&#34;&gt;Navigation&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline7&#34;&gt;
&lt;p&gt;
Use search for navigation rather than arrow keys.
&lt;/p&gt;

&lt;p&gt;
This can change the way you edit.
&lt;/p&gt;

&lt;p&gt;
For example ,if I wanted to go up to the word Navigation, above,
rather than using traditional motion keys, I&#39;d do a reverse search
(&lt;b&gt;&lt;b&gt;C-r&lt;/b&gt;&lt;/b&gt;) and search for Nav.
&lt;/p&gt;

&lt;p&gt;
Incremental search forward (&lt;b&gt;&lt;b&gt;C-s&lt;/b&gt;&lt;/b&gt;) and back are your friends.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-orgheadline8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline8&#34;&gt;Packages&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline8&#34;&gt;
&lt;p&gt;
You can check out my emacs configuration here:
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/dotemacs&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/dotemacs&#34;&gt;https://github.com/zamansky/dotemacs&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
You can find basic installation instructions there or you can use the
interactive package manager, invoking it with &lt;b&gt;&lt;b&gt;M-x list-packages&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Some of my favorite general purpose packages are:
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;Swiper&lt;/a&gt; - for navigation and finding files&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nflath/hungry-delete&#34;&gt;Hungry Delete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/magnars/expand-region.el&#34;&gt;Expand Region&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/abo-abo/ace-window&#34;&gt;Ace Window&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-orgheadline9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline9&#34;&gt;Next steps&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline9&#34;&gt;
&lt;p&gt;
We haven&#39;t even talked about code development or killer packages like
org-mode but I think this will do for a start.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>