<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>computer science on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/computer-science/</link>
    <description>C&#39;est la Z (computer science)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Nov 2019 16:18:51 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/computer-science/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Working with texts part 1 - cleaning the data</title>
      <link>https://cestlaz.github.io/post/cleaning-textx/</link>
      <pubDate>Fri, 15 Nov 2019 16:18:51 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cleaning-textx/</guid>
      <description>&lt;p&gt;
I run periodic professional development sessions here in New York with
my partner in crime JonAlf Dyrland-Weaver. I call them PD for &amp;#34;APCS-A,
similar or beyond&amp;#34; and they&amp;#39;re designed to fill a professional
development gap. We try to run them once a month but it&amp;#39;s a little
less frequent than that.
&lt;/p&gt;
&lt;p&gt;
The NYCDOE has taken on the monster task of CS for all and since
they&amp;#39;re trying to get to everyone they have to run a bazillion
sessions but all at an introductory level. Beyond that, most PD is
tied to a curriculum, program, or product. We decided to run sessions
for teachers who are ready for more both pedagogically and content
wise while not affiliating with any specific provider. We&amp;#39;re just
about the CS and the teaching of CS.
&lt;/p&gt;
&lt;p&gt;
Yesterday we had our first session of the year and the content topic
was text processing. Along the way, we used it as an opportunity to
highlight subgoal labeling as a teaching technique.
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a lot you can do in both CS0 and CS1 with text and document
processing. By the end of yesterday&amp;#39;s session we had discussed a bunch
of possibilities based on the text processing technique known as a
&amp;#34;bag of words&amp;#34; which basically takes a text and just considers all the
words it contains. What are the words and how many times does each
word occurs. No consideration of order, grammar, or anything else. Just
words and counts. We also talked a bit about more advanced possibilities
like playing with an inverted index. I&amp;#39;ll talk about both of those in
a future post. 
&lt;/p&gt;
&lt;p&gt;
For today, let&amp;#39;s talk about what we have to do before we even begin -
preprocessing the data.
&lt;/p&gt;
&lt;p&gt;
We grabbed a bunch of texts from &lt;a href=&#34;https://www.gutenberg.org/&#34;&gt;Project Gutenberg&lt;/a&gt;. Specifically, &amp;#34;Moby
Dick&amp;#34;, a translation of my favorite play &amp;#34;Cyrano de Bergerac&amp;#34; and the
Book of Psalms from the Bible. I also made a copy of the first chapter
of &amp;#34;Moby Dick&amp;#34; so we had a shorter corpus to play with and typed up
the first scene of &amp;#34;Macbeth&amp;#34; - all thirteen lines of it.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s easy enough to read in the data in a language like Python:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cyrano.txt&amp;#34;&lt;/span&gt;)
raw_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
but if you&amp;#39;re using a bag of words you&amp;#39;ve got to do some cleaning.
&lt;/p&gt;
&lt;p&gt;
To start, all Project Gutenberg texts contain a whole bunch of front
and back matter with lots of words. If you don&amp;#39;t get rid of them
you&amp;#39;ll get extra words in your bag. I forgot to do this and was a bit
surprised to see phrases like &amp;#34;Pay a trademark license&amp;#34; in the Book of
Psalms.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s easy enough to just cut the tops and bottoms of each file off
with an editor and that&amp;#39;s when we can read our data into our program
and the fun begins.
&lt;/p&gt;
&lt;p&gt;
First we had to turn everything into lower case;
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lower_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
and then the big part - we want to get rid of all the punctuation. We
first tried something like this:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;stuff_to_remove &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.:;&amp;#39;0123456789&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;cleaned_letters &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lower_data &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stuff_to_remove]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;cleaned_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cleaned_letters)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
The second line is a list comprehension. It iterates through each
letter in lower_data and copies it into the resultant list only if the
letter is not in our stuff_to_remove list.
&lt;/p&gt;
&lt;p&gt;
For example, if we had &lt;code&gt;lower_data = &amp;#34;abc123def g&amp;#34;&lt;/code&gt; we&amp;#39;d get a result
of &lt;code&gt;[&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;,&amp;#34;c&amp;#34;,&amp;#34;d&amp;#34;,&amp;#34;e&amp;#34;,&amp;#34;f&amp;#34;,&amp;#34; &amp;#34;,&amp;#34;g&amp;#34;]&lt;/code&gt;. We then use the join in line 3
to turn it back into a string &lt;code&gt;&amp;#34;abcdef g&amp;#34;&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
This worked pretty well but we found that there were problems. There
were characters that we didn&amp;#39;t account for like long dashes that
connected words and we didn&amp;#39;t have an easy way to put them in our
removal string.
&lt;/p&gt;
&lt;p&gt;
This led to take 2. Instead of deciding what to throw away, let&amp;#39;s
decide what to keep;
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;stuff_to_keep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abcdefghijklmnopqrstuvwxyz &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;cleaned_letters &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lower_data &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stuff_to_remove]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;cleaned_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(cleaned_letters)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
This worked better (and yes, I know I could have used isalpha() but I
didn&amp;#39;t remember it at the time) but still had problems. We had words
that were formerly separated by punctuation with no spaces that were
now combined into new invalid words. We also had things like chapter
headings in our text and other stray words that we probably wanted to
get rid of.
&lt;/p&gt;
&lt;p&gt;
All of this led to rich conversation among the teachers present and
can do the same in class. What do you clean? What do you keep? Is it
worth the effort to write all sorts of cleaning code to get rid of a
couple of stray bits of bad data or can we get the results we want by
leaving it in? There&amp;#39;s no universally right answer and that&amp;#39;s part of
the beauty of doing things like this with a class - it&amp;#39;s something
that can make them think.
&lt;/p&gt;
&lt;p&gt;
Once we made our final cleaning decisions it&amp;#39;s a simple matter to
convert the long string of text into a list of words:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;wordlist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cleaned_string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Now we&amp;#39;re ready to start building our bag of words but that&amp;#39;s a post
for another day.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>