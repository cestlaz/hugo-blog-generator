<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>csforall on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/csforall/</link>
    <description>C&#39;est la Z (csforall)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Apr 2019 08:12:54 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/csforall/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>CS Teacher PD at Grow with Google</title>
      <link>https://cestlaz.github.io/post/pd-at-gwg/</link>
      <pubDate>Fri, 12 Apr 2019 08:12:54 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pd-at-gwg/</guid>
      <description>&lt;p&gt;
Yesterday we held our third monthly Professional Development session
for teachers of &amp;#34;APCS-A, Similar, and Beyond.&amp;#34; It&amp;#39;s great to see that
we&amp;#39;re starting to form a core of a community of CS teachers teaching
some of the more advanced classes as there is a core group that keeps
coming back for more. Even better is the fact that we&amp;#39;re gaining a
couple of new teachers at each session.
&lt;/p&gt;
&lt;p&gt;
Last time, we were at &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;Digital Ocean&lt;/a&gt;, a cloud provide that has been
very involved in education since their creation  and has been a
tremendous boon to my education projects over the years. 
&lt;/p&gt;
&lt;p&gt;
This time we were hosted at &lt;a href=&#34;https://events.withgoogle.com/grow-with-google-in-nyc/#content&#34;&gt;Grow with Google&lt;/a&gt;&amp;#39;s new New York City
space. It&amp;#39;s a great space on the first two floors of Google&amp;#39;s main
building in Chelsea - 111 8th avenue. GWG looks like it will be a
terrific resource for New Yorkers with workshops ranging from coding,
resume writing, digital skills, and more. They also have offerings for
both kids and adults. 
&lt;/p&gt;
&lt;p&gt;
They were also great hosts, providing a great room for us to run our
session as well as a nice dinner to keep the teachers fueled.
&lt;/p&gt;
&lt;p&gt;
As usual, we had two major themes for our PD. First the pedagogy. My
former colleage Topher started with a pair programming workshop. 
&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;
    &amp;lt;img src=&amp;#34;/img/gwg-topher.jpg&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;
&lt;/p&gt;
&lt;p&gt;
Pair programming is a pretty common technique but it&amp;#39;s deceptively
difficult to do well. It&amp;#39;s not as simple as &amp;#34;work in groups of two&amp;#34;
and it can be a challenge to make sure both students are engaged and
progressing while using this practice.
&lt;/p&gt;
&lt;p&gt;
Topher ran the group through a pair programming exercise and led a
discussion as to some of the strategies he uses and some of the
challenges he&amp;#39;s face. I found it very helpful. Even small suggestions
like when he has each pair draw their &amp;#34;team flag&amp;#34; on a piece of paper
which they&amp;#39;ll hold up if they want to ask for help. In the discussion
after the workshop I mentioned that I&amp;#39;ve had more success with pair
programming when I relate it to a series of code review lessons I&amp;#39;ve
been doing and that if people were interested I&amp;#39;d talk about those
lessons at a future session.
&lt;/p&gt;
&lt;p&gt;
Then we had dinner after which I did the content piece.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;
    &amp;lt;img src=&amp;#34;/img/gwg-z.jpg&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;
&lt;/p&gt;
&lt;p&gt;
We first look at a bit of &lt;a href=&#34;https://ccl.northwestern.edu/netlogo/&#34;&gt;NetLogo&lt;/a&gt; for image procesing mostly so I
could introduce the participants to NetLogo since it&amp;#39;s really an
underused, underappreciated environment. Then we talked a bit about
the APCS-A image lab. This led to the meat of the content piece. We
took a look at &lt;a href=&#34;https://www.youtube.com/watch?v=6NcIJXTlugc&amp;amp;list=WL&amp;amp;index=44&amp;amp;t=0s&#34;&gt;this video&lt;/a&gt; on seam carving. When I first saw it, I was
blown away. Now it&amp;#39;s an old technique but I&amp;#39;m still blown away by how
it can be used as both motivation and a a platform to teach some
dynamic programming. We then did a brief overview behind the basic
ideas of dynamic programming and then developed the dynamic
programming algorith that&amp;#39;s used in Seam Carving. I&amp;#39;ll probably write
all of this up in more detail in a future post.
&lt;/p&gt;
&lt;p&gt;
Overall it was a great event. We have one more PD scheduled for May
and then we&amp;#39;ll start it up again in the Fall.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s great to have amazing partners like Google and Digital Ocean to
help support our CS teachers and I&amp;#39;m looking forward to work with both
of them for years to come.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thoughts On Code And Beyond - Computational Thinking</title>
      <link>https://cestlaz.github.io/post/thoughts-on-code-and-beyond-ct/</link>
      <pubDate>Mon, 14 Jan 2019 17:48:27 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/thoughts-on-code-and-beyond-ct/</guid>
      <description>&lt;p&gt;
The theme of this year&amp;#39;s &lt;a href=&#34;https://twitter.com/i/moments/1084877641285541889&#34;&gt;To Code and Beyond&lt;/a&gt; was Computational
Thinking. &lt;a href=&#34;https://twitter.com/guzdial&#34;&gt;Mark Guzdial&lt;/a&gt; gave the keynote. While the talk isn&amp;#39;t
currently online, check out &lt;a href=&#34;https://www.youtube.com/watch?v=N3uCb-95fFE&amp;amp;t=5s&#34;&gt;this talk&lt;/a&gt; that Mark gave last March. It&amp;#39;s
not the same but the second halves are and well worth a look.
&lt;/p&gt;
&lt;p&gt;
In the first half, Mark talked about other types of &amp;#34;thinking.&amp;#34;
Scientific thinking, engineering thinking and even historical
thinking. All had a good amount of overlap with both each other and
with computational thinking even as we haven&amp;#39;t yet settled on what
computational thinking actually is.
&lt;/p&gt;
&lt;p&gt;
This overlap is why I think that bringing CS into the primary grades
gives us an opportunity to reduce the achievement gap between rich and
poor. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve already said that I&amp;#39;m not sold on hardcore CS and programming in
the early grades but rather it&amp;#39;s CT - the problem solving and
methodologies of CS that can effectively be part of the earlier
grades.
&lt;/p&gt;
&lt;p&gt;
Of course, that&amp;#39;s easier said than done. While there has been some
pushback recently we still have far too much emphasis on standardized
tests and elementary school teachers are way overworked. Trying to get
already overburdened teachers to add in a whole new subject area is a
big ask. The opportunity is that we might be able to develop aspects
of CT in a way that supports what elementary teachers are already
doing, possibly under the unlabeled guise of scientific thinking,
historical thinking, engineering thinking or some other thinking.
&lt;/p&gt;
&lt;p&gt;
This is already going on to a certain extent with individual teachers
at individual schools. Logic games and problem solving techniques have
always been explored by elementary school teachers who have freedom
from tightly packed test based curricula. These could be considered CT
and you could also add data collection and processing and I&amp;#39;m sure
many other things as well. This is where CS/CT can fit in the
elementary schools without adding to the teacher&amp;#39;s current
load. What&amp;#39;s more, if we can figure out how to incorporate these CT
concepts to support the subject matter already being studied we could
help close the gap between the haves and the have nots.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve said many times before that I&amp;#39;m not an elementary school
specialist but I still suspect this is the approach for CS in the
primary grades at least for the near term. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve already got a pretty full plate between my work with Hunters
Daedalus CS honors program along with our pre-service programs being
very close to going live but I&amp;#39;m also hoping to do some work in
relating to this in the near future.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is There a First Grade Machine Learning Achievement Gap?</title>
      <link>https://cestlaz.github.io/post/is-there-a-first-grade-ml-achievement-gap/</link>
      <pubDate>Fri, 11 Jan 2019 15:24:16 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/is-there-a-first-grade-ml-achievement-gap/</guid>
      <description>&lt;p&gt;
Today was the fifth &amp;#34;To Code and Beyond&amp;#34; - a one day conference
hosted at Cornell Technion and once again Diane Levitt put together
a great show. The theme was Computational Thinking and the day
consisted of a variety of talks, panels, and activities. I plan on
writing about one panel in particular but for today I wanted to
address something that came up as a question. One attendee asked a
panel about the achievement gap - the fact that when the CS movement got
started in NY some of the more innovative and interesting work was
being done with some of our most vulnerable students. Recently, he
heard about a student who was doing Machine Learning in early
elementary school - first grade. The concern
he had was that when we started the less affluent populations might
have even been pulling ahead but now he&amp;#39;s concerned that the gap
between have and have nots will continue to grow even in this new
field.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not so concerned about the ML gap in the early grades and I
still think that we still have an opportunity to lessen the gap
between the haves and have nots with CS and more specifically CT.
&lt;/p&gt;
&lt;p&gt;
I was reminded about when I started fencing. I first picked up a foil
in 11th grade. Stuy had a senior heavy team that year. I was the only
new junior and there were a bunch of new sophomores. The following
year, we were the starting lineup. We were raw but we still managed
second place in the city. Most of us continued on to fence in USFA
events and then in college. I remember one of the first events we went
to. It was the under 20 qualifiers for the Junior Olympics National
Championships. There were a couple of superstars who recently came
over from eastern bloc countries there. Also a bunch of
fencers we didn&amp;#39;t know but we knew that they&amp;#39;d been fencing for
years - since they were 8, 9, 10. &amp;#34;They&amp;#39;ve been fencing for
years. We&amp;#39;ve only been doing it for one. How can we ever compete?&amp;#34;
I remember Jordan saying &amp;#34;Yeah, they&amp;#39;ve fenced for years but probably
a day or two a week, we&amp;#39;ve been doing it intensely every day for a
year and a half.&amp;#34; He also noted that when they were in their early
years their bodies probably weren&amp;#39;t coordinated enough to really
develop so much. He was right. The superstars dominated but then we
were very much in the mix and in fact took most of the qualifying
spots. 
&lt;/p&gt;
&lt;p&gt;
I also thought about teaching CS at Stuy. There were always kid who
came in to class with prior experience. That was clear on day one and
for the first few weeks. By the end of the first semester you woudn&amp;#39;t
know it based on overall class performance. The newcomers caught up
pretty quickly. 
&lt;/p&gt;
&lt;p&gt;
This is why I&amp;#39; not really concerned when I hear about a school doing
Machine Learning in first grade. How much can they really do and how
deep is it? Is the kid even really ready for it or are they just going
through the motions? Or, are they just doing something they&amp;#39;ve always
done in first grade and are just labelling it ML.
&lt;/p&gt;
&lt;p&gt;
I think that last option is fairly likely. It&amp;#39;s also why I think we
still have an opportunity to close the achievement gap as part of the
CS / CT movement. 
&lt;/p&gt;
&lt;p&gt;
When people ask me about CS in the early grades I first tell them that
I&amp;#39;m not an early grade specialist. I follow this by stating that I
think that well resourced schools have been doing thing that we now
consider CT for years - logic, problem solving, puzzles, etc.When a
group of students solve a problem and describe a solution that
includes repetition it used to be just problem solving. Now it&amp;#39;s
computation thinking. Sure, we can tease it out, formalize it and
expand on it but the schools and teachers with the resources and
freedom have already been doing this. 
&lt;/p&gt;
&lt;p&gt;
With the CS For All movement, we have an opportunity to bring this to
all our students not just the well to do ones.
&lt;/p&gt;
&lt;p&gt;
Of course this is easier said than done. We have to prepare them to
identify these CT practices and actively develop these skills in their
students. This means giving teachers the time, resources, and training
and not shorten the already tight tether to standardized multiple
choice tests. 
&lt;/p&gt;
&lt;p&gt;
At times I&amp;#39;ve been disappointed with the overall K12 CS Ed
movement. We&amp;#39;ve made great strides coming from nowhere to where we are
but as a community we missed the opportunity to bypass the mistakes
and bad ideas that teachers of other disciplines are plagued with. 
We still have this chance with Computational Thinking and the early
grades.
&lt;/p&gt;
&lt;p&gt;
I hope we do it right.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CS For All The Time</title>
      <link>https://cestlaz.github.io/post/cs4allthetime/</link>
      <pubDate>Fri, 07 Dec 2018 08:20:42 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs4allthetime/</guid>
      <description>&lt;p&gt;
A question that frequently comes up with respect to CS for All is what
does it mean? 
&lt;/p&gt;
&lt;p&gt;
To me it means giving all students some fundamental exposure to
computer science so that they can:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Make use of those thinking skills, problem solving approaches, and
practical tools regardless of their future paths. 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Provide a path for the subset of &amp;#34;all&amp;#34; that desire to further pursue
computer science.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
But even with this, how do you do it?
&lt;/p&gt;
&lt;p&gt;
Does it mean that you require computer science? If so, do we require it every
year? some years? One time only?
&lt;/p&gt;
&lt;p&gt;
Does it mean you offer it as an elective? If so, when?
&lt;/p&gt;
&lt;p&gt;
I think about this a fair amount but decided to write something up
when I saw this tweet:
&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;STEM related career interests are largely developed before high school (Sadler, Sonnert, Hazari, &amp;amp; Tai, 2012) &lt;a href=&#34;https://twitter.com/hashtag/csforall?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#csforall&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/csedweek?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#csedweek&lt;/a&gt; &lt;a href=&#34;https://t.co/TiAUvpP3bQ&#34;&gt;https://t.co/TiAUvpP3bQ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Lana Peterson (@tyLanasaurusrex) &lt;a href=&#34;https://twitter.com/tyLanasaurusrex/status/1070475730562084864?ref_src=twsrc%5Etfw&#34;&gt;December 6, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
I responded that I&amp;#39;ve seen many kids get their first exposure in high
school and from that go on to careers in tech so it&amp;#39;s clear to me that
high school isn&amp;#39;t too late. I was reminded that I was talking about
kids who went through my required HS CS class so the kids had no
choice but to be exposed to CS but the people advocating starting at
an elementary level are talking about a compulsory experience so to
compare a required elementary experience against an elective high
school one is really apples to oranges.
&lt;/p&gt;
&lt;p&gt;
Even thought it&amp;#39;s an unfair comparison there are a lot of things it
can lead one to consider.
&lt;/p&gt;
&lt;p&gt;
Should we teach CS in every grade? Probably not. How about every band?
Maybe. For those of you not living in the K12 world &amp;#34;by band&amp;#34; usually
refers to a set of grades - kindergarten to 2, 3 through 5, 6-8, and
then high school. Where should it be required and where an elective?
&lt;/p&gt;
&lt;p&gt;
Teaching a required CS class in every grade or band is going to be a
huge undertaking. I&amp;#39;m also not sure it&amp;#39;s required. To get the best
bang for your buck you want to expose the kids to CS in a way and at a
time when they might pursue it further. If you&amp;#39;re having only one
required experience, I don&amp;#39;t think the elementary grades are the
place.
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s that point in time, I think around first through third grade
where dinosaurs are all the rage. Maybe more so in NYC where we have
access to the &lt;a href=&#34;https://www.amnh.org/&#34;&gt;American Museum of Natural History&lt;/a&gt; but still. Lots of
young kids want to be paleontologists but it doesn&amp;#39;t hold. Okay. maybe
I&amp;#39;m being a little silly here but I think the basic point is
accurate. Kids are exposed to many things in the early grades that
just fade away. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not saying that we shouldn&amp;#39;t do CS or CS related things in grade
school. Things like the activity &lt;a href=&#34;https://twitter.com/fredwilson&#34;&gt;Fred Wilson&lt;/a&gt; described in his post on
this year&amp;#39;s &lt;a href=&#34;https://avc.com/2018/12/la-hora-del-codigo/&#34;&gt;Hour of Code&lt;/a&gt; or the problem solving and logic games good
teachers do if given the time and resources. Things that have
always been done by some teachers in some schools but are now being
relabled CS or Computational Thinking. These are great practices and
should be made available to all students as part of their elementary
education but I doubt that they&amp;#39;ll lead to many kids following CS as a
career path. I&amp;#39;m not an elementary school expert but to me, even
though I see great value in the early logic / problem solving stuff, I
don&amp;#39;t see hyping CS early as making a difference unless there&amp;#39;s some
follow up before the interest fades.
&lt;/p&gt;
&lt;p&gt;
That brings us to the middle school bands. I&amp;#39;ve dabbled a little here
but it&amp;#39;s also not my wheelhouse. In my experience, kids in lower
middle school can dabble in DnD tools and start to develop some 
coding skills and explore some of the CS concepts that they&amp;#39;ll see in
late HS or college and those in upper middle school can play with the
text based languages to do the same. What I also noticed is that what
can be accomplished in a month with those kids in middle school can be
done in a week or two when the kids are a year or two older and with
greater understanding and retention. 
&lt;/p&gt;
&lt;p&gt;
As a side note, before people get up in arms with &amp;#34;I teach middle
school kids APCS-A and they all master it&amp;#34; let me say that I&amp;#39;m
describing my experience across a range of middle school kids. There
will always be few outliers who can do more when younger. That said
I&amp;#39;m betting that most people who say that any middle school kid can
indeed master APCS-A hasn&amp;#39;t done so in an inner city poor public
school. Have you done it while teaching a class of 34?  With a class
of low income students with all the disadvantages and challenges
inherent to that population? What&amp;#39;s more did you then have to teach
them a data structures course a year or two later to see if they
really mastered the original material.
&lt;/p&gt;
&lt;p&gt;
This brings us to high school. As with my original tweet, in my
experience if you give kids a good first CS experience in high school
you can indeed give them everything needed for CS for All and it&amp;#39;s
close enough to college so that they might very well continue on the
CS career path.
&lt;/p&gt;
&lt;p&gt;
So where does this leave us? We certainly should embed computational
thinking practices (whatever that actaully means) in the elementary
school, particularly if we can do it in a way that also supports other
academic areas and while it&amp;#39;s nice to have a CS middle school
experience and if we can afford to offer one that&amp;#39;s wonderful. On the
other hand, I don&amp;#39;t think it&amp;#39;s as important as elementary exposure and
high school exposure so if we have to cut a corner, that&amp;#39;s the
place. To me, and of course I&amp;#39;m biased, the critical time for a
requirement is high school. Sure, if it&amp;#39;s an elective kids won&amp;#39;t take
it but that&amp;#39;s true of a lot of subjects. I don&amp;#39;t know what the
research says but people do indeed change directions. How many of us
are doing what we thought we&amp;#39;d be doing in grade school or middle
school. Heck, even high school. I have a friend that did computer work
in his twenties and thirties, then went to law school and practiced
law for a bunch of years and then in his forties started a production
company in LA. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m a big believer in CS for All but to me it doesn&amp;#39;t mean it has to
be in every grade or every band. If I could only do it in one place it
would be required in the high school. If in two I&amp;#39;d add the elementary
school piece and then finally the middle school.
&lt;/p&gt;
&lt;p&gt;
As a final point I&amp;#39;d like to add that school is a zero sum game. There
are only so many minutes in the day and as we add CS we remove
something else. I believe we can add CS or, more specifically CT to
the elemntary schools without cutting anything and I know there&amp;#39;s room
in high schools in NY. I&amp;#39;m not sure about middle schools. In any
event, I&amp;#39;d hate to see music and art programs - already decimated by
budget cuts and misguided policies like the small schools movement
take a further hit so as to get CS everywhere.
&lt;/p&gt;
&lt;p&gt;
Just some food for thought.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What CS should we teach in HS</title>
      <link>https://cestlaz.github.io/post/what-cs-in-hs/</link>
      <pubDate>Sun, 23 Sep 2018 16:54:12 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/what-cs-in-hs/</guid>
      <description>&lt;p&gt;
I wanted to chime in on Alfred Thompson&amp;#39;s post last week on &lt;a href=&#34;http://blog.acthompson.net/2018/09/deciding-what-to-include-in-high-school.html&#34;&gt;what to
include in a HS CS class&lt;/a&gt; but was working on moving blogging platforms
so didn&amp;#39;t get a chance so I&amp;#39;ll say a few words here.
&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;ve been here before you probably know I&amp;#39;m not a fan of &lt;a href=&#34;https://cestlaz.github.io/posts/standards-who-for/&#34;&gt;the
standards&lt;/a&gt; and I certainly am no fan of the College Board and the AP
program so what&amp;#39;s my take?
&lt;/p&gt;
&lt;p&gt;
The truth is, my take doesn&amp;#39;t matter. Not in terms of specifics
anyway. Every school is different. Different kids, teachers, parents,
community, and culture so while there might be some things from the
program I designed at Stuy that work at another school there will be
plenty of things that don&amp;#39;t. I&amp;#39;m now designing first year experiences
at Hunter and while I take lessons earned away from my Stuy
experience, I&amp;#39;m now teaching different kids in a different environment
so the answer to the question &amp;#34;what do I teach them and how?&amp;#34; is different.
&lt;/p&gt;
&lt;p&gt;
The important thing to consider are the questions you should ask and
the answers you come up with.
&lt;/p&gt;
&lt;p&gt;
The first question is &amp;#34;why?&amp;#34; Why are you doing CS in your school? Is
it for kids already interested in CS? Is it &amp;#34;for all?&amp;#34; In either case,
what do you want them to get out of it?
&lt;/p&gt;
&lt;p&gt;
Is it for employment after high school? If so you might want to
consider locally used tools and technologies and also look at more
vocational tech like DevOps, SysAdmin and networking.
&lt;/p&gt;
&lt;p&gt;
Is it in support of other classes while in high school or college? You
might want to look at aspects of CS that cross over into other disciplines.
&lt;/p&gt;
&lt;p&gt;
You&amp;#39;ll then have other questions dealing with resources, class size,
required classes vs electives and so on.
&lt;/p&gt;
&lt;p&gt;
At some point schools get to the point of figuring out what specific
topics to include. Many teachers now veer to an assortment of hot
topics that interest them or alternatively go the other way and try to
do whatever the students want. I&amp;#39;m not a  big fan of either. Don&amp;#39;t get
me wrong, if I worked in a rich private institution with tiny class
sizes and lots of resources I&amp;#39;d love to be student directed after the
basics but that&amp;#39;s a luxury that public school educators can&amp;#39;t really
afford. I&amp;#39;m also not a fan of the &amp;#34;hot topic&amp;#34; approach. 
&lt;/p&gt;
&lt;p&gt;
At Stuy, I tried to look at the complete sequence as a program. I
wanted the designation of &amp;#34;Stuy CS graduate&amp;#34; to mean something so I
looked at what the kids trajectories were after graduation and I tried
to develop a program that best launched them on that trajectory. That
meant designing an intro class that could both launch CS minded kids
into our more advanced classes and also give non-CS kids everything
they needed for their next levels. 
&lt;/p&gt;
&lt;p&gt;
The motivation and design of the intro course is a topic unto itself
but I&amp;#39;ll share what I considered when designing our post AP CS
courses. One of the first guidelines I follow is &amp;#34;don&amp;#39;t give them a
course that they&amp;#39;ll have to take later anyway.&amp;#34; A second is &amp;#34;set up
courses that support the students in what they&amp;#39;ll have to take later&amp;#34;
and finally &amp;#34;fill in the gaps.&amp;#34; 
&lt;/p&gt;
&lt;p&gt;
With this in mind, we ended up with a Graphics course, Systems course
and a two semester Software Development class and it&amp;#39;s worked pretty
well. 
&lt;/p&gt;
&lt;p&gt;
Had I been at another school and designed it&amp;#39;s sequence it would
likely look different. I would have developed the program the same
way but would likely have ended up with something different albeit
with similar themes.
&lt;/p&gt;
&lt;p&gt;
I get emails and calls now and then from schools asking for advice on
building their CS programs. Some want the easy way out - they want a
drop in curriculum with little regard for the fit or worse, they want
APCS because it&amp;#39;s AP. Those conversations usually don&amp;#39;t go
anywhere. Other schools ask for help and ask for a curriculum. I&amp;#39;ll
say I can&amp;#39;t help with that but I&amp;#39;d love to talk and to get to know the
school and together we can come up with the right program. That&amp;#39;s a
longer process and is more work. It&amp;#39;s also more likely to result in a
good sustainable program and building those are both better and a lot
more fun.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is Cs for All Worth Doing</title>
      <link>https://cestlaz.github.io/posts/is-cs4all-worth-doing/</link>
      <pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/is-cs4all-worth-doing/</guid>
      <description>&lt;p&gt;
Last time I mentioned the pushback on CS for All. While many people
are all in for CS for All, resistance is coming from many
areas. There&amp;#39;s resistance from teachers of other subject areas, people
who think it&amp;#39;s merely job training for the tech industry (which it can be if done poorly),
people who feel it will be implemented at the expense of other
important subjects already on the chopping block like music and art,
and others.
&lt;/p&gt;
&lt;p&gt;
When I started the intro course at Stuy I tried to design something
that would be of value to all Stuy students and also inspire some to
continue on to more advanced CS classes. The class has been a
requirement for well over a decade at this point. I know that not
everyone loved the course but as they say, the proof is in the
pudding. It clearly got more people into the pool as gender numbers
for our more advanced CS courses got and remained much better since
the intro class became a requirement. I can&amp;#39;t tell you how many people
now in tech have told me that they never considered CS and only got
into it from our intro course.
&lt;/p&gt;
&lt;p&gt;
So, we had CS for All at Stuy before there was a CS for All and if
exposing more kids to CS was the only benefit it would have been worth
it but there&amp;#39;s more. In addition to getting more people and more
underrepresented people into tech, I&amp;#39;ve had scores of kids in a huge
range of fields come back to exclaim the value of having been forced
to take our intro course. These kids became authors, lawyers,
entrepreneurs, (non CS) teachers, journalists, venture capitalists,
Wall Street people, (non CS) professors and researchers, and more.
&lt;/p&gt;
&lt;p&gt;
The benefit of being in the latter stages of a career is that you can
look back at years of results and see the good and the bad.
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s no doubt in my mind that the battle to get a good CS course to
every Stuy student was one worth fighting and winning.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Should CS for All be implemented at the college level?</title>
      <link>https://cestlaz.github.io/posts/csforall-in-college/</link>
      <pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/csforall-in-college/</guid>
      <description>&lt;p&gt;
There&amp;#39;s been a lively discussion on pushback to CS for All at the K12
level over on Facebook. &lt;a href=&#34;https://twitter.com/guzdial&#34;&gt;Mark Guzdial&lt;/a&gt; started a sub thread asking if CS
for All should first be implemented at the undergrad level rather than K12.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s an interesting question and as good as anything to get me out of
my month long non-blogging rut.
&lt;/p&gt;
&lt;p&gt;
Mark was right when he said that if Colleges implement CS for All, K12 will
likely do so to follow - just look at AP. Colleges have been saying
that students should take more AP classes (while giving less credit)
and we all know where that&amp;#39;s led.
&lt;/p&gt;
&lt;p&gt;
On the other hand, can colleges really do CS for All, what does it
mean and what would it look like.
&lt;/p&gt;
&lt;p&gt;
Much like there is no single K12 - it&amp;#39;s 50 states and who knows how
many independent school districts, there won&amp;#39;t be a single CS for All
at the college level but let&amp;#39;s think about how things could play out.
&lt;/p&gt;
&lt;p&gt;
Many colleges have distribution requirements. Students must take one
course from bucket A, two from bucket B etc. Many schools that I&amp;#39;ve
looked at already  count CS courses in one of their distribution
buckets. This doesn&amp;#39;t mean every student will take CS but in theory
means they can. Colleges could in theory create a required CS bucket
or even a required CS course but I don&amp;#39;t think it&amp;#39;s as easy as
that. It might be at a private institution but while I don&amp;#39;t know all
the ins and outs of Hunter&amp;#39;s governance rules I do know that adding a
universal student requirement is a HUGE undertaking.
&lt;/p&gt;
&lt;p&gt;
So my take is that while it might be easy for a private college
to add a CS requirement I&amp;#39;m guessing other public institutions are
more similar to Hunter and it&amp;#39;s not going to be an easy task.
&lt;/p&gt;
&lt;p&gt;
Regardless, let&amp;#39;s say we have a required class on the books. Will we
have the capacity to teach it? It seems that schools are struggling to deal
with their existing CS majors and running sufficient electives and
courses for them. Just a month or so ago there was an article about a
college ending its CS minor due to lack of resources. It doesn&amp;#39;t sound
like a radically different problem then that faced in K12. Maybe it&amp;#39;s
harder given that at least in NY, there is &lt;a href=&#34;http://cestlaz.github.io/posts/room-for-csforall&#34;&gt;room for a required CS
course&lt;/a&gt; if you can find the teacher.
&lt;/p&gt;
&lt;p&gt;
Even so, assuming we have the capacity to enroll every undergrad in a
CS course what would that be? I think most people would be in
agreement that it shouldn&amp;#39;t be CS 101. Maybe existing pre-major
courses but even there I don&amp;#39;t know if that&amp;#39;s always the best
path. There could be a great pre-major course to give students the
basics and lead some into the major but what about a CS course for
students in majors that need some deeper but focussed programming
skills. The appropriate course for them isn&amp;#39;t the same as a
general/pre-major course. Using Statistics as an example, at Hunter,
many majors require a statistics course which is off loaded to the
Stats department. Each major has slightly different requirements. Over
years, the end result is a course that it seems that nobody is happy
with - a least common denominator course. CS for All at the college level
could give us a least common denominator course that doesn&amp;#39;t serve
anyone.
&lt;/p&gt;
&lt;p&gt;
Now, if you have the resources, none of these are issues. A well
heeled private institution can run tons of sections of specialized
classes no problem but this means just like on the K12 level we&amp;#39;ll
get the CS for All tale of two cities that I see coming in NY where
the rich schools have good programs and the poor get a substandard
experience.
&lt;/p&gt;
&lt;p&gt;
With all of this said, I&amp;#39;m finally getting to the big red flag with
college CS for All and it&amp;#39;s an issue that everyone conveniently
ignores. I&amp;#39;m talking about teacher quality. One of my big takeaways
from SIGCSE is that college faculty are well behind K12 teachers in
terms of pedagogy and I don&amp;#39;t see this changing anytime soon. This is
to be expected given that professor&amp;#39;s career advancement is really
based on research. Having a good teacher is always important but it&amp;#39;s
even more important for non-major students since a student in the
professor&amp;#39;s major will at least be passionate about the subject
area. To me, this is not a recipe for success.
&lt;/p&gt;
&lt;p&gt;
One can certainly make the claim that we aren&amp;#39;t any better off right
now at the K12 level because we don&amp;#39;t have teachers who know either
the subject nor how to teach it and at least at the college level they
know the subject matter. This is very true and it&amp;#39;s why pre-service CS
teacher preparation is so critical to getting this right even though
it will take time. That&amp;#39;s something that both Mark and I have been
vocal about but more on that subject next time.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is there room for CS for All</title>
      <link>https://cestlaz.github.io/posts/room-for-csforall/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/room-for-csforall/</guid>
      <description>&lt;p&gt;
A fear revolving around CS For All concerns where will the money
come from and how will we fit in the new classes.
&lt;/p&gt;
&lt;p&gt;
One suggested solution is to integrate CS into other subjects. I
thought I&amp;#39;d write today about why I don&amp;#39;t think the fear is valid and
while integrating CS into other classes can have value, it probably
isn&amp;#39;t a long term solution for CS education.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s start with the integration solution. The idea is to bring CS
into an existing class. &lt;a href=&#34;http://www.bootstrapworld.org/&#34;&gt;Bootstrap&lt;/a&gt;, a program I&amp;#39;ve written about before
and one of the programs I like does this, primarily in Algebra. The
idea is that this supports the student&amp;#39;s learning Algebra while
exposing them to CS. It&amp;#39;s a nice program but a math teacher using
Bootstrap shouldn&amp;#39;t be confused with a computer science
teacher. They&amp;#39;re bringing some CS to their student and engaging the
students in a different way mathematically and that&amp;#39;s all great but in
general you can&amp;#39;t take two classes worth of material and concepts and
fit them into one class and the number of teachers who are truly
knowledgable in any two academic subject areas both in content and
pedagogical content knowledge is few. I&amp;#39;m guessing that one of the
reasons that Bootstrap works in Algebra is the alignment of the
toolset and Algebra and how you can teach it. The other is that
Algebra is frequently given more time for fewer topics. In some
struggling schools, students might have two years of algebra or a
double period so there&amp;#39;s time to add in some CS.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m all for cross curricular work. You can look at applications of
science in math classes, do mathy work in a CS class, run stats and
data analysis in math and CS classes on materials from History classes
and all of this is great. You can even create great combined curricula
where you do indeed teach multiple subjects in an integrated way but
to think that you can take what is typically taught in two different
classes and you can combine both so that they&amp;#39;re taught in one class
with one teacher sounds fishy to me.
&lt;/p&gt;
&lt;p&gt;
So, at the end of the day, if you go the integration approach you&amp;#39;re
either going to have to dedicate a similar set of resources both in
time and personel to having independent courses. The alternative is
that CS will be the second class subject.
&lt;/p&gt;
&lt;p&gt;
So, let&amp;#39;s look at actually bringing in CS For All as a separate
course.
&lt;/p&gt;
&lt;p&gt;
Here are the New York State Graduation Requirements [fn::The state
lists by credits which are a year, I doubled the numbers to map to semesters]:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Subject&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;Number of semesters&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Soc Studies&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Science&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LOTE&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arts&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Phys Ed&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Health&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Electives&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;44&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
It can be difficult to fit Phys Ed in since it has to be offered every
semester so let&amp;#39;s double the Phys Ed requirement to 8 semesters. What
is actually normally done is to have 7.5 periods of science a week and
2.5 periods of Gym.
&lt;/p&gt;
&lt;p&gt;
This means that the basic student program uses 48 class slots and
includes 7 elective slots.
&lt;/p&gt;
&lt;p&gt;
In terms of exit exams, students have to pass the following Regents:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
English
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Any single math (Algebra, Geometery, Alg 2 / Trig)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Any single Social Studies (US History or Global History
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Any single Science (Living Env (bio), Chem, Phys, Earth Science)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Any additional Regents exam
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The requirement of passing a single Math regents is what leads to the
extra time allocated to Algebra that I mentioned when discussing
integrating CS into Algebra above.
&lt;/p&gt;
&lt;p&gt;
To get an Advanced Regents diploma you have to pass additional exams -
both history, all three math, three science and maybe more.
&lt;/p&gt;
&lt;p&gt;
Using a Typical 7 period plus lunch day, we have room for 56 single
semeter classes in a high school career. This means that assuming
students aren&amp;#39;t failing too many classes, even with the extra Phys Ed
allocation I mentioned above  we can easily fit computer
science into our day. In fact, we can technically fit in four full
years assuming a student doesn&amp;#39;t have to repeat any class.
&lt;/p&gt;
&lt;p&gt;
So in New York state we certainly have the time but what about the
budget? That&amp;#39;s not an issue either. The state also requires that
students recieve 5.5 hours of instruction a day exclusive of
lunch. At 47 minute periods, that translates to students being
assigned 7 instructional classes a day which means we can&amp;#39;t just give
the kids the required 44. We have to fill all 56 available class slots
over those four years.
&lt;/p&gt;
&lt;p&gt;
Of course it&amp;#39;s not really that simple. Students fail classes and have
to repeat them and some classes might be assigned more time than
others but it looks to me like we should be able to fit
computer science in without any big budgetary or scheduling
changes. The challenge will be finding the teacher and working the
internal politics and policies since as computer science comes in it
will mean removing some electives even if those electives are additional years
of science, math, or English.
&lt;/p&gt;
&lt;p&gt;
Programs like &lt;a href=&#34;https://www.tealsk12.org/&#34;&gt;TEALS&lt;/a&gt; and Bootstrap are important transitional programs
and even when we do have qualified CS teachers they will play an
important role - TEALS in providing industry support and resources and
Bootstrap by integrating curricular areas and over time as preservice
programs start to appear the rest will work itself out.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unfunded Mandates and CS For All</title>
      <link>https://cestlaz.github.io/posts/unfunded-mandates/</link>
      <pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/unfunded-mandates/</guid>
      <description>&lt;p&gt;
This morning, &lt;a href=&#34;https://twitter.com/guzdial&#34;&gt;Mark Guzdial&lt;/a&gt; wrote about &lt;a href=&#34;https://computinged.wordpress.com/2018/04/27/lack-of-funding-leads-to-lack-of-teachers-leads-to-lack-of-cs-classes-we-may-need-to-change-our-strategy/&#34;&gt;unfunded mandates and CS for
All&lt;/a&gt;. Unfunded mandates frequently wreak havoc on schools in a number
of ways but in the long run, I don&amp;#39;t think it should have a severe
effect on CS for All. Rather, it could have a big impact on the number
of CS courses we offer beyond that.
&lt;/p&gt;
&lt;p&gt;
Mark relay&amp;#39;s a story from the Cambridge Rindge and Latin School where
at the time many students wanted more CS classes but the school wasn&amp;#39;t
planning on hiring a new CS teacher. The money quote is:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Over 50 percent of students signing up for Level 2 [computer science] courses next year identify as African Americans,
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
No, I&amp;#39;m not talking about the diversity issue raised by the quote, I&amp;#39;m
talking about &lt;strong&gt;Level 2 [computer science]&lt;/strong&gt;. This implies that the
students already had &lt;strong&gt;Level 1 computer science&lt;/strong&gt;. Level 1 would cover
CS For All so now we&amp;#39;re talking about CS electives vs other
electives. This is something I had to deal with for most of my career
even after we got a CS requirement at Stuy. It was always a battle to
hire enough CS teachers to meet demand. The hard part was politics -
there were always older more entrenched subject areas who would rather
force kids into their electives rather than allow them to take my CS
electives. This is a whole other kettle of fish than CS for All. It&amp;#39;s
an issue for some schools now and will become a &lt;strong&gt;BIG&lt;/strong&gt; issue in five to
fifteen years when a single CS required course is more the norm. The
issue raised here is a new CS elective vs entrenched teachers and
classes which shuld lead to a discussion of the relative value of CS
electives vs other electives. That said, the reality is that it
usually comes down to school and local power and politics. Also to be
considered is the potential ebb and flow of interest - there might be
demand for 5 more CS classes and 5 less something else this year but
there might not be next year and then we&amp;#39;re in real trouble staffing
wise.
&lt;/p&gt;
&lt;p&gt;
Schools, public high schools in particular are zero sum endeavors. You
have a fixed number of periods a day, specific class requirements, and
certain mandates as to a the minimum and maximum number of classes a
student can take. In New York City, I believe students are required to
have a &amp;#34;full&amp;#34; schedule which basically means they can&amp;#39;t come in for
English, Math, and History and then go home.
&lt;/p&gt;
&lt;p&gt;
With CS for All, you&amp;#39;re basically allocating reallocating some amount
of time to computer science. It might be hard to find a qualified
teacher. particularly in a small school where the population won&amp;#39;t
support a full time CS teacher and it might ruffle the feathers of the
teachers that will be losing the time but it shouldn&amp;#39;t make much of a
dent or really any dent on the budget.
&lt;/p&gt;
&lt;p&gt;
Mark also raises the possibility of embedding CS into other subject
classes. &lt;a href=&#34;http://www.bootstrapworld.org/&#34;&gt;Bootstrap&lt;/a&gt; is a program that I&amp;#39;m rather fond of that does
just this in Algebra classes (although more recently they&amp;#39;re working
to branch out into other subject areas). Even though I&amp;#39;m a big
Bootstrap fan I don&amp;#39;t think that&amp;#39;s the answer to CS for All or CS in
the high schools in general. I think that one of the reasons why
Bootstrap works so well is the alignment between the CS tool they use
and the way Algebra is or can be taught. Another reason is the fact
that while Algebra is the lowest level of the traditional high school
classes, it&amp;#39;s frequently the one for which the most time is
allocated. Students in low performing schools might take Algebra over
two years or have a double period. This won&amp;#39;t be the case for other
subject areas. What this means is that there&amp;#39;s more likely extra time
to embed another subject, cs, into the Algebra class. Long term,
embedding CS into another subject area requires:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
a teacher that really knows both subjects
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
enough time so you can add all the cool CS content while still
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
preparing the students for both the next level of whatever subject
you&amp;#39;re embedded in  as well as for whatever standardized
assessments come at the end of the year.
&lt;/p&gt;
&lt;p&gt;
As I said, I&amp;#39;m a Bootstrap fan but I don&amp;#39;t think that&amp;#39;s the answer for
CS in K12.
&lt;/p&gt;
&lt;p&gt;
Back to the original topic there are certainly issues with
implementing CS for All but I don&amp;#39;t think school funding is the
biggest hurdle. For me there are other big challenges. One is having a
supply of qualified teachers. In the long run as states outline CS
requirements and pre-service programs crop up this will work itself
out. Until then, yes, we will have an issue and yes it will take some
funding for stop gap and transitional teacher preperation. A second issue is
working the internal politics. Adding CS does mean removing something
else or more likely a piece of something else. The third one is what
I&amp;#39;m noticing in NY where CS for all seems to at times forget about
the CS. If we have knowledgeable teachers we can work around that one
but I still think that might be my biggest concern.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>