<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clojurescript on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/clojurescript/</link>
    <description>C&#39;est la Z (clojurescript)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Jan 2020 09:37:17 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/clojurescript/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Clojurescript - building a simple router</title>
      <link>https://cestlaz.github.io/post/clojurescript-router/</link>
      <pubDate>Wed, 15 Jan 2020 09:37:17 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/clojurescript-router/</guid>
      <description>&lt;p&gt;
In this video we&amp;#39;ll look at creating a small router. 
&lt;/p&gt;
&lt;p&gt;
I originally looked at using one of the available libraries to set up
routing. I considered &lt;a href=&#34;https://github.com/metosin/reitit&#34;&gt;reitit&lt;/a&gt; and &lt;a href=&#34;https://github.com/juxt/bidi&#34;&gt;bidi&lt;/a&gt; but in the end decided to figure
out how to do it myself. 
&lt;/p&gt;
&lt;p&gt;
It turns out that whenever you change the hash part of a url -
everything following a # at the end of a url you get a &lt;code&gt;hashchange&lt;/code&gt;
event. You can handle that with
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;.addEventListener&lt;/span&gt; js/window &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hashchange&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;handleroutes&lt;/span&gt; routes %))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
where &lt;code&gt;handleroutes&lt;/code&gt; is your function to actually handle the routes.
&lt;/p&gt;
&lt;p&gt;
You can then get the actual value of that last hash part of the url
with:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;.-location.hash&lt;/span&gt; js/window)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Once you map that to whatever function you want you update the history
and mount the new page:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;   (&lt;span style=&#34;color:#a6e22e&#34;&gt;.history.replaceState&lt;/span&gt; js/window {} nil loc)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;mount&lt;/span&gt; newpage) &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
All the code is up on GitHub: &lt;a href=&#34;https://github.com/zamansky/shadow-cljs-demo&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/shadow-cljs-demo&#34;&gt;https://github.com/zamansky/shadow-cljs-demo&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
There are still things I need to figure out. Specifically, how can I
route without the #. That is, I can do it, but the page reloads every
time rather than just remounting the component I want. 
&lt;/p&gt;
&lt;p&gt;
The video goes through the entire process. Enjoy.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/mbUHkfH6B9g&#34;&gt;https://www.youtube.com/embed/mbUHkfH6B9g&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Clojurescript Components</title>
      <link>https://cestlaz.github.io/post/clojurescript-components/</link>
      <pubDate>Sun, 12 Jan 2020 12:19:00 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/clojurescript-components/</guid>
      <description>&lt;p&gt;
I got some positive feedback from my first Clojurescript &lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-63-clojurescript/&#34;&gt;post and
video&lt;/a&gt; so I thought I&amp;#39;d continue with the series.
&lt;/p&gt;
&lt;p&gt;
Here we&amp;#39;ll continue to build a simple
Clojurescript/Shadow-cljs/Reagent/Tailwindcss application by creating
some reusable components. It&amp;#39;s one of the things that make
Clojurescript so nice for web development. 
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a link to the GitHub repo with the code:
&lt;a href=&#34;https://github.com/zamansky/shadow-cljs-demo&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/shadow-cljs-demo&#34;&gt;https://github.com/zamansky/shadow-cljs-demo&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/_CTTbC6owS0&#34;&gt;https://www.youtube.com/embed/_CTTbC6owS0&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>