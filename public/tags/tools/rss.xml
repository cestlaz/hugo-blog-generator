<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tools on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/tools/</link>
    <description>C&#39;est la Z (tools)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Jul 2020 07:52:24 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/tools/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Tools matter when teaching (and learning)</title>
      <link>https://cestlaz.github.io/post/tools-matter/</link>
      <pubDate>Wed, 22 Jul 2020 07:52:24 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/tools-matter/</guid>
      <description>&lt;p&gt;
One of our teacher certification cohort members asked for some help on
our Slack the other day. It was about a side project - he was learning
him so Javascript. It&amp;#39;s always very cool to see teachers exploring
things that can help with their craft on their own.
&lt;/p&gt;
&lt;p&gt;
The whole situation reminded me  about how important good tooling is
and why, in spite of its popularity, javascript has some severe issues
as a learning language and I&amp;#39;m a guy that actually likes javascript. 
&lt;/p&gt;
&lt;p&gt;
The project was a small interactive javascript todo application and he was
having trouble getting a button to react. I grabbed his code off
GitHub, fired up a server and took a look. Indeed, there were
issues. Some of the interface worked - you could type in a new item
and hit enter or click an add button and it worked. You could check or
uncheck items and you could delete them individually. Everything
worked except the clear button which did nothing. Weird.
&lt;/p&gt;
&lt;p&gt;
Exploring the code, here were some of the key sections:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// there were sections like this
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filterOption&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.filter-todo&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clearButton&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.clear-button&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// then more code 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// then some of this
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filterOption&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;filterTodo&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;clearButton&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;clearTodos&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// and more code
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
I just pulled out the lines relevant to what he was doing and to the
error so be aware that it&amp;#39;s all out of context. 
&lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;document.querySelector&lt;/code&gt; lines get references to DOM elements -
elements on the page. The &lt;code&gt;addEventListener&lt;/code&gt; then links a function to
the event. So, when you click on the &lt;strong&gt;clear&lt;/strong&gt; button on the web site,
it&amp;#39;s supposed to run the function &lt;code&gt;clearTodos&lt;/code&gt; and when you click on
the &lt;strong&gt;filter&lt;/strong&gt; button it will run &lt;strong&gt;fiterTodo&lt;/strong&gt;. There&amp;#39;s more linking of
events to elements in the code.
&lt;/p&gt;
&lt;p&gt;
What was really weird was that parts and in fact most of the interface
was working and just the clear button was not. To make matters worse,
looking both at the server output and the actual web page, there was
no indication of anything wrong. Even if you looked at the developers
console in the browser it didn&amp;#39;t really give you a clue.
&lt;/p&gt;
&lt;p&gt;
It didn&amp;#39;t take me &lt;strong&gt;too&lt;/strong&gt; long to find the error but that&amp;#39;s only because
I spent hours on similar errors back when I learned javascript. Back
then though I lost hours of time on errors like these and I was
learning JS decades into my career as a computer science teacher and
professional.
&lt;/p&gt;
&lt;p&gt;
What was going on?
&lt;/p&gt;
&lt;p&gt;
When javascript executes  &lt;code&gt;querySelector&lt;/code&gt; it returns a reference to an
element in the web page. If that element doesn&amp;#39;t exist, it returns
 &lt;code&gt;null&lt;/code&gt;. As it turned out, at least in the version I looked at, there
was no element on the page identified by the class &lt;strong&gt;filter-todo&lt;/strong&gt;. The
result was that after executing
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filterOption&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.filter-todo&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;filterOption&lt;/code&gt; is set to refer to null.
&lt;/p&gt;
&lt;p&gt;
Then later, this code: 
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filterOption&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;filterTodo&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
crashes the program because you can&amp;#39;t call the &lt;code&gt;addEventListener&lt;/code&gt;
method on &lt;code&gt;null&lt;/code&gt; which is what &lt;code&gt;filterOption&lt;/code&gt; is set to.
&lt;/p&gt;
&lt;p&gt;
Therein lies the problem. I commented out the two lines, the program
ran, and the &lt;strong&gt;clear&lt;/strong&gt; button was clickable.
&lt;/p&gt;
&lt;p&gt;
The killer was that the tool gave some pretty weird results - it
wasn&amp;#39;t all or nothing. Parts of the interface responded but parts
didn&amp;#39;t. There was no actionable feedback. The only feedback was indeed
this error: &lt;strong&gt;TypeError: filterOption is null&lt;/strong&gt; but this seems wholly
unrelated to the clear button and since most of the interface was
responsive it seemed even weirder.
&lt;/p&gt;
&lt;p&gt;
My best guess was that the web browser executed the JS code
until the crash so anything that parts of the user interface that were
wired up prior to that null pointer reference did indeed run.
&lt;/p&gt;
&lt;p&gt;
The lack of feedback and this manner of execution can make javascript
really tough on both beginners and self learners. It&amp;#39;s also tough with
a teacher if they don&amp;#39;t really know the ins and outs of the toolset.
&lt;/p&gt;
&lt;p&gt;
This was all just a reminder that tools matter. Java, Python, and C++
might not give the best error messages but generally the tooling isn&amp;#39;t
so bad. They could of course, be better, and I&amp;#39;m not arguing that any
of them are ideal learning environments but JS has a long way to
go. On the other hand, languages and environment specifically made for
learning have issues as well. The bottom line in choice of tools is
that there&amp;#39;s no magic bullet and the answer is as usual, &amp;#34;it depends.&amp;#34;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Github and Student Feedback</title>
      <link>https://cestlaz.github.io/post/github-student-feedback/</link>
      <pubDate>Mon, 20 Jul 2020 16:12:47 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-student-feedback/</guid>
      <description>&lt;p&gt;
Beyond the CS specifics We&amp;#39;ve been primarily using three tools in our
summer certification program.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Zoom for video conferencing
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Slack for text based communicaiton
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
GitHub for just about everything else
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
We use GitHub as a CMS - a place to share code and assignments as well
as collect them. We&amp;#39;re also playing with GitHub discussions although
that&amp;#39;s fallen somewhat to the wayside with Slack being preferred. 
&lt;/p&gt;
&lt;p&gt;
One of the choices I&amp;#39;m digging more than ever is &lt;a href=&#34;https://classroom.github.com/&#34;&gt;GitHub Classroom&lt;/a&gt; for
assignments. Recently GitHub added a feedback feature powered through
what known as Pull Requests. You just have to check the &amp;#34;feedback&amp;#34;
button when you create an assignment. I also set my notifications so I
receive an email alert whenever a students submits anything.
&lt;/p&gt;
&lt;p&gt;
Whenever a student updates an assignment or in Git parlance commits
and pushes up a change, I get an email alert. The email includes: 
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
The repo where the change was made 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A brief message describing the most recent change
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A link the the students GitHub account
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A link to the actual change.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Clicking on the change and I get to a screen like this:
&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://cestlaz.github.io/img/githubdiff.png&#34;/&gt; 
&lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;
A summary of exactly what changed. I see lines that were deleted,
lines that were added and lines that were modified. At the top I see
the one line brief description which the student put in when making
the commit. I can also easily navigate through their assignment both
to see other parts of it as well as earlier versions.
&lt;/p&gt;
&lt;p&gt;
If you scroll down the page there&amp;#39;s a place you can leave a comment
which will go to the student. 
&lt;/p&gt;
&lt;p&gt;
This all makes for a very quick and easy feedback mechanism. You can
also go to the &amp;#34;pull request&amp;#34; section of the repo (link at the top of
the repo page) where you can find all the comments.
&lt;/p&gt;
&lt;p&gt;
All in all this provides a very quick and painless way of seeing what
students are up to and a quick way to provide some feedback.
&lt;/p&gt;
&lt;p&gt;
The only catch is that this only works when the students actively push
changes up to GitHub. While this group of teachers have been great
that&amp;#39;s sometimes a challenge with high school or college
students. Working on strategies to get this type of buy in from my
first years in the Fall.
&lt;/p&gt;
&lt;p&gt;
So, GitHub Classroom&amp;#39;s feedback mechanism? A big win and more great
work from the GitHub education team.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 73 - Ripgrep and updating the blog</title>
      <link>https://cestlaz.github.io/post/using-emacs-72-rg/</link>
      <pubDate>Sun, 14 Jun 2020 11:58:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-72-rg/</guid>
      <description>&lt;p&gt;
As I said in my &lt;a href=&#34;As I mentioned in my &#34;&gt;last post&lt;/a&gt;, I&amp;#39;m moving to a new Hugo theme. I decided
on &lt;a href=&#34;https://github.com/mitrichius/hugo-theme-anubis&#34;&gt;Anubis&lt;/a&gt;. It&amp;#39;s simple and clean. Unfortunately, in this change over,
many things broke. Specifically, all my embedded html. Using earlier
version of Hugo I could directly embed HTML and it would render. Now I
have to bracket the HTML with special org markup - &lt;strong&gt;#+begin_export html&lt;/strong&gt; and &lt;strong&gt;#+end_export html&lt;/strong&gt;. 
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
#+begin_export html
&amp;lt;h1&amp;gt;html stuff to render goes in here &amp;lt;/h1&amp;gt;
#+end_export
&lt;/pre&gt;
&lt;p&gt;
Minimally I had to find all my embedded videos and all my embedded
Tweets. There&amp;#39;s probably a lot more. Fortunately with Emacs this is
pretty easy. I used &lt;a href=&#34;https://github.com/dajva/rg.el&#34;&gt;rg.el&lt;/a&gt; which is an Emacs front end to &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;. If
you don&amp;#39;t know ripgrep, it&amp;#39;s kind of like a super fast, super enhanced grep on
steroids. 
&lt;/p&gt;
&lt;p&gt;
In Emacs, I was able to do a ripgrep search which created a buffer
containing all the embedded html fragments from all my blog posts
across all the directories. I then used Emacs&amp;#39; &lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep&#34;&gt;wgrep&lt;/a&gt; feature which
allowed me to edit that combined buffer and save all the results back
to the original files. 
&lt;/p&gt;
&lt;p&gt;
All in all it just took a few minutes. There are still some things I
have to clean up from older posts but at least the site is workable now.
&lt;/p&gt;
&lt;p&gt;
Check out the video for a walkthrough:
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/OcR-Ke2CiPo&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Pro Version Or Education Version</title>
      <link>https://cestlaz.github.io/post/pro-version-or-ed-version/</link>
      <pubDate>Fri, 29 May 2020 19:00:13 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pro-version-or-ed-version/</guid>
      <description>&lt;p&gt;
I woke up to this tweet by Mark Guzdial today:#pro-version-or
ed-version.org#
&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;An indication
that CS Ed in US high schools is about vocational training: 2 (of 5)
recommended sessions at the &lt;a
href=&#34;https://twitter.com/csteachersorg?ref_src=twsrc%5Etfw&#34;&gt;@csteachersorg&lt;/a&gt;
conference are on Github and Agile. Is &lt;a
href=&#34;https://twitter.com/CSforALL?ref_src=twsrc%5Etfw&#34;&gt;@CSforAll&lt;/a&gt;
a Silicon Valley jobs program? &lt;a
href=&#34;https://t.co/n8ugnmTU84&#34;&gt;https://t.co/n8ugnmTU84&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Mark Guzdial (@guzdial) &lt;a
href=&#34;https://twitter.com/guzdial/status/1265986599952822272?ref_src=twsrc%5Etfw&#34;&gt;May
28, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async
src=&#34;https://platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
This led to a lively discussion throughout the day with lots of likes
and lots of comments. Two themes emerged. One wondered if the CSTA
conference should be highlighting these talks about professional
sensibilities and the other questioned the use of tools designed for
industry vs those designed for schools.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s look at the former first. For full disclosure JonAlf and I are
co-presenters of the GitHub session that was highlighted. Truth be
told I had no idea it was highlighted until I read Mark&amp;#39;s tweet
:-). CSTA is a conference for teachers, K12 teachers. Teachers go
to learn new practices. Sure there are sessions about advocacy and
the like but
it&amp;#39;s really more like a multi day professional development session on
steroids. That&amp;#39;s one of the things that makes it so wonderful. If a
session gives teachers something of value it&amp;#39;s worth presenting. It
can be what they teach, how they teach, or something ancillary to
teaching even things as mundane as gradebook management. If it helps
make a CS teacher better, it&amp;#39;s appropriate to include. 
&lt;/p&gt;
&lt;p&gt;
I can&amp;#39;t say why any particular session was chosen for highlight
but it really isn&amp;#39;t a big deal. There are always sessions on specific lesson
ideas, cross curricular stuff, ethics, standards, equity, CS4All,
APCS, and lots lots more. 
&lt;/p&gt;
&lt;p&gt;
Now, what I&amp;#39;d like to see would be a banner on the conference page
where every time you go there it displays a random assortment of
sessions that are being offered. 
&lt;/p&gt;
&lt;p&gt;
What about the second point - professional tools or educational ones. First
let&amp;#39;s lump things together, git is a tool, so is GitHub. Same for
agile - it&amp;#39;s a tools as are programming languages. Now a great
craftsman is a great craftsman but their job is a whole lot easier
with a full chest of quality tools. 
&lt;/p&gt;
&lt;p&gt;
If a professional tool makes a teacher better it&amp;#39;s worth learning. 
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s look at agile. I&amp;#39;ve never used terms like scrum or sprint in my
class but pair programming comes out of agile and that&amp;#39;s become a
mainstay of CS classes. Same thing for the short development cycle and
all the testing. These are agile concepts that we take for granted as
education tools. Are we going to use everything about agile in every
CS class? No. Does it belong in CS when CS is embedded in other
subject areas? Who knows but if a teacher gets exposed to it at CSTA
then they can make an informed decision and use it when and as
appropriate. 
&lt;/p&gt;
&lt;p&gt;
What about git/GitHub? I wouldn&amp;#39;t teach using it when CS is embedded
but I might in a HS programming course and I certainly would in APCS-A
or beyond. I&amp;#39;ve found that there are many positives of using them and
I&amp;#39;ve written about it before on this blog. 
&lt;/p&gt;
&lt;p&gt;
The truth is that both git and agile provide ways of increasing
student communication and collaboration and these are good things.
&lt;/p&gt;
&lt;p&gt;
Even if I decided that my classes shouldn&amp;#39;t use git, I&amp;#39;d still use it
for my web presence and to distribute materials and that too makes it
worth learning.
&lt;/p&gt;
&lt;p&gt;
Just because a tool came from industry it&amp;#39;s not
necessarily bad and if it came fro education it&amp;#39;s not necessarily
good. 
&lt;/p&gt;
&lt;p&gt;
Thonny is a beginner Python IDE. It was designed specifically to be a
learner environment. It&amp;#39;s great for that. Eclipse is a professional
IDE and I hate it for education. Other people disagree with me on both
counts.
&lt;/p&gt;
&lt;p&gt;
On the other hand I&amp;#39;ve seen tools written by people in education that
are god awful.
&lt;/p&gt;
&lt;p&gt;
Then you also have well designed education tools but they fill a
narrow niche - they&amp;#39;re so specialize that a teacher and student can
only use them in a specific case. A teacher then needs to find
multiple tools for their multiple classes and students need to learn
even more.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s assume we have a bunch of these educational tools and their all
pretty well designed and help students get to whatever it is they&amp;#39;re
supposed to learn. Taken individually each tool seems great but taken
as a whole? Where&amp;#39;s the line? Is it better to have the teacher learn
and support a handful of these and students learn even more or should
they spend more time/efforn to learn one or two tools where the tool
will beuseful beyond the narrow scope of the specialized one.
&lt;/p&gt;
&lt;p&gt;
The answer is of course, it depends.
&lt;/p&gt;
&lt;p&gt;
I was part of a workshop this past summer and this came up. We were
looking at a pretty sweet specialized tool that worked really well for
one niche area. We also looked at Google Sheets which were less
intuitive but more versatile and universal. Which to use? We never
came up with a compelling answer either way. 
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s nothing inherently bad about industry tools and there&amp;#39;s
nothing inherently good about educational ones. It&amp;#39;s true that
industry tools are designed for industry but education tools are by
and large not designed by teachers. They might be designed by people
who teach as part of their job or who have taught but that&amp;#39;s not the
same thing. Sometimes they hit but sometimes they miss their mark.
&lt;/p&gt;
&lt;p&gt;
In math class we would typically draw arcs and circles on the board
with a giant chalk compass. It was specifically designed for
education. You know what works better? A shoelace.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zoom alternatives that aren&#39;t from MicroGoogle</title>
      <link>https://cestlaz.github.io/post/bigbluebutton/</link>
      <pubDate>Mon, 25 May 2020 16:33:17 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/bigbluebutton/</guid>
      <description>&lt;p&gt;
As we scrambled to move online in March we used what we knew, what we
heard of and what we were allowed. This usually meant Zoom, Google
Meet, or Microsoft Teams.
&lt;/p&gt;
&lt;p&gt;
I settled on Zoom. It worked and worked pretty well. There were a few
things I felt they could improve on but given that Zoom wasn&amp;#39;t
designed as a teaching tool I&amp;#39;ve been pretty happy with it.
&lt;/p&gt;
&lt;p&gt;
Now that the emergency rush has passed we have time to see if there
are some better alternatives. First up is &lt;a href=&#34;https://bigbluebutton.org/&#34;&gt;BigBlueButton&lt;/a&gt;. I&amp;#39;ll write up
another cool platform that&amp;#39;s based on BigBlueButton in some future
post.
&lt;/p&gt;
&lt;p&gt;
To start, BBB is open source. That&amp;#39;s a big plus in my book. This means
we can self host it. Now, this can be a problem if installation and
maintenance is a pain but so far, it&amp;#39;s been carefree.
&lt;/p&gt;
&lt;p&gt;
Next, it has some nice features. It supports pretty much everything
that Zoom supports including: 
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
join passwords
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
waiting room
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Brady Bunch view 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
chat
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
reactions (raise hand etc.)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
a shared whiteboard
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
screen sharing
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
breakout rooms
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
optional session recording. 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
polling 
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
and adds a few:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
a shared note space
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
shared whiteboard is really a presentation that you can upload
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A simple html5 client 
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
BBB is also based on &amp;#34;classrooms&amp;#34; rather than meetings which as
a teacher seems cleaner and makes more sense.
&lt;/p&gt;
&lt;p&gt;
If you want to try it out and I highly recommend you do, you can do so
on their web site.
&lt;/p&gt;
&lt;p&gt;
Hosting is also pretty easy. I was originally turned off by the
strangely specific requirement of Ubuntu 16.04 but since Digital
Ocean - my preferred cloud provider lets me directly install that or
many other versions it wasn&amp;#39;t a problem. You&amp;#39;ll also need a box with
4GB memory and 4 cores. 
&lt;/p&gt;
&lt;p&gt;
You can follow the install instructions on the BBB home page but it
was easier to follow &lt;a href=&#34;https://github.com/bigbluebutton/bbb-install&#34;&gt;these&lt;/a&gt; instructions. Here&amp;#39;s exactly what I did
(culled from the longer explanations on the bbb-install site I just
linked):
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Create the DO droplet or install an Ubuntu 16.04 mathine.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Log in and run &lt;code&gt;apt-get update&lt;/code&gt;, &lt;code&gt;apt-get dist-upgrade&lt;/code&gt; and
&lt;code&gt;apt-get upgrade&lt;/code&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Set up DNS for the box so you can get to it by name. To do this I
went to Google domains and added an entry for
bigbluebutton.huntercs.org.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
I ran (all one line):
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget -qO- https://ubuntu.bigbluebutton.org/bbb-install.sh | bash -s -- -v xenial-22 -s bbbtest.huntercs.org -e zamansky@gmail.com -g&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&amp;gt;}}
&lt;/p&gt;
&lt;p&gt;
    This downloads and installs BBB and also uses &lt;strong&gt;certbot&lt;/strong&gt; to set up
    ssl for secure connections.
&lt;/p&gt;
&lt;p&gt;
After this was done, I created an admin account:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd greenlight/
docker exec greenlight-v2 bundle exec rake admin:create&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&amp;gt;}}
&lt;/p&gt;
&lt;p&gt;
At this point I was up and running so I went to the host and logged in
using the admin credentials that the above command gave me.
&lt;/p&gt;
&lt;p&gt;
Next, log in, go to the user profile and change the admin account&amp;#39;s
login and password. I also went to the org site settings and changed
registration so that people had to be invited - this only affects who
can create classrooms. Anyone can join as long as the teacher lets the
in.
&lt;/p&gt;
&lt;p&gt;
As a last step you should remove the demos: &lt;code&gt;apt-get purge
bbb-demo&lt;/code&gt;. The home page and install web site has more info on those.
&lt;/p&gt;
&lt;p&gt;
You&amp;#39;re now ready to go. Make classrooms, invite your students and
you&amp;#39;re off. 
&lt;/p&gt;
&lt;p&gt;
Check it out. so far, I&amp;#39;m liking it better than the non free non open
source alternatives offered by Zoom, Microsoft, and Google. 
&lt;/p&gt;
&lt;p&gt;
Next, well look at another platform  that&amp;#39;s based on BBB that adds
some very cool features for CS Teachers.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 72 - Customizing Elfeed</title>
      <link>https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/</link>
      <pubDate>Thu, 21 May 2020 14:47:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/</guid>
      <description>&lt;p&gt;
I made this video write after I made the &lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-71-openwith/&#34;&gt;openwith&lt;/a&gt; one so even though
I don&amp;#39;t mention anything in this video, I wanted to share some updates
on dired and openwith.
&lt;/p&gt;
&lt;p&gt;
I got a lot of suggestions on alternate ways to achieve the workflow I
was seeking - being able to open a file using an external viewer. One
person noted that under newer versions of Emacs, the &lt;code&gt;W&lt;/code&gt; key is bound
to the command &lt;code&gt;(browse-url-of-dired-file)&lt;/code&gt; which does exactly what I
wanted. Problem solved with no customizing or extra packages. 
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s a good thing I got a solution when I did - I needed it. I&amp;#39;ve been
reviewing applications for my new Teacher Certification program. It&amp;#39;s
a 21 credit graduate program that results in participants receiving a
brand spanking new New York State Computer Science teaching
license. The applications consist of a bunch of files incuding PDFs,
images (photos), doc and text files and source code samples. I&amp;#39;ve got
all the applications in a Google drive which I&amp;#39;ve downloaded and now I
can just drop into dired and go through each directory, hit &lt;code&gt;enter&lt;/code&gt; for
source code and it&amp;#39;s loaded in an Emacs buffer and &lt;code&gt;W&lt;/code&gt; for everything
else.
&lt;/p&gt;
&lt;p&gt;
Now for today&amp;#39;s video. It&amp;#39;s about a small customization I made to the
elfeed RSS reader. It&amp;#39;s also about the advantages and limitations of
Emacs built in documentation. I&amp;#39;m not particularly strong in elisp -
I&amp;#39;m a dabbler at best but even so, using Emac&amp;#39;s built in help I was
able to get to elisp code that was very close to what I wanted to do
and then customize it. It also looks at the limitations - there still
some code that I looked at that I have no clue as to what it does.
&lt;/p&gt;
&lt;p&gt;
Specifically, elfeed lets you open a link in an external brower by
hitting &lt;code&gt;b&lt;/code&gt;. That&amp;#39;s how I like reading most of my feeds. I&amp;#39;ll scroll
up and down and hit &lt;code&gt;b&lt;/code&gt; for what I want to read. The trouble is that
when you hit &lt;code&gt;b&lt;/code&gt; focus goes to the browser and at the same time,
elfeed marks the entry as read and advances. I want it not to mark as
read. After I made the video, I decided I also didn&amp;#39;t want elfeed to
advance to the next story. 
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what I did.
&lt;/p&gt;
&lt;p&gt;
I went in to elfeed and instead of typing &lt;code&gt;b&lt;/code&gt; on an entry, I ran
&lt;code&gt;(describe-key&lt;/code&gt;)~ which is bound to &lt;code&gt;C-h k&lt;/code&gt;. I then typed &lt;code&gt;b&lt;/code&gt; which
revealed that it ran &lt;code&gt;elfeed-search-browse-url&lt;/code&gt;. I followed the
hyperlinks in the help to open &lt;code&gt;elfeed-search.el&lt;/code&gt; and found the
function. From there I just copied it over to my Emacs config, tweaked
it and voila, problem solved.
&lt;/p&gt;
&lt;p&gt;
The video has all the details. Enjoy.
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/G1NGNR40lB4&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 71 Openwith</title>
      <link>https://cestlaz.github.io/post/using-emacs-71-openwith/</link>
      <pubDate>Wed, 13 May 2020 11:45:39 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-71-openwith/</guid>
      <description>&lt;p&gt;
I spend most of my time in Emacs but still use the shell and browser
for some things. One of the things I use my shell for is to launch
libreoffice to view and edit docx files and spreadsheets, evince for
pdf files and imagemagick for image files. Yes, I know I can view all
of these in Emacs but there are a few limitations:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Emacs chokes on large files
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
I can&amp;#39;t edit the docx file or the image
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
So, I hop to the shell and launch the program I need on the files in
question. It&amp;#39;s fine but it does mean I end up with two windows for
each operation - the terminal from which I run, say, libreoffice and
libreoffice itself. I will also have my browser and one ore more Emacs
windows open so things can get a bit cluttered.
&lt;/p&gt;
&lt;p&gt;
Now, on the Emacs side, one tool that I still haven&amp;#39;t gotten myself to
regularly use is dired. I figured dired could be made to do what I
want - quickly and easily launch programs to view and edit my files.
&lt;/p&gt;
&lt;p&gt;
By default, dired opens files in a new Emacs buffer. That&amp;#39;s fine for
text files but not the behavior I want for docx and other files. It
turns out there are a number of good solutions. The one that I&amp;#39;ll
likely stick with is &lt;a href=&#34;https://github.com/jpkotta/openwith/tree/1dc89670822966fab6e656f6519fdd7f01e8301a&#34;&gt;openwith&lt;/a&gt; but there are other options as
well. Check out the video for more:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/_qjJ5UzInRI&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>To Zoom or not to Zoom</title>
      <link>https://cestlaz.github.io/post/zoom-or-not/</link>
      <pubDate>Tue, 07 Apr 2020 14:03:13 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/zoom-or-not/</guid>
      <description>&lt;p&gt;
Zoom has been on a wild ride. As teachers scrambled to try to deliver
instruction from there homes to student homes Zoom quickly became a
favorite. It was easy, performed well, and had features that other
services seemed to lack. Features like being able to mute students and
for me a big one - breakout rooms. Now, these features weren&amp;#39;t
flawless as I mentioned &lt;a href=&#34;https://cestlaz.github.io/post/limitations-of-remote-teaching/&#34;&gt;in my last post&lt;/a&gt; but that&amp;#39;s okay. Zoom wasn&amp;#39;t
designed to be a virtual classroom and has worked remarkably well
given that it was designed as a tool for traditional business. 
&lt;/p&gt;
&lt;p&gt;
Soon though there was blowback. 
&lt;/p&gt;
&lt;p&gt;
Zoom has privacy issues.
&lt;/p&gt;
&lt;p&gt;
Zoom is sharing your data with Facbook.
&lt;/p&gt;
&lt;p&gt;
Zoom is insecure.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Zoombombing&#34;&gt;Zoombombing&lt;/a&gt; will destroy our kids.
&lt;/p&gt;
&lt;p&gt;
And the love affair was over.
&lt;/p&gt;
&lt;p&gt;
I quickly began noticing &amp;#34;Zoom shaming&amp;#34; on Twitter and Facbook. Public
figures and even other teachers shaming teachers for wanting to
continue with Zoom. 
&lt;/p&gt;
&lt;p&gt;
In NYC, the DOE quickly moved to ban the tool. Showing their usual
level of respect for teachers, they announced this at the very end of
the week and told them they had to figure out how to live without it
by Monday morning. Oh, by the way, technically teachers are hourly
employees. This came on top of them canceling spring break - a break
that many teachers were counting on to both catch their breath and
also to figure out this brave new world, after all they were given
pretty much zero lead time and zero training and have been doing all
this under the gun and yet still have done a yeoman&amp;#39;s job of caring
for their students.
&lt;/p&gt;
&lt;p&gt;
But I digress. I don&amp;#39;t really want to talk about the DOE and our
government&amp;#39;s shortcomings here. I want to specifically address Zoom.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s talk about the data sharing. Is that an issue? Sure. I don&amp;#39;t
know the extend of the data that they were sharing but users should
have control over their data and information. Forget about
regulations, just in terms of right and wrong this should all be
transparent and teachers, students, and parents should be able to opt
in or out and there should be no downside to opting out. What gets me
though is that the DOE is all of a sudden concerned about student
data!!! When did that happen. Seems hypocritical that now this is an
issue as opposed to, well, sharing data with the college board,
charter schools, and who knows how many other private entities. 
&lt;/p&gt;
&lt;p&gt;
Next up, zoombombing and the like. It seems that if you follow
best practices - having students use names and using a conference
password and waiting fooms that&amp;#39;s taken care of.
&lt;/p&gt;
&lt;p&gt;
Security? I keep hearing about Zoom&amp;#39;s lack of encryption. I&amp;#39;m not an
encryption expert but there is still transport level end to end
encryption. It&amp;#39;s just that Zoom isn&amp;#39;t encrypting data at the
endpoints. From what I understand this could still leave a conference
open to man in the middle attacks but I&amp;#39;m really not sure how great
the risk is. What I do know is I keep seeing posts and tweets by
people who I&amp;#39;m fairly sure no next to nothing about either encryption
or network security spouting off as experts.  
&lt;/p&gt;
&lt;p&gt;
The bottom line is that most teachers are going well above and beyond
to do the best they can for their students. I&amp;#39;ll also say that the DOE
and politicians care for students as a whole but teachers care for
them as individuals and that&amp;#39;s important to remember. Teaching is
already incredibly hard. Teaching a single class doesn&amp;#39;t just involve
standing and teaching for 40 minutes. It involves planning, then
teaching, then reflecting. A synchronous tool like Zoom best
approximates this. It might not be the best way to do things remotely
but it&amp;#39;s a quick way to connect with your students and to give them
something both in terms of content and normalcy while figuring out how
to do it better (hence the importance of that now erased spring
break). If a teacher has to go async or only do chatting async they
still have to do all the planning and reflecting but also might have
to make videos without the benefit of feedback, copious handouts or
who knows what. Maybe Zoom isn&amp;#39;t the best tool but for many teachers
it&amp;#39;s the best tool for right now.
&lt;/p&gt;
&lt;p&gt;
Teachers should be given access to all manner of tools and be trusted
to make the appropriate decision given the circumstances. Does Zoom
have issues? Sure. Might it violate policy or regulation? Sure but
these are not normal circumstances.
&lt;/p&gt;
&lt;p&gt;
When I was rounding up strays on 9/11, fleeing from Stuy as the towers
fell, ultimately taking them to my apartment in Chelsea only to later
deliver them home I&amp;#39;m sure I violated any number of DOE
regulations. In the days and weeks that followed I&amp;#39;m sure I violated
more as I attempted to work to connect students and families together
and then to deliver the best instruction I could under trying
circumstances. You know what - I bet those students and their parents
didn&amp;#39;t care that I violated any policies. Years later I heard from
parents - parents of kids that I didn&amp;#39;t even teach thanking me for
what I did for them and their children. When you&amp;#39;re in a crisis it&amp;#39;s
about the kids not about regulations. If Zoom is the best tool right
now for a teacher and their kids, let them use Zoom. If there are
issues, fix the issues or transition to something else but only by
giving them the time so that the students aren&amp;#39;t hurt by the process.
&lt;/p&gt;
&lt;p&gt;
Trust teachers to do the right thing. A former teacher, friend and
mentor of mine, &lt;a href=&#34;https://cestlaz.github.io/posts/2012-05-09-my-favorite-year-teacher.html/&#34;&gt;Herb Greenhut&lt;/a&gt; once said that it was easy to solve
the education problem: &amp;#34;Hire great teachers and get the F out of the
way.&amp;#34; We&amp;#39;ve got a lot of great teachers. The system should support
them but if they aren&amp;#39;t going to do that, at least &amp;#34;get the F out of
the way.&amp;#34;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 70 Org Protocol</title>
      <link>https://cestlaz.github.io/post/using-emacs-70-org-protocol/</link>
      <pubDate>Fri, 27 Mar 2020 15:15:28 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-70-org-protocol/</guid>
      <description>&lt;p&gt;
I spent part of today cleaning up my Emacs workflow. Specifically, how
I capture emails and links into org-mode
&lt;/p&gt;
&lt;p&gt;
I already wrote about how I used org-capture (&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-23-capture-1/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-24-capture-2/&#34;&gt;here&lt;/a&gt;). It&amp;#39;s
pretty clean and easy but there was one thing that always nagged at
me. When I capture from mu4e within Emacs by hitting &lt;code&gt;C-c m&lt;/code&gt; it&amp;#39;s set
up to automatically populate the capture template with a link to the
email labelled with the email&amp;#39;s subject. When I do it from Gmail or
to store a web link as a bookmark, I have to copy and paste the link
in manually.
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s where &lt;a href=&#34;https://orgmode.org/worg/org-contrib/org-protocol.html&#34;&gt;org-protocol&lt;/a&gt; comes in. We can use org-protocol to link
between a browser and Emacs. 
&lt;/p&gt;
&lt;p&gt;
First you have to run Emacs as a server. You can start the Emacs
server using &lt;code&gt;(server-start)&lt;/code&gt; but I always run emacs using a shortcut
key bound to &lt;code&gt;emacsclient -c -a &amp;#34;&amp;#34;&lt;/code&gt;. This runs emacsclient and
connects to my running Emacs server but if the server isn&amp;#39;t running it
starts it. That meant that I only had to add &lt;code&gt;(require &amp;#39;org-protocol)&lt;/code&gt;
to my Emacs config file.
&lt;/p&gt;
&lt;p&gt;
I followed the instructions in the documentation by typing in these
lines:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;gconftool-2 -s /desktop/gnome/url-handlers/org-protocol/command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/usr/local/bin/emacsclient %s&amp;#39;&lt;/span&gt; --type String

gconftool-2 -s /desktop/gnome/url-handlers/org-protocol/enabled --type Boolean true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
but that didn&amp;#39;t seem to work.
&lt;/p&gt;
&lt;p&gt;
I ended up following the instructions I found in &lt;a href=&#34;https://stackoverflow.com/questions/7464951/how-to-make-org-protocol-work&#34;&gt;this post&lt;/a&gt; creating a
file named &lt;code&gt;org-protocol.desktop&lt;/code&gt; in the folder
 &lt;code&gt;~/.local/share/applications&lt;/code&gt; containing:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Desktop Entry&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;org-protocol
Exec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;emacsclient %u
Type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Application
Terminal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false
Categories&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;System;
MimeType&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x-scheme-handler/org-protocol;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
and then running &lt;code&gt;update-desktop-database
~/.local/share/applications/&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
This seemed to do the trick. 
&lt;/p&gt;
&lt;p&gt;
I also modified my link capture template: 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Link&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Sync/orgfiles/links.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Links&amp;#34;&lt;/span&gt;)
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %a %^g\n %?\n %T\n %i&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Finally, to get things basically to work, I installed &lt;a href=&#34;https://github.com/sprig/org-capture-extension&#34;&gt;this&lt;/a&gt;
extension. I configured it to use my &amp;#34;l&amp;#34; or link capture
template. Once everything was installed I went to a web site and
clicked the plugin. I was popped into Emacs with the capture template
up and filled in. I did it again, this time marking text and hitting
the button and again everything worked.
&lt;/p&gt;
&lt;p&gt;
Looking at the template, the &lt;code&gt;%a&lt;/code&gt; is replaced by the web page link,
the &lt;code&gt;%i&lt;/code&gt; with the marked text, the &lt;code&gt;%T&lt;/code&gt; with the timestamp and the
cursor is left at the &lt;code&gt;%?&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
I wanted to make one more change. I wanted to also use this for
storing Gmail links. The problem was that I wanted my links to be
sored in a file named &lt;code&gt;links.org&lt;/code&gt; while I wanted my Gmails stored
under my main org file &lt;code&gt;i.org&lt;/code&gt;. By reading the org-protocol page I
found that I could just create a bookmark.
&lt;/p&gt;
&lt;p&gt;
Copied mostly from the docs, I made a bookmark with this as the link
(all in one line):
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;javascript&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-protocol://capture://m/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
      encodeURIComponent(&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
      encodeURIComponent(document.&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
      encodeURIComponent(window.&lt;span style=&#34;color:#a6e22e&#34;&gt;getSelection&lt;/span&gt;())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
It worked perfectly. 
&lt;/p&gt;
&lt;p&gt;
This time I used this as the template:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mail To Do&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Sync/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;To Do and Notes&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* TODO %a\n %?&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:prepend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s it. Now I can store emails in Emacs or Gmail as well as
bookmarks without any cut and paste. 
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a video with the walkthrough:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/FYKcVKg0OCU&#34;&gt;https://www.youtube.com/embed/FYKcVKg0OCU&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 69 Floobits</title>
      <link>https://cestlaz.github.io/post/using-emacs-69-floobits/</link>
      <pubDate>Sat, 21 Mar 2020 10:52:37 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-69-floobits/</guid>
      <description>&lt;p&gt;
Hunter, like most other schools has gone remote. I taught my first two
&lt;a href=&#34;https://cestlaz.github.io/post/teaching-online-day-01/&#34;&gt;online classes&lt;/a&gt; on Thursday. Currently, I&amp;#39;m using Zoom for synchronous
stuff and a mailing list and slack for async. 
&lt;/p&gt;
&lt;p&gt;
There are still some missing pieces. When we&amp;#39;re all together, it&amp;#39;s
easy to look at a student&amp;#39;s work and talk them through issues. It&amp;#39;s
also easy to get students to work together, at least to a point. With
everyone locked up in their own homes, real time collaboration is
harder. Sure, we can use tools like GitHub issues and pull requests
for async code commentary but what about live help and pairing? If
we want to use an online environment, &lt;a href=&#34;https://repl.it&#34;&gt;repl.it&lt;/a&gt;  - a platform I very
much like fits the bill. On the other hand, what do you use if you
want to work collaboratively in real time using a local editor. 
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s where &lt;a href=&#34;https://floobits.com&#34;&gt;Floobits&lt;/a&gt; comes in. Floobits is a platform that provides
for collaborative live editing. It works with Emacs, Neovim, Sublime
Text, Atom, and IntelliJ (and maybe all the Jetbrains IDEs). They
support a free tier which only has public workspaces but that&amp;#39;s fine,
as far as I&amp;#39;m concerned, for educational purposes. 
&lt;/p&gt;
&lt;p&gt;
Check out the video to see how I set it up:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/-0x4PV1EB5w&#34;&gt;https://www.youtube.com/embed/-0x4PV1EB5w&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 68 - Tramp and org-publish</title>
      <link>https://cestlaz.github.io/post/using-emacs-68-tramp-org-publish/</link>
      <pubDate>Sat, 14 Mar 2020 20:57:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-68-tramp-org-publish/</guid>
      <description>&lt;p&gt;
I maintain a couple of small simple web sites. One provides
information about my undergraduate &lt;a href=&#34;http://info.huntercs.org/scholars/&#34;&gt;honors CS program&lt;/a&gt; and another that
isn&amp;#39;t live yet is a FAQ for my &lt;a href=&#34;http://info.huntercs.org/teacher_ed/faq.html&#34;&gt;CS teacher certification program&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Traditionally I would use ssh to connect to the host machine, fire up
Emacs and edit the html files to update the sites. I always forget
that with Emacs we can do better.
&lt;/p&gt;
&lt;p&gt;
One way is with &lt;a href=&#34;https://www.emacswiki.org/emacs/TrampMode&#34;&gt;Tramp Mode&lt;/a&gt;. I was reminded of this by JCS&amp;#39;s recent
&lt;a href=&#34;https://irreal.org/blog/?p=8705&#34;&gt;post&lt;/a&gt;. With Tramp, you can open a file on a remote host and edit it in
place. This means I get my full Emacs config but am editing the file
over there!!! It&amp;#39;s very slick but I always forget about it even though
I had already made &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-25-tramp/&#34;&gt;a video on it&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Tramp is cool but I was still editing the html directly. I figured it
would be easier to just use org-mode but that required figuring out
how to make the html produced by org-mode look nice. Fortunately, it&amp;#39;s
not hard.
&lt;/p&gt;
&lt;p&gt;
We can turn off the default CSS used by org-mode
using:
&lt;/p&gt;
&lt;div class=&#34;src src-org&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#+OPTIONS&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: html-style:nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Or if we want add custom CSS using one or more of these:
&lt;/p&gt;
&lt;div class=&#34;src src-org&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#+HTML_HEAD&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;style1.css&amp;#34; /&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#+HTML_HEAD_EXTRA&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: &amp;lt;link rel=&amp;#34;alternate stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;style2.css&amp;#34; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We can also embed html and custom CSS in our org-files.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://orgmode.org/manual/CSS-support.html&#34;&gt;This page&lt;/a&gt; from the org-mode documentation also lists many of the html
components that are styled by default. 
&lt;/p&gt;
&lt;p&gt;
Armed with custom CSS we can use the org-mode exporting facilities to
convert the file to a web page but the final step is to use
&lt;a href=&#34;https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html&#34;&gt;org-publish&lt;/a&gt;. This lets us export one or more org-mode files and save
the result in some specified directory. You can also publish static
files like CSS files and images to go with the org to html
files. Finally by using the tramp syntax we can publish to a remote
host. 
&lt;/p&gt;
&lt;p&gt;
The goes through all of this. 
&lt;/p&gt;
&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/tlCOsigPjk8&#34;&gt;https://www.youtube.com/embed/tlCOsigPjk8&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 67 - Emacs vs Vi a rant with some historical perspective</title>
      <link>https://cestlaz.github.io/post/using-emacs-67-emacs-rant/</link>
      <pubDate>Sun, 23 Feb 2020 07:57:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-67-emacs-rant/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been meaning to do my version of the Emacs VI rant for a while. A
few years ago I staged out a video showing what it would be like for a
beginner to start with Emacs, Vim, Atom, and Sublime Text but decided
it would be long, unwieldy and clunky to present - particularly when
it came to customization. 
&lt;/p&gt;
&lt;p&gt;
I tabled it for a while but recently have been seeing a bunch of
threads, videos and posts talking about Emacs and Vim. Some are really
well done, balanced and sensible like Derek Taylor&amp;#39;s over on
&lt;a href=&#34;https://www.youtube.com/watch?v=VaBdlcYaZLQ&#34;&gt;DistroTube&lt;/a&gt;. On the other hand, I saw plenty of what makes me
nuts. People claiming things like style is objectively better than
the other or was created with speed or ergonomics in mind so is
superior and the like.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my take. I think it&amp;#39;s a little different than some of the other
rants because I look a bit at history and evolution and also at the
day to day reality of editing. Hope you enjoy it.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/0M6erlK57go&#34;&gt;https://www.youtube.com/embed/0M6erlK57go&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Github Org Explorer - now with oauth</title>
      <link>https://cestlaz.github.io/post/github-org-explorer-oauth/</link>
      <pubDate>Sun, 16 Feb 2020 12:53:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-org-explorer-oauth/</guid>
      <description>&lt;p&gt;
A while ago I wrote about a small side project - &lt;a href=&#34;https://cestlaz.github.io/post/github-org-explorer/&#34;&gt;GitHub Org Explorer&lt;/a&gt; -
a small tool to make it easier to manager GitHub repositories based on
organization. I&amp;#39;m using it as a replacement for the GitHub provided
Classroom Assistant. I find it more flexible in terms of exporting
assignments to my own machine and it allows me to delete repos en
masse which is critical after the semester is over.
&lt;/p&gt;
&lt;p&gt;
Shortly after I released it I found that GitHub was going to sunset
the basic authentication I was using so I had to convert the
application to support oauth.
&lt;/p&gt;
&lt;p&gt;
So, here it is. 
&lt;/p&gt;
&lt;p&gt;
Along the way I had a few headaches. I wrote about them &lt;a href=&#34;https://cestlaz.github.io/post/my-code-works/&#34;&gt;here&lt;/a&gt;. Mostly
versioning issues surrounding the node ecosystem. I still haven&amp;#39;t
figured it all out but I think I&amp;#39;ve gotten everything working
alright. 
&lt;/p&gt;
&lt;p&gt;
If you want to check it out, you can grab it off GitHub. Here&amp;#39;s the
repo: &lt;a href=&#34;https://github.com/zamansky/github-org-explorer&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/github-org-explorer&#34;&gt;https://github.com/zamansky/github-org-explorer&lt;/a&gt;&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the short runthrough video I made. Logging in looks different
but everything operates the same way:
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/e-gNzuBG3mU&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>CS Ed Podcast 2 - Dan Garcia on test creation</title>
      <link>https://cestlaz.github.io/post/cs-ed-podcast-2/</link>
      <pubDate>Thu, 13 Feb 2020 08:41:21 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-ed-podcast-2/</guid>
      <description>
&lt;p&gt;
Episode 2 of the &lt;a href=&#34;https://sites.duke.edu/csedpodcast/&#34;&gt;CS Ed podcast&lt;/a&gt; had Dan Garcia talk about
exam creation. 
&lt;/p&gt;
&lt;p&gt;
This wasn&amp;#39;t a podcast about the value of exams - in class, high stakes
or otherwise. In fact Dan says in the podcast it would be great to &amp;#34;get grades out of
the equation. Grades are gonna be an impediment to learning.&amp;#34; But
recognizes that we have not say in this most of the time (and I&amp;#39;ll add
that though I agree grades can and do perform a function) so we should
be creative in terms of assessment.
&lt;/p&gt;
&lt;p&gt;
Dan hit on a lot of important points and there&amp;#39;s no way
I can weave them into a sensible narrative so I&amp;#39;ll just hit a bunch of
points and riff from there.
&lt;/p&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Multiple choice.
&lt;/h3&gt;
&lt;p&gt;
Dan started right out front saying that he&amp;#39;s come around to being ok
or maybe even liking multiple choice  having referenced the ability
top make &amp;#34;good distractors.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
This is something that I think I&amp;#39;ll never agree with. On the one hand,
there is the idea of multiple guess but what really gets me is that
multiple choice questions, by definition, are gotcha questions. You&amp;#39;re
supposed to have distractors to pull you away from the right path. To
make a mistaken answer seem ok. I hate gotcha questions. Besides,
halfway decent multiple choice questions are really hard to write. 
&lt;/p&gt;
&lt;p&gt;
To me, MC questions are really a sometimes necessary tool to make up
for the fact that teachers are overworked and never have enough time
to grade. This might make them a necessary evil but it doesn&amp;#39;t make
them good. We might have to resort to them if we&amp;#39;re &amp;#34;teaching&amp;#34; a class
of hundreds or perhaps thousands  but we shouldn&amp;#39;t have classes
anywhere near that size. 
&lt;/p&gt;
&lt;p&gt;
Another problem with MC is that multiple choice tests seem to
frequently test speed rather than knowledge. APCS-A is a good example
of this. You have 90 minutes to answer 40 questions. That&amp;#39;s a bit over
2 minutes per question. That&amp;#39;s a race not an assessment. 
&lt;/p&gt;
&lt;p&gt;
Finally, I find multiple choice questions hard to write and time
consuming to typeset and format. I guess if I were better at the
distractors this might not be the case but a short
answer version of a MC question is always easier for me to write and
not much harder to grade.
&lt;/p&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Test creation
&lt;/h2&gt;
&lt;p&gt;
Half a day. Twelve hours. That&amp;#39;s how long Dan says it takes him to
make a test. That sounds about right. There&amp;#39;s no two ways about
it. Creating a good exam is hard work. Creating a bad one is easy and
quick but that&amp;#39;s not a good answer.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s think about this for a minute. A college professor might teach
one or two classes a semester. A college lecturer three, maybe 4. A
high school teacher teaches 5 classes. Typically two or three
different subjects. They basically get 40 minutes at work a day to
prep and that includes EVERYTHING - lesson planning, grading, test
creation, working with students. The whole kit and caboodle. Even with
two preps rather than three that&amp;#39;s an additional 24 hours just to
create those two tests. More since you&amp;#39;ll need multiple versions of
each. 
&lt;/p&gt;
&lt;p&gt;
Of course we can mitigate this a it by reusing and modifying questions
from old exams and sharing with colleagues but writing exams is a bear. 
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s no wonder teachers turn to multiple choice test banks.
&lt;/p&gt;
&lt;p&gt;
Really glad Dan spent time on this as teachers have to realize that
it&amp;#39;s not just them.
&lt;/p&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
How long is too long?
&lt;/h2&gt;
&lt;p&gt;
I frequently struggle with test duration. It sounds like it&amp;#39;s a common
problem. Dan has his TAs test the tests hoping they can do it in one
sixth the students time. He found, though that his slowest TAs might
take one third of the allocated time.
&lt;/p&gt;
&lt;p&gt;
When I started, I heard ratios from math teachers ranging from
students take twice the time I would on my exams up to five times
longer. 
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s hard to get it right but it&amp;#39;s important that tests are tests of
knowledge and ability not speed. At Stuy where class periods were 43
minutes I&amp;#39;d try for tests that took the typical student 33 - 35
minutes. Just enough time to go over the exam. You might ace the exam,
you might fail but time wouldn&amp;#39;t be the issue.
&lt;/p&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Content
&lt;/h2&gt;
&lt;p&gt;
This was a big one. Dan talks about students expectations - are tests
cumulative or just since the last unit. Making sure test content is
proportional to lesson content. Watching out for test morale - letting
kids know hard questions are hard, test flow and much more. Not too
much to say here other than if you haven&amp;#39;t listen to the podcast.
&lt;/p&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Backstory
&lt;/h2&gt;
&lt;p&gt;
One content point that I do want to drill down on is Dan&amp;#39;s stating
that we sometimes give too much backstory on questions. &amp;#34;If you want
them to sort a list, make them sort a list! You don’t have to tell a
story about the list….&amp;#34; Too often tests are races and even when they
aren&amp;#39;t a student has to first read the question, understand it, make
sure there are no gotchas, formulate and write down a solution. Giving
a complex backstory from which the students have to glean the real
question in a timed high pressure environment is just too much. There
are other places where you can ask a general question with a big back
story and have students solve the poblem.
&lt;/p&gt;
&lt;p&gt;
This made me think of technical interviews which are all
backstory. The truth though is that most kids solve them by pattern
matching. They prep by doing similar problems and look for key
phrases. Have unlimited memory and need fast access - there&amp;#39;s probably
a hash table involved. Something have an easy solution but it&amp;#39;s too
slow - think recurison. Recursion is obvious but too slow - dynamic
programming. It&amp;#39;s a &amp;#34;have I seen this question before&amp;#34; more so than a
real test of a potential employees ability.
&lt;/p&gt;
&lt;p&gt;
The other thing it made me think is that while I very much agree with
Dan, it flies  in the face of what teachers have been forced to deal
with in the last couple of decades. It&amp;#39;s all about the word problem
where the kid must sleuth out the question. So many high stakes exams
are as much reading exams as they are content exams. I&amp;#39;m not even
going to get into how this affects non English speakers but let&amp;#39;s just
say this is a real issue.
&lt;/p&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
Tests on computers and other test taking formats
&lt;/h2&gt;
&lt;p&gt;
Towards the end, Dan talks about having an on-computer part of an
exam. I like having the students do live on computer exams but they
also have their issues. I&amp;#39;m not so concerned about cheating. I give
them the resources they can use and truth be told, the end results
don&amp;#39;t differ much from when I&amp;#39;ve used paper exams or other
assessments. I am always concerned about a computer breaking but
fortunately that hasn&amp;#39;t really been a problem.
&lt;/p&gt;
&lt;p&gt;
What has been a problem however is the fact that speed can become an
issue. Some kids know how to type others don&amp;#39;t. This can be a HUGE
advantage in a CS0 or CS1 class. When you&amp;#39;re thinking about what
letter to type you&amp;#39;re not thinking about the problem and in general
beginners are very slow. I always tell my second year students to look
at what they can do as an overnight assignment. They realize that
what&amp;#39;s now overnight was a large semester project back in their first
year. This all means that you really have to be careful about the
length of a computer based test. 
&lt;/p&gt;
&lt;p&gt;
Another thing Dan mentioned was giving group tests. Students would
work in teams. He noted that in the group, The collective score was
always higher than the top individual score. I get the idea and it&amp;#39;s
probably true trend wise but can&amp;#39;t be universally true if your tests
are actually compatible. Given a fair test, surely some students can
ace it in which case the group can only equal the top scorer.
&lt;/p&gt;
&lt;p&gt;
This group test reminded me of cooperative learning which was all the
rage back in the day. Of course cooperative learning is no longer &amp;#34;it&amp;#34;
but while it never was the silver bullet it is notable that it had
some good ideas and it sounds like Dan is implementing some of them
albeit without the same name.
&lt;/p&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
Thoughts on grading
&lt;/h2&gt;
&lt;p&gt;
I&amp;#39;ll disagree here with Dan&amp;#39;s contention that we should all use
Gradescope. I&amp;#39;ve come out against autograders before so I&amp;#39;ll just
summarize here. I&amp;#39;m not entirely against autograders. They&amp;#39;re great
for rudimentary answers and can also provide a level of instant
student feedback. The flip side is that in order to get to know your
students you have to look at their work. You might not learn much from
multiple choice answers but you will if you look at code they&amp;#39;ve
written out or other long form answers. I get that you can&amp;#39;t do this
with huge classes but again, I&amp;#39;ll say we shouldn&amp;#39;t have huge
classes. To use an autograder as a necessity is one thing but to say
it&amp;#39;s better rather than just a time save is another. Now, you can use
autograding tools effectively to cull and sort and draw your attention
to things to look at by hand and that&amp;#39;s a plus but I haven&amp;#39;t seen too
much of that in current tools.
&lt;/p&gt;
&lt;p&gt;
Rather than an autograder, I try to use testing frameworks on short
answers  and to provide instant feedback. Specifically I use &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt;
for C++ and &lt;a href=&#34;https://docs.python.org/2/library/unittest.html&#34;&gt;unittest&lt;/a&gt; for Python. They provide students with instant
answer feedback while at the same time introducing them to practical
software engineering sensibilities.
&lt;/p&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
Some of my memorable tests
&lt;/h2&gt;
&lt;p&gt;
I thought here I&amp;#39;d share a few exams I&amp;#39;ve given that I found
memorable.
&lt;/p&gt;
&lt;p&gt;
First was a five question long answer exam. I gave it to my kids
telling them &amp;#34;Answer three of the five questions. You can select any
three but when grading, I will only grade quesitons 1, 2 and 4.&amp;#34; Some
students had some real issues with this. Led to an interesting
discussion as to about choice and consequences. I didn&amp;#39;t do this in
order to mess with the kids. It was back in the day when you had to
send exams to the central copy room to be copied and needed about a
weeks lead time. I didn&amp;#39;t know the direction the class would take so
wrote questions 3,4, and 5 to hedge my bets. By the time we got to the
test, question 4 made sense while 3 and 5 would have been really super
hard.
&lt;/p&gt;
&lt;p&gt;
A second test, well quiz I gave once was a single question that was
something like this: 
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
take the next 20 minutes to share with me your thoughts on cellular
automata. Consider why we studied it. Was it interesting? Why, why
not? What did you learn?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Some students absolutely loved it. Others loathed it. The freedom gave
some kids license to give me super creative interesting answers. Some
really needed more constraints and had tremendous difficulty.
&lt;/p&gt;
&lt;p&gt;
Finally, I once gave a semi-gag test. The instructions on the front
said that you had to proceed in order. You WERE NOT TO look ahead. It
was a mix of real CS questions and goof questions like:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
sprint up to the blackboard, draw a smiley on the board, then return
to your seat and go on to the next question.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Stand up, do 10 jumping jacks, sit and proceed to the next question
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Stand up and raise your right hand. When you see someone else with
their hand raised, walk to them and give them a high five. Then
return to your seat nad proceed to the next question.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The last page had an answer key and instructed the students to grade
themselves before handing it in.
&lt;/p&gt;
&lt;p&gt;
Overall the class enjoyed the exam.
&lt;/p&gt;
&lt;p&gt;
What was interesting, was that after class a few student appoached me
either in person or via email saying that they felt really bad but
they looked at the end of the exam when it started so saw the
answers. They felt they cheated and wanted to let me know and
understood if they got  zeros (which of course, I didn&amp;#39;t give them). 
&lt;/p&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
Final thoughts
&lt;/h2&gt;
&lt;p&gt;
Wow. That was long but I said before that there was a lot to unpack. 
&lt;/p&gt;
&lt;p&gt;
I left a bunch out of this and it&amp;#39;s already a really long post. I
might write more on test creation and administration at some other
point but the takeaway from this is listen to the &lt;a href=&#34;https://sites.duke.edu/csedpodcast/&#34;&gt;podcast&lt;/a&gt; if you
haven&amp;#39;t already.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 66 - an eshell switcher in elisp</title>
      <link>https://cestlaz.github.io/post/using-emacs-66-eshell-elisp/</link>
      <pubDate>Sat, 08 Feb 2020 08:12:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-66-eshell-elisp/</guid>
      <description>&lt;p&gt;
I thought it was time to give &lt;a href=&#34;https://masteringemacs.org/article/complete-guide-mastering-eshell&#34;&gt;eshell&lt;/a&gt; in Emacs another try. It has some
pretty cool features but for whatever reason, I&amp;#39;ve never really been
able to adopt Emacs as my go to shell.
&lt;/p&gt;
&lt;p&gt;
Eshell out of the box is pretty cool but could use some
enhancements. When launching at login it doesn&amp;#39;t know about the path
you set in your .bashrc or .zshrc in my case files. It just seemed to
have problems with paths in general but that was fixed with the
exce-path-from-shell package. The prompt also needed some fixing up
along with some other tweaks. 
&lt;/p&gt;
&lt;p&gt;
I found &lt;a href=&#34;https://github.com/manateelazycat/aweshell&#34;&gt;aweshell&lt;/a&gt; which looked promising but it wasn&amp;#39;t on melpa so I
had to clone it separately. I also noticed that it basically tied
together some packages I could download myself and added a shell
switcher but didn&amp;#39;t bind the keys.
&lt;/p&gt;
&lt;p&gt;
I thought I&amp;#39;d dive into elisp -something I haven&amp;#39;t done in a while to
write my own.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my current complete eshell config:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;(use-package exec-path-from-shell
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (exec-path-from-shell-initialize))


    (use-package fish-completion
    :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
    :config
    (global-fish-completion-mode))
  &lt;span style=&#34;color:#75715e&#34;&gt;;; (use-package eshell-prompt-extras &lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; :ensure t&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; :config&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; (setq epe-show-python-info nil)&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; )&lt;/span&gt;

  (use-package eshell-git-prompt
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (eshell-git-prompt-use-theme &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;git-radar&lt;/span&gt;)
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
And here&amp;#39;s the code I ended up with for my shell switcher:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;+BEGIN_SRC emacs-lisp
  (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cl-lib&lt;/span&gt;)
  (defun select-or-create (arg)
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Commentary ARG.&amp;#34;&lt;/span&gt;
    (if (string= arg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New eshell&amp;#34;&lt;/span&gt;)
        (eshell &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
      (switch-to-buffer arg)))
  (defun eshell-switcher (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; arg)
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Commentary ARG.&amp;#34;&lt;/span&gt;
    (interactive)
    (let* (
           (buffers (cl-remove-if-not (lambda (n) (&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-local-value&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;major-mode&lt;/span&gt; n) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eshell-mode&lt;/span&gt;)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-list&lt;/span&gt;)) )
           (names (&lt;span style=&#34;color:#a6e22e&#34;&gt;mapcar&lt;/span&gt; (lambda (n) (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-name&lt;/span&gt; n)) buffers))
           (num-buffers (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; buffers) )
           (in-eshellp (&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; major-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eshell-mode&lt;/span&gt;)))
      (cond ((&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; num-buffers &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) (eshell (or arg &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)))
            ((not in-eshellp) (switch-to-buffer (&lt;span style=&#34;color:#a6e22e&#34;&gt;car&lt;/span&gt; buffers)))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (select-or-create (&lt;span style=&#34;color:#a6e22e&#34;&gt;completing-read&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Select Shell:&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New eshell&amp;#34;&lt;/span&gt; names)))))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
I currently bound eshell-switcher to &lt;code&gt;CTRL-z e&lt;/code&gt;. 
&lt;/p&gt;
&lt;p&gt;
The video goes through the whole process:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/-dIjFZBDt64&#34;&gt;https://www.youtube.com/embed/-dIjFZBDt64&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Riffing on the CS Ed Podcast - Episode 1 - David Malan</title>
      <link>https://cestlaz.github.io/post/cs-ed-podcast-1/</link>
      <pubDate>Thu, 06 Feb 2020 16:42:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/cs-ed-podcast-1/</guid>
      <description>
&lt;p&gt;
I saw a couple of posts the other day about the &lt;a href=&#34;https://sites.duke.edu/csedpodcast/&#34;&gt;CS Ed Podcast&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Kristin Stephens-Martinez of Duke interviewed (or will interview) six
CS educators on a variety of topics. There are four posted so far:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
David Malan
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Dan Garcia
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Amy Ko
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Mark Guzdial
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Before I started I thought I&amp;#39;d listen to a few and then share some
thoughts but I found so much to unpack  in the second episode where
Dan talks about testing that I decided to share my thoughts on the
first episode, then Dan&amp;#39;s and then see if find anything to comment on
in episodes three and beyond.
&lt;/p&gt;
&lt;p&gt;
All the podcasts are available via the link above and transcripts are
also provided - a nice touch for a number of reasons. It not only
increases accessibility, it also makes the episodes potentially more
discoverable via search engine and certainly more searchable. For me it was
helpful as I only listen to podcasts while working out - running or in
the gym so being able to search a text page to double check what I
thought I heard while struggling to finish mile six or seven was a
boon.
&lt;/p&gt;
&lt;p&gt;
In episode 1, Stephens-Martinez interviewed David Malan of CS50
fame. The interview was mostly about tools used in CS50.
&lt;/p&gt;
&lt;p&gt;
Even though I&amp;#39;m not going to comment on CS50 as it wasn&amp;#39;t the direct
topic of the interview I feel I should share my bias in case any comes
through. I&amp;#39;m not a fan of CS50. This is an opinion I formed by talking
to a number of my former students who have taken/TA&amp;#39;d CS50 and/or
courses that follow it combined with my own thoughts and beliefs about
CS Education. That said, I have no first hand exposure to Harvard&amp;#39;s
CS50 nor have I ever met Mr. Malan so I reserve the right to change my
point of view at some point in the future.
&lt;/p&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Summary stats
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Did I enjoy the podcast? Yes - I&amp;#39;d give it 4/5 on the making running
bearable scale. The interview flowed well and a lot of information
was shared. 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Did I learn anything? Honestly, no. This was probably due to the
topic but more on that below.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Should you listen? Yes. Again, more below.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Thoughts
&lt;/h3&gt;
&lt;p&gt;
A theme of the podcast was that Malan wants his students to be exposed
to and end up using real tools but uses the CS50 tools to scaffold
their way. Not having a huge amount of exposure I won&amp;#39;t comment on how
well this works but it&amp;#39;s philosophically similar to my beliefs where I
start my beginners in a simplified environment like Thonny for Python
and have them &amp;#34;graduate&amp;#34; up to a more full featured yet less forgiving
editor. 
&lt;/p&gt;
&lt;p&gt;
One of the tools they talked about was &lt;a href=&#34;https://github.com/cs50/help50&#34;&gt;help50&lt;/a&gt; - a command line tool to
improve on error messages (there&amp;#39;s also a web interface
availabe). Instead of typing &lt;code&gt;gcc myfile.c&lt;/code&gt; students would type
&lt;code&gt;hepl50 gcc myfile.c&lt;/code&gt; and instead of getting just the cryptic error
message you&amp;#39;d also get an improved message. In my short time playing
with it I couldn&amp;#39;t actually get a better error but I only played with
it for a few minutes. 
&lt;/p&gt;
&lt;p&gt;
I like the idea of sharing both the original error message as well as
the improved one but can&amp;#39;t really comment further. What I would have
loved to hear, however was how they transition the kids first to use
the tool and then to grow out of it. I&amp;#39;d also be curious to see if
there were differences between adoption of  and graduation from the
tool as well as it&amp;#39;s effectiveness for the Harvard population where
everyone is pre-selected to be high performing in terms of class
performance vs an institution that takes all comers. 
&lt;/p&gt;
&lt;p&gt;
Another tool I liked was &lt;a href=&#34;https://cs50.readthedocs.io/style50/&#34;&gt;style50&lt;/a&gt; which tells you if and how your code
violates coding standards but doesn&amp;#39;t automatically fix it.
&lt;/p&gt;
&lt;p&gt;
This is something I show my classes just using our editors style
checkers. I have Emacs set up to give me a red tick when I violate
style but only says what&amp;#39;s wrong when I move the cursor over and it
doesn&amp;#39;t auto correct. 
&lt;/p&gt;
&lt;p&gt;
I like this as it raises student awareness but they actually have to
make the change and learn to either code in an approved style or make
a conscious decision to violate style.
&lt;/p&gt;
&lt;p&gt;
For me, the missing part of the interview was the &amp;#34;how.&amp;#34; How do you
get the students to adopt the tool and how do you get them to outgrow
them. 
&lt;/p&gt;
&lt;p&gt;
At the end, podcasts get to share something from tech that they find
cool and Mr. Malan shared containers - Docker images as an
example. The idea that you can package something for students and know
that they all get the same package with the same versions of all the
required tools. That seems to make sense but I think there&amp;#39;s another
side, a downside  to containers both in terms of using them in classes
and in terms of the direction we&amp;#39;re going with containers in tech. All
of that though is a topic for another day.
&lt;/p&gt;
&lt;p&gt;
The podcast also covered other tools and if you haven&amp;#39;t listened yet
you should. 
&lt;/p&gt;
&lt;p&gt;
As I found a lot of rich material in Dan&amp;#39;s interview I&amp;#39;ll almost
certainly write something about that. Also probably on Amy&amp;#39;s about
debugging. Spoiler alert - both are worth listening to. Dan&amp;#39;s runs
about 40 minutes and Amy&amp;#39;s 24. I haven&amp;#39;t listened to Mark&amp;#39;s yet but
expect that to be worth our time as well.
&lt;/p&gt;
&lt;p&gt;
One thing I do want to point out is that all six interviews for this
series are of college professors - no K12 teachers. Not sure why that
decision was made but I found it to be interesting. Anyone who knows
me is aware that I&amp;#39;m much more of a teacher as craftsman guy rather
than a &amp;#34;the research says&amp;#34; guy so I have my bias but regardless, I
think that interviewing a professor, a high school teacher, and an
early grade teacher could give some very interesting and contrasting
perspectives.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 65 - Live Python</title>
      <link>https://cestlaz.github.io/post/using-emacs-65-live-python/</link>
      <pubDate>Sun, 02 Feb 2020 13:13:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-65-live-python/</guid>
      <description>&lt;p&gt;
The other day I stumbled upon Emacs&amp;#39;s &lt;a href=&#34;https://github.com/donkirkby/live-py-plugin&#34;&gt;Live Coding&lt;/a&gt; plugin. It takes
interactive coding up to the next level. 
&lt;/p&gt;
&lt;p&gt;
Normally, when you code Python, if you&amp;#39;re working in a REPL, every
time you hit &amp;lt;Enter&amp;gt; the line you just typed is evaluated. When you&amp;#39;re
working ina source file, you&amp;#39;re just editing until you send the file
into a Python interpreter.
&lt;/p&gt;
&lt;p&gt;
With this module, your file is continually evaluated as you type and
it shows you the results in a side window. 
&lt;/p&gt;
&lt;p&gt;
If you type in:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(c&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;c)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
The live python window will display something like:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
If you change one of the variables, everything updates.
&lt;/p&gt;
&lt;p&gt;
It gets even cooler when you add loops, functions, and even recursion.
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s also support for unit testing.
&lt;/p&gt;
&lt;p&gt;
It works, to varying degrees with Emacs, PyCharmm, Sublime Text and
there&amp;#39;s even a browser version. Emacs handles the basics and it seems
that the Sublime Text version adds support for some graphing. PyCharm
has that plus turtle graphics.
&lt;/p&gt;
&lt;p&gt;
While this is &lt;strong&gt;very&lt;/strong&gt; cool, to be honest, I don&amp;#39;t know how useful this
is going to be but I&amp;#39;m very excited to play with it in the Fall when
I&amp;#39;ll be teaching Python again.
&lt;/p&gt;
&lt;p&gt;
Check out this short video to see it in action:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/bYy90EUAh98&#34;&gt;https://www.youtube.com/embed/bYy90EUAh98&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 64 - Notmuch</title>
      <link>https://cestlaz.github.io/post/using-emacs-64-notmuch/</link>
      <pubDate>Sat, 18 Jan 2020 08:52:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-64-notmuch/</guid>
      <description>
&lt;p&gt;
I&amp;#39;ve been using the gmail web interface for a long time. My first
email or at least the oldest one still in the system dates back to Oct
18, 2004 7:29am. It was a letter to a buddy about an indoor turkey
fryer and if he needed a lift to Fairway the following morning to
shop.
&lt;/p&gt;
&lt;p&gt;
Before that, I used my &lt;a href=&#34;http://panix.com&#34;&gt;Panix&lt;/a&gt; shell account - probably with &lt;a href=&#34;https://en.wikipedia.org/wiki/Pine_%2528email_client%2529&#34;&gt;PINE&lt;/a&gt;. Work
email was using my own servers at Stuy along with either PINE or Emacs
using VM mode which has long been deprecated.
&lt;/p&gt;
&lt;p&gt;
I haven&amp;#39;t bitten the bullet and left gmail yet but I thought it was
time to move my personal email over to an Emacs client. I currently
use &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/&#34;&gt;MU4E&lt;/a&gt; and am pretty happy with it but figured I&amp;#39;d give another
contender a try - &lt;a href=&#34;https://notmuchmail.org/&#34;&gt;Notmuch&lt;/a&gt;. Both rely on some other backend to pull
email form an imap server. I&amp;#39;m currently using mbsync. I&amp;#39;m not
thrilled with it but then, I&amp;#39;m not thrilled with offlineimap which is,
as best I can figure the only other alternative.
&lt;/p&gt;
&lt;p&gt;
In the video I&amp;#39;ll show a bit about notmuch and how it comapres to
mu4e. Both are nice packages and I&amp;#39;d love one email client that
combined the best of both and maybe added a bit more shine.
&lt;/p&gt;
&lt;p&gt;
At their cores, both mu4e and notmuch are built on top of &lt;a href=&#34;https://xapian.org/&#34;&gt;xapain&lt;/a&gt; and
leverage search to manage your emails. Here are a few of the key
differences:
&lt;/p&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Mu4e
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Folder based
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Easier to handle separate email accounts (and keep them separate)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Better org-mode integration
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Automatically calls your IMAP sync program
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Changes things on the server (moves, deletes etc.)
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Notmuch
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Tags based
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Doesn&amp;#39;t touch or change anything on the serer (doesn&amp;#39;t delete or
move things there, just tags locally)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Combines multiple accounts to appear as one
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Both have a nice search based interface.
&lt;/p&gt;
&lt;p&gt;
Right now, the fact that notmuch doesn&amp;#39;t seamlessly delete emails
from the server might be a deal breaker for me. I have a limited quota
at Hunter so I really do have to watch the overall amount of storage I
use.
&lt;/p&gt;
&lt;p&gt;
For now, I&amp;#39;m going to start pulling down my email and seeing how I
like mu4e for all my email needs. I&amp;#39;ll probably play a bit more with
notmuch as well and who knows….
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my post and video on setting up and using mu4e:
&lt;/p&gt;
&lt;p&gt;
https://cestlaz.github.io/posts/using-emacs-39-mu4e/
&lt;/p&gt;
&lt;p&gt;
And here&amp;#39;s the current one on notmuch:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/GlrsoIwJ-UM&#34;&gt;https://www.youtube.com/embed/GlrsoIwJ-UM&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 63 ClojureScript</title>
      <link>https://cestlaz.github.io/post/using-emacs-63-clojurescript/</link>
      <pubDate>Thu, 09 Jan 2020 08:11:52 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-63-clojurescript/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been playing with ClojureScipt for my web projects recently and
really like it. Much more fun than any of the JavaScript frameworks
I&amp;#39;ve used. 
&lt;/p&gt;
&lt;p&gt;
Still, getting started was somewhat difficult due to the number of
options in tooling and uneven documentation and learning resources.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a video that shows how I use Emacs for ClojureScript
development but the focus of the video is on how to get started with
ClojureScript and Emacs takes a back seat other than an example of my
workflow.
&lt;/p&gt;
&lt;p&gt;
On the Clojurscript side I&amp;#39;m using &lt;a href=&#34;https://shadow-cljs.org/&#34;&gt;shadow-cljs&lt;/a&gt; which I like very much
along with &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;tailwindcss&lt;/a&gt; for styling. I also mention &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;NVM&lt;/a&gt; for managing
node/npm etc. which you&amp;#39;ll also need. 
&lt;/p&gt;
&lt;p&gt;
On the Emacs side you&amp;#39;ll see a bit of &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;cider&lt;/a&gt; along with &lt;a href=&#34;https://github.com/Fuco1/smartparens&#34;&gt;smartparens&lt;/a&gt; and
you can find my full config at &lt;a href=&#34;https://github.com/zamansky/dot-emacs.&#34;&gt;https://github.com/zamansky/dot-emacs.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I was thinking about also making the following ClojureScript videos if
the communities find value in them and I have time:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
How to create reusable components like an input field with label.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Creating a simple Electron app using shadow-cljs.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Creating something with both  server side and client side.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Also open to suggestions
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
I don&amp;#39;t pretend to be a cljs or webdev master so please let me know if
I&amp;#39;m doing anything horribly wrong and let me know if you want more.
&lt;/p&gt;
&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/BZNJi5pP8fU&#34;&gt;https://www.youtube.com/embed/BZNJi5pP8fU&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHub Org Explorer</title>
      <link>https://cestlaz.github.io/post/github-org-explorer/</link>
      <pubDate>Fri, 03 Jan 2020 14:40:40 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-org-explorer/</guid>
      <description>&lt;p&gt;
I&amp;#39;m a big fan of &lt;a href=&#34;https://classroom.github.com&#34;&gt;GitHub Classroom&lt;/a&gt; and use it for all of my class
assignments. It&amp;#39;s great for organizing, distributing, and collecting
assignments and gets the kids used to using real world tools at the
same time. I&amp;#39;ve written a bunch of posts on how I use it:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/github-classroom/&#34;&gt;How I use GitHub Classroom&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/communicating-with_students/&#34;&gt;Communicating with Students - meybe GitHub to the rescue&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/posts/sigcse-2017-github-4/&#34;&gt;GitHub as a tool for education&lt;/a&gt; (part of a 4 part series)
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
As well as a couple of others.
&lt;/p&gt;
&lt;p&gt;
Since I like doing things on the command line I&amp;#39;ve been using GitHub&amp;#39;s
&lt;a href=&#34;https://github.com/education/classroom-assistant&#34;&gt;Classroom Assistant&lt;/a&gt; to download repos. It&amp;#39;s a nice tool - I can
download any or all repos for any given assignment at once.
&lt;/p&gt;
&lt;p&gt;
Still, this leaves me wanting in three areas. 
&lt;/p&gt;
&lt;p&gt;
First is roster integration. They have some rudimentary work done on
this but it&amp;#39;s not quite there yet.
&lt;/p&gt;
&lt;p&gt;
Second is being able to download repos based on other criteria. For
example, downloading all of the assignments from a single student.
&lt;/p&gt;
&lt;p&gt;
Third is deleting repos. GitHub Classroom uses GitHub organizations to
store submissions. You get one per student (or group) per
assignment. This gets really big really fast and it pollutes your
GitHub account with lots of repos that, quite frankly, I don&amp;#39;t want
once the semesters done.
&lt;/p&gt;
&lt;p&gt;
If only there was a way to address this….
&lt;/p&gt;
&lt;p&gt;
Well, given that the good people at GitHub publish their &lt;a href=&#34;https://developer.github.com/&#34;&gt;APIs&lt;/a&gt; one can
write their own applications to use with or integrate with GitHub. 
&lt;/p&gt;
&lt;p&gt;
I wrote a small app, still experimental but functional. It&amp;#39;s an
&lt;a href=&#34;https://electronjs.org&#34;&gt;Electron&lt;/a&gt; app (another thanks to GitHub) written in Clojurescript. I
might write about creating it later but for now, I just wanted to
share the app in case it&amp;#39;s useful to anybody.
&lt;/p&gt;
&lt;p&gt;
Once you log in you can go to any of your GitHub organizations. Since
GitHub Classrooms are based on organizations this will present you
with all the repos for a given one. Then you can filter via regular
expressions and then either export or delete them. For me it&amp;#39;s the
missing piece. I plan to add roster support some time in the future.
&lt;/p&gt;
&lt;p&gt;
If anyone&amp;#39;s interested, here&amp;#39;s the GitHub repo: &lt;a href=&#34; https://github.com/zamansky/github-org-explorer&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/github-org-explorer&#34;&gt;https://github.com/zamansky/github-org-explorer&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
And a short video walkthrough of how it works.
&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube.com/embed/e-gNzuBG3mU&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 62 Magit Forge</title>
      <link>https://cestlaz.github.io/post/using-emacs-62-magit-forge/</link>
      <pubDate>Tue, 19 Nov 2019 12:25:58 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-62-magit-forge/</guid>
      <description>&lt;p&gt;
Ever since I started looking at Magit as a &amp;#34;git dashboard&amp;#34; instead of
as a &amp;#34;git interface&amp;#34; it&amp;#39;s been yet another Emacs killer app to me. I
just recently started playing with &lt;a href=&#34;https://github.com/magit/forge&#34;&gt;forge&lt;/a&gt; which allows &lt;a href=&#34;https://github.com/magit/magit&#34;&gt;Magit&lt;/a&gt; to
interface and interact with git &amp;#34;forges&amp;#34; like GitHub. This allows you
to work on issues and pull requests without ever leaving Emacs.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a video on how easy it is. The video doesn&amp;#39;t show this but the
first time you fire forge up it will prompt you for credentials. 
&lt;/p&gt;
&lt;p&gt;
Also, if you aren&amp;#39;t familiar with GitHub issues, check out the
post/video I made a few days ago (&lt;a href=&#34;https://cestlaz.github.io/post/git-issues/&#34;&gt;link&lt;/a&gt;) and you can check out my
earlier post/video on Magit as well (&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-47-magit/&#34;&gt;link&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/wgI8r3Nx_BI&#34;&gt;https://www.youtube.com/embed/wgI8r3Nx_BI&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 61 - org-msg</title>
      <link>https://cestlaz.github.io/post/using-emacs-61-org-msg/</link>
      <pubDate>Sat, 16 Nov 2019 05:00:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-61-org-msg/</guid>
      <description>&lt;p&gt;
By living in Emacs I get a consistent interface across all sorts of
tasks - programming, lesson planning, making presentations, preparing
documents, and yes, even email. I&amp;#39;ve been using &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-39-mu4e/&#34;&gt;mu4e&lt;/a&gt; as my Emacs email
client for a while now. Currently, I&amp;#39;m using Emacs for my work email
and Gmail for personal. I&amp;#39;ve been thinking of going whole hog to mu4e
and possibly migrating from Gmail to a new email provider for the
personal stuff but there are still a few pain points with Emacs email:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
rich text emails (embedded links, images, etc)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
calendar integration
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
contacts 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
periodic Maildir sync problems with mbsync
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Calendar integration isn&amp;#39;t a make or break issue and contacts with
mu4e is good enough so that leaves two pain points. Formatted emails
which I think is now pretty much solved (see below) and the Maildir
stuff.
&lt;/p&gt;
&lt;p&gt;
On the Maildir side, I&amp;#39;m trying deal with my email across four
machines - work laptop, work desktop, home laptop, home desktop. I
originally synced each one separately and that worked but I was having
archive problems - it seems that I was only archiving on the local
machine so if I archived an email at work and I needed to get to it at
home, I was out of luck. 
&lt;/p&gt;
&lt;p&gt;
Then, I moved to sharing my Maildir using Syncthing - an opensource
Dropbox-alike. That mostly worked but if I wasn&amp;#39;t careful I&amp;#39;d get
syncing errors where I have to go into my Maildir directory and
manually rename or remove messages - a real pain.
&lt;/p&gt;
&lt;p&gt;
If anyone out there has a solution (and &lt;a href=&#34;http://pragmaticemacs.com/emacs/fixing-duplicate-uid-errors-when-using-mbsync-and-mu4e/&#34;&gt;this&lt;/a&gt; fix doesn&amp;#39;t fully work
for me), I&amp;#39;d love to hear about it.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s get back to the formatted email. I was already to create an
email in org mode using &lt;code&gt;org-mu4e-compose-org-mode&lt;/code&gt; which I think is
built in to either org-mode or mu4e but it&amp;#39;s limited. It formats
tables, outlines, and source blocks but I can&amp;#39;t easily make a source
block for something like &lt;strong&gt;dot&lt;/strong&gt; or &lt;strong&gt;ditaa&lt;/strong&gt; and embed the result. I
found a solution recently. It&amp;#39;s &lt;a href=&#34;https://github.com/jeremy-compostella/org-msg&#34;&gt;org-msg&lt;/a&gt; - a terrific package that lets
you compose an email in org-mode. It seems to have better support than
org-mu4e-compose-org-mode. It does the basic formatting, tables, etc
and also executes source blocks. The only thing that was missing for
me was LaTeX formatting but I use that so rarely I don&amp;#39;t really care.
&lt;/p&gt;
&lt;p&gt;
The package author, Jeremy Compostella, is also very responsive. When
I first installed org-msg it wasn&amp;#39;t integrating seamlessly with
mu4e. It was still workable but I had to manually insert some
configuration at the top of all my emails. I opened an issue on this
and within a day it was fixed.
&lt;/p&gt;
&lt;p&gt;
It also has a very cool preview mode so you can see what you&amp;#39;re
sending. On that, though, I did have an issue but I&amp;#39;m pretty sure it&amp;#39;s
an Emacs / org-mode issue and not an org-msg issue. On my desktop,
when I run the preview, it opens my browser with the email formatted
correctly. When I do the same on my laptop, it runs GitHub Classroom
Assistant - an application I installed and use for other
purposes. I&amp;#39;ve had this happen before with other emacs xdg things. If
anyone else has seen this and better has a solution, I&amp;#39;d love to hear
about that as well.
&lt;/p&gt;
&lt;p&gt;
Anyway, here&amp;#39;s a video that shows org-msg in action:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/cPZe0AGOUJU&#34;&gt;https://www.youtube.com/embed/cPZe0AGOUJU&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 60 - Restclient</title>
      <link>https://cestlaz.github.io/post/using-emacs-60-restclient/</link>
      <pubDate>Fri, 25 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-60-restclient/</guid>
      <description>&lt;p&gt;
I started to work on a web application the other day. It&amp;#39;s nothing
special but if I ever finish it, it will be a pretty complete
project. The backend will be a &lt;a href=&#34;https://restapitutorial.com/&#34;&gt;REST&lt;/a&gt; API and I&amp;#39;m planning on writing
the frontend in Clojurescript. 
&lt;/p&gt;
&lt;p&gt;
The problem with developing a web application like this is that you
can&amp;#39;t really write the front end until you have enough of the backend
to provide data. Also, writing the backend would be much easier if you
already had a front end to test it with. 
&lt;/p&gt;
&lt;p&gt;
Pretty annoying.
&lt;/p&gt;
&lt;p&gt;
What you basically have to do is use some system to make all the API
calls with all the required data. The most fundamental way to do this
is to use a command line tool like &lt;a href=&#34;https://curl.haxx.se/&#34;&gt;curl&lt;/a&gt;. For example, from a terminal
I might write something like this to make a login call:
&lt;/p&gt;
&lt;div class=&#34;src src-curl&#34;&gt;
&lt;pre&gt;&lt;code class=&#34;language-curl&#34; data-lang=&#34;curl&#34;&gt;curl --data &amp;#34;email=myemail&amp;amp;password=mypassword&amp;#34; https://localhost:8080/login&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
It works but is clunky and you end up using the mouse a lot to cut and
paste data.
&lt;/p&gt;
&lt;p&gt;
Web browsers like Firefox and Chrome also have extensions (&lt;a href=&#34;https://techbeacon.com/app-dev-testing/5-top-open-source-api-testing-tools-how-choose&#34;&gt;link&lt;/a&gt;, &lt;a href=&#34;https://www.guru99.com/testing-rest-api-manually.html&#34;&gt;link&lt;/a&gt;)
but I find them somewhat bulky with their mouse / form based
interfaces.
&lt;/p&gt;
&lt;p&gt;
Emacs to the rescue!!!!!!!!
&lt;/p&gt;
&lt;p&gt;
I discovered &lt;a href=&#34;https://github.com/pashky/restclient.el&#34;&gt;restclient&lt;/a&gt; for Emacs a couple of years ago but only now
am reaping the benefits. It&amp;#39;s really amazing. I can easily set up REST
querries, use all the editing power of Emacs, and even save the
queries for later.
&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t find this until after I made the video but you can even use
restclient in &lt;a href=&#34;https://github.com/alf/ob-restclient.el&#34;&gt;org-mode&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s all very cool.
&lt;/p&gt;
&lt;p&gt;
Details in the video:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/L7Jcoe3oHTs&#34;&gt;https://www.youtube.com/embed/L7Jcoe3oHTs&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
&lt;p&gt;
Enjoy.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 59 - markdown</title>
      <link>https://cestlaz.github.io/post/using-emacs-59-markdown/</link>
      <pubDate>Fri, 18 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-59-markdown/</guid>
      <description>&lt;p&gt;
Org-mode is my markup of choice. I spend the vast majority of my time working
on text files working in org-mode. Since GitHUb started rendering
org-mode files in their site I&amp;#39;ve also used org-mode for things like
Readme files in my projects. I even force it on my students at
times. When I make an assignment, I seed it with an org-mode file that
they have to modify - that is - fill in things like their names, group
members etc..
&lt;/p&gt;
&lt;p&gt;
That said, sometimes I have to work in plain old &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;markdown&lt;/a&gt;. This is
almost always when I&amp;#39;m working on something collaboratively and more
often than not it&amp;#39;s documentation on a project living on GitHub.
&lt;/p&gt;
&lt;p&gt;
So, given that I have to work with Markdown, time to use some Emacs
magic to make it easy and fun.
&lt;/p&gt;
&lt;p&gt;
To start, Emacs has a &lt;a href=&#34;https://github.com/jrblevin/markdown-mode/tree/f3c54e34cc5228001af36a5301883325319f21d4&#34;&gt;markdown mode&lt;/a&gt; along with a bunch of previewing
and rendering modes. I settled on &lt;a href=&#34;https://github.com/seagle0128/grip-mode/tree/4c7014c8151e522b9dd94f878478087bf92ab10e&#34;&gt;grip mode&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
You can check out the video to see grip-mode along with some of the
other modes I tried here:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/IlhkYmUU-ns&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/ifram&gt;e
&lt;p&gt;
Enjoy.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 58 - lsp-mode</title>
      <link>https://cestlaz.github.io/post/using-emacs-58-lsp-mode/</link>
      <pubDate>Mon, 07 Oct 2019 11:57:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-58-lsp-mode/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been wanting to check out &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; under Emacs for a while
now. LSP stands for &lt;a href=&#34;https://langserver.org/&#34;&gt;Language Protocol Service&lt;/a&gt;. The idea is that you
have a standard interface between your editor and some language
server. If you program in multiple languages and each has an LSP
server you end up, in theory, with a simpler configuration and a
consistent interface.
&lt;/p&gt;
&lt;p&gt;
This certainly sounds more appealing than how we did it in the old
days where you have some ad hoc configuraiton for each language you
work in. At times I&amp;#39;m working or dabbling in a whole bunch of
languages. At times, my Emacs configuration has had separate sections
for each of the following languages:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Emacs Lisp
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Python
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Java
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
C and C++
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Clojure
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Processing
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Scheme
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Haskell
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Rust
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
OCaml
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
and more. 
&lt;/p&gt;
&lt;p&gt;
This can get messy.
&lt;/p&gt;
&lt;p&gt;
So, LSP sounds cool but when I&amp;#39;ve tried to get it going in the past
I&amp;#39;ve always had troubles. This time, I tried a different approach. I
decided to declare .emacs.d bankruptcy. I cleared out my .emacs.d
directory and started fresh. Not really fresh - I copied over The
critical parts of my configuration to start with - Swiper, email and
org config and a few other things. Then I got lsp-mode working for
Python and C++. Now I&amp;#39;m going to migrate over more of my old
configuration as I discover I want, miss, or need things. We&amp;#39;ll see
how it goes.
&lt;/p&gt;
&lt;p&gt;
The new configuration can be found here:
&lt;a href=&#34;https://github.com/zamansky/dot-emacs&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/dot-emacs&#34;&gt;https://github.com/zamansky/dot-emacs&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Check out the video to see the details:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/zg6JJI-kwhE&#34;&gt;https://www.youtube.com/embed/zg6JJI-kwhE&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSTA 2019 - Using GitHub as a CMS</title>
      <link>https://cestlaz.github.io/post/csta-2019-github/</link>
      <pubDate>Wed, 26 Jun 2019 12:09:48 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/csta-2019-github/</guid>
      <description>&lt;p&gt;
With ISTE ending, the next big event for CS treachers is the annual
&lt;a href=&#34;https://www.csteachers.org/page/2019conference&#34;&gt;CSTA Conference&lt;/a&gt;. I first attended two years ago in Baltimore. Last
year the conference, in Omaha was bigger and better in every way
imaginable. I expect this year to be the best yet.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t go to a lot of conferences so I don&amp;#39;t have much to compare
CSTA with but I like the fact that it&amp;#39;s is about half the size of
SIGCSE. At about 1000 attendees it still feels small enough to be
intimate but at the same time large enough so that there&amp;#39;s something
for everyone and plenty of people to learn and share from and with.
&lt;/p&gt;
&lt;p&gt;
Just like last year, I&amp;#39;ll be spending a lot of time at the GitHub
booth so if you want to talk about how to use GitHub to support your
students make sure to stop by and say hello.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll also be giving a session with my long time partner in crime
JonAlf. 
&lt;/p&gt;
&lt;p&gt;
Most of us know that Git is a version control system and that
GitHub is pretty much the industry standard platform for using
Git. Many of us also know that GitHub for Education has a great
toolset to support using GitHub with your classes. Tools that help
organize, distribute, collect, and assess assignments.
&lt;/p&gt;
&lt;p&gt;
Fewer people know that GitHub can be used to really easily create a
web presence and as a way to distribute class material and you don&amp;#39;t
even have to use the command line if you don&amp;#39;t want to. I use GitHub
as a lightweight CMS with my classes, to host full blown web sites,
and also to host this blog.
&lt;/p&gt;
&lt;p&gt;
Come join JonAlf and me on Tuesday at 11:15 in West 106C and we&amp;#39;ll
show you how you can use GitHub as a web presence as well.
&lt;/p&gt;
&lt;p&gt;
I also want to briefly mention that my better half, Devorah, is going
to be with us at the GitHub booth running a really cool
knitting/crocheting for  charity project (thanks to both CSTA and
GitHub for facilitating this). I&amp;#39;ll write more about it in a day or so
but if you&amp;#39;re going to be at CSTA2019 and you knit or crochet or want
to learn, you can check the project out here:
&lt;a href=&#34;http://blanketstatementproject.com/&#34;&gt;&lt;a href=&#34;http://blanketstatementproject.com/&#34;&gt;http://blanketstatementproject.com/&lt;/a&gt;&lt;/a&gt; (note that the site is hosted on
GitHub and the source is &lt;a href=&#34;https://github.com/blanketstatementproject/blanketstatementproject.github.io&#34;&gt;here&lt;/a&gt;). 
&lt;/p&gt;
&lt;p&gt;
GitHub is also holding a pre-conference reception on July 7 from
5:30 - 8:00. You can sign up &lt;a href=&#34;https://csta-github-meetup.confetti.events/&#34;&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Hope to see many of you in a couple of weeks in Phoenix.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 57 Dired Narrow</title>
      <link>https://cestlaz.github.io/post/using-emacs-57-dired-narrow/</link>
      <pubDate>Sun, 07 Apr 2019 11:57:57 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-57-dired-narrow/</guid>
      <description>&lt;p&gt;
One of Emacs power features that I&amp;#39;ve never quite gotten into is
&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html&#34;&gt;dired&lt;/a&gt;, the Directory Editor. I&amp;#39;ve already done a &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-38-dired/&#34;&gt;video on the package&lt;/a&gt;.
It&amp;#39;s really cool and I do use it at times but I still haven&amp;#39;t started
using it for my day to day.
&lt;/p&gt;
&lt;p&gt;
Well, I just started using a couple of packages that might change
this. They&amp;#39;re part of a set of dired addons that you can check out at the
&lt;a href=&#34;https://github.com/Fuco1/dired-hacks/tree/2c1234592aee91dcd9401bcd67213e6a4a464fd9&#34;&gt;dired hacks&lt;/a&gt; page. The specific ones I&amp;#39;m talkign about are
&lt;code&gt;dired-subtree&lt;/code&gt; and &lt;code&gt;dired-narrow&lt;/code&gt;. &lt;code&gt;dired-subtree&lt;/code&gt; is cool but it&amp;#39;s
not the game changer. &lt;code&gt;dired-narrow&lt;/code&gt; is. One of my issues with
dired is that I can&amp;#39;t see all the files I&amp;#39;m operating on easily at the
same time. If I&amp;#39;m marking a large number of files to delete I want to
be able to see all of them at once so I&amp;#39;m sure I&amp;#39;m not making a
mistake. &lt;code&gt;dired-narrow&lt;/code&gt; lets me easily do this.
&lt;/p&gt;
&lt;p&gt;
Check out the video to see the details:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pZzDayi5lRo&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Evaluating Java IDES for teaching teachers.</title>
      <link>https://cestlaz.github.io/post/java-ides/</link>
      <pubDate>Fri, 08 Mar 2019 13:29:18 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/java-ides/</guid>
      <description>
&lt;p&gt;
Since Hunter uses C++ as it&amp;#39;s core language, I haven&amp;#39;t used Java much
in the past three years. That&amp;#39;s going to change pretty soon. Once we
start offering our CS teacher Certificate and Masters programs I&amp;#39;ll
once again start teaching with Java as that&amp;#39;s one of the langauges
that we want to prepare our teachers with.
&lt;/p&gt;
&lt;p&gt;
That means deciding on a set of tools and so I&amp;#39;ve been spending time
evaluating Java programming environments with an eye on the
beginner since not only do the teachers I work with have to be
comfortable with the tool but more importantly they will have to be
able to support the tool for all of their students.
&lt;/p&gt;
&lt;p&gt;
One tool we&amp;#39;re likely to use is &lt;a href=&#34;https://repl.it/&#34;&gt;repl.it&lt;/a&gt;. That&amp;#39;s an online environment
for Java and a bunch of other languages. There&amp;#39;s a lot to like about
it and teachers might go with it or a similar cloud based option in
their classes but it&amp;#39;s important that we also prepare teachers to
build programs locally.
&lt;/p&gt;
&lt;p&gt;
So, here&amp;#39;s my criteria and here&amp;#39;s what I found.
&lt;/p&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
The tool has to install easily on all platforms
&lt;/h3&gt;
&lt;p&gt;
I started with my desktop Linux machine. I&amp;#39;m running LinuxMint which
is pretty mainstream and I installed the Java tools using Mint&amp;#39;s
package manager. The packages are openjdk-11 and it looks like running
Java 10. If the IDE or editor I installed  didn&amp;#39;t work off the bat it
was no good. If it installed and I liked it I&amp;#39;ll pass it off to
friends who use Windows and Macs to see if the install there is
equally seamless.
&lt;/p&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
The tool has to be easy to run 
&lt;/h3&gt;
&lt;p&gt;
After install you have to be able to run it easily. No fancy &lt;code&gt;java
-jar blah blah blah&lt;/code&gt;.
&lt;/p&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
I&amp;#39;m not looking for a professional tool
&lt;/h3&gt;
&lt;p&gt;
Professional tools can be too compex and do too much for students. I
was looking for the sweet spot of giving a nice amount of support but
not giving away the store.
&lt;/p&gt;
&lt;p&gt;
Here are the tools I looked at (and you can debate if something
belongs in the other category in some cases):
&lt;/p&gt;
&lt;h4 id=&#34;headline-4&#34;&gt;
Editors
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Emacs
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Gedit
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Vim
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Sublime Text
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Atom
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Jedit
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;headline-5&#34;&gt;
IDES
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Eclipse
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
DrJava
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Geany
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
BlueJ
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
IntelliJ
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
VSCode
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
JGrasp
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
Editor vs IDE
&lt;/h3&gt;
&lt;p&gt;
The line between editor and IDE is a blurry one. I tend to think of an
editor as multi-purpose and multi-language where an also useful for
non programming text realted tasks whereas an IDE comes with more
programming bells and whistles. The truth is, though. that some IDES
can do well with non programming tasks and many editors are pretty
close to IDEs.
&lt;/p&gt;
&lt;p&gt;
In any event, for a teacher, there&amp;#39;s something to be said for keeping
it &amp;#34;close to the metal&amp;#34; and have them use an editor to edit source
code and compile from the command line. This doesn&amp;#39;t mean they
shouldn&amp;#39;t also see IDEs and perhaps use them with their students but
a teacher should know a little more about what&amp;#39;s going on than just
load a program, write some code, and click run. If a teacher is that
limited you end up in situations similar to that common comment from
people who finish a beginner course on Codecademy - &amp;#34;I finished the
course and I can program in their environment but I don&amp;#39;t know how to
actually make something anywhere else.&amp;#34;
&lt;/p&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
The Editors
&lt;/h3&gt;
&lt;p&gt;
Here the idea would be start as I mentioned above. Edit files adn then
compile on the command line. Eventually, though, many of these tools
can be used as IDEs
&lt;/p&gt;
&lt;h4 id=&#34;headline-8&#34;&gt;
Emacs
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;https://www.gnu.org/software/emacs/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve got to start with my tool of choice although I can&amp;#39;t really be
unbiased. I think it gets a bad wrap because it&amp;#39;s old and out of the
box looks plain but, yes, you can use your mouse and it does have
menus. The upside is that it can do everything an IDE can do and a
thousand times more. I do email, read rss feeds, maintain my calendar
and more in Emacs. 
&lt;/p&gt;
&lt;p&gt;
The downside is that it doesn&amp;#39;t do Java well out of the box and kids
like shinier objects. 
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t think I&amp;#39;d start the teachers with Emacs but I&amp;#39;d probably shift
my instruction to using it at some point and show some of the cooler
features (many highlighted in my &lt;a href=&#34;https://cestlaz.github.io/stories/emacs/&#34;&gt;Emcacs videos&lt;/a&gt;)
&lt;/p&gt;
&lt;h4 id=&#34;headline-9&#34;&gt;
Gedit
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://wiki.gnome.org/Apps/Gedit%0A&#34;&gt;https://wiki.gnome.org/Apps/Gedit%0A&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
This is a plain simple editor. You can bucket in notepad+ and whatever
the basic Mac editor is in here. Nothing special and nothing
fancy. It&amp;#39;s easy enough to load, edit a file and save but not much
more. I&amp;#39;d be fine using it were it not for better options.
&lt;/p&gt;
&lt;h4 id=&#34;headline-10&#34;&gt;
Vim
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.vim.org/&#34;&gt;https://www.vim.org/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
No
&lt;/p&gt;
&lt;h4 id=&#34;headline-11&#34;&gt;
Sublime Text
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.sublimetext.com/%0A&#34;&gt;https://www.sublimetext.com/%0A&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
This was the hotness for a while and it&amp;#39;s a pretty slick editor. I
can&amp;#39;t recommend it for teachers though for two reasons. One is that
it&amp;#39;s not free (although it isn&amp;#39;t expensive). The other is that it&amp;#39;s
not open source. There were other hot editors before sublime and when
their companies folded or sunset the editor all those plugins and
customizations had to be redone on a new platform. 
&lt;/p&gt;
&lt;h4 id=&#34;headline-12&#34;&gt;
Atom
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://atom.io/&#34;&gt;https://atom.io/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Atom&amp;#39;s an editor I want to like. It&amp;#39;s open source and looks pretty
neat but it seems more focused on the JS ecosystem. I couldn&amp;#39;t find
enough Java related plugins to make it better than Gedit although it
was easy to theme and customize the keys. Were I not an Emacs guy I&amp;#39;d
probably use Atom for much of my non-Java development but it doesn&amp;#39;t
seem like a great fit for Java
&lt;/p&gt;
&lt;h4 id=&#34;headline-13&#34;&gt;
Jedit
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;http://www.jedit.org/&#34;&gt;http://www.jedit.org/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
This looked like the strongest contender for Java. Not too
complicated. Nice syntax highlighting out of the box. It doesn&amp;#39;t do
completion but that&amp;#39;s arguably a good thing when teaching
programming (incidentally, Emacs doesn&amp;#39;t do completion out of the box
but it can be added so you can up the tools ability as the class moves
along). From my limited explorations you can install plugins like a
Java Linter and you can run a console from inside JEdit which means
you can actually type things like &lt;code&gt;javac file.java&lt;/code&gt; and then run the
program all from within the editor.
&lt;/p&gt;
&lt;p&gt;
Jedit also has some nice builtin macros for boilerplate code like
setters and getters.
&lt;/p&gt;
&lt;h3 id=&#34;headline-14&#34;&gt;
IDEs
&lt;/h3&gt;
&lt;h4 id=&#34;headline-15&#34;&gt;
Eclipse 
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.eclipse.org&#34;&gt;https://www.eclipse.org&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve used eclipse before and as a Java environment, it&amp;#39;s actually
pretty nice. You can customize the keys so I set mine to Emacs. It has
a lot of plugins, you can compile and test your program from within
the IDE and do tons of other things. It&amp;#39;s a VERY nice professional
tool.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t like it for teaching for three reasons. First, it does too
much. By giving too much professional support kids rely too much on
the tool. Second, it&amp;#39;s made for big projects using build systems not
small AP class programs consisting of one or two files where you run
javac manually. Yes, you can do this in Eclipse but it seems more
awkward. Third, becasue there&amp;#39;s so much going on you need a HUGE
screen and kids and schools might not have enough screen real estate.
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s also a fourth reason which is that I installed Eclipse using
LinuxMint&amp;#39;s package manager and it crashed when running. If I&amp;#39;m going
to recommend a teacher roll out a tool that all of their students are
going to install at home on their own, at the very least it has to
install and run seamlessly.
&lt;/p&gt;
&lt;h4 id=&#34;headline-16&#34;&gt;
DrJava
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;http://www.drjava.org/&#34;&gt;http://www.drjava.org/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Like Eclipse, I&amp;#39;ve used DrJava before. It&amp;#39;s similar to DrRacket (nee
Scheme) and Dr. Python. It&amp;#39;s close to perfect. You get highlighting,
helpful error finding, can run your program from within Dr. Java and
more.
&lt;/p&gt;
&lt;p&gt;
The killer problem is that I can&amp;#39;t get the latest version to
run. Actually the first problem is that it&amp;#39;s just a jar file so you
have to run it with &lt;code&gt;java -jar drjava.jar&lt;/code&gt;. Beyond that, it didn&amp;#39;t
work out of the box. It loaded but compilign and running didn&amp;#39;t After
some mucking around, I got it to compile but it doesn&amp;#39;t run the
programs. 
&lt;/p&gt;
&lt;p&gt;
This is too bad because when it runs it&amp;#39;s a terrific learning
environment.
&lt;/p&gt;
&lt;h4 id=&#34;headline-17&#34;&gt;
BlueJ
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://bluej.org/&#34;&gt;https://bluej.org/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
This is another tool that was DOA. I tried the debian package as well
as the jar file. Couldn&amp;#39;t get it working. 
&lt;/p&gt;
&lt;p&gt;
I have used an older version so I&amp;#39;ll describe that instead just
remember things might be different in the current version.
&lt;/p&gt;
&lt;p&gt;
BlueJ does one thing very well - objects. It visually shows object
creation and relationships. I recall that you can create an opject,
click on it&amp;#39;s box in a visual graph pane, inspect it, instantiate new
ones and in general explore and expirement. If you&amp;#39;re big on OOP and
like Object First by all means check BlueJ out. It&amp;#39;s probably best in
class for that approach.
&lt;/p&gt;
&lt;p&gt;
On the other hand, it&amp;#39;s a one trick pony. If you, like me, are not all
in on OOP or an Objects first and all the time approach it&amp;#39;s probably
not the tool for you. 
&lt;/p&gt;
&lt;h4 id=&#34;headline-18&#34;&gt;
Geany
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.geany.org/&#34;&gt;https://www.geany.org/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I hadn&amp;#39;t heard of this one before but it looks like a contender. It
has a  pretty clean interface and it worked out of the box. I
installed it using the package manager.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure&amp;gt;
    &amp;lt;img src=&amp;#34;/img/geany.png&amp;#34; width=&amp;#34;250px&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;
&lt;/p&gt;
&lt;p&gt;
Class browser on the right, files on the left and console (terminal),
compiler status etc on the bottom. It supports some level of
autocomplete but it doesn&amp;#39;t do everything. I&amp;#39;m not sure yet but it
might hit the completion sweet spot.
&lt;/p&gt;
&lt;p&gt;
It says it does snippets but I haven&amp;#39;t figured that out yet. 
&lt;/p&gt;
&lt;h4 id=&#34;headline-19&#34;&gt;
IntelliJ
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;https://www.jetbrains.com/idea/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
IntelliJ is fro JetBrains. They make a bunch of IDEs each focussed on
a different toolset but all with the same look and feel. You can also
add plugins to each to make them multi-modal. I believe the editor at
the core is JEdit. I&amp;#39;ve used their IDEs in the past and as far as
professional IDEs go I like them. They&amp;#39;re more lightweight than say
Eclipse and don&amp;#39;t need the real estate.
&lt;/p&gt;
&lt;p&gt;
Still, I think it&amp;#39;s too much for a beginner. For example, you can
in theory run your program from the build menu but, much like Eclipse,
it takes you to a configuration screen. I was pretty lost and I&amp;#39;m not
a beginner. Much like Eclipse it&amp;#39;s made for projects not small class
programs. 
&lt;/p&gt;
&lt;p&gt;
I found the Python version of JetBrains IDEs more approachable
probably because the ecosystem is much simpler.
&lt;/p&gt;
&lt;h4 id=&#34;headline-20&#34;&gt;
VSCode
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;https://code.visualstudio.com/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
This one shocked me - I actually found myself liking a Microsoft
product. I guess this really isn&amp;#39;t your father&amp;#39;s Microsoft.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure&amp;gt;
    &amp;lt;img src=&amp;#34;/img/vscode.png&amp;#34; width=&amp;#34;250px&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;
&lt;/p&gt;
&lt;p&gt;
Much like Geany it has a clean interface and like Geany you don&amp;#39;t need
a whole Java build system. It does more completions out of the box
which you may or may not like as well as snippets. A single key will
compile and run your program and on top of all that it has en &amp;#34;Emacs&amp;#34;
setting for keybindings.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not sure if I like Geany or VSCode better but I think both are
really good options. I&amp;#39;d probably lean towards Geany due to the less
robust completions. Were I writing code for real rather than teaching,
I&amp;#39;d probably go the other way.
&lt;/p&gt;
&lt;h4 id=&#34;headline-21&#34;&gt;
JGrasp
&lt;/h4&gt;
&lt;p&gt;
&amp;lt;figure&amp;gt;
    &amp;lt;img src=&amp;#34;/img/vscode.png&amp;#34; width=&amp;#34;250px&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;
&lt;/p&gt;
&lt;p&gt;
JGrasp feels much the same as the other contenders - Geany and VSCode
but the interface just looks a bit clunkier to me. I know that&amp;#39;s
purely subjective. 
&lt;/p&gt;
&lt;p&gt;
The biggest difference I&amp;#39;m seeing out of the box is that JGrasp
doesn&amp;#39;t do completions so depending on where you fall with that you
might want Jgrasp for none, Geany for some, and VSCode for all.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;[EDIT]&lt;/strong&gt; JGrasp has a very cool visualizer built in that will animate
 your proram. Here&amp;#39;s a &lt;a href=&#34;https://www.youtube.com/watch?v=wuQowTV0o6s&#34;&gt;video&lt;/a&gt; of it in action. I&amp;#39;m going to have to
 play with this a bit and see if it pushes JGrasp up over the top for
 me. 
&lt;/p&gt;
&lt;h4 id=&#34;headline-22&#34;&gt;
Processing
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://processing.org/&#34;&gt;https://processing.org/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not going to talk about processing but I felt that it would be
negligent not to mention it at all. Processing is a IDE, wrapper and
graphical library that&amp;#39;s essentially Java under the hood (although
there are Processing bindings in many other languages probably the
most well known now is &lt;a href=&#34;https://p5js.org/&#34;&gt;p5.js&lt;/a&gt;). It&amp;#39;s great if you want to do graphical
work or base your class around the libraries that are available to
processing which include ones for web cameras, hardware access,
networking, sound and more but it&amp;#39;s not the same as an IDE or editor
for traditional Java development.
&lt;/p&gt;
&lt;h3 id=&#34;headline-23&#34;&gt;
Notes
&lt;/h3&gt;
&lt;p&gt;
Just about all of these tools have multiple themes and are fairly
customizable so don&amp;#39;t go by the screenshots above, on the homepages or
what they look like when you first install them.
&lt;/p&gt;
&lt;p&gt;
All of the tools I liked installed right out of the box either by
using the package manager or downloading and extracting from an
archive. I can&amp;#39;t say yet if they install as easily on a Mac or Windows
box but since Linux is usually the unloved stepchild of sortware
packaging and distribution my guess is that if anything it&amp;#39;ll be
easier on those platforms.
&lt;/p&gt;
&lt;h3 id=&#34;headline-24&#34;&gt;
Conclusions
&lt;/h3&gt;
&lt;p&gt;
I&amp;#39;ll always be an Emacs guy. Org-mode is too useful and I can get IDE
like behavior for pretty much any language I want to work in. In some
cases like Clojure, I haven&amp;#39;t seen an IDE that can match Emacs and
Cider, it&amp;#39;s premier Clojure development setup. I also haven&amp;#39;t a Git
interface nearly as slick and powerful as &lt;a href=&#34;https://magit.vc/&#34;&gt;Magit&lt;/a&gt; which works under
Emacs.
&lt;/p&gt;
&lt;p&gt;
For my teachers though, I&amp;#39;ll probably start with Geany or VSCode,
switch to Emacs for myself at some point in the program and make sure
to spend time on the command line along the way.
&lt;/p&gt;
&lt;p&gt;
If I missed any editors or IDEs or have something to add on one of the
ones I mentioned, please share in the comments.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I use Github Classroom</title>
      <link>https://cestlaz.github.io/post/github-classroom/</link>
      <pubDate>Sun, 17 Feb 2019 16:42:48 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-classroom/</guid>
      <description>&lt;p&gt;
It&amp;#39;s been an amazingly unproductive weekend. Mostly because I&amp;#39;ve been
sick with the flu. It sucks but since the rest of the family&amp;#39;s away
anway at least I&amp;#39;m not making everyone miserable.
&lt;/p&gt;
&lt;p&gt;
I did manage to stage my next couple of classes and figured that
writing this post wouldn&amp;#39;t take too much energy since it&amp;#39;s mostly a
video.
&lt;/p&gt;
&lt;p&gt;
Earlier, I talked about using &lt;a href=&#34;https://cestlaz.github.io/post/github-classroom-travis/&#34;&gt;GitHub and TravicCI&lt;/a&gt; and this time around
I show how I use GitHub classroom to set up, disseminate, and collect
assignments.
&lt;/p&gt;
&lt;p&gt;
Here are the important links you&amp;#39;ll need to set things up yourself:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
To register an organization (so that you can use private repos for
free): &lt;a href=&#34;https://education.github.com/discount_requests/new&#34;&gt;https://education.github.com/discount_requests/new&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The main GitHub education page with lots of good stuff and links: &lt;a href=&#34;https://education.github.com/&#34;&gt;https://education.github.com/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
GitHub Classroom: &lt;a href=&#34;https://classroom.github.com/&#34;&gt;https://classroom.github.com/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
GitHub Classroom Assistant: &lt;a href=&#34;https://classroom.github.com/assistant&#34;&gt;https://classroom.github.com/assistant&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The video goes through the entire process but doesn&amp;#39;t really much into
grading. For grading I usually do something like the following:
&lt;/p&gt;
&lt;p&gt;
First I make a file named &lt;strong&gt;repos&lt;/strong&gt; with the names of all the submitted
repos:
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cd THEDIRECTORYWITHALLTHEREPOS
ls &amp;gt; repos&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Then I&amp;#39;ll use a script that looks something like this:
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;cat repos&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      cd /tmp/235-assignment-02-02-16-2019-07-25-00/$i
      NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;** Name: &amp;#34;&lt;/span&gt; Readme.org | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/** Name: //g&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
      echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;================= &lt;/span&gt;$NAME&lt;span style=&#34;color:#e6db74&#34;&gt; ====================&amp;#34;&lt;/span&gt;
      make test
      ./test -s
      echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n------------------------------------\n\n&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt; &amp;gt; report&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
First I &lt;code&gt;cd&lt;/code&gt; into the repo. Each repo has a file named &lt;strong&gt;Readme.org&lt;/strong&gt; 
which has a line that looks like this &lt;code&gt;** Name: Students Name&lt;/code&gt;. The
line that starts &lt;strong&gt;NAME=&lt;/strong&gt; pulls out the student&amp;#39;s name. It then echos a
separator line with the sutdent&amp;#39;s name in it, builds and runs the
tests. &lt;code&gt;./test -s&lt;/code&gt; runs the doctest tests. The &lt;code&gt;-s&lt;/code&gt; says to print out
the passing tests as well as the failing ones. The output of the whole
loop is saved to a file named report.
&lt;/p&gt;
&lt;p&gt;
From there I can look at the report and get a quick overview of who&amp;#39;s
submissions worked and who&amp;#39;s didn&amp;#39;t. I still have to look at the
students actual code but I usually navigate all of that in Emacs.
&lt;/p&gt;
&lt;p&gt;
Finally, for grades, I just use a Google Spreadsheet with a script I
wronte to email grades to the students -
&lt;a href=&#34;https://cestlaz.github.io/posts/google-sheets/.&#34;&gt;https://cestlaz.github.io/posts/google-sheets/.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
You can easily adapt this processto use other languages wether you use Unit
Tests or not. 
&lt;/p&gt;
&lt;p&gt;
So, GitHub classroom - check it out. 
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/2PuXdb8OLYo&#34;&gt;https://www.youtube.com/embed/2PuXdb8OLYo&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHub Helps Me Help Students</title>
      <link>https://cestlaz.github.io/post/github-helps-me-help-students/</link>
      <pubDate>Mon, 11 Feb 2019 18:55:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-helps-me-help-students/</guid>
      <description>&lt;p&gt;
Earlier today I was reminded why I love GitHub in support of my
classes. One of my students posted a question about our current
lab. They posted a synopsis of the problem along with the error
message.
&lt;/p&gt;
&lt;p&gt;
Since we&amp;#39;re all working on GitHub the student&amp;#39;s work was already up
online Since I started using &lt;a href=&#34;https://classroom.github.com&#34;&gt;GitHub Classroom&lt;/a&gt; I was able to quickly
navigate to the repo. This might have been enough but to really in to
the students work I cloned the repo and went into Emacs. Using &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-47-magit/&#34;&gt;Magit&lt;/a&gt;,
Emacs&amp;#39;s Git interface I was quickly able to navigate the project and
also see recent changes or in fact any changes to any of the student&amp;#39;s
project files. I didn&amp;#39;t use it this time but &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-42-git-gutter/&#34;&gt;Git Timemachine&lt;/a&gt; gives an
even slicker way to see the history of changes for a specific file.
&lt;/p&gt;
&lt;p&gt;
With these tools it took almost no time to get the lay of the land and
figure out where the student hit the wall. From there I posted a hint to nudge the student in the
right direction.
&lt;/p&gt;
&lt;p&gt;
GitHub classroom makes the student repo management easy but the other
tools were just plain old Git and Emacs. 
&lt;/p&gt;
&lt;p&gt;
Of course, for this to work, students have to play their part. If a
student doesn&amp;#39;t push their changes regularly up to GitHub I won&amp;#39;t be
able to see the diffs and help. When they do, it&amp;#39;s a real world tool
that once again has proven to be great at supporting education.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Github Classroom and Travis CI</title>
      <link>https://cestlaz.github.io/post/github-classroom-travis/</link>
      <pubDate>Sat, 02 Feb 2019 09:44:29 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/github-classroom-travis/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been using GitHub with my classes since GitHub&amp;#39;s early days. Over
time I&amp;#39;ve gotten my &lt;a href=&#34;https://cestlaz.github.io/posts/sigcse-2017-github-4/&#34;&gt;workflows down&lt;/a&gt;. I use a combination of shell
scripts - many just written on the fly, GitHub organizations, and some
naming conventions and protocols that have served me well. 
&lt;/p&gt;
&lt;p&gt;
A few years ago, the &lt;a href=&#34;https://education.github.com/&#34;&gt;GitHub Education team&lt;/a&gt; started &lt;a href=&#34;https://classroom.github.com/&#34;&gt;GitHub
Classroom&lt;/a&gt;. I looked at it at the time. It was pretty cool but I had my
workflow so I didn&amp;#39;t adopt it. I still very much liked GitHub, the
education team, and the product so I kept tabs on the project as time
passed. 
&lt;/p&gt;
&lt;p&gt;
This semester I decided to go all in on GitHub Classroom. Why? A
combination of my changing my workflow and part due to the GitHub
education tools and community. At it&amp;#39;s core, GitHub classroom does two
things well:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Assignment creation and distribution
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Repo management and organization.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
I thought I&amp;#39;d do a couple of posts and videos to show how I&amp;#39;m using
everything. 
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the first one.
&lt;/p&gt;
&lt;p&gt;
Interestingly enough I&amp;#39;m not going to talk at all about GitHub
classroom for the remainder of this post. Instead I&amp;#39;m going to talk
about TravisCI (&lt;a href=&#34;https://travis-ci.com/&#34;&gt;&lt;a href=&#34;https://travis-ci.com/&#34;&gt;https://travis-ci.com/&lt;/a&gt;&lt;/a&gt;,
&lt;a href=&#34;https://travis-ci.org/&#34;&gt;https://travis-ci.org/&lt;/a&gt;). Travis is a platform for continuous
intergration. The idea is pretty simple. After setting things up,
whenever you push code to a repo that Travis is watching, Travis
starts a container for your repo and runs one or more scripts against
the repo. This usually means tests. It turns out that this can be a
useful sanity check for students. It&amp;#39;s true that they can run tests on
their assignments before submitting them but this way it&amp;#39;s done
automatically and after they submit. They can be sure that what
they&amp;#39;ve submitted actually works.
&lt;/p&gt;
&lt;p&gt;
First you have to link your GitHub accoutn with Travis. To do this,
just go to travis-ci.org and log in using GitHub. You can then set a
bunch of options including which repos to run Travis on. The interface
at travis-ci.com looks similar but a bit nicer. The .org site is free
for open source or public repos  (as is the .com site, I think) but
the good people at Travis will give you rights to use private repos
for educational purposes for free. 
&lt;/p&gt;
&lt;p&gt;
The only other thing you have to do is create a &lt;a href=&#34;https://yaml.org/&#34;&gt;YAML&lt;/a&gt; file named
 &lt;code&gt;.travis.yml&lt;/code&gt; in your repo. Here&amp;#39;s one I&amp;#39;m using to test C++ projecs:
&lt;/p&gt;
&lt;div class=&#34;src src-yaml&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;language&lt;/span&gt;: cpp
&lt;span style=&#34;color:#66d9ef&#34;&gt;compiler&lt;/span&gt;: clang
&lt;span style=&#34;color:#66d9ef&#34;&gt;script&lt;/span&gt;:
  - make test
  - ./test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This tells Travis to use the clang compiler (as opposed to, say g++)
and then run &lt;code&gt;make test&lt;/code&gt; and then &lt;code&gt;./test&lt;/code&gt;. If all the tests pass you
get a green check and an email and you&amp;#39;re good to go. If they don&amp;#39;t
you get a red X and also an email. Of course for this particular
configuration to work you need &lt;code&gt;Makefile&lt;/code&gt; and everything else needed
to build the tests in the repo. In my case, I&amp;#39;m using &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt; for tests.
&lt;/p&gt;
&lt;p&gt;
Travis has support for a whole bunch of languages including Java,
Python, and JavaScript and all of those have nice testing frameworks
so regardless of what you&amp;#39;re teaching with, Travis could be easily
integrated. 
&lt;/p&gt;
&lt;p&gt;
In this video I show how I&amp;#39;m using TravisCI and also a simple Python
setup. In the next post I&amp;#39;ll get back to GitHub classroom and how
TravisCI integrates into it.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/-J8A5oWazvE&#34;&gt;https://www.youtube.com/embed/-J8A5oWazvE&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 56 - Dictionaries</title>
      <link>https://cestlaz.github.io/post/using-emacs-56-dictionaries/</link>
      <pubDate>Mon, 28 Jan 2019 16:58:11 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-56-dictionaries/</guid>
      <description>&lt;p&gt;
One of the great things about Emacs is that it&amp;#39;s not just for writing
programs. Sure, you can set it up as an IDE for just about every
programming language under the sun but that&amp;#39;s just the tip of the
iceberg. I use Emacs for just about all my text processing. This
includes writing blog posts, reading and writing emails, creating
lesson plans and pretty much anything and everything having to do with
text.
&lt;/p&gt;
&lt;p&gt;
Emacs has some nice packages that make it really easy to integrate
dictionary and thesaurus lookups into your work flow.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a short video showing you how to set things up:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Jtgulzjq7hk&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 55 - Irony Completions</title>
      <link>https://cestlaz.github.io/post/using-emacs-55-irony-completions/</link>
      <pubDate>Mon, 21 Jan 2019 08:27:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-55-irony-completions/</guid>
      <description>&lt;p&gt;
Last year I put together a &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-32-cpp/&#34;&gt;post and video&lt;/a&gt; on some basics of Emacs for
C++ development. In the video I didn&amp;#39;t quite get completions fully
working. I also used ggtags in that video but find myself using
&lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-33-projectile-jump&#34;&gt;dumb-jump&lt;/a&gt; more frequently.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a quick video showing how to set up &lt;a href=&#34;https://github.com/Sarcasm/irony-mode&#34;&gt;irony-mode&lt;/a&gt; which uses
libclang for completions. It&amp;#39;s pretty slick. Now the only thing I
think I&amp;#39;m missing is header file completions. If you&amp;#39;ve got a good
setup for that, please share.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/GRdZuc1Z4WI&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 54 Org Tables</title>
      <link>https://cestlaz.github.io/post/using-emacs-54-org-tables/</link>
      <pubDate>Mon, 14 Jan 2019 11:34:13 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-54-org-tables/</guid>
      <description>&lt;p&gt;
As you know I use Emacs for all sorts of things. In addition to
coding, I use it for email, my schedule, note taking, and much much
more. As part of my job at Hunter, I read and evaluate some of the
Macaulay Honors College applications. I also have to evaluate all the
applicants to my CS honors program. I described how I use Org-mode and
Emacs to help with that &lt;a href=&#34;https://cestlaz-nikola.github.io/posts/using-emacs-44-pdf/&#34;&gt;here&lt;/a&gt;. Processing the Macaulay applications
though is somewhat different. 
&lt;/p&gt;
&lt;p&gt;
I was given a list of student names and IDs as well as online access
to their applications. If I wasn&amp;#39;t an Emacs user I&amp;#39;d probably dump the
list into a spreadsheet and go from there. It turns out, Org-mode has
a really nice table editor with just the spreadsheet functionality
that I needed. I had the ability to perform basic calculations on the
data while also keeping the power of Emacs for editing purpose.
&lt;/p&gt;
&lt;p&gt;
Check out the video to see how it all works. 
&lt;/p&gt;
&lt;p&gt;
For more information, you can check out this &lt;a href=&#34;https://orgmode.org/worg/org-tutorials/org-spreadsheet-intro.html&#34;&gt;tutorial&lt;/a&gt; on Org-mode
table formulas and the Org-mode &lt;a href=&#34;https://orgmode.org/manual/The-Spreadsheet.html#The-Spreadsheet&#34;&gt;documentation.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Enjoy!
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/5vGGgfs0q3k&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 53 Emailing Org Agenda</title>
      <link>https://cestlaz.github.io/post/using-emacs-53-emailing-org-agenda/</link>
      <pubDate>Sat, 03 Nov 2018 08:55:23 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-53-emailing-org-agenda/</guid>
      <description>&lt;p&gt;
I use both org-mode and Google Calendar for scheduling. I like Google
Calendar because:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
It&amp;#39;s pretty universal so I can issue and accept calendar invites.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
It works well with my phone and other mobile devices.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The rest of my family doesn&amp;#39;t live in Emacs :-(.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I prefer using org-mode beacuse:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Emacs
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
I prefer, for the most part, to control my data.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I partially sync the two platforms. I&amp;#39;ve already talked about &lt;a href=&#34;https://cestlaz.github.io/posts/using-emacs-26-gcal/&#34;&gt;syncing
Google Calendar and org-mode&lt;/a&gt;. Right now, I&amp;#39;m just pulling from Google
rather than also pushing up from org-mode because I&amp;#39;m still getting
double entry issues. This means that I have my entire schedule in
Emacs but only part of it in my Google calendar.
&lt;/p&gt;
&lt;p&gt;
To help resolve the problem, I do a few things. First, I sync my
orgfiles on all my computers. I used to do this with Dropbox but am
now moving over to &lt;a href=&#34;https://syncthing.net/&#34;&gt;Syncthing&lt;/a&gt;. I also like to set up a &lt;a href=&#34;http://digitalocean.com&#34;&gt;Digital Ocean&lt;/a&gt;
droplet so that I have a single machine that&amp;#39;s always on.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve set things up to have that droplet send me an email with my
agenda. It turns out that org has commands to do things with Emacs
from the command line:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
org-batch-agenda
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
org-batch-store-agenda-views
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
org-batch-agenda-csv 
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
They can be run from the command line to output a formatted agenda as
a string:
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;emacs --batch -l ~/.emacs.d/init.el  -eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(org-batch-agenda &amp;#34;a&amp;#34; org-agenda-span 14)&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
or as csv:
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;emacs --batch -l ~/.emacs.d/init.el  -eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(org-batch-agenda-csv &amp;#34;a&amp;#34; org-agenda-span 14)&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gcal&lt;/td&gt;
&lt;td&gt;Stuy recruiting&lt;/td&gt;
&lt;td&gt;2018-10-29&lt;/td&gt;
&lt;td&gt;15:40-16:40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gcal&lt;/td&gt;
&lt;td&gt;RBS Workshop 3&lt;/td&gt;
&lt;td&gt;2018-10-29&lt;/td&gt;
&lt;td&gt;17:30-21:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gcal&lt;/td&gt;
&lt;td&gt;FDR High School&lt;/td&gt;
&lt;td&gt;2018-10-30&lt;/td&gt;
&lt;td&gt;7:45- 8:45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;soe-cal&lt;/td&gt;
&lt;td&gt;ACERT -  LUNCH  SEMINAR&lt;/td&gt;
&lt;td&gt;2018-10-30&lt;/td&gt;
&lt;td&gt;12:00-14:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gcal&lt;/td&gt;
&lt;td&gt;Maxim Vengerov Carnegie Hall&lt;/td&gt;
&lt;td&gt;2018-10-30&lt;/td&gt;
&lt;td&gt;20:00-21:00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Note that you have to specify the location of the startup file
(~/emacs.d/init.e;) since when you run emacs in batch mode it won&amp;#39;t
load your normal config by default
&lt;/p&gt;
&lt;p&gt;
In the video you&amp;#39;ll see how I use my DigitalOcean dropplet, set up
with the Postfix mail server and Syncthing to send me an email with my
agenda every morning.
&lt;/p&gt;
&lt;p&gt;
The command I actually use to send the email is:
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;/usr/bin/emacs --batch -l ~/.emacs  -eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(org-batch-agenda &amp;#34;a&amp;#34; org-agenda-span 14)&amp;#39;&lt;/span&gt; 2&amp;gt;/dev/null | mail -s &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mike&amp;#39;s Agenda for &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;date +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\%A \%D&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; zamansky@gmail.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
which I put in a crontab entry to get it to run every day.
&lt;/p&gt;
&lt;p&gt;
If people want, I can make a runthrough of setting up the actual
dropplet and SyncThing.
&lt;/p&gt;
&lt;p&gt;
Enjoy!
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wus8R1TWYZ4&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 52 - Eyebrowse</title>
      <link>https://cestlaz.github.io/post/using-emacs-52-eyebrowse/</link>
      <pubDate>Tue, 30 Oct 2018 14:35:15 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-52-eyebrowse/</guid>
      <description>&lt;p&gt;
I was originally going to do a video on how I set things up so that I
get an email every morning with my org-mode agenda but that&amp;#39;s going to
be something of an ordeal. I have to create a droploet on Digital
Ocean, set up SyncThing and a mail server and lots of other things.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll get to that video at some point but in the meantime I saw &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/9rvboq/what_emacs_packages_have_upped_your_game_recently/&#34;&gt;this
thread&lt;/a&gt; on the Emacs subreddit.
&lt;/p&gt;
&lt;p&gt;
It asked about packages people used to &amp;#34;up their Emacs game.&amp;#34; I&amp;#39;ve
done videos on some of the packages mentioned and there were some
packages that I&amp;#39;d never heard of that I now have to check out. 
&lt;/p&gt;
&lt;p&gt;
One of the packages, &lt;a href=&#34;https://github.com/wasamasa/eyebrowse&#34;&gt;eyebrowse&lt;/a&gt; was one that I&amp;#39;ve been meaning to play
with for a while. Eyebrowse allows you to easily keep track of
window/buffer configurations. It&amp;#39;s pretty easy and pretty cool.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a quick video overview:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/s6IXj0bS7L8&#34;&gt;https://www.youtube.com/embed/s6IXj0bS7L8&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 51 - Day to day work with org-mode</title>
      <link>https://cestlaz.github.io/post/using-emacs-51-dtd-org/</link>
      <pubDate>Wed, 24 Oct 2018 17:30:45 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/using-emacs-51-dtd-org/</guid>
      <description>&lt;p&gt;
I can&amp;#39;t believe that I haven&amp;#39;t made a video since the beginning of
summer!!!
&lt;/p&gt;
&lt;p&gt;
Part of the reason is that I haven&amp;#39;t had any video ideas that have
motivated me and the other reason is that the Fall is my busiest
season.
&lt;/p&gt;
&lt;p&gt;
In any event, here&amp;#39;s the latest installment.
&lt;/p&gt;
&lt;p&gt;
Take a look at how I use Emacs and more specifically org-mode for my
day to day work. Sometimes I use the fancy power tools but to be
honest, most of the time, I stick to the basics. 
&lt;/p&gt;
&lt;p&gt;
The point is that you don&amp;#39;t have to be a real guru to use org-mode to
help you with organization and to increase productivity. Just a few
simple commands and you can accomplish a lot.
&lt;/p&gt;
&lt;p&gt;
I hope you enjoy it.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/C6nbjqn5Uxw&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Series</title>
      <link>https://cestlaz.github.io/stories/emacs/</link>
      <pubDate>Wed, 19 Sep 2018 19:02:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/stories/emacs/</guid>
      <description>
&lt;h3 id=&#34;headline-1&#34;&gt;
Link to current configuration: &lt;a href=&#34;https://github.com/zamansky/using-emacs&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/dot-emacs&#34;&gt;https://github.com/zamansky/dot-emacs&lt;/a&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-introduction&#34;&gt;Introduction&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-1-setup&#34;&gt;Video 1 - Setting up the package manager&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-2-org&#34;&gt;Video 2 - Intro to Org Mode&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-3-elisp&#34;&gt;Video 3 - How to think about Emacs&lt;/a&gt; 
&lt;/h3&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-4-buffers&#34;&gt;Video 4 - Buffers&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-5-windows&#34;&gt;Video 5 - Windows&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-6-swiper&#34;&gt;Video 6 - Search / Swiper&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-9&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-7-avy&#34;&gt;Video 7 - Navigation / avy&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-10&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-8-autocomplete&#34;&gt;Video 8 - Autocomplete&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-11&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-9-themes&#34;&gt;Video 9 - Themes&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-12&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-10-org-init&#34;&gt;Video 10 - Org init files&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-13&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-11-reveal&#34;&gt;Video 11 - org-reveal / reveal.js&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-14&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-12-python&#34;&gt;Video 12 - Python, Flycheck, Jedi&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-15&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-13-yasnippet&#34;&gt;Video 13 - Python, Yasnippet&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-16&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-14-thoughts&#34;&gt;Video 14 - Thoughts on Using Emacs&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-17&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-15-macros&#34;&gt;Video 15 - Macros&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-18&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-16-undo-tree&#34;&gt;Video 16 - Undo Tree&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-19&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-17-misc&#34;&gt;Video 17 - Small packages&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-20&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-18-narrow&#34;&gt;Video 18 - narrowing and iedit&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-21&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-19-live&#34;&gt;Video 19 - moving to a live config&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-22&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-20-yanking&#34;&gt;Video 20 - Yanking&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-23&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-21-web-mode&#34;&gt;Video 21-web-mode&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-24&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-22-emacsclient&#34;&gt;Video 22-emacsclient&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-25&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-23-capture-1&#34;&gt;Video 23 - capture 1&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-26&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-24-capture-2&#34;&gt;Video 24 - capture 2&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-27&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-25-tramp&#34;&gt;Video 25 - Tramp&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-28&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-26-gcal&#34;&gt;Video 26 - Google Calendar and Org Agenda&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-29&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-27-shell&#34;&gt;Video 27 - Shell and eshell&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-30&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-27-rectangles&#34;&gt;Video 28 - Rectangles&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-31&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-29-elfeed&#34;&gt;Video 29 - elfeed 1 &lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-32&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-30-elfeed-2&#34;&gt;Video 30 - elfeed 2 - Hydras &lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-33&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-31-elfeed-3&#34;&gt;Video 31 - elfeed 3 - macros&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-34&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-32-cpp&#34;&gt;Video 32 - C++&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-35&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-33-projectile-jump&#34;&gt;Video 33 - Projectile Dumb-jump&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-36&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet&#34;&gt;Video 34 - ibuffer and emmet&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-37&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-35-blogging&#34;&gt;Video 35 - blogging&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-38&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp&#34;&gt;Video 36 - A Touch of Elisp&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-39&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-37-treemacs&#34;&gt;Video 37 - Treemacs file browser&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-40&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-38-dired&#34;&gt;Video 38 - dired&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-41&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-39-mu4e&#34;&gt;Video 39 - mu4e&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-42&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-40-atomic-chrome&#34;&gt;Video 40 - Atomic chrome&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-43&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-41-pandoc&#34;&gt;Video 41 - Pandoc&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-44&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-42-git-gutter&#34;&gt;Video 42 - Git Gutter and Timemachine&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-45&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-43-music&#34;&gt;Video 43 - Music&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-46&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-44-pdf&#34;&gt;Video 44 - pdf&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-47&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-45-company&#34;&gt;Video 45 - Company or Autocomplete&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-48&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets&#34;&gt;Video 46 - auto yasnippets&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-49&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-47-magit&#34;&gt;Video 47 - Magit&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-50&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-48-silversearcher&#34;&gt;Video 48 - silversearcher&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-51&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-49-mu4e-conversation&#34;&gt;Video 49 - mu4e conversation&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-52&#34;&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-50-presentations&#34;&gt;Video 50 - presentations&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-53&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-51-dtd-org&#34;&gt;Video 51 - Day to day with org-mode&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-54&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-52-eyebrowse&#34;&gt;Video 52 - eyebrowse&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-55&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-53-emailing-org-agenda&#34;&gt;Video 53 - Emailing org-agenda&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-56&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-54-org-tables&#34;&gt;Video 54 - Org Tables&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-57&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-55-irony-completions&#34;&gt;Video 55 - Irony Completions&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-58&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-56-dictionaries&#34;&gt;Video 56 - Dictionaries&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-59&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-57-dired-narrow&#34;&gt;Video 57 - Dired Narrow&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-60&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-58-lsp-mode&#34;&gt;Video 58 - lsp-mode&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-61&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-59-markdown&#34;&gt;Video 59 - markdown&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-62&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-60-restclient&#34;&gt;Video 60 - restclient&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-63&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-61-org-msg&#34;&gt;Video 61 - org-msg&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-64&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-62-magit-forge&#34;&gt;Video 62 - Magit Forge&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-65&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-63-clojurescript&#34;&gt;Video 63 - ClojureScript&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-66&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-64-notmuch&#34;&gt;Video 64 - Notmuch&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-67&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-65-live-python&#34;&gt;Video 65 - Live Python&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-68&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-66-eshell-elisp&#34;&gt;Video 66 - Eshell - Elisp&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-69&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-67-emacs-rant&#34;&gt;Video 67 - Emacs vs Vi(m)&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-70&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-68-tramp-org-publish&#34;&gt;Video 68 - Tramp and org-publish&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-71&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-69-floobits&#34;&gt;Video 69 - Floobits&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-72&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-70-org-protocol&#34;&gt;Video 70 - org-protocol&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-73&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-71-openwith&#34;&gt;Video 71 - openwith&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;headline-74&#34;&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed&#34;&gt;Video 72 - customizing elfeed&lt;/a&gt;
&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 50 - presentations</title>
      <link>https://cestlaz.github.io/posts/using-emacs-50-presentations/</link>
      <pubDate>Sat, 30 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-50-presentations/</guid>
      <description>&lt;p&gt;
Next weekend I&amp;#39;ll be attending the Computer Science Teachers
Association&amp;#39;s &lt;a href=&#34;https://www.csteachers.org/general/custom.asp?page=2018Conference&#34;&gt;annual conference.&lt;/a&gt; It&amp;#39;s probably the biggest conference
focussed on K12 Computer Science education. This year, in addition to
attending, I&amp;#39;ll be giving a talk on preservice and inservice CS
teacher preparation programs. I&amp;#39;ll be talking about the new New York
State certification requirements along with what we&amp;#39;re rolling out at
Hunter College.
&lt;/p&gt;
&lt;p&gt;
This means putting together a slide deck for the session. When I have
to work collaboratively with non-Emacs users, I will usually go to
Google Docs for presentations. It works and the collaborative aspects
are nice but tools like Google Docs and Powerpoint are designed around
composing slides manually. I much prefer to use a tool where I can
focus on writing my presentation and have the tool turn it into a
presentation.
&lt;/p&gt;
&lt;p&gt;
Org-mode is of course the ideal tool. As an outliner, it lends itself
to organizing a talk:
&lt;/p&gt;
&lt;div class=&#34;src src-org&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;,* topic 1
the content for slide one
,* topic 2
the content for slide two
,* topic 3
etc.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I can embed code, tables, images, and more. I can also cycle
visibility so I can focus on individual sections. Org-mode also has a
number of export options to take a plain org file which is just ascii
with markup and export it as a presentation. In the video, I&amp;#39;ll take a
quick look at &lt;code&gt;ox-beamer&lt;/code&gt;, which exports to a Beamer presentation in LaTeX and then a PDF,
&lt;code&gt;epresent&lt;/code&gt; which presents right in Emacs and finally &lt;code&gt;ox-reveal&lt;/code&gt; wich
creates a &lt;code&gt;reveal.js&lt;/code&gt; presentation. I ultimately decide to continue to
use &lt;code&gt;ox-reveal&lt;/code&gt; as it&amp;#39;s pretty simple and flexible and I can also directly serve
the final presentation from my own laptop, a usb drive, or directly
from GitHub.
&lt;/p&gt;
&lt;p&gt;
Check out the video to see how. If you want more information on using
&lt;code&gt;ox-reveal&lt;/code&gt; check out my earlier &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-11-reveal&#34;&gt;Using Emacs post and video&lt;/a&gt;.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/bRoSpJ23Kzk&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 49 mu4e-conversation</title>
      <link>https://cestlaz.github.io/posts/using-emacs-49-mu4e-conversation/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-49-mu4e-conversation/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been using Emacs for email for a couple of years now. Not for
everything, for now my personal email is still Gmail but work is sent
and read through Emacs. I&amp;#39;m currently using &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/mu4e.html&#34;&gt;mu4e&lt;/a&gt; and while it has a
few quirks and limitations, I like it very much. You can take a look
on how I configure and use it &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-39-mu4e/&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
The other day I saw &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/8qryri/mu4econversation_single_buffer_fullthread_display/&#34;&gt;this&lt;/a&gt; thread on Emacs about a new package -
&lt;a href=&#34;https://gitlab.com/ambrevar/mu4e-conversation&#34;&gt;mu4e-conversation&lt;/a&gt;. It&amp;#39;s a package that deals with email threads.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s pretty cool. You can invoke it whenever you&amp;#39;re in the headers
view you can just run &lt;code&gt;M-x mu4e-conversation&lt;/code&gt; and it combines all the
email messages in the current thread into a single buffer.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s pretty nice.
&lt;/p&gt;
&lt;p&gt;
You can navigate between messages in the thread with &lt;code&gt;C-c C-n&lt;/code&gt; and
&lt;code&gt;C-c C-p&lt;/code&gt; and use most if not all of the usual mu4e goodness but on
top of that you can also toggle what the author calls tree mode by
hitting &lt;code&gt;V&lt;/code&gt;. Tree mode turns the thread into an org-mode tree - also
extremely cool.
&lt;/p&gt;
&lt;p&gt;
On top of this, you can also make mu4e your default viewing mode by
setting a single variable with &lt;code&gt;(setq mu4e-view-func &amp;#39;mu4e-conversation)&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Although it&amp;#39;s very cool, I&amp;#39;m not sure if mu4e-conversation will find
its way into my workflow or not and probably won&amp;#39;t know for a
while. This is mostly due to the fact that it&amp;#39;s summer so work email
slows down and I won&amp;#39;t have too many long threads to play with this
on.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll report back once I give it a fair shake but in the meantime if
anyone out there has had the time to play with it, let us know what
you think.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/V5efS8uXANI&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 48 Silversearcher</title>
      <link>https://cestlaz.github.io/posts/using-emacs-48-silversearcher/</link>
      <pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-48-silversearcher/</guid>
      <description>&lt;p&gt;
A couple of days ago I wrote about on my &lt;a href=&#34;http://cestlaz.github.io/posts/unit-tests-grading-workflow&#34;&gt;lab grading workflow&lt;/a&gt;. In the
post I mentioned that I used Emacs to easily navigate between student
folders and files so I can actually look at their work in addition to
their programs output and test results.
&lt;/p&gt;
&lt;p&gt;
The key is a combination of &lt;code&gt;dired&lt;/code&gt; and &lt;a href=&#34;https://github.com/Wilfred/ag.el&#34;&gt;ag&lt;/a&gt;, Emacs&amp;#39;s interface to &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;the
Silver Searcher&lt;/a&gt; which is something like a recursive code grep on
steroids. I also briefly try to show &lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep&#34;&gt;wgrep&lt;/a&gt; in the video which allows
you to edit Emacs grep buffers, effectively allowing you to make
changes across a set of files all at once. It ended up not working
with silversearcher - if anyone out there knows why, please chime in.
&lt;/p&gt;
&lt;p&gt;
Enjoy:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/-sFTkCQ774o&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs Episode 47 - Magit</title>
      <link>https://cestlaz.github.io/posts/using-emacs-47-magit/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-47-magit/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been holding off on doing a &lt;a href=&#34;https://magit.vc/&#34;&gt;Magit&lt;/a&gt; video for a while. Mostly
because I wasn&amp;#39;t using it exclusively and also because there are
already a number of good Magit videos and resources out there.
&lt;/p&gt;
&lt;p&gt;
What changed? Along with the new version of Magin, Jonas Bernoulli
wrote up &lt;a href=&#34;https://emacsair.me/2017/09/01/magit-walk-through/&#34;&gt;a walkthrough of the Magit interface&lt;/a&gt;. For whatever reason,
it all finally clicked.
&lt;/p&gt;
&lt;p&gt;
In spite of what the documentation says, Magit &lt;strong&gt;is not&lt;/strong&gt; an interface
for git. Magit is a &lt;strong&gt;command and control&lt;/strong&gt; center for git. You can
launch it just to execute some git commands but you can also leave it
up and running in an Emacs window or frame as a constant project
overview.
&lt;/p&gt;
&lt;p&gt;
Wow. Mind blown!!!
&lt;/p&gt;
&lt;p&gt;
If you use Emacs for Deveopment, you &lt;strong&gt;have to&lt;/strong&gt; use Magit. If you don&amp;#39;t
use Emacs, you can load it on the side for Magit. If you&amp;#39;re not a
developer, learn to code so you can use Magit!!!!!
&lt;/p&gt;
&lt;p&gt;
I tried to do justice to the package in the video. Magit along with &lt;a href=&#34;https://orgmode.org/&#34;&gt;Org
Mode&lt;/a&gt; are arguably Emacs killer apps - enough in and of themselves to
justify using Emacs.
&lt;/p&gt;
&lt;p&gt;
Check out the video:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/1IYsiHXR620&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Tools and Complexity</title>
      <link>https://cestlaz.github.io/posts/tools-and-complexity/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/tools-and-complexity/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://twitter.com/alfredtwo&#34;&gt;Alfred Thompson&lt;/a&gt; wrote about &lt;a href=&#34;http://blog.acthompson.net/2018/04/thoughts-on-where-cs-education-tools.html&#34;&gt;CS education tools&lt;/a&gt; earlier today. I&amp;#39;ve
also been meaning to write on the topic but from a different point of
view.
&lt;/p&gt;
&lt;p&gt;
I do my best to keep up with the latest and greatest in the CS world
both on the academic side as well as the professional one. That&amp;#39;s not
really possible, but I do my best. When I have a small project to work
on I&amp;#39;ll some times use it as an excuse to play with some recent
technology. Over December, I wanted to write an application viewer to
use for company / student internship matching. I started by looking at
&lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; but ended up using &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt; which I liked much more for a variety
of reasons.
&lt;/p&gt;
&lt;p&gt;
The viewer served it&amp;#39;s purpose but I think it can be turned into a
much more comprehensive student / employer internship platform. I
tried to steal a few minutes over this past week&amp;#39;s spring break to
start a rewrite using another toolset, Clojure, Clojurescript and
Reagent. I&amp;#39;m really liking the Clojure stack and using
Emacs and Cider for the IDE is really blowing me away.
&lt;/p&gt;
&lt;p&gt;
What I&amp;#39;ve noticed is that for every new language of framework you also
have to learn a whole set of ancillary tools.
&lt;/p&gt;
&lt;p&gt;
It didn&amp;#39;t used to be that way. Back in the day, things were much
simpler. I remembering doing work at Goldman Sachs, it was as simple
as typing something on the command line like &lt;code&gt;cc file1.c file2.c
file3.c&lt;/code&gt;. I of course had to be cutting edge and use fancy modern
tools like &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;Make&lt;/a&gt;. What&amp;#39;s more, the tools I used in industry were very
similar to what I used in college.
&lt;/p&gt;
&lt;p&gt;
We now live in very different times.
&lt;/p&gt;
&lt;p&gt;
If you go to the getting started guides for React or Vue it&amp;#39;s pretty easy to
get hello world up and running but beyond that you start to fall in to
the Javascript tooling hole. To start you need either &lt;strong&gt;npm&lt;/strong&gt; or &lt;strong&gt;yarn&lt;/strong&gt;
just to manage packages and dependencies. Then you need a build system
or bundler like &lt;strong&gt;webpack&lt;/strong&gt;, &lt;strong&gt;browserify&lt;/strong&gt;, or &lt;strong&gt;parcel&lt;/strong&gt; and that&amp;#39;s not even
considering older options like &lt;strong&gt;gulp&lt;/strong&gt; and &lt;strong&gt;grunt&lt;/strong&gt; and ancillary tools
like &lt;strong&gt;babel&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
A typical React or Vue project is going to need a &lt;a href=&#34;https://github.com/krasimir/react-webpack-starter/blob/master/package.json&#34;&gt;project.json&lt;/a&gt; and
&lt;a href=&#34;https://github.com/krasimir/react-webpack-starter/blob/master/webpack.config.js&#34;&gt;webpack.config.js&lt;/a&gt; file and sometimes some other files as well. Check
out the links. They&amp;#39;re from a simple project template I found
online. Far from simple.
&lt;/p&gt;
&lt;p&gt;
When I was playing with Vue.js a couple of months ago, I ended up
using Webpack to convert the source code into the final JS, take care
of live-reloading, and in general manage the project. I still have no
idea how most of it works. I don&amp;#39;t know if it&amp;#39;s just me but I&amp;#39;m very
uncomfortable relying on tools that I really don&amp;#39;t fully understand to
build my systems.
&lt;/p&gt;
&lt;p&gt;
The Clojure world is little better with Leiningen and Boot. If you
don&amp;#39;t believe me, try to make heads or tails of &lt;a href=&#34;https://github.com/bhauman/figwheel-template/blob/master/src/leiningen/new/figwheel/project.clj&#34;&gt;this&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
While it&amp;#39;s true that as a professional you&amp;#39;ll likely use one set of
tools on a day to day basis and you&amp;#39;ll eventually get to know them
that doesn&amp;#39;t mean it&amp;#39;s not a good idea to prepare kids for what&amp;#39;s to
come.
&lt;/p&gt;
&lt;p&gt;
On the K12 side we have drag and drop languages, specialized learning
IDEs like BlueJ, simple cut down IDEs like Dr Racket and completely
online environments like repl.it. All great starter tools that
insulate beginners from the complexities to come. College&amp;#39;s
might get closer to the &amp;#34;real world&amp;#34; but just a tad.
&lt;/p&gt;
&lt;p&gt;
Don&amp;#39;t get me wrong, I like many of the tools used in K12
classes and there&amp;#39;s far too much complexity in the professional world to
throw at beginners. If we look at a student&amp;#39;s entire school
career, classes are already so packed with material it would be hard to
really prepare kids for the real world within their classes. You could
take that tried and true teacher / professor technique of just
requiring it and having the kids figure it out on their own but that&amp;#39;s
really just downright abusive.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t have an answer for this one.
&lt;/p&gt;
&lt;p&gt;
I have my kids use tools like Git and GitHub early along with using
testing frameworks and external libraries. I also try to move my
students to a general purpose programmable platform like Emacs or
Vim. I think these are sound practices but students will still have a
big learning curve when they finally get to industry.
&lt;/p&gt;
&lt;p&gt;
What I really would love it to see the tooling become simpler and
documentation better. &lt;a href=&#34;https://github.com/parcel-bundler/parcel&#34;&gt;Parcel&lt;/a&gt;, a Javascript bundler is one of the newer
kids on the block and is much simpler and cleaner than alternatives
like Webpack. The new version of Clojure has it&amp;#39;s own command line
tool which is also simpler than the alternatives. Maybe we are already
moving in the right direction and this entire rant will become moot in a couple of years.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing Part 2</title>
      <link>https://cestlaz.github.io/posts/testing-part2/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/testing-part2/</guid>
      <description>&lt;p&gt;
A few weeks ago I wrote about &lt;a href=&#34;https://cestlaz.github.io/posts/testing-testing/#.Wq7Ud3XwZhE&#34;&gt;introducing testing&lt;/a&gt; in CS classes,
specifically using a testing framework. In that post I talked about
the plan but now I can talk about the results.
&lt;/p&gt;
&lt;p&gt;
My class interleaves with Hunter&amp;#39;s CSCI 13500 - Software Analysis and
Design I class. One day each week, my students have complete a hands
on lab focusing on whatever is being covered in the 13500 class. I
decided to use one of those labs as a first foray into testing.
&lt;/p&gt;
&lt;p&gt;
I had each student use a classmates lab solution. They were to examine
their solution and write a test suite for the lab using the &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt;
C++ testing framework.
&lt;/p&gt;
&lt;p&gt;
I think this proved to be a valuable exercise.
&lt;/p&gt;
&lt;p&gt;
Partway into the exercise, a few students independently had an issue -
they couldn&amp;#39;t even build the tests.
&lt;/p&gt;
&lt;p&gt;
The code looked right. Something like this:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It looked like at textbook example of a test case but it wouldn&amp;#39;t even
compile.
&lt;/p&gt;
&lt;p&gt;
In all cases, the original student code compiled and ran and gave the
correct result. All the students had code similar to this:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This stumped everyone for a while - why wouldn&amp;#39;t the test even
compile.
&lt;/p&gt;
&lt;p&gt;
The answer was &amp;#34;data types.&amp;#34; The lab specification required that
getValue was supposed to return a &lt;code&gt;double&lt;/code&gt; but in all the problem
cases, the student returned a &lt;code&gt;std::string&lt;/code&gt;. The lab appeared to work
since &lt;code&gt;std::cout&lt;/code&gt; handles strings as well as numeric data types but
once they put it in to a test case that actually checked types the
problem was apparent and easy to fix.
&lt;/p&gt;
&lt;p&gt;
As it turns out, I was pretty excited about this – even before
finishign the tests, the act of writing tests revealed a problem. This
is a good thing.
&lt;/p&gt;
&lt;p&gt;
From there, it was pretty easy for students to finish writing the
tests for their classmates labs.
&lt;/p&gt;
&lt;p&gt;
Fast forward a week. This was the first lab where I required
the students to submit their own test suite as part of their lab. This
didn&amp;#39;t seem to slow anyone down by an appreciable and time will tell
if this leads to better development practices but it certainly made my
life easier. I was able to quickly move from repo to repo and type:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make tests
./tests -s
... watch the tests run
make
./main
--- watch the program run&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Easy peasy.
&lt;/p&gt;
&lt;p&gt;
Not only did it make it faster for me, it also gave me insights into
their programs by seeing their decisions in terms of test writing.
&lt;/p&gt;
&lt;p&gt;
Is it a win?
&lt;/p&gt;
&lt;p&gt;
At the very worst, they&amp;#39;re learning an
industry practice and at best, it&amp;#39;s going to help them improve as
software engineers. Add on the fact that it&amp;#39;s making my life as a
teacher easier both in terms of understanding the students work and in
terms of speed of evaluation. Sounds like a win to me.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 46 Auto Yasnippets</title>
      <link>https://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets/</guid>
      <description>&lt;p&gt;
The other day I discovered &lt;a href=&#34;https://github.com/abo-abo/auto-yasnippet&#34;&gt;auto-yasnippet&lt;/a&gt;, another great package by
&lt;a href=&#34;https://github.com/abo-abo&#34;&gt;Oleh Krehel&lt;/a&gt; or abo-abo.
&lt;/p&gt;
&lt;p&gt;
It looks like it&amp;#39;s going to be a great way to solve a particular
problem that come up now and again.
&lt;/p&gt;
&lt;p&gt;
There are plenty of times when I want to create a number of similar
but slightly different blocks of text. The example on the project
site  is:
&lt;/p&gt;
&lt;div class=&#34;src src-c&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You could use multiple cursors, a macro, or other methods to put in
the common text but you still have to deal with the parts of each line
that are unique, the red, green, and blue.
&lt;/p&gt;
&lt;p&gt;
You could use a yasnippet but it&amp;#39;s unlikely that you&amp;#39;ll have a snippet
for every occasion. This is where auto-yasnippet comes in. You would
write the first line but add  a tilda as a placeholder:
&lt;/p&gt;
&lt;div class=&#34;src src-c&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and then invoke &lt;code&gt;aya-create&lt;/code&gt;. This will get rid of the tildas and
create the auto-snippet. Then when you run &lt;code&gt;aya-expand&lt;/code&gt; it will put in
the snippet with the tilda locations as placeholders.
&lt;/p&gt;
&lt;p&gt;
Very cool.
&lt;/p&gt;
&lt;p&gt;
Check out the video:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/utrMabxgXbg&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 45 - Company or Autocomplete</title>
      <link>https://cestlaz.github.io/posts/using-emacs-45-company/</link>
      <pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-45-company/</guid>
      <description>
&lt;p&gt;
This is a good time to be an Emacs user. In addition to all of the
great packages and tools being developed there seem to be more people
regularly blogging and making videos about Emacs than ever before.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;http://planet.emacsen.org/&#34;&gt;Planet Emacsen&lt;/a&gt; aggregates a ton of Emcas blogs and Emacs Legend Sacha
Chua posts what&amp;#39;s going on in emacs every week on her &lt;a href=&#34;http://sachachua.com/blog/category/geek/emacs/&#34;&gt;blog&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
on the video front, &lt;a href=&#34;https://www.youtube.com/channel/ucdetz7akmws0_gnjog01d2g&#34;&gt;uncle dave&lt;/a&gt; has recently joined the ranks of emacs
video producers. sometimes we&amp;#39;ll cover the same topic. dave made a
video on swiper the other week and i made one a year ago. the other
week we both made videos on mpd almost on the same day but dave
focussed on emms and i focussed on simple-mpc. i think this
is great because it gives different perspectives.
&lt;/p&gt;
&lt;p&gt;
today, i watched dave&amp;#39;s video on &lt;a href=&#34;https://www.youtube.com/watch?v=xewzfruru6k&amp;amp;t=854s&#34;&gt;company&lt;/a&gt; mode for auto
completion. I&amp;#39;ve always used &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-8-autocomplete/&#34;&gt;autocomplete&lt;/a&gt; mode. I thought it would be
a good time for me to see how the other half lived.
&lt;/p&gt;
&lt;p&gt;
You can find my configurations up on GitHub
(&lt;a href=&#34;https://github.com/zamansky/using-emacs&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs&#34;&gt;https://github.com/zamansky/using-emacs&lt;/a&gt;&lt;/a&gt;). The master branch is using
autocomplete and the company-test branch for company. I&amp;#39;ve also pulled
out the relevant code and am placing it down under the video.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what I&amp;#39;ve found so far:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/srFQwTvbaxY&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Company config (so far):
&lt;/h2&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package company
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(setq company-idle-delay &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
(setq company-minimum-prefix-length &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
(global-company-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))

(use-package company-irony
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;company-backends&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;company-irony&lt;/span&gt;))

(use-package irony
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c++-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;irony-mode&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;irony-mode&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;irony-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;irony-cdb-autosetup-compile-options&lt;/span&gt;))

(use-package irony-eldoc
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;irony-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;irony-eldoc))

(use-package company-jedi
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jedi:setup&lt;/span&gt;))

(defun my/python-mode-hook ()
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;company-backends&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;company-jedi&lt;/span&gt;))

(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;my/python-mode-hook&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Autocomplete config
&lt;/h2&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package auto-complete
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(progn
(ac-config-default)
(global-auto-complete-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
))

(setq py-python-command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python3&amp;#34;&lt;/span&gt;)
(setq python-shell-interpreter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python3&amp;#34;&lt;/span&gt;)

(use-package jedi
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jedi:setup&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jedi:ac-setup&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 44 - An org-mode workflow for application processing</title>
      <link>https://cestlaz.github.io/posts/using-emacs-44-pdf/</link>
      <pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-44-pdf/</guid>
      <description>&lt;p&gt;
One of my titles at Hunter College is Director of the Daedalus CS
Honors program. It&amp;#39;s something like a Hunter specific, CS specific
version of the CUNY Macaulay Honors program.
&lt;/p&gt;
&lt;p&gt;
Hunter gives all its students the ability to get a great computer
science education at a fraction of the cost of a private institution
and if you&amp;#39;re a Daedalus scholar you also get a scholarship, a laptop,
special classes (with me :-) ), activities and more. Just the other
day we visited  &lt;a href=&#34;http://samsungnext.com/&#34;&gt;Samsung Next&lt;/a&gt; accelerator and earlier in the year we
made our annual visit to &lt;a href=&#34;http://www.catskillsconf.com/&#34;&gt;Catskills Conf&lt;/a&gt;, arguably my favorite event of
the year.
&lt;/p&gt;
&lt;p&gt;
When deciding on which students to recommend for acceptance, I try to
glean as much information as I can about each applicant. When I feel
there&amp;#39;s not enough information, I&amp;#39;ve been known to reach out to
recommenders and other sources for more. But first I go through the
applications. For each student, I&amp;#39;m provided with a pdf file with a
bunch of data and also an entry in an internal Hunter online form with
even more.
&lt;/p&gt;
&lt;p&gt;
For the first cohort, this wasn&amp;#39;t a big deal. I hadn&amp;#39;t even started at
Hunter when the applications closed so there was no
outreach. Everything was after the fact so there were very few
students to evaluate.
&lt;/p&gt;
&lt;p&gt;
Last year, I was able to do some outreach and we had around 60 or so
applications for a little over 20 spots.
&lt;/p&gt;
&lt;p&gt;
This year, there are well over 100 applicants (and we&amp;#39;re looking to
grow the program by a large number of students). All of a sudden, it
wasn&amp;#39;t so easy to navigate all the pdf files.
&lt;/p&gt;
&lt;p&gt;
Emacs to the rescue. Using a combination of org-mod,  &lt;a href=&#34;https://github.com/politza/pdf-tools&#34;&gt;pdf-tools&lt;/a&gt;, and
&lt;a href=&#34;https://melpa.org/#/org-pdfview&#34;&gt;org-pdfview&lt;/a&gt; I&amp;#39;ve come up with a workflow that I very much like.
&lt;/p&gt;
&lt;p&gt;
Take a look and let me know what you think:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/LFO2UbzbZhA&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Testing, Testing</title>
      <link>https://cestlaz.github.io/posts/testing-testing/</link>
      <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/testing-testing/</guid>
      <description>&lt;p&gt;
With CS4All being the buzzword of the day we&amp;#39;re paying a lot of
attention to the fact that when we teach a CS class for all students,
most of them won&amp;#39;t end up studying CS or going directly
into a tech heavy field.
&lt;/p&gt;
&lt;p&gt;
Among those that do study CS though, there is another division. Those
studying CS as an academic exercise or to go on to graduate studies
and those who are going in to the tech sector. For those going into
the tech field, it&amp;#39;s important that they&amp;#39;re prepared in terms of
software development, design, and all those goodies not covered in CS
classes.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not advocating removing the good stuff currently in most colleg CS
curricua, although I will say that most CS programs I&amp;#39;ve reveiwed could benefit by
trimming some requriements and adding some electives. I am advocating
doing more than telling your students &amp;#34;comment your code,&amp;#34; - a refrain
many undergrads have heard frequently with little guidance.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m advocating to begin by bringing in tools and practices that either
don&amp;#39;t detract from current CS classes or in fact can add to or
streamline them.
&lt;/p&gt;
&lt;p&gt;
Last year I wrote about &lt;a href=&#34;https://cestlaz.github.io/posts/sigcse-2017-github-4/&#34;&gt;using Git and GitHub&lt;/a&gt; in my classes. Students
have to submit projects anyway and frequently have to work in teams so
using Git and a Git hosting service can actually make both student&amp;#39;s
and instructor&amp;#39;s class experiences better while introducing them to an
industry best practice.
&lt;/p&gt;
&lt;p&gt;
Today I want to talk about testing.
&lt;/p&gt;
&lt;p&gt;
Students are always told to test their code but frequently not given
tremendous guidance. The results can be:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
projects that don&amp;#39;t compile
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
projects that compile and run but not the way they&amp;#39;re supposed to.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
wonky input or interfaces
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
projects that don&amp;#39;t work for all cases
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
On the instructor side, we have to evaluate the student&amp;#39;s
submissions and deal with all of this. Some teachers use auto graders
to help. I have mixed feelings on them. On the one hand they can speed
up grading but on the other hand it&amp;#39;s important for me as the teacher
to actually dive into the student&amp;#39;s code. In any case, using an auto grader
is actually somewhat similar to running a test suite.
&lt;/p&gt;
&lt;p&gt;
Why not have the students create their own test suites? If done right,
this should encourage students to evaluate their own code more
carefully and also cut down on the time it takes the intructor to
evaluate a given submission.
&lt;/p&gt;
&lt;p&gt;
This means that we have to use a testing framework with a very low
cost of entry.
&lt;/p&gt;
&lt;p&gt;
I ended up finding &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt; for C++. It&amp;#39;s really simple and just a
single include file. This means that students don&amp;#39;t have to actually
install anything on their machines. Here&amp;#39;s the example from the
project page:
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://github.com/onqtam/doctest/raw/master/scripts/data/using_doctest_888px_wide.gif&#34; alt=&#34;https://github.com/onqtam/doctest/raw/master/scripts/data/using_doctest_888px_wide.gif&#34; title=&#34;https://github.com/onqtam/doctest/raw/master/scripts/data/using_doctest_888px_wide.gif&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;
Basically, the students can just start writing tests.
&lt;/p&gt;
&lt;p&gt;
Python also has a couple of low friction testing options. One is to
use the built in &lt;a href=&#34;https://docs.python.org/3/library/doctest.html&#34;&gt;doctest&lt;/a&gt; facility. Basically you put sample runs in the doc
string at the top of a function with the expected output:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This might seem a little cumbersome, particularly if you look at the
example at the link. It also requires the tests go on top of each
function and that the tests will print out as part of the docstring.
&lt;/p&gt;
&lt;p&gt;
The other easy Python option is the built in &lt;a href=&#34;https://docs.python.org/3/library/unittest.html&#34;&gt;unittest&lt;/a&gt; module.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s an example of testing strings from the link above:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I havn&amp;#39;t played with Java testing in years but I&amp;#39;d guess there&amp;#39;s
something similarly light weight.
&lt;/p&gt;
&lt;p&gt;
Tomorrow I&amp;#39;m hoping to finish the groundwork on using C++ doctest with
my class and I&amp;#39;ll write another post afterwards. Probably after SIGCSE
since I&amp;#39;ll be attending that from Wednesday on.
&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll see how this goes but I&amp;#39;m guessing it will work well. If it
does, it should make my life as a grader easier and also get the kids
on track to using test frameworks - something they&amp;#39;ll need wherever
they end up.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 40 - Atomic Chrome</title>
      <link>https://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</link>
      <pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</guid>
      <description>
&lt;p&gt;
Thanks to everyone who voted for topics or commented with suggestions
for videos. I&amp;#39;ll try to get to them in the coming months.
&lt;/p&gt;
&lt;p&gt;
Today is just a quick hit on Atomic Chrome - an Emacs package and
browser extension that allows you to edit web form inputs with Emacs.
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
UPDATE
&lt;/h2&gt;
&lt;p&gt;
I forgot to mention that you can set a shortcut key, at least in chrome rather than
clicking on the icon. This makes things much smoother.
&lt;/p&gt;
&lt;p&gt;
All you have to do is:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Go to &lt;strong&gt;&lt;strong&gt;chrome://extensions&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
On the bottom of the page you&amp;#39;ll see a button to set &lt;strong&gt;&lt;strong&gt;keyboard shortcuts&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Set the shortcut for Atomic Chrome
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Enjoy:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wyPZws66Sic&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 39 - mu4e</title>
      <link>https://cestlaz.github.io/posts/using-emacs-39-mu4e/</link>
      <pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-39-mu4e/</guid>
      <description>
&lt;p&gt;
I generally use three email accounts. My personal one, work one, and
one for my non-profit. For a couple of years, I&amp;#39;ve been using mu4e
under Emacs for both my work and non-profit email accounts and gmail
for my personal account.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve had lots of requests for a video on what I do but I&amp;#39;ve been
hesitant for two reasons:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
There are parts of my configuration that are copied from others and
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
I really don&amp;#39;t understand.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
I wasn&amp;#39;t happy with the complexity and some of the tooling.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
While there are still parts of my configuration that I&amp;#39;m not 100%
clear on I&amp;#39;ve cleaned up the tooling and complexity by using mu4e only
for my work email for the time being and by switching to mbsync.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a writeup on configuring things with video at the end.
&lt;/p&gt;
&lt;p&gt;
Unless you run an email server on your local machine using mu4e can be
thought of as three parts.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Get the email from the server to the local machine using IMAP.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Setting up mu.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Access the email locally from Emacs.
&lt;/p&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Part 1 Getting the email to your local machine using mbsync
&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
I found his terrific blog post by &lt;a href=&#34;https://twitter.com/robstewartUK&#34;&gt;Rob Stewart&lt;/a&gt; on setting up &lt;a href=&#34;http://www.macs.hw.ac.uk/~rs46/posts/2014-01-13-mu4e-email-client.html&#34;&gt;mbsync and
mu4e&lt;/a&gt;. Read it over. I basically followed his directions for setting up
&lt;a href=&#34;https://sourceforge.net/p/isync/isync/ci/master/tree/&#34;&gt;mbsync&lt;/a&gt;. To build from source under Linux, I used the sequence:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./autogen.sh
./configure
make
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I followed Rob&amp;#39;s instructions basically verbatim for the password and
authentication stuff so I suggest you do the same.
&lt;/p&gt;
&lt;p&gt;
You&amp;#39;ll also have to make sure to make the necessary email directories
manually. I describe all of this in the video.
&lt;/p&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Part 2 - setting up mu.
&lt;/h3&gt;
&lt;p&gt;
To set up mu, clone it from git://github.com/djcb/mu.git and build
it. You can find dependencies &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html&#34;&gt;here&lt;/a&gt; and then follow the same sequence
used to build mbsync listed above.
&lt;/p&gt;
&lt;p&gt;
Since I store my local email under a folder &lt;code&gt;Maildir&lt;/code&gt;  which is what
mu defaults to I can start using it by indexing my emails:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mu index&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video shows some examples of using mu from the command line and
you can look at the mu cheatsheet &lt;a href=&#34;http://www.djcbsoftware.nl/code/mu/cheatsheet.html&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Setting up mu4e in emacs
&lt;/h3&gt;
&lt;p&gt;
Finally, you can set up mu4e in emacs. Take a look at Rob&amp;#39;s
configuration in his post or my &lt;a href=&#34;https://github.com/zamansky/using-emacs/blob/master/mu4econfig-sample.el&#34;&gt;sample&lt;/a&gt; config. You&amp;#39;ll have to take a
few minutes to go through either and make the appropriate changes but
the required changes should be cleared.
&lt;/p&gt;
&lt;p&gt;
The video goes through all of this and then a brief demo of how I use
mu4e.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m very happy with it and plan to integrate my non-profit email and
maybe even personal email into it soon.
&lt;/p&gt;
&lt;p&gt;
Enjoy:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/newRHXKm4H4&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allow=&#34;encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Tools can shape how we think</title>
      <link>https://cestlaz.github.io/posts/advent-2017-4-6/</link>
      <pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-2017-4-6/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been having fun with this years &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; competition. So
far, I&amp;#39;ve been able to keep up but with I expect that to change in
another couple of days since I&amp;#39;ll be traveling for the weekend.
&lt;/p&gt;
&lt;p&gt;
After solving a problem, I like looking over some of the other
solutions on the Advent of Code &lt;a href=&#34;https://www.reddit.com/r/adventofcode/&#34;&gt;subreddit&lt;/a&gt;. Even with similar
agorithmic solutions there&amp;#39;s a decent amount of variation in the
actual code and solutions in different languages can look radically
different.
&lt;/p&gt;
&lt;p&gt;
That got me thinking about how the tools we know and use both shape the ways we
approach solving problems and creating things and either limit or
empower us to go from a mental model of a solution or creation to an
actual artifact.
&lt;/p&gt;
&lt;p&gt;
Relating to this are the common themes that come up in the CS
Education world. The idea that it&amp;#39;s computer science not programming
and certainly not merely coding. That&amp;#39;s true but the tools and
languages we use shape the whole thinking part and can also give the
students a valuable practical tool that they can leverage to great
advantage in both future classes and work and life endeavors.
&lt;/p&gt;
&lt;p&gt;
I decided to do this rant as a video. I hope you enjoy it:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/x8cZgEogWNw&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allow=&#34;encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 38 - dired</title>
      <link>https://cestlaz.github.io/posts/using-emacs-38-dired/</link>
      <pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-38-dired/</guid>
      <description>&lt;p&gt;
The 38th installment of Using Emacs is about &lt;strong&gt;&lt;strong&gt;dired&lt;/strong&gt;&lt;/strong&gt;, Emacs&amp;#39; built
in mode for navigating and working with directories.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not a dired power user and in fact am just now making a real
effort to explore it and work it into my daily workflow and
with that in mind, I&amp;#39;d love to hear some configuration and
use suggestions from people who use it regularly.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the configuration I use:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package dired+
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dired+&lt;/span&gt;)
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
which merely adds dired+ into the mix.
&lt;/p&gt;
&lt;p&gt;
I also started playing with &lt;a href=&#34;https://github.com/joddie/pcre2el&#34;&gt;pcre2el&lt;/a&gt; which allows me to use the more
usual regex syntax in place of Emacs regex syntax in both dired and
other places. This is a big win for me since I never remember all the
escaping rules for Emacs regex.
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package pcre2el
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(pcre-mode)
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Finally, abo-abo and jcs have both written about new features in ,
Ivy/Swiper/Counsel that allow you to use ivy-occur to dump results
into a dired buffer (&lt;a href=&#34;http://irreal.org/blog/?p=6760&#34;&gt;link&lt;/a&gt;, &lt;a href=&#34;https://oremacs.com/2017/11/18/dired-occur/&#34;&gt;link&lt;/a&gt;) but to get that to work, I needed to
install &lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep&#34;&gt;wgrep&lt;/a&gt; and also had to install and setup &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; which looks to be
useful.
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package wgrep
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
)

(setq counsel-fzf-cmd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/zamansky/.fzf/bin/fzf -f %s&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
To help get started here are links to a couple of cheat sheets:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf&#34;&gt;dired reference card&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://harryrschwartz.com/assets/documents/dired-cheatsheet.pdf&#34;&gt;another dired cheat sheet&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I&amp;#39;ll probably use dired more frequently but again, would love to hear
how other people are using it.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Fg7HmmRYWy8&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 37 - Treemacs file browser</title>
      <link>https://cestlaz.github.io/posts/using-emacs-37-treemacs/</link>
      <pubDate>Sun, 24 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-37-treemacs/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been meaning to get back to making Emacs videos but I&amp;#39;ve been
having trouble figuring out what to record.
&lt;/p&gt;
&lt;p&gt;
People have asked for &lt;a href=&#34;https://github.com/magit/magit&#34;&gt;Magit&lt;/a&gt; but I only use the basics and I think
there are already some great videos on it out there. I&amp;#39;d also like to
get more comfortable with DIRED mode and then do a video on it but I&amp;#39;m
not there yet. I&amp;#39;ve also been looking into packages that manage
workspaces like Eyebrowse and Persp-mode but neither are really doing
it for my workflow.
&lt;/p&gt;
&lt;p&gt;
This morning I saw an post on the &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/7249jt/introducing_treemacs_a_modern_file_project/&#34;&gt;Emacs subreddit&lt;/a&gt; about &lt;a href=&#34;https://github.com/Alexander-Miller/treemacs#treemacs---a-tree-layout-file-explorer-for-emacs&#34;&gt;Treemacs&lt;/a&gt; - a
sidebar file browser similar to what the Atom editor has. It&amp;#39;s pretty
slick. I particularly like the integration with &lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;projectile&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I suspect I won&amp;#39;t integrate a file browser side bar into my workflow -
I&amp;#39;ve probably spent too many years with Emacs built in buffer commands
but if like that type of interface, definitely check Treemacs out.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ACg6RnVdw8k&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>New Term New Tool - Thonny, a Python IDE</title>
      <link>https://cestlaz.github.io/posts/new-tool-thonny/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/new-tool-thonny/</guid>
      <description>&lt;p&gt;
Last year I &lt;a href=&#34;https://cestlaz.github.io/posts/new-term-new-tool-replit&#34;&gt;wrote about&lt;/a&gt; &lt;a href=&#34;http://repl.it&#34;&gt;repl.it&lt;/a&gt;, an online IDE that supports multiple
languages. At the time it had some rudimentary classroom support and
since I started using it, repl.it has become better and better. I
used it last year with my class because I had to start the year in a
lab where I couldn&amp;#39;t easily install my own software. I&amp;#39;ll continue to
use repl.it - mostly for it&amp;#39;s ability to schedule publish and manage
assignments but when possible, I like having my students work
locally.
&lt;/p&gt;
&lt;p&gt;
This year I&amp;#39;m excited about another tool - &lt;a href=&#34;http://thonny.org&#34;&gt;Thonny&lt;/a&gt;. Thonny&amp;#39;s a simple
Python IDE designed for beginners. I discovered it last year but at a
time when it was impractical for me to use with my students. This
year I can and I&amp;#39;m really liking it. I&amp;#39;m still an Emacs guy and will
continue to use Emacs for my python development (&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-12-python/&#34;&gt;video 1&lt;/a&gt;, &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-13-yasnippet&#34;&gt;video 2&lt;/a&gt;) but
for beginners I think Thonny is the way to go.
&lt;/p&gt;
&lt;p&gt;
Some of Thonny&amp;#39;s highlights:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
An integrated Python 3 virtual environment making for ease of
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
installation and consistency across student installs
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
A debugger that shows how expressions are evaluated
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Great visualizations of function calls that make it easier to
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
understand the call stack and scope
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
The ability to look at memory to understand references.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Rather than go into the gory details in text, I put together this
video:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/lWaCl0WjNZI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 36 - A Touch of Elisp</title>
      <link>https://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/</link>
      <pubDate>Sun, 30 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been working on a vue.js project this summer. During the school
year I really can&amp;#39;t dive into code so it&amp;#39;s been fun.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve already showed you most of the Emacs tools I use for
development. Projectile, Ace-Window, IBuffer, Swiper / Ivy and
all. One thing I couldn&amp;#39;t easily do was arrange windows the way I
wanted.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been setting up Emacs with one large window and a couple of
smaller ones:
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/touch-elisp.png&#34; alt=&#34;/img/touch-elisp.png&#34; title=&#34;/img/touch-elisp.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;
I can easily switch the buffer in the window and I can easily switch
windows but what I wanted to do was swap the buffer in the large
window with one of the smaller buffers and leave focus in the larger
buffer:
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/touch-elisp2.png&#34; alt=&#34;/img/touch-elisp2.png&#34; title=&#34;/img/touch-elisp2.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;
I started looking at perspective mode and persp mode but neither work
with the latest Emacs. After poking around at other packages I
realized that ace-window does most of what I wanted. Ace-window has a
function that swaps the buffers in two windows named
&lt;code&gt;ace-swap-window&lt;/code&gt;. The only problem is that it leaves the focus on the
window you swap to not the one you started in. Ace-window also has
&lt;code&gt;aw-flip-window&lt;/code&gt; which then returns the cursor to the previous window.
&lt;/p&gt;
&lt;p&gt;
With a little elisp, we get the behavior I was looking for which I
then bound to &lt;code&gt;C-1 z&lt;/code&gt;:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun z/swap-windowsn ()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
(interactive)
(ace-swap-window)
(aw-flip-window)
)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; z-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z/swap-windows&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video goes into more details but it shows that if you&amp;#39;re not
afraid to explore a bit you can pretty much get Emacs to do whatever
you want.
&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/NQhud2ZNd1w&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 35 - Blogging</title>
      <link>https://cestlaz.github.io/posts/using-emacs-35-blogging/</link>
      <pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-35-blogging/</guid>
      <description>&lt;p&gt;
Very little new Emacs in today&amp;#39;s episode of Using Emacs. The video
shows my old blogging workflow and what I&amp;#39;m playing with now.
&lt;/p&gt;
&lt;p&gt;
The only new Emacs covered is the &lt;a href=&#34;https://github.com/rejeep/prodigy.el&#34;&gt;prodigy&lt;/a&gt; package which lets you run
services under Emacs. I use it to run &lt;a href=&#34;https://getnikola.com/blog/index.html&#34;&gt;Nikola&lt;/a&gt;&amp;#39;s development server but
I think prodigy will also be useful when I start writing that knitting
application I promised my wife.
&lt;/p&gt;
&lt;p&gt;
When I started this blog, I used Jekyll. It was simple and worked with
GitHub pages. I wrote about why I transitioned to Nikola &lt;a href=&#34;https://cestlaz.github.io/posts/2016-04-14-i-hate-ruby/&#34;&gt;here&lt;/a&gt; and
&lt;a href=&#34;https://cestlaz.github.io/posts/2016-04-17-emacs-jekyll-nikola/&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s not much more to say here so enjoy the video:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wSeTic9obKw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 34 - ibuffer and emmet</title>
      <link>https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/</link>
      <pubDate>Thu, 15 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/</guid>
      <description>&lt;p&gt;
A couple of quick, unrelated packages today.
&lt;/p&gt;
&lt;p&gt;
first up, ibuffer. If you keep Emacs open all the time, you&amp;#39;ll start
to accumulate buffers. Last time, I talked about using &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-33-projectile-jump&#34;&gt;projectile&lt;/a&gt; and
how that can help when navigating between buffers. IBuffer is another
one.
&lt;/p&gt;
&lt;p&gt;
Out of the box, &lt;code&gt;C-x C-b&lt;/code&gt; is bound to the Emacs &lt;strong&gt;&lt;strong&gt;list-buffers&lt;/strong&gt;&lt;/strong&gt;
command. It brings up a buffer with all the buffers listed inside
it. You can navigate that buffer and hit enter on a particular buffer
to go to it. You can also mark buffers and then operate on all the
marked buffers. Hitting &lt;strong&gt;&lt;strong&gt;h&lt;/strong&gt;&lt;/strong&gt; in the list-buffers buffer brings up
more details.
&lt;/p&gt;
&lt;p&gt;
IBuffer is like list-buffers on steroids. It looks much nicer and I
think it has more functionality (again hitting &lt;strong&gt;&lt;strong&gt;h&lt;/strong&gt;&lt;/strong&gt; in the buffer
brings up help).
&lt;/p&gt;
&lt;p&gt;
IBuffer really shines though, once you start customizing it. I found
&lt;a href=&#34;http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html&#34;&gt;this&lt;/a&gt; post by Martin Owen which shows how to customize the way ibuffer
appears. You can group buffers however you want or even omit some from
the listing.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my configuration (mostly stolen from Owen):
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x C-b&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ibuffer&lt;/span&gt;)
(setq ibuffer-saved-filter-groups
(quote ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dired&amp;#34;&lt;/span&gt; (mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; dired-mode))
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org&amp;#34;&lt;/span&gt; (name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^.*org$&amp;#34;&lt;/span&gt;))

(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;web&amp;#34;&lt;/span&gt; (or (mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; web-mode) (mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; js2-mode)))
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt; (or (mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; eshell-mode) (mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; shell-mode)))
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mu4e&amp;#34;&lt;/span&gt; (name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\*mu4e\*&amp;#34;&lt;/span&gt;))
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;programming&amp;#34;&lt;/span&gt; (or
(mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; python-mode)
(mode &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; c++-mode)))
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emacs&amp;#34;&lt;/span&gt; (or
(name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^\\*scratch\\*$&amp;#34;&lt;/span&gt;)
(name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^\\*Messages\\*$&amp;#34;&lt;/span&gt;)))
))))
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ibuffer-mode-hook&lt;/span&gt;
(lambda ()
(ibuffer-auto-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
(ibuffer-switch-to-saved-filter-groups &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;;; don&amp;#39;t show these&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(add-to-list &amp;#39;ibuffer-never-show-predicates &amp;#34;zowie&amp;#34;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; Don&amp;#39;t show filter groups if there are no buffers in that group&lt;/span&gt;
(setq ibuffer-show-empty-filter-groups &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Don&amp;#39;t ask for confirmation to delete marked buffers&lt;/span&gt;
(setq ibuffer-expert &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video also shows &lt;a href=&#34;https://github.com/smihica/emmet-mode&#34;&gt;emmet&lt;/a&gt; mode. A terrific mode for quickly creating
HTML and CSS. I tried it a long time ago when it was called zencoding
and found it lacking but after watching &lt;a href=&#34;https://www.youtube.com/watch?v=gGPv7jsQGpc&amp;amp;t=329s&#34;&gt;this video&lt;/a&gt; at Build Fun Things
I started playing with it again. It&amp;#39;s a real winner.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the config I&amp;#39;m using:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package emmet-mode
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sgml-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;emmet-mode&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; Auto-start on any markup modes&lt;/span&gt;
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;web-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;emmet-mode&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; Auto-start on any markup modes&lt;/span&gt;
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;css-mode-hook&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;emmet-mode&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; enable Emmet&amp;#39;s css abbreviation.&lt;/span&gt;
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Check them both out:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/yUfA-7wWNKA&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python - Editor or IDE</title>
      <link>https://cestlaz.github.io/posts/python-editors/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/python-editors/</guid>
      <description>&lt;p&gt;
Earlier today I read Garth Flint&amp;#39;s latest post on &lt;a href=&#34;https://gflint.wordpress.com/2017/05/25/python-editors-simple-wins/%0A&#34;&gt;choosing a Python
environment for his classes&lt;/a&gt;. While our classes and populations are
different it looks like Garth and I share a lot of thoughts on the
subject.
&lt;/p&gt;
&lt;p&gt;
I started to write a comment to leave on Garth&amp;#39;s blog but since it was
getting a little long I thought I&amp;#39;d write it up as a post.
&lt;/p&gt;
&lt;p&gt;
The question of development environment can be an important one and
can make a big difference. When I designed the intro course at Stuy,
the fact that Dr. Scheme existed made the use of Scheme in the class
an option. Without it as a supportive and simple environment for the
students I probably wouldn&amp;#39;t have been able to use Scheme even though
I really liked it as a teaching and learning tool.
&lt;/p&gt;
&lt;p&gt;
Garth writes about issues relating to choosing a local development
environment so that&amp;#39;s what I&amp;#39;m going to stick to here. If you want an
online environment check out &lt;a href=&#34;http://codesters.com&#34;&gt;Codesters&lt;/a&gt; - a terrific online Python
environment with lots of educational support materials and features
and &lt;a href=&#34;http://repl.it&#34;&gt;repl.it&lt;/a&gt; - an online environment that supports many languages and
is also developing great teacher and class support – I very much like
both of these platforms.
&lt;/p&gt;
&lt;p&gt;
The first question is editor or IDE?
&lt;/p&gt;
&lt;p&gt;
As a user, I&amp;#39;m very pro editor. Learn a tool that you can customize to
your tastes and that will work for all sorts of text editing chores
from coding to document preparation to scheduling and more and you&amp;#39;re
in great shape. Personally, I&amp;#39;m an &lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;Emacs wonk&lt;/a&gt; but there are other
choices as well.
&lt;/p&gt;
&lt;p&gt;
As a teacher, though, Emacs or another programmers editor can be
overwhelming for younger students and rank beginners.
&lt;/p&gt;
&lt;p&gt;
This can make IDEs attractive.
&lt;/p&gt;
&lt;p&gt;
Some IDEs are too big and cumbersome and can add even more cognitive
load than an editor - think Eclipse for Java development. If you think
writing
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
is a lot of overhead, just wait until you have a novice try to start a
Java project in Eclipse.
&lt;/p&gt;
&lt;p&gt;
Other IDEs are more streamlined. One common choice is
Idle. It&amp;#39;s big advantage is that it&amp;#39;s always available and is &amp;#34;part&amp;#34;
of Python. On the other hand, it doesn&amp;#39;t seem to add much to a bare
editor and I&amp;#39;ve found that it can be somewhat confusing.
&lt;/p&gt;
&lt;p&gt;
Garth seems to have settled on &lt;a href=&#34;https://www.jetbrains.com/pycharm/&#34;&gt;PyCharm&lt;/a&gt; from &lt;a href=&#34;https://jetbrains.com&#34;&gt;JetBrains&lt;/a&gt;. It&amp;#39;s pretty
streamlined and really easy to get up and running. JetBrains also
provides a free community edition as well as a heavier professional
one available for purchase. Garth notes that it&amp;#39;s a Python only IDE
but JetBrains has similar IDEs for a whole bunch of languages and I
seem to recall you can add plugins across their IDEs to basically make
them multi-language development environments.
&lt;/p&gt;
&lt;p&gt;
I really like the JetBrains products and if I used an IDE I&amp;#39;m pretty
sure I&amp;#39;d use their products. As a teacher though, I find their IDEs a
little too powerful for my tastes. I want a learner IDE to provide the
bare minimum of features - an interactive REPL, a code window, run and
debug buttons, some completion and help - but to make those features
really easy to use. JetBrains does a little too much.
&lt;/p&gt;
&lt;p&gt;
What I ended up using in the past is &lt;a href=&#34;http://drpython.sourceforge.net/&#34;&gt;Dr Python&lt;/a&gt;. For me it hit the
sweet spot. As an added bonus we were already using Dr. Racket (nee
Dr. Scheme) and Dr. Java so our students had a similar environment
across languages and even NetLogo looked and behaved similarly.
&lt;/p&gt;
&lt;p&gt;
Is there a right answer? Probably not. Just as with choosing a first
language there are always trade offs. Besides, if you don&amp;#39;t have the
right solution, there will be another one next week. Just recently I
saw &lt;a href=&#34;http://thonny.org/&#34;&gt;this project&lt;/a&gt;. A new beginners IDE for python. It looks interesting
and worth checking out.
&lt;/p&gt;
&lt;p&gt;
The right IDE can make a big difference while keeping the overhead low
and giving just the right amount of support. For me, the last time
around it was Dr. Python. For Garth, it looks like PyCharm fits the
bill. Looking at the overall plan, I usually start the kids off with a
simple learners IDE and then transition them to a programmers editor
like Emacs as they gain more comfort and experience.
&lt;/p&gt;
&lt;p&gt;
As a postscript, let me share these links on how I use Emacs for
Python development (each with a video) as well as my series on how I
use Emacs in general:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs/&#34;&gt;http://cestlaz.github.io/stories/emacs/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-12-python&#34;&gt;http://cestlaz.github.io/posts/using-emacs-12-python&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-13-yasnippet&#34;&gt;http://cestlaz.github.io/posts/using-emacs-13-yasnippet&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 33 - projectile, dumb-jump</title>
      <link>https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</link>
      <pubDate>Fri, 28 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/</guid>
      <description>&lt;p&gt;
If you keep Emacs open all the time you end up accumulating lots of
buffers. That can make navigating a little bit awkward.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;Projectile&lt;/a&gt; is a really nice package that makes navigating in and
between projects much easier. I also have &lt;a href=&#34;https://github.com/ericdanan/counsel-projectile&#34;&gt;counsel-projectile&lt;/a&gt;
installed.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my configuration:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; projectile&lt;/span&gt;
(use-package projectile
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(projectile-global-mode)
(setq projectile-completion-system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ivy&lt;/span&gt;))

(use-package counsel-projectile
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(counsel-projectile-on))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Projectile considers a sub-directory tree to be a project if it&amp;#39;s a
git or other source control repo, if it&amp;#39;s created by tool like lein,
maven, or sbt, or if you put an empty file named &lt;strong&gt;&lt;strong&gt;.projectile&lt;/strong&gt;&lt;/strong&gt; in
the root directory of the project.
&lt;/p&gt;
&lt;p&gt;
Projectile learns about projects when you open a file in that project
and then stores that information in an Emacs bookmark file in your
.emacs.d directory.
&lt;/p&gt;
&lt;p&gt;
You can switch between projects using &lt;code&gt;C-c p&lt;/code&gt; and when in a project,
load another file using &lt;code&gt;C-c f&lt;/code&gt;. If you use the &lt;strong&gt;&lt;strong&gt;which-key&lt;/strong&gt;&lt;/strong&gt; package
as I do, just type &lt;code&gt;C-c&lt;/code&gt; - the projectile prefix and then which-key
will bring up help.
&lt;/p&gt;
&lt;p&gt;
The video goes through some of my favorite features and you can find
the full documentation can be found &lt;a href=&#34;http://projectile.readthedocs.io/en/latest/&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
The other package I show is &lt;a href=&#34;https://github.com/jacktasia/dumb-jump&#34;&gt;dumb-jump&lt;/a&gt;. It&amp;#39;s basically a zero (or
almost zero) configuration tags replacement. Really nice.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my current config:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package dumb-jump
:bind ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-g o&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; dumb-jump-go-other-window)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-g j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; dumb-jump-go)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-g x&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; dumb-jump-go-prefer-external)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-g z&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; dumb-jump-go-prefer-external-other-window))
:config (setq dumb-jump-selector &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ivy&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; (setq dumb-jump-selector &amp;#39;helm)&lt;/span&gt;
:ensure)

:config
&lt;span style=&#34;color:#75715e&#34;&gt;;; (setq dumb-jump-selector &amp;#39;ivy) ;; (setq dumb-jump-selector &amp;#39;helm)&lt;/span&gt;
:init
(dumb-jump-mode)
:ensure
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Enjoy.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wBfZzaff77g&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>GitHub as a tool for education</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-github-4/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-github-4/</guid>
      <description>&lt;p&gt;
When I started using git and GitHub with my students it was a natural
progression having started with started with CVS and then, as
technology changed moving through Subversion and then Mercurial. It
was all about using sensible professional software development
techniques while making it easier for students to submit work and for
me to evaluate their submissions.
&lt;/p&gt;
&lt;p&gt;
Over time, I found that git and GitHub in fact provided some extra
support for educators right out of the box.
&lt;/p&gt;
&lt;p&gt;
In my &lt;a href=&#34;http://cestlaz.github.io/posts/sigcse-2017-github-3&#34;&gt;last github post&lt;/a&gt; I talked about using the results of &lt;code&gt;git log&lt;/code&gt;
and looking at diffs. Both provide ways of seeing what a student did
and when. The commit log and history make it easier to hold students accountable to working
through a project and not leavings for the last minute. The diffs make
it easier to see what&amp;#39;s changed both to see progress and also to help
support students as they develop their projects.
&lt;/p&gt;
&lt;p&gt;
If you use Emacs, as I do, you can use the &lt;a href=&#34;https://github.com/pidu/git-timemachine&#34;&gt;git timemachine&lt;/a&gt; package
which does a great job visualizing changes:
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/sigcse-github/timemachine.gif&#34; alt=&#34;/img/sigcse-github/timemachine.gif&#34; title=&#34;/img/sigcse-github/timemachine.gif&#34; align=&#34;center&#34;/&gt;
&lt;p&gt;
Other editors might have a similar feature.
&lt;/p&gt;
&lt;p&gt;
The contribution graphs also provide a quick snapshot which shows what
team members are contributing and when:
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/sigcse-github/githubgraph.png&#34; alt=&#34;/img/sigcse-github/githubgraph.png&#34; title=&#34;/img/sigcse-github/githubgraph.png&#34; align=&#34;center&#34;/&gt;
&lt;p&gt;
The punchcard graph is also useful to see when students actually do
their work.
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/sigcse-github/githubgraph2.png&#34; alt=&#34;/img/sigcse-github/githubgraph2.png&#34; title=&#34;/img/sigcse-github/githubgraph2.png&#34; align=&#34;center&#34;/&gt;
&lt;p&gt;
GitHub also make it easy to set up starter code or to have students
&amp;#34;take over&amp;#34; each others projects by forking.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m very happy using git and GitHub as is but if you want more
support, check out &lt;a href=&#34;https://classroom.github.com/&#34;&gt;GitHub Classroom&lt;/a&gt;. Had it existed when I started,
I&amp;#39;d probably have used it but since I had already gotten used to my
work flows I&amp;#39;ve stuck with raw git and github.
&lt;/p&gt;
&lt;p&gt;
In case you missed the earlier posts describing the process I use to
introduce github to my classes here they are:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/sigcse-2017-github-1&#34;&gt;Part 1&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/sigcse-2017-github-2&#34;&gt;Part 2&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/posts/sigcse-2017-github-3&#34;&gt;Part 3&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I&amp;#39;m hoping some of you have found this set of four posts useful or at
least interesting.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2017 - a path to github part 3</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-github-3/</link>
      <pubDate>Thu, 30 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-github-3/</guid>
      <description>&lt;p&gt;
I wanted to write this up earlier but, as so frequently happens all my
dormant work projects decided it was time to rise up and demand
instant attention.
&lt;/p&gt;
&lt;p&gt;
When we left off, we had students pulling code and submitting homework
via github.
&lt;/p&gt;
&lt;p&gt;
Form here, it&amp;#39;s an easy step to have them working on a small project
in their own repo. In fact, sometimes, I&amp;#39;ll jump right to a two person
project where one person creates the repo and invites the other (and
me) as a collaborator.
&lt;/p&gt;
&lt;p&gt;
Once here, it&amp;#39;s important to emphasize the normal workflow:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;git pull&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
edit stuff with an occasional &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git rm&lt;/code&gt;,  or &lt;code&gt;got mv&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
commit
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
and an occasional &lt;code&gt;git push&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Regardless of how much you emphasize the workflow you&amp;#39;re now going to
have to cover merges as well how to recover from problems by going to
an earlier revision.
&lt;/p&gt;
&lt;p&gt;
For going back to earlier versions or otherwise recovering from
disasters, I don&amp;#39;t show them the &amp;#34;right&amp;#34; way of doing things. I show
them a way that&amp;#39;s easy to remember and reliably works without tons of
searching for answers.
&lt;/p&gt;
&lt;p&gt;
First, given some repo, I have them clone a version under another
name:
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone git@github.com:hunterdaedalus/classcode.git newdirname&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now, they have the original repo and a clone under the directory
&lt;strong&gt;&lt;strong&gt;newdirname&lt;/strong&gt;&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
I have them go into that new copy and use &lt;code&gt;git log&lt;/code&gt; to go through the
logs to find an earlier version that they want to go back to.
&lt;/p&gt;
&lt;p&gt;
The log will look something like this:
&lt;/p&gt;
&lt;div class=&#34;verse-block&#34;&gt;
&lt;p&gt;
commit 67eceb5e0a01ca5f5fb54ace65a4fe134f71edae
Author: Mike Zamansky &amp;lt;zamansky@gmail.com&amp;gt;
Date:   Sat Feb 25 12:32:26 2017 -0500
&lt;/p&gt;
&lt;p&gt;
updated Makefile
&lt;/p&gt;
&lt;p&gt;
commit 7efed10eb6015276b0cb82874ce786dc68a683ae
Author: Mike Zamansky &amp;lt;zamansky@gmail.com&amp;gt;
Date:   Sat Feb 25 08:45:34 2017 -0500
&lt;/p&gt;
&lt;p&gt;
broke out main –&amp;gt; main and shapes
&lt;/p&gt;
&lt;p&gt;
commit e8b5c240123a7cb17920d52b4aba9cf5787ddab2
Author: Mike Zamansky &amp;lt;zamansky@gmail.com&amp;gt;
Date:   Sat Feb 25 08:36:29 2017 -0500
&lt;/p&gt;
&lt;p&gt;
added lab3 code
&lt;/p&gt;
&lt;p&gt;
commit 6d5bcf866306334ddc5c6a48e8f49fb39ddbcb18
Author: Some other coder &amp;lt;somone@somewhere.net&amp;gt;
Date:   Sun Feb 19 19:29:51 2017 -0500
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
Find the hash that they want to get back to and &lt;strong&gt;&lt;strong&gt;checkout&lt;/strong&gt;&lt;/strong&gt; that
version (you normally only have to use the first few characters of
the hash):
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git checkout 7efed10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now they can grab what they want, copy it into the working copy of the
repo, &lt;strong&gt;&lt;strong&gt;commit&lt;/strong&gt;&lt;/strong&gt; the changes and &lt;strong&gt;&lt;strong&gt;push&lt;/strong&gt;&lt;/strong&gt; them back.
&lt;/p&gt;
&lt;p&gt;
For Merging, I start by having them do it manually. I&amp;#39;ll have them
load the file in question into their editor and look for the chunks
that look like this:
&lt;/p&gt;
&lt;div class=&#34;verse-block&#34;&gt;
&lt;p&gt;
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; A
lines in file A
&lt;code class=&#34;verbatim&#34;&gt;=====&lt;/code&gt;
lines in file B
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; B
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
They&amp;#39;ll manually make the changes, then save, commit and push back.
&lt;/p&gt;
&lt;p&gt;
Later, I&amp;#39;ll show them a couple of tools to help along the way. I
usually show ediff in emacs along with meld.
&lt;/p&gt;
&lt;p&gt;
Once they&amp;#39;ve been doing this for a while, it&amp;#39;s easy to expand group
sizes. After that, I&amp;#39;ll introduce &lt;strong&gt;&lt;strong&gt;issues&lt;/strong&gt;&lt;/strong&gt; via the github interface.
&lt;/p&gt;
&lt;p&gt;
The last big topic is branches.
&lt;/p&gt;
&lt;p&gt;
First I show basic branches and merging. Here&amp;#39;s a pretty good &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging&#34;&gt;run
through&lt;/a&gt;. Afterwards, I&amp;#39;ll show how branching works in conjunction with
github. This is also a good time to emphasize that students have to
actually read the messages that git gives them when things don&amp;#39;t  go
well. In most cases, the message will contain the exact thing to type
to fix the problem (such as linking a branch with a branch up on
github).
&lt;/p&gt;
&lt;p&gt;
Now is also the time to introduce pull requests and how to use them to
support code review. The general setup I recommend is one branch per
group member and a main &amp;#34;deployment&amp;#34; branch with group members
creating more branches as they see fit.
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s about it. I&amp;#39;ve followed this process, more or less, over a
semester, over a year, and over multiple years. It&amp;#39;s worked for me, I
hope some of this helps you as well.
&lt;/p&gt;
&lt;p&gt;
In the next and probably last git/github post I&amp;#39;ll talk about the
educational benefits that I&amp;#39;ve discovered along the way. After that,
I&amp;#39;ll get back to some emacs videos, other SIGCSE stuff and my normal rants.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2017 - a path to github part 2</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-github-2/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-github-2/</guid>
      <description>
&lt;h2 id=&#34;headline-1&#34;&gt;
Note:
&lt;/h2&gt;
&lt;p&gt;
Just for some quick context. The process I started to describe in the
last post and continue here chronicles what I did at Stuy with high
schoolers. Now that I&amp;#39;m at Hunter college, I&amp;#39;m adapting the process
but the overarching themes remain the same.
&lt;/p&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Post starts here:
&lt;/h2&gt;
&lt;p&gt;
Now that your students have been pulling the classcode repo regularly
it&amp;#39;s time to move to the next step - adding and pushing files to a
repo.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t claim to do this the &amp;#34;right way&amp;#34; or the best way but it&amp;#39;s
worked for me and it&amp;#39;s gotten my students up to speed.
&lt;/p&gt;
&lt;p&gt;
I ease my students into adding and pushing files using git through
homework submission. I create a single repo, usually named
&lt;strong&gt;&lt;strong&gt;submissions&lt;/strong&gt;&lt;/strong&gt; and make a folder for each student underneath looking
something like this:
&lt;/p&gt;
&lt;div class=&#34;verse-block&#34;&gt;
&lt;p&gt;
.
└── submissions
├── abram_sarah
├── chen_stuart
└── thompson_steve
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
Before going any further, let me clear up one thing. The repo is
public so all the students have access to each others work. I&amp;#39;m OK
with that. We could have each student make their own repo and use git
&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules&#34;&gt;submodules&lt;/a&gt; to make a submissions repo but administration is much
trickier and we lose the chance to build a culture of cooperation and
trust. We can lock down our submission systems as much as we want. If
students want to share assignments there&amp;#39;s nothing we can do about
it.
&lt;/p&gt;
&lt;p&gt;
My preference is to try to build a culture that minimizes bad
behavior and rewards good behavior. I&amp;#39;d rather see an incorrect
homework so that I can tell what we need to work on than a copied
perfect assignment. I&amp;#39;d rather see students cite each other, share
properly, and support each other than copy in the shadows.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not naive enough to believe that copying doesn&amp;#39;t happen in my
classes but I still prefer erring on the side of openness.
&lt;/p&gt;
&lt;p&gt;
Once the repo is set up, I give all the students access. This is a
little onerous since I have to type each of their GitHub usernames
under the collaborators section of the submissions repo but I only
have to do this once a semester.
&lt;/p&gt;
&lt;p&gt;
Then I teach the workflow. Assignments go into a file or folder under
their directory named ##_name where ## is the assignment number
(01,02,03, etc) and name is the assignment name. The student workflow
is:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
git pull
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
git add (sometimes)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
git commit
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
git push
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Since every student is working in their own directory, things
basically work.
&lt;/p&gt;
&lt;p&gt;
The first issue that students come up with is when another student
pushes before another student. The second student merely has to do
another &lt;strong&gt;&lt;strong&gt;git pull&lt;/strong&gt;&lt;/strong&gt; before proceeding. This provides an easy
introduction to dealing with the distributed nature of git.
&lt;/p&gt;
&lt;p&gt;
There will occasionally be other issues when students don&amp;#39;t follow
procedure exactly so I&amp;#39;ll have to fix the repo every now and then but
nothing too bad and each time is a opportunity to show the class:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
you can pretty much always restore and fix things once you commit
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
them.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
the specifics to fix things.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
There will be a few bumps in the road but after a few assignments the
sailing will be pretty smooth.
&lt;/p&gt;
&lt;p&gt;
At the end of the day, the students are a little closer to being fully
fluent using git, they&amp;#39;re hopefully using each others code as
resources but in a proper way and since the students are all using a
consistent assignment naming convention I can use simple scripts and
shell commands to do all sorts of processing on assignments.
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s the end of phase two. The next step  brings us to small
projects using git.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2017 - a path to github part 1</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-github-1/</link>
      <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-github-1/</guid>
      <description>
&lt;p&gt;
Both at and prior to SIGCSE 2017, I promised to write up the steps I
take to introduce and use revision control systems in my classes.
&lt;/p&gt;
&lt;p&gt;
This series is not meant to be a git or &lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt; tutorial. There are
plenty of those already (two of which I&amp;#39;ve linked to below).  This is
about the process I use with my students to get them up to speed.
&lt;/p&gt;
&lt;p&gt;
As with any new tool, there will be some resistance but once git saves
them once, they get religion. There will also be some bumps in the
road but at the end of the day, the students will be using a valuable
and necessary tool.
&lt;/p&gt;
&lt;p&gt;
I was also surprised at the ancillary benefits I got as a teacher by
using GitHub in particular. I&amp;#39;ll talk about that at the end of the
series.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s part one.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m doing this with git and GitHub but there&amp;#39;s no reason why other
systems and hosts can&amp;#39;t be used. I&amp;#39;d also recommend that any educator
or student sign up for the assorted &lt;a href=&#34;https://education.github.com/&#34;&gt;discounts&lt;/a&gt; offered by GitHub.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve followed this basic idea multiple times and done it over the
course of a single semester, a year, and even two years. Regardless of
time frame, the idea is the same. Make each step simple and relevant
and introduce complexity and roadblocks a piece at a time.
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Step 1 - code distribution
&lt;/h2&gt;
&lt;p&gt;
To start, I don&amp;#39;t even talk about version control. We start with code
distribution. For years, I&amp;#39;ve looked for efficient ways of sharing
code with my classes. Both code developed in class and code for
assignments.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve tried things like NFS, Dropbox, online code repositories like the
files section of systems like Moodle or Blackboard.
&lt;/p&gt;
&lt;p&gt;
At Stuy, we&amp;#39;ve always had efficiency problems with NFS and Dropbox has
multiple problems ranging from students not being able to install the
client on school machines to the problems of the network hit when a
room full of kids are syncing at the same time.
&lt;/p&gt;
&lt;p&gt;
Uploading to a CMS system was also problematic - I&amp;#39;m a command line
wonk and hate going through slow web page menus to navigate a
filesystem and upload files. I also had to remember to get the files
off of whatever machine I was working on in class and then transfer
them to the CMS when I had a free moment.
&lt;/p&gt;
&lt;p&gt;
Enter git. Now, of course, if you&amp;#39;re going to use git in the classroom
you have to know it. There are plenty of resources out there. Online
courses, articles, videos, and tutorials. Here are a couple:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://try.github.io/&#34;&gt;https://try.github.io/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=0fKg7e37bQE&#34;&gt;https://www.youtube.com/watch?v=0fKg7e37bQE&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I also want to point out that I just use raw command line git along
with native GitHub. GitHub has rolled out &lt;a href=&#34;https://classroom.github.com/&#34;&gt;GitHub Classroom&lt;/a&gt; which adds
a layer of support for educators. I don&amp;#39;t use it because, as I said,
I&amp;#39;m an old school command line wonk and also because I figured out a
sequence that worked for me and my students before GitHub Classroom
existed. Were I starting now, I&amp;#39;d take some time to look at their
current offerings before jumping in.
&lt;/p&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Set up
&lt;/h3&gt;
&lt;p&gt;
Before starting, make sure you register your ssh keys. &lt;a href=&#34;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/&#34;&gt;This&lt;/a&gt; help page
has more information. You&amp;#39;ll want to register an ssh key from every
machine you use - home, work, laptop.
&lt;/p&gt;
&lt;p&gt;
Now go over to GitHub and make a new repository. I usually name it
&lt;strong&gt;&lt;strong&gt;classcode&lt;/strong&gt;&lt;/strong&gt;. &lt;strong&gt;&lt;strong&gt;BEGINNER NOTE:&lt;/strong&gt;&lt;/strong&gt; when creating the repo, make sure to
check the &amp;#34;initialize this repository with a README&amp;#34; box. If you don&amp;#39;t
you&amp;#39;ll be given a set of instructions on how to set things up once you
click &lt;strong&gt;&lt;strong&gt;Create repository&lt;/strong&gt;&lt;/strong&gt; but it&amp;#39;s easier and easier to follow if
you start with an initialized repo with a README.
&lt;/p&gt;
&lt;p&gt;
I make the repo public – it&amp;#39;s code I&amp;#39;m distributing – nothing to
hide here. If you aren&amp;#39;t comfortable with that, just make the repo
private. If you&amp;#39;ve registered as a teacher with GitHub, you can set up
an organization and you&amp;#39;ll be able to set up free private repos within
it. The other downside here is that you&amp;#39;ll have to individually give
each student access to the repo. That&amp;#39;s a mild annoyance but it only
has to be done once.
&lt;/p&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Teacher use
&lt;/h3&gt;
&lt;p&gt;
Next, clone out the repo. &lt;strong&gt;&lt;strong&gt;BEGINNER NOTE:&lt;/strong&gt;&lt;/strong&gt; Make sure you check out
the ssh version not the https version. Just make sure that when you
click the &lt;strong&gt;&lt;strong&gt;clone&lt;/strong&gt;&lt;/strong&gt; button, it says &amp;#34;Clone with SSH.&amp;#34; If not, just
click the &amp;#34;Use SSH&amp;#34; link in the same box. Students will clone the
using https.
&lt;/p&gt;
&lt;p&gt;
From the teacher point of view, you can just start using the repo. My
work flow is typically:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;git pull&lt;/strong&gt;&lt;/strong&gt; at the start of class
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
write code throughout class
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;git add&lt;/strong&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;strong&gt;git commit&lt;/strong&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;strong&gt;git push&lt;/strong&gt;&lt;/strong&gt; at the end of class
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
I use a similar flow when I want to add files in my office or at home.
&lt;/p&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Student use
&lt;/h3&gt;
&lt;p&gt;
From the student point of view, assuming a public repo, they just have to clone the repo and
at the beginning of every class or work session, do a &lt;strong&gt;&lt;strong&gt;git
pull&lt;/strong&gt;&lt;/strong&gt;. That&amp;#39;s all there is to it.
&lt;/p&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
Thoughts
&lt;/h3&gt;
&lt;p&gt;
That&amp;#39;s it. The kids are now using GitHub – they&amp;#39;re probably looking
at and poking around on the web site as well as pulling files to their
machines. You can also, in class, show things like &lt;strong&gt;&lt;strong&gt;git status&lt;/strong&gt;&lt;/strong&gt;,
&lt;strong&gt;&lt;strong&gt;git log&lt;/strong&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;strong&gt;git diff&lt;/strong&gt;&lt;/strong&gt; to set the stage for step 2 of this
process and beyond.
&lt;/p&gt;
&lt;p&gt;
Since the students aren&amp;#39;t adding, committing or pushing, you probably won&amp;#39;t
get any errors.
&lt;/p&gt;
&lt;p&gt;
The only problem that could reasonably occur is if a student places a
file in their local copy of the repo with the same name as something
they haven&amp;#39;t pulled yet. This is pretty easy to address and provides a
nice stepping stone lesson to again, set the stage for more complex
operations.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m happy with this as a first step towards git using GitHub. It
provides a nice way of sharing class code while gently introducing the
students to the tool.
&lt;/p&gt;
&lt;p&gt;
The next step  is having the students add files to a repo. That&amp;#39;s the
next post in this series.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 32 - C&#43;&#43;</title>
      <link>https://cestlaz.github.io/posts/using-emacs-32-cpp/</link>
      <pubDate>Sat, 04 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-32-cpp/</guid>
      <description>&lt;p&gt;
This video is specifically for my students or any students out there
who are starting with C++ and emacs. The videos also longer than usual, coming in
at a little over 20 minutes.
&lt;/p&gt;
&lt;p&gt;
The big difference is instead of building on my &lt;a href=&#34;https://github.com/zamansky/using-emacs&#34;&gt;existing config&lt;/a&gt;, the
code at the bottom is a complete standalone configuration. It&amp;#39;s all
pulled from the main config with one additional package.
&lt;/p&gt;
&lt;p&gt;
By taking the code at the bottom and putting in into a file named &lt;strong&gt;&lt;strong&gt;init.el&lt;/strong&gt;&lt;/strong&gt; in a
directory off of your home directory named &lt;strong&gt;&lt;strong&gt;.emacs.d&lt;/strong&gt;&lt;/strong&gt; and run emacs,
it will install everything and you&amp;#39;ll be good to go.
&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;ve been following this series, the only new package is &lt;a href=&#34;https://github.com/leoliu/ggtags&#34;&gt;ggtags&lt;/a&gt;
and the configuration code is:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; tags for code navigation&lt;/span&gt;
(use-package ggtags
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c-mode-common-hook&lt;/span&gt;
(lambda ()
(when (derived-mode-p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c-mode&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c++-mode&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;java-mode&lt;/span&gt;)
(ggtags-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
For people new to the series, the top section sets up the emacs
package manager. After that we install:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Package&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;which-key&lt;/td&gt;
&lt;td&gt;brings up contextual key binding help&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;auto-complete&lt;/td&gt;
&lt;td&gt;just as the name says&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flycheck&lt;/td&gt;
&lt;td&gt;in line, live syntax checking&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yasnippet&lt;/td&gt;
&lt;td&gt;snippets and expansion&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ggtags&lt;/td&gt;
&lt;td&gt;source code navigation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;color-theme&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;moe-theme&lt;/td&gt;
&lt;td&gt;just because&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
The video also show me using &lt;strong&gt;&lt;strong&gt;counsel-ag&lt;/strong&gt;&lt;/strong&gt; which is part of the
swiper/counsel package. You can check that out &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-6-swiper&#34;&gt;here&lt;/a&gt; as well as some
other packages I use like &lt;strong&gt;&lt;strong&gt;smartparens&lt;/strong&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;strong&gt;hungry-delete&lt;/strong&gt;&lt;/strong&gt; and
probably a few more.
&lt;/p&gt;
&lt;p&gt;
You can look at my complete configuration or the other videos for
details.
&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re an experienced C++ developer and use emacs, please share
tips, tricks, and suggestions. I haven&amp;#39;t done serious C++ work in over
a decade and while I did professional development in C in a past life,
never in C++.
&lt;/p&gt;
&lt;p&gt;
The packages used here are not C++ specific - I use them for Java,
Python, Clojure, and Javascript development as well.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the configuration code:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; set up package sources&lt;/span&gt;
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package&lt;/span&gt;)
(setq package-enable-at-startup &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package-archives&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;melpa&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://melpa.org/packages/&amp;#34;&lt;/span&gt;))
(package-initialize)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Bootstrap `use-package&amp;#39;&lt;/span&gt;
(unless (package-installed-p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package&lt;/span&gt;)
(package-refresh-contents)
(package-install &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;;; small interface tweaks&lt;/span&gt;
(setq inhibit-startup-message &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(tool-bar-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;fset&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yes-or-no-p&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y-or-n-p&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f5&amp;gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;revert-buffer&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; bring up help for key bindings&lt;/span&gt;
(use-package which-key
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(which-key-mode))


&lt;span style=&#34;color:#75715e&#34;&gt;;; Auto completion&lt;/span&gt;
(use-package auto-complete
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(progn
(ac-config-default)
(global-auto-complete-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
))


&lt;span style=&#34;color:#75715e&#34;&gt;;; on the fly syntax checking&lt;/span&gt;
(use-package flycheck
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(global-flycheck-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;;; snippets and snippet expansion&lt;/span&gt;
(use-package yasnippet
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(yas-global-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))


&lt;span style=&#34;color:#75715e&#34;&gt;;; tags for code navigation&lt;/span&gt;
(use-package ggtags
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c-mode-common-hook&lt;/span&gt;
(lambda ()
(when (derived-mode-p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c-mode&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c++-mode&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;java-mode&lt;/span&gt;)
(ggtags-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))
)


&lt;span style=&#34;color:#75715e&#34;&gt;;; Theme&lt;/span&gt;
(use-package color-theme
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(use-package moe-theme
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(moe-light)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/7SQmleA4EMo&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Enjoy.
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 31 - elfeed part 3 - macros</title>
      <link>https://cestlaz.github.io/posts/using-emacs-31-elfeed-3/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-31-elfeed-3/</guid>
      <description>&lt;p&gt;
In &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-30-elfeed-2&#34;&gt;part 2&lt;/a&gt; I talked about how I used &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;Hyrdas&lt;/a&gt; to quickly navigate through
elfeed tags. It was a nice step up but the fact that I still had to
manually edit my configuration code for every new tag to update the
hydra was a problem.
&lt;/p&gt;
&lt;p&gt;
Basically, I had to somehow or other, take a list of all the active
tags and with it build a &lt;strong&gt;&lt;strong&gt;defhydra&lt;/strong&gt;&lt;/strong&gt; command that will then make my
Hydra.
&lt;/p&gt;
&lt;p&gt;
Fortunately, emacs, being a lisp, has macros. I&amp;#39;m not talking about
keyboard macros which I talked about in &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-15-macros/#.WLbj5t9idKQ&#34;&gt;episode 15&lt;/a&gt; but rather &lt;a href=&#34;http://wiki.c2.com/?LispMacro&#34;&gt;Lisp
style macros&lt;/a&gt;. Macros let you transform code and then execute the
transformed code.
&lt;/p&gt;
&lt;p&gt;
The example I give in the video:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defmacro infix (a op b)
&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;op &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;b))

(infix &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; evaluates to 11&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This transforms the &lt;strong&gt;&lt;strong&gt;3+8&lt;/strong&gt;&lt;/strong&gt; into &lt;strong&gt;&lt;strong&gt;(+ 3 8)&lt;/strong&gt;&lt;/strong&gt; and then evaluates it to
be 11.
&lt;/p&gt;
&lt;p&gt;
We can use this idea with our Hydra.
&lt;/p&gt;
&lt;p&gt;
We can use the call &lt;strong&gt;&lt;strong&gt;elfeed-db-get-all-tags&lt;/strong&gt;&lt;/strong&gt; to get a list of all
the tags in our database. I decided that if I had an uppercase letter
in the tag, I&amp;#39;d use the lowercase version of that letter as my &amp;#34;hotkey&amp;#34;
and if it didn&amp;#39;t, I&amp;#39;d just use the first letter.
&lt;/p&gt;
&lt;p&gt;
So, given a tag list of:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(active blogs cs eDucation emacs local misc sports star tech unread webcomics)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I&amp;#39;d want a &amp;#34;hotkey&amp;#34; of &lt;strong&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/strong&gt; for logs and &lt;strong&gt;&lt;strong&gt;d&lt;/strong&gt;&lt;/strong&gt; for eDucation.
&lt;/p&gt;
&lt;p&gt;
The routine &lt;strong&gt;&lt;strong&gt;z/hasCap&lt;/strong&gt;&lt;/strong&gt; tests to see if a tag has a capital letter in
it and &lt;strong&gt;&lt;strong&gt;z/get-hydra-option-key&lt;/strong&gt;&lt;/strong&gt; returns the final &amp;#34;hotkey:&amp;#34;
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun z/hasCap (s) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
(let ((case-fold-search &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))
(string-match-p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[[:upper:]]&amp;#34;&lt;/span&gt; s)
))


(defun z/get-hydra-option-key (s)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;returns single upper case letter (converted to lower) or first&amp;#34;&lt;/span&gt;
(interactive)
(let ( (loc (z/hasCap s)))
(if loc
(&lt;span style=&#34;color:#a6e22e&#34;&gt;downcase&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;substring&lt;/span&gt; s loc (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; loc &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;substring&lt;/span&gt; s &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;mz/make-elfeed-cats&lt;/strong&gt;&lt;/strong&gt; takes a list of tags and returns a list of
items where each item is in the form expected by the hydra definition:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +tagname&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tagname&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun mz/make-elfeed-cats (tags)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Returns a list of lists. Each one is line for the hydra configuratio in the form
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(c function hint)&amp;#34;&lt;/span&gt;
(interactive)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;mapcar&lt;/span&gt; (lambda (tag)
(let* (
(tagstring (&lt;span style=&#34;color:#a6e22e&#34;&gt;symbol-name&lt;/span&gt; tag))
(c (z/get-hydra-option-key tagstring))
)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; c (&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(elfeed-search-set-filter) (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +%s&amp;#34;&lt;/span&gt; tagstring) ))tagstring  )))
tags))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Finally, here&amp;#39;s our macro:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defmacro mz/make-elfeed-hydra ()
&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(defhydra mz/hydra-elfeed ()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filter&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;,@&lt;/span&gt;(mz/make-elfeed-cats (elfeed-db-get-all-tags))
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +star&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starred&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt; elfeed-toggle-star &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mark&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@1-day-ago&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Today&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt; bjm/elfeed-save-db-and-bury &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Quit Elfeed&amp;#34;&lt;/span&gt; :color blue)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quit&amp;#34;&lt;/span&gt; :color blue)
))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The line that starts with &lt;strong&gt;&lt;strong&gt;,@&lt;/strong&gt;&lt;/strong&gt; calls the routine that builds lines
of code for all the tags in the database and the macro leaves me with
the defhydra I need.
&lt;/p&gt;
&lt;p&gt;
I then redefine the hydra every time I need it, just in case tags
changed:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun mz/make-and-run-elfeed-hydra ()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
(interactive)
(mz/make-elfeed-hydra)
(mz/hydra-elfeed/body))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and bind &lt;strong&gt;&lt;strong&gt;mz/make-and-run-elfeed-hydra&lt;/strong&gt;&lt;/strong&gt; to j and J in my elfeed
keymap (this code goes in the bind section of my use-package elfeed
section):
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; mz/make-and-run-elfeed-hydra)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; mz/make-and-run-elfeed-hydra)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
As long as I remember to name my tags in a way that they don&amp;#39;t
conflict with one another I can quickly navigate all around elfeed.
&lt;/p&gt;
&lt;p&gt;
Macros FTW!!!!
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the video:
&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/5zuSUbAHH8c&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Enjoy.
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 30 - elfeed part 2 - Hydras</title>
      <link>https://cestlaz.github.io/posts/using-emacs-30-elfeed-2/</link>
      <pubDate>Sat, 25 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-30-elfeed-2/</guid>
      <description>&lt;p&gt;
In &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-29%2520elfeed/&#34;&gt;part 1&lt;/a&gt;, I talked about &lt;a href=&#34;https://github.com/skeeto/elfeed&#34;&gt;elfeed&lt;/a&gt;, a really awesome feed reader for
emacs. Generally, I&amp;#39;m really liking it but there&amp;#39;s been one problem -
not being able to navigate quickly between groups of feeds with a
keystroke or two.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s emacs so there has to be a solution.
&lt;/p&gt;
&lt;p&gt;
Enter &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;hydra&lt;/a&gt; - a terrific emacs package from the same guy who brought
us &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;swiper&lt;/a&gt;, another one of my favorite emacs packages.
&lt;/p&gt;
&lt;p&gt;
Basically, Hydra allows us to create Hydras - a collection of emacs
commands tied o a single prefix along with a nice interface and help
system.
&lt;/p&gt;
&lt;p&gt;
Truth be told, I don&amp;#39;t use hydra as much anymore since &lt;a href=&#34;https://github.com/justbur/emacs-which-key&#34;&gt;which-key&lt;/a&gt;
does such a great job most of the time. Which-key, however, is no help
here.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the code to install hydra along with a some of sample Hydra&amp;#39;s
I use:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package hydra
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Hydra for modes that toggle on and off&lt;/span&gt;
(global-set-key
(kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x t&amp;#34;&lt;/span&gt;)
(defhydra toggle (:color blue)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;toggle&amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; abbrev-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abbrev&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; flyspell-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flyspell&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt; toggle-debug-on-error &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;debug&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; fci-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fCi&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;f&amp;#34;&lt;/span&gt; auto-fill-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fill&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; toggle-truncate-lines &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;truncate&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt; whitespace-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;whitespace&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cancel&amp;#34;&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;;; Hydra for navigation&lt;/span&gt;
(global-set-key
(kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x j&amp;#34;&lt;/span&gt;)
(defhydra gotoline
( :pre (linum-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
:post (linum-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;))
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;goto&amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; (lambda () (interactive)(move-to-window-line-top-bottom &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; (lambda () (interactive)(move-to-window-line-top-bottom &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bottom&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt; (lambda () (interactive)(move-to-window-line-top-bottom)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;middle&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt; (lambda () (interactive)(end-of-buffer)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; recenter-top-bottom &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;recenter&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt; next-line &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;down&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt; (lambda () (interactive) (&lt;span style=&#34;color:#a6e22e&#34;&gt;forward-line&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;))  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;up&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt; goto-line &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;goto-line&amp;#34;&lt;/span&gt;)
))

&lt;span style=&#34;color:#75715e&#34;&gt;;; Hydra for some org-mode stuff&lt;/span&gt;
(global-set-key
(kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c t&amp;#34;&lt;/span&gt;)
(defhydra hydra-global-org (:color blue)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Org&amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; org-timer-start &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Start Timer&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; org-timer-stop &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Stop Timer&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt; org-timer-set-timer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set Timer&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; This one requires you be in an orgmode doc, as it sets the timer for the header&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt; org-timer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Print Timer&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; output timer value to buffer&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt; (org-clock-in &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clock-In&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt; org-clock-out &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clock-Out&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; you might also want (setq org-log-note-clock-out t)&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; org-clock-goto &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clock Goto&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; global visit the clocked task&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; org-capture &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Capture&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; Don&amp;#39;t forget to define the captures you want http://orgmode.org/manual/Capture.html&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; (or )rg-capture-goto-last-stored &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Last Capture&amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Take a look at the &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;Hydra&lt;/a&gt; home page for detailed information.
&lt;/p&gt;
&lt;p&gt;
With Hydra installed, I can creat one for navigating in elfeed:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(defhydra mz/hydra-elfeed ()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filter&amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +cs&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cs&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +emacs&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emacs&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +education&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;education&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago +star&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starred&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt; elfeed-toggle-star &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mark&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@6-months-ago&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt; (elfeed-search-set-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@1-day-ago&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Today&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt; bjm/elfeed-save-db-and-bury &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Quit Elfeed&amp;#34;&lt;/span&gt; :color blue)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quit&amp;#34;&lt;/span&gt; :color blue)
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and add a binding to the elfeed key map:
&lt;/p&gt;
&lt;p&gt;
#+BEGIN_SRC emacs-lisp
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package elfeed
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:bind (:map elfeed-search-mode-map
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; bjm/elfeed-save-db-and-bury)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; bjm/elfeed-save-db-and-bury)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-toggle-star)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-toggle-star)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; mz/hydra-elfeed/body)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; mz/hydra-elfeed/body)))

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;+End_SRC

This isn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t&lt;/span&gt; the actual Hydra I use -- we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt; to that in the next
installment where I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll&lt;/span&gt; show how to make a Hydra on the fly that
contains keys for all your elfeed tags but this is a reasonable example.

Here&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s&lt;/span&gt; the video:

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;+begin_export html
 &amp;lt;iframe width=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;560&amp;#34;&lt;/span&gt; height=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;315&amp;#34;&lt;/span&gt; src=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.youtube.com/embed/tjnK1rkO7RU&amp;#34;&lt;/span&gt; frameborder=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
 &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;+end_export html
 

Enjoy.
Relevant links:
&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; Video series overview page:
&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; http://cestlaz.github.io/stories/emacs
&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; Code:
&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; [[https://github.com/zamansky/using-emacs/tree/master][https://github.com/zamansky/using-emacs/tree/master]]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 29 -elfeed part 1</title>
      <link>https://cestlaz.github.io/posts/using-emacs-29-elfeed/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-29-elfeed/</guid>
      <description>&lt;p&gt;
Since the demise of Google Reader, I&amp;#39;ve been using &lt;a href=&#34;http://feedly.com&#34;&gt;Feedly&lt;/a&gt; to read my
streams. Feedly&amp;#39;s a nice product and it&amp;#39;s been working well for me for
quite some time.
&lt;/p&gt;
&lt;p&gt;
A few days ago, I decided to see what emacs had to offer on the feed
reader front. One solution was Gnus but then I&amp;#39;ve never been able to
get my head around Gnus. Another was &lt;a href=&#34;https://github.com/skeeto/elfeed&#34;&gt;elfeed&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I thought I&amp;#39;d give elfeed a go.
&lt;/p&gt;
&lt;p&gt;
Combined with elfeed-goodies and elfeed-org it&amp;#39;s a pretty nice
solution. You can easily search by either keywords or tags and tags
are particularly easy to set up with elfeed-org.
&lt;/p&gt;
&lt;p&gt;
If I want to display all the items from the last month, I hit &lt;strong&gt;&lt;strong&gt;s&lt;/strong&gt;&lt;/strong&gt; (for
search) and enter the query:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;@6-months-ago&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
For only unread posts:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;@6-months-ago +unread&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
For unread posts tagged emacs:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;@6-months-ago +unread +emacs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And for everything in the past 24 hours, read or not:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;@1-day-ago&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It&amp;#39;s pretty easy and pretty slick. The only thing missing is easy
single key navigation. There&amp;#39;s one solution to that problem over at
&lt;a href=&#34;http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/&#34;&gt;Pragmatic Emacs&lt;/a&gt; and I&amp;#39;ll present another one in the next two posts.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m using some of the code from pragmatic emacs (the functions that start
with &lt;strong&gt;&lt;strong&gt;bjm&lt;/strong&gt;&lt;/strong&gt;) which makes things easier when sharing the elfeed
database on Dropbox (see the Pragmatic Emacs post above for details) and also a couple of routines I found via web
search).
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s my basic configuration:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq elfeed-db-directory &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/shared/elfeeddb&amp;#34;&lt;/span&gt;)


(defun elfeed-mark-all-as-read ()
(interactive)
(mark-whole-buffer)
(elfeed-search-untag-all-unread))


&lt;span style=&#34;color:#75715e&#34;&gt;;;functions to support syncing .elfeed between machines&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;makes sure elfeed reads index from disk before launching&lt;/span&gt;
(defun bjm/elfeed-load-db-and-open ()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrapper to load the elfeed db from disk before opening&amp;#34;&lt;/span&gt;
(interactive)
(elfeed-db-load)
(elfeed)
(elfeed-search-update--force))

&lt;span style=&#34;color:#75715e&#34;&gt;;;write to disk when quiting&lt;/span&gt;
(defun bjm/elfeed-save-db-and-bury ()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrapper to save the elfeed db to disk before burying buffer&amp;#34;&lt;/span&gt;
(interactive)
(elfeed-db-save)
(quit-window))



(defalias &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elfeed-toggle-star&lt;/span&gt;
(elfeed-expose &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;elfeed-search-toggle-all &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;star&lt;/span&gt;))

(use-package elfeed
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:bind (:map elfeed-search-mode-map
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; bjm/elfeed-save-db-and-bury)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; bjm/elfeed-save-db-and-bury)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-toggle-star)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; elfeed-toggle-star)
)
)

(use-package elfeed-goodies
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(elfeed-goodies/setup))


(use-package elfeed-org
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(elfeed-org)
(setq rmh-elfeed-org-files (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/shared/elfeed.org&amp;#34;&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Check out elfeed and make sure to go to the links provided on the main
&lt;a href=&#34;https://github.com/skeeto/elfeed&#34;&gt;elfeed&lt;/a&gt; page.
&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pOFqzK1Ymr4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Enjoy.
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 28 -Rectangles</title>
      <link>https://cestlaz.github.io/posts/using-emacs-28-rectangles/</link>
      <pubDate>Thu, 09 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-28-rectangles/</guid>
      <description>&lt;p&gt;
One of my favorite but little used emacs features is rectangular
editing. It&amp;#39;s little used because I don&amp;#39;t need it all that often. It&amp;#39;s
one of my favorites because when I do need it, it&amp;#39;s just so amazingly
useful.
&lt;/p&gt;
&lt;p&gt;
The idea is you can mark a rectangle of text, cut it and later paste
it.  This means that if you have three columns of text:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
a b c
d e f
g h i
j k l
&lt;/pre&gt;
&lt;p&gt;
You can easily mark the middle column (b e h k) or even just the b e
and h, cut it and paste it elsewhere as a rectangle. You can also open
up a rectangular region (filled with whitespace). There are a couple
of other niceties but that&amp;#39;s the basic idea.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a link to all the functions:
&lt;/p&gt;
&lt;p&gt;
https://www.gnu.org/software/emacs/manual/html_node/emacs/Rectangles.html
&lt;/p&gt;
&lt;p&gt;
And the video:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pcA5NeEudgU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Enjoy.
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 27 - shell and eshell</title>
      <link>https://cestlaz.github.io/posts/using-emacs-27-shell/</link>
      <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-27-shell/</guid>
      <description>&lt;p&gt;
While I use emacs for all all sorts of things, one of the things I
haven&amp;#39;t done much is run shells from within emacs. I&amp;#39;m not sure
why. I&amp;#39;m a command line wonk and adding command line goodness and
emacs together seems like a natural. Maybe it&amp;#39;s because back in the
day I spent a lot of time on MS-DOS systems. You could get a
reasonable Unixy facsimile using tools like the &lt;a href=&#34;https://en.wikipedia.org/wiki/MKS_Toolkit&#34;&gt;MKS toolkit&lt;/a&gt; and I like
so many other young computer scientists wrote our own small shells
when we learned C so I used that insted of command.com.
&lt;/p&gt;
&lt;p&gt;
In any event, I&amp;#39;m trying to use the shell within emacs more.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a quick video showing both &lt;strong&gt;&lt;strong&gt;shell&lt;/strong&gt;&lt;/strong&gt;, which runs whatever your
default shell is in an emacs buffer and &lt;strong&gt;&lt;strong&gt;eshell&lt;/strong&gt;&lt;/strong&gt; which is emacs own
shell.
&lt;/p&gt;
&lt;p&gt;
I use a couple of packages to smooth over a couple of things.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/porterjamesj/virtualenvwrapper.el&#34;&gt;Virtuelenvwrapper&lt;/a&gt; smooths things voer with the python virtaulenv and
virtualenvwrapper linux packages:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package virtualenvwrapper
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(venv-initialize-interactive-shells)
(venv-initialize-eshell))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Only relevant if you use Python and virtualenvs.
&lt;/p&gt;
&lt;p&gt;
and more importantly, &lt;a href=&#34;https://github.com/killdash9/better-shell&#34;&gt;better shell&lt;/a&gt;:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package better-shell
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:bind ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; better-shell-shell)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; better-shell-remote-open)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
cleans things up when using a termianl to connect to a remote machine.
&lt;/p&gt;
&lt;p&gt;
If you use a shell from within emacs as part of your workflow, please
post how, or better, make a video!!!!
&lt;/p&gt;
&lt;p&gt;
Enjoy
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pjhRFMUxBB4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 26 - Google Calendar, Org Agenda</title>
      <link>https://cestlaz.github.io/posts/using-emacs-26-gcal/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-26-gcal/</guid>
      <description>&lt;p&gt;
A while ago I did a couple of videos on how I use org-capture
(&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-23-capture-1/&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-24-capture-2/&#34;&gt;part 2&lt;/a&gt;). I didn&amp;#39;t get into a big part of org-capture - how I
use org-mode and capture to manage my calendar and todo lists.
&lt;/p&gt;
&lt;p&gt;
I was waiting to see if I liked my current setup - using &lt;a href=&#34;https://github.com/myuhe/org-gcal.el&#34;&gt;org-gcal&lt;/a&gt; to
sync with my Google Calendar for appointments while using my main org
file for my todo list.
&lt;/p&gt;
&lt;p&gt;
Coincidentally, Rainer König recently put up a video on how he &lt;a href=&#34;https://www.youtube.com/watch?v=cIzzjSaq2N8&amp;amp;amp;list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE&amp;amp;amp;index=33&#34;&gt;syncs
with his Google calendar&lt;/a&gt;. He uses a different method than the one I
present in this video so make sure to check out his approach. In fact,
you should check out his entire &lt;a href=&#34;https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE&#34;&gt;series on org-mode&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the code I use install org-gcal. The video steps through
setting up things on the Google side. You&amp;#39;ll have to replace the
&lt;strong&gt;&lt;strong&gt;client ID&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;client secrets&lt;/strong&gt;&lt;/strong&gt; in the code below as well as use
your calendar name and whatever org file you want to sync with.
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq package-check-signature &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)


(use-package org-gcal
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(setq org-gcal-client-id &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;oauth 2.0 client ID&amp;#34;&lt;/span&gt;
org-gcal-client-secret &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client secret&amp;#34;&lt;/span&gt;
org-gcal-file-alist &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zamansky@gmail.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/gcal.org&amp;#34;&lt;/span&gt;))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I use these two hooks to sync things semi-automatically. The first
hook syncs whenever I load the agenda. Since this happens in the
background, if I just added something to my calendar, I might have to
reload the agenda by hitting &lt;strong&gt;&lt;strong&gt;r&lt;/strong&gt;&lt;/strong&gt; in the agenda view.
&lt;/p&gt;
&lt;p&gt;
The second hook syncs with my Google calendar when I capture.
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-agenda-mode-hook&lt;/span&gt; (lambda () (org-gcal-sync) ))
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-capture-after-finalize-hook&lt;/span&gt; (lambda () (org-gcal-sync) ))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Here are the rest of my settings. The org files I want to include in
my agenda views:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
gcal.org – the one I&amp;#39;m syncing
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
i.org – my main org file for todo items (the todo capture places
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
things in here)
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
schedule.org – my old schedule before I was syncing with
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Google. Not active anymore. I should probably remove it.
&lt;/p&gt;
&lt;p&gt;
Also, my capture settings:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-agenda-files (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/gcal.org&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/schedule.org&amp;#34;&lt;/span&gt;))


(setq org-capture-templates
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Appointment&amp;#34;&lt;/span&gt; entry (file  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/gcal.org&amp;#34;&lt;/span&gt; )
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Link&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/links.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Links&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %? %^L %^g \n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog idea&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog Topics:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;To Do Item&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;To Do&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* TODO %?\n%u&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Note&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Note space&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%u&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Journal&amp;#34;&lt;/span&gt; entry (file+datetree &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/journal.org&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\nEntered on %U\n  %i\n  %a&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Screencast&amp;#34;&lt;/span&gt; entry (file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/screencastnotes.org&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%i\n&amp;#34;&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The end result is that I can add an event in my Google calendar (or
accept a calendar invite) and it appears in my org-mode
agenda. Likewise, I can add a scheduled event using capture and it
will sync up to Google. I can also just add an event by editing
gcal.org but then would have to run &lt;strong&gt;&lt;strong&gt;org-gcal-post-at-point&lt;/strong&gt;&lt;/strong&gt; to send
it up to Google.
&lt;/p&gt;
&lt;p&gt;
Now, I can use bring up a regular agenda &lt;strong&gt;&lt;strong&gt;C-a a&lt;/strong&gt;&lt;/strong&gt;, my todo list &lt;strong&gt;&lt;strong&gt;C-a
t&lt;/strong&gt;&lt;/strong&gt; or by adding a custom agenda command:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-agenda-custom-commands
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Simple agenda view&amp;#34;&lt;/span&gt;
((agenda &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
(alltodo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
a combined agenda and todo view using &lt;strong&gt;&lt;strong&gt;C-a n&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
Finally, there&amp;#39;s &lt;a href=&#34;https://github.com/kiwanami/emacs-calfw&#34;&gt;calfw&lt;/a&gt;. It&amp;#39;s a nice tool to view calendars in
Google. I don&amp;#39;t use it much anymore but it is nice:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package calfw
:ensure &lt;span style=&#34;color:#75715e&#34;&gt;;TODO:&lt;/span&gt;
:config
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;calfw&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;calfw-org&lt;/span&gt;)
(setq cfw:org-overwrite-default-keybinding &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;calfw-ical&lt;/span&gt;)

(defun mycalendar ()
(interactive)
(cfw:open-calendar-buffer
:contents-sources
(&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; (cfw:org-create-source &amp;#34;Green&amp;#34;)  ; orgmode source&lt;/span&gt;
(cfw:ical-create-source &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gcal&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://somecalnedaraddress&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IndianRed&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; devorah calender&lt;/span&gt;
(cfw:ical-create-source &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gcal&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://anothercalendaraddress&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IndianRed&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; google calendar ICS&lt;/span&gt;
)))
(setq cfw:org-overwrite-default-keybinding &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))

(use-package calfw-gcal
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;calfw-gcal&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Enjoy.
&lt;/p&gt;
&lt;p&gt;
Better version:
&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/vO_RF2dK7M0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Old, bad version:
&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/RyNBtfu9AJ4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 25 - Tramp</title>
      <link>https://cestlaz.github.io/posts/using-emacs-25-tramp/</link>
      <pubDate>Mon, 26 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-25-tramp/</guid>
      <description>&lt;p&gt;
Today&amp;#39;s video talks about using emacs &lt;a href=&#34;https://www.emacswiki.org/emacs/TrampMode&#34;&gt;Tramp&lt;/a&gt; mode.
&lt;/p&gt;
&lt;p&gt;
Tramp mode allows you to edit remote files using your local emacs. I usually do this over ssh.
&lt;/p&gt;
&lt;p&gt;
To edit a file on a machine &lt;strong&gt;&lt;strong&gt;www.cstuy.org&lt;/strong&gt;&lt;/strong&gt; I would first
&lt;strong&gt;&lt;strong&gt;find-file&lt;/strong&gt;&lt;/strong&gt; using &lt;strong&gt;&lt;strong&gt;C-c C-f&lt;/strong&gt;&lt;/strong&gt; and then for the file name to open:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;/ssh:www.cstuy.org:/home/zamansky/sc/testfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
this would open the file &lt;strong&gt;&lt;strong&gt;testfile&lt;/strong&gt;&lt;/strong&gt; in the absolute directory
&lt;strong&gt;&lt;strong&gt;/home/zamansky/sc&lt;/strong&gt;&lt;/strong&gt;. If my username on the remote machine is
different:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;/ssh:username@www.cstuy.org:/home/zamansky/sc/testfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And I can also work relative to my home directory:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;/ssh:username@www.cstuy.org:sc/testfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
If I just hit enter after the machine name and &lt;strong&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/strong&gt; -
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;/ssh:username@www.cstuy.org:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I end up in a dired buffer on the remote machine.
&lt;/p&gt;
&lt;p&gt;
Likewise if I run a &lt;strong&gt;&lt;strong&gt;shell&lt;/strong&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;strong&gt;eshell&lt;/strong&gt;&lt;/strong&gt; in the tramp buffer, it
will run the shell on the remote machine. In the video I showed how
shell didn&amp;#39;t work because locally, I&amp;#39;m configured to use zsh and I
don&amp;#39;t have zsh installed remotely. Eshell, however, worked fine.
&lt;/p&gt;
&lt;p&gt;
Using tramp in this way gives us all of the power of our local emacs
configuration to edit a file on a remote machine.
&lt;/p&gt;
&lt;p&gt;
You can also use tramp to edit local files as root using sudo:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;sudo::/tmp/sc/rootfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Note the double colon.
&lt;/p&gt;
&lt;p&gt;
Finally, you can do the double-whammy - remote root editing:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;ssh::www.cstu.org|sudo:www.cstuy.org:/home/zamansky/sc/rootfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
If you use zsh and any of this freezes, just do a search on &amp;#34;zsh
tramp&amp;#34; and the top couple of hits will tell you what to add to your
configuration files to fix things.
&lt;/p&gt;
&lt;p&gt;
Finally, I mentioned in the video that I don&amp;#39;t use tramp all that much
anymore. That&amp;#39;s mostly because I don&amp;#39;t do much remote editing
anymore. I used it more when I was administering a number of machines
at Stuyvesant.
&lt;/p&gt;
&lt;p&gt;
I still use it periodically, but I also use &lt;a href=&#34;https://github.com/libfuse/sshfs&#34;&gt;sshfs&lt;/a&gt;, a Linux tool (which
may be available for other operating systems) that allows me to mount
a directory tree from a remote machine and use it on my local machine.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Iqh50fgbIVk&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 24 - Org Capture 2</title>
      <link>https://cestlaz.github.io/posts/using-emacs-24-capture-2/</link>
      <pubDate>Sat, 03 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-24-capture-2/</guid>
      <description>&lt;p&gt;
Not much in today&amp;#39;s actual post. The video is a continuation of the last one on &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-23-capture-1&#34;&gt;org-capture&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
The video goes over how I set things up to pop up a new frame to do a
capture even if emacs isn&amp;#39;t on screen (as long as it&amp;#39;s running) by
hitting &lt;strong&gt;&lt;strong&gt;F1&lt;/strong&gt;&lt;/strong&gt;. I would  have preferred to bind to &lt;strong&gt;&lt;strong&gt;C-c c&lt;/strong&gt;&lt;/strong&gt; - the
same as within emacs but I havn&amp;#39;t figured out how to do that in Ubuntu
or Mint Linux yet.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the elisp code for the configuration file to do the heavy
lifting. I can&amp;#39;t for th elife of me remember who&amp;#39;s blog I found it
on. If anyone knows, please leave a comment - I&amp;#39;d like to give credit
where credit&amp;#39;s due:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defadvice org-capture-finalize
(after delete-capture-frame activate)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Advise capture-finalize to close the frame&amp;#34;&lt;/span&gt;
(if (&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;capture&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;frame-parameter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&lt;/span&gt;))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;delete-frame&lt;/span&gt;)))

(defadvice org-capture-destroy
(after delete-capture-frame activate)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Advise capture-destroy to close the frame&amp;#34;&lt;/span&gt;
(if (&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;capture&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;frame-parameter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&lt;/span&gt;))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;delete-frame&lt;/span&gt;)))

(use-package noflet
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; )
(defun make-capture-frame ()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Create a new frame and run org-capture.&amp;#34;&lt;/span&gt;
(interactive)
(make-frame &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;capture&amp;#34;&lt;/span&gt;)))
(select-frame-by-name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;capture&amp;#34;&lt;/span&gt;)
(delete-other-windows)
(noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
(org-capture)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The command I bind to the keyboard shortcut in my window manager:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;emacsclient -ne &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(make-capture-frame)&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
There will be a third capture video in a few weeks where I&amp;#39;ll talk
about scheduling and agendas. Right now, I&amp;#39;m playing with org-gcal to
sync with my Google calendar and want to figure out a config I&amp;#39;m happy
with before making that video.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/gjr9mP01oWE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 23 - Org Capture 1</title>
      <link>https://cestlaz.github.io/posts/using-emacs-23-capture-1/</link>
      <pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-23-capture-1/</guid>
      <description>&lt;p&gt;
Org mode has an amazing feature - &lt;strong&gt;&lt;strong&gt;org-capture&lt;/strong&gt;&lt;/strong&gt;. I only started
using it recently but it&amp;#39;s really awesome.
&lt;/p&gt;
&lt;p&gt;
What took me so long?
&lt;/p&gt;
&lt;p&gt;
Probably that the manual seemed a little intimidating.
&lt;/p&gt;
&lt;p&gt;
It really isn&amp;#39;t hard, though. Combined with what I&amp;#39;ll go over in the
next video and post (and a future one for Google calendar sync) it&amp;#39;s
what I use for:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
recording blog ideas
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
managing bookmarks
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
taking short Notes
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
managing my calendar.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I use the binding:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c c&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-capture&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
By default, running org-capture brings up a form to capture a &amp;#34;task&amp;#34;
but things get really cool when you start making your own capture
templates. With capture templates, you can speed up recording
information and then tell org-mode to store it where you want it.
&lt;/p&gt;
&lt;p&gt;
Here are my template settings.
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(setq org-capture-templates
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Appointment&amp;#34;&lt;/span&gt; entry (file  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/gcal.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Appointments&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Note&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/notes.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Notes&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* Note %?\n%T&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Link&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/links.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Links&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %? %^L %^g \n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog idea&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog Topics:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;To Do Item&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;To Do Items&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Journal&amp;#34;&lt;/span&gt; entry (file+datetree &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/journal.org&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\nEntered on %U\n  %i\n  %a&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Screencast&amp;#34;&lt;/span&gt; entry (file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/screencastnotes.org&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%i\n&amp;#34;&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Let&amp;#39;s look at the &lt;strong&gt;&lt;strong&gt;Blog&lt;/strong&gt;&lt;/strong&gt; entry:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog idea&amp;#34;&lt;/span&gt; entry (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blog Topics:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %?\n%T&amp;#34;&lt;/span&gt; :prepend &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It&amp;#39;s a list with a bunch of options. The first string &lt;strong&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/strong&gt; is the
key to type to select this template, &lt;strong&gt;&lt;strong&gt;Blog idea&lt;/strong&gt;&lt;/strong&gt; is the actual name
for this template.
&lt;/p&gt;
&lt;p&gt;
The next item, &lt;strong&gt;&lt;strong&gt;entry&lt;/strong&gt;&lt;/strong&gt; describes the type of template you&amp;#39;re
creating. &lt;strong&gt;&lt;strong&gt;entry&lt;/strong&gt;&lt;/strong&gt; says you&amp;#39;re going to create an org node with a
headline which can then be added to an org-file. You can also have
your template create things like an org list &lt;strong&gt;&lt;strong&gt;item&lt;/strong&gt;&lt;/strong&gt; a checkbox
&lt;strong&gt;&lt;strong&gt;checkitem&lt;/strong&gt;&lt;/strong&gt; or even &lt;strong&gt;&lt;strong&gt;plain&lt;/strong&gt;&lt;/strong&gt; text. You can see the full set of
options &lt;a href=&#34;http://orgmode.org/manual/Template-elements.html#Template-elements&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Next, in parentheses, you have the target - where to store the captured
info. The &lt;strong&gt;&lt;strong&gt;Blog idea&lt;/strong&gt;&lt;/strong&gt; template says &lt;strong&gt;&lt;strong&gt;file+headline&lt;/strong&gt;&lt;/strong&gt; followed by a
filename in quotes and a headline in quotes. This says to store the
new org heading you&amp;#39;re capturing in the file
&amp;#34;~/Dropbox/orgfiles/i.org&amp;#34; under the heading &amp;#34;Blog Topics:&amp;#34; Contrast
this to the &lt;strong&gt;&lt;strong&gt;appointments&lt;/strong&gt;&lt;/strong&gt; template which just specifies &lt;strong&gt;&lt;strong&gt;file&lt;/strong&gt;&lt;/strong&gt;
and a filename. The &lt;strong&gt;&lt;strong&gt;appointments&lt;/strong&gt;&lt;/strong&gt; template will just append the new
appointment to its specified file whereas &lt;strong&gt;&lt;strong&gt;Blog idea&lt;/strong&gt;&lt;/strong&gt; will prepend
(due to the &lt;strong&gt;&lt;strong&gt;:prepend&lt;/strong&gt;&lt;/strong&gt; option at the end of the template) to the
&amp;#34;Blog Topics:&amp;#34; heading in &lt;strong&gt;&lt;strong&gt;i.org&lt;/strong&gt;&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
After this we have the actual template: &amp;#34;* %?\n%T&amp;#34; - the %? and %T are
placeholders for substitutions. The &lt;strong&gt;&lt;strong&gt;%T&lt;/strong&gt;&lt;/strong&gt; prompts for a date with a
timestamp and the &lt;strong&gt;&lt;strong&gt;%?&lt;/strong&gt;&lt;/strong&gt; is where to leave the cursor for final input
before saving the capture.
&lt;/p&gt;
&lt;p&gt;
Finally, &lt;strong&gt;&lt;strong&gt;:prepend&lt;/strong&gt;&lt;/strong&gt; and other options can be found at the above link.
&lt;/p&gt;
&lt;p&gt;
All the substitutions can be found in &lt;a href=&#34;http://orgmode.org/manual/Template-expansion.html#Template-expansion&#34;&gt;the docs&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Once you&amp;#39;ve set up your templates, it&amp;#39;s quick and easy to capture
information.
&lt;/p&gt;
&lt;p&gt;
This video shows the basics. The next one shows how to pop up a
capture even when you&amp;#39;re not in emacs and how I use org-capture to
maintain my web bookmarks.
&lt;/p&gt;
&lt;p&gt;
More information on capture templates can be found &lt;a href=&#34;http://orgmode.org/manual/Capture-templates.html&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/-wPfxuxIfeU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 21 - web mode</title>
      <link>https://cestlaz.github.io/posts/using-emacs-21-web-mode/</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-21-web-mode/</guid>
      <description>&lt;p&gt;
Quick post today.
&lt;/p&gt;
&lt;p&gt;
The video goes over web-mode - my preferred weapon for html and all the goodies you embed in an html file.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s multi-modal so it acts sensibly regardless of wether you&amp;#39;re editing html, css, javascript or even templates in a single file.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/strong&gt; In the video, web-mode wasn&amp;#39;t automatically inserting
quotes. I had to set hte following variable to fix this:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-listp&#34;&gt;
&lt;pre&gt;&lt;code class=&#34;language-emacs-listp&#34; data-lang=&#34;emacs-listp&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-emacs-listp&#34; data-lang=&#34;emacs-listp&#34;&gt;(setq web-mode-enable-auto-quoting t)&lt;/code&gt;&lt;/pre&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Giving the final configuration I&amp;#39;m currently using:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package web-mode
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;auto-mode-alist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\.html?\\&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; web-mode))
(setq web-mode-engines-alist
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;django&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\.html\\&amp;#39;&amp;#34;&lt;/span&gt;)))
(setq web-mode-ac-sources-alist
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (ac-source-css-property))
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;html&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (ac-source-words-in-buffer ac-source-abbrev))))

(setq web-mode-enable-auto-closing &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(setq web-mode-enable-auto-quoting &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;; this fixes the quote problem I mentioned&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The web-mode &lt;a href=&#34;http://web-mode.org&#34;&gt;documentation&lt;/a&gt; has more information including a nice chart of all the key bindings.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/69bQa5n23jc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 22 - emacsclient</title>
      <link>https://cestlaz.github.io/posts/using-emacs-22-emacsclient/</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-22-emacsclient/</guid>
      <description>&lt;p&gt;
Another quick hit today.
&lt;/p&gt;
&lt;p&gt;
This video is really setting the stage for hte next two, where I talk about org-mode capturing.
&lt;/p&gt;
&lt;p&gt;
Today, we&amp;#39;re demoing the use of the emacs server and client.
&lt;/p&gt;
&lt;p&gt;
Back in the old days, emacs took a LOOONG time to load. A complex
conviguration could take on the order of 10 to 20 seconds. This
resulted in people loading emacs at the start of the day and leaving
it up forever. While load times aren&amp;#39;t much of an issue anymore, it&amp;#39;s
still nice to leave emacs around all the time.
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s where running emacs as a server comes in.. I set up a keyboard shortcut my window manager to run:
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;emacsclient -a &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; -c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Rather than trying to run emacs, this tries to connect to an already
running emacs server. The &lt;strong&gt;&lt;strong&gt;-c&lt;/strong&gt;&lt;/strong&gt; creates a new frame. Instead if you
use &lt;strong&gt;&lt;strong&gt;-t&lt;/strong&gt;&lt;/strong&gt; it will open emacs in the terminal. The &lt;strong&gt;&lt;strong&gt;-a &amp;#34;&amp;#34;&lt;/strong&gt;&lt;/strong&gt; tells
emacs to run itself as a server (daemon) if it isn&amp;#39;t already running.
&lt;/p&gt;
&lt;p&gt;
Later on, running &lt;strong&gt;&lt;strong&gt;emacsclient -c&lt;/strong&gt;&lt;/strong&gt; will very quickly bring up a new frame to the server.
&lt;/p&gt;
&lt;p&gt;
In addition to instant loading, Running emacs this way has the
advantage, or some may say disadvantage of keeping buffers around
forever since you just keep emacs up and running.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/9AHGsCtsClg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 20 - yanking</title>
      <link>https://cestlaz.github.io/posts/using-emacs-20-yanking/</link>
      <pubDate>Sun, 13 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-20-yanking/</guid>
      <description>&lt;p&gt;
Today&amp;#39;s video is a bit of a follow up on the last one as well as a few
miscillaneous configuration.
&lt;/p&gt;
&lt;p&gt;
We got some comments on alternate ways to load a file if it exists -
it&amp;#39;s always cool to see how different people end up doing similar things.
&lt;/p&gt;
&lt;p&gt;
We then talk about three little configurations. Two I found out about
reading Jon Sander&amp;#39;s (jcs) blog &lt;a href=&#34;http://irreal.org/blog&#34;&gt;Irreal&lt;/a&gt;. Jon&amp;#39;s blog is a terrific
source of emacs info - if you don&amp;#39;t subscribe, you should.
&lt;/p&gt;
&lt;p&gt;
I go over using counsel for working with the kill-ring. The command
counsel-yank-pop acts as a replamcement for yank-pop and it lets you
easily yank anything from the kill ring - not just the most previously
killed/whacked piece.
&lt;/p&gt;
&lt;p&gt;
You just hit &lt;strong&gt;&lt;strong&gt;M-y&lt;/strong&gt;&lt;/strong&gt; and then either keep hitting it or use up and
down to select what you want to yank.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the original post from Irreal: &lt;a href=&#34;http://irreal.org/blog/?p=5707&#34;&gt;http://irreal.org/blog/?p=5707&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I then briefly talk about smoothing things over between the system
clipboard and the kill ring, also from Irreal:
&lt;a href=&#34;http://irreal.org/blog/?p=5702&#34;&gt;http://irreal.org/blog/?p=5702&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Finally, I talk about auto-revert-mode - this monitors files on your
file system and when they change, they reload your buffer. I find this
very useful to keep multiple machines in sync when I&amp;#39;m working with
files in a could based filesystem like Dropbox or Owncloud.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/LReZI7VAy8w&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 19 - moving to a live config</title>
      <link>https://cestlaz.github.io/posts/using-emacs-19-live/</link>
      <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-19-live/</guid>
      <description>&lt;p&gt;
Some of the videos I want to make are going to be much easier to do if
I&amp;#39;m working in my own account where my whole file tree is available.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s also a little annoying changing between my full emacs config and
the one I&amp;#39;m developing here.
&lt;/p&gt;
&lt;p&gt;
So, I decided to move to this config for my real config and as I make
more videos move parts of my old configuration over to this new one.
&lt;/p&gt;
&lt;p&gt;
The only problem is that I &lt;strong&gt;&lt;strong&gt;need&lt;/strong&gt;&lt;/strong&gt; some of my current config right
now – things like my email setup.
&lt;/p&gt;
&lt;p&gt;
This video talks about how I&amp;#39;m going to set things up to take care of
everything.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/8RwQNXOjSis&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Flask - deploying to DigitalOcean</title>
      <link>https://cestlaz.github.io/posts/digitaloceanflask/</link>
      <pubDate>Tue, 08 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/digitaloceanflask/</guid>
      <description>
&lt;p&gt;
This post points to the next three videos in the Flask series.
&lt;/p&gt;
&lt;p&gt;
The first covers setting up a droplet (virtual server) on
&lt;a href=&#34;http://digitalocean.com&#34;&gt;DigitalOcean&lt;/a&gt;. The second, deploying a flask application using &lt;a href=&#34;http://gunicorn.org/&#34;&gt;Green
Unicorn&lt;/a&gt;, and the third, using &lt;a href=&#34;https://github.com/libfuse/sshfs&#34;&gt;sshfs&lt;/a&gt; to remotely mount your files from
your DO box to your local machine and how to set up DNS using &lt;a href=&#34;http://freedns.afraid.org&#34;&gt;FreeDNS&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
To help you on your way with DigitalOcean, here are links to a few of
their tutorials
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-16-04&#34;&gt;Server Setup (Ubuntu)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-connect-to-your-droplet-with-ssh%0A&#34;&gt;Connecting to your droplet with ssh&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-sqet-up-ssh-keys--2&#34;&gt;Setting up ssh keys&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.digitalocean.com/community/tutorial_series/getting-started-with-linux&#34;&gt;Getting started with Linux (series)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
In general, there are lots of great tutorials and guides at the
&lt;a href=&#34;http://digitalocean.com/community&#34;&gt;Digital Ocean Community&lt;/a&gt;.
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Setting up a Droplet
&lt;/h2&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/LOS8PscXhz8&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Deploying with Gunicorn
&lt;/h2&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/oum5Kh-69pg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
sshfs and FreeDNS
&lt;/h2&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/aha2r5I18i0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 18 - Narrowing and iedit</title>
      <link>https://cestlaz.github.io/posts/using-emacs-18-narrow/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-18-narrow/</guid>
      <description>&lt;p&gt;
I meant to cover these last time but decided not to so as to keep the
videos to about 10 minutes each.
&lt;/p&gt;
&lt;p&gt;
First up this time round is &lt;a href=&#34;https://github.com/victorhge/iedit&#34;&gt;iedit&lt;/a&gt; - a really cool mode that lets you
select all the instances of the marked selection at the same time and
edit them all at once. By default it&amp;#39;s bound to &lt;strong&gt;&lt;strong&gt;C-l&lt;/strong&gt;&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
For example, let&amp;#39;s say you had the following code:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You could mark one instance of &lt;strong&gt;&lt;strong&gt;somevar&lt;/strong&gt;&lt;/strong&gt;, hit &lt;strong&gt;&lt;strong&gt;C-;&lt;/strong&gt;&lt;/strong&gt; and you&amp;#39;d be
editing them all at once. When you&amp;#39;re done, you hit &lt;strong&gt;&lt;strong&gt;C-;&lt;/strong&gt;&lt;/strong&gt; again and
everything is un-selected.
&lt;/p&gt;
&lt;p&gt;
There are other ways to modify multiple instances of a selection. You
can always search and replace or use Magnar Sveen&amp;#39;s really cool
&lt;a href=&#34;https://github.com/magnars/multiple-cursors.el&#34;&gt;multiple cursors&lt;/a&gt; package and I&amp;#39;m sure there are others but I like
iedit since it&amp;#39;s small and simple. It also works for rectangular
editing but I didn&amp;#39;t cover that in the video. I&amp;#39;ll probably demo it
when I cover rectangular editing in general.
&lt;/p&gt;
&lt;p&gt;
Iedit has limitations. For insance, since it works globally, it isn&amp;#39;t
perfect for renaming variables. If the above code snippet was part of
a larger program with many other instances of &lt;strong&gt;&lt;strong&gt;somevar&lt;/strong&gt;&lt;/strong&gt;, iedit
wouldn&amp;#39;t, by itself, be as useful.
&lt;/p&gt;
&lt;p&gt;
You could reach for a language specific refactoring package but for
me, that&amp;#39;s where &lt;strong&gt;&lt;strong&gt;narrowing&lt;/strong&gt;&lt;/strong&gt; comes in. You can mark a region and
tell emcas to &lt;strong&gt;&lt;strong&gt;narrow-to-region&lt;/strong&gt;&lt;/strong&gt; which hides everything outside the
region and temporarily (until you &lt;strong&gt;&lt;strong&gt;widen&lt;/strong&gt;&lt;/strong&gt;) treats the region as the
whole document.
&lt;/p&gt;
&lt;p&gt;
So, you could narrow to the section of code you want to edit and then
use iedit from within.
&lt;/p&gt;
&lt;p&gt;
To make things easier, I grabed &lt;a href=&#34;http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html&#34;&gt;narrow-or-winden-dwim&lt;/a&gt; from &lt;a href=&#34;http://endlessparentheses.com/&#34;&gt;Endless
Parentheses&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I think the video makes the behaviour pretty clear.
&lt;/p&gt;
&lt;p&gt;
Enjoy
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/xne0kS1DfVs&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 17 - misc small packages</title>
      <link>https://cestlaz.github.io/posts/using-emacs-17-misc/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-17-misc/</guid>
      <description>
&lt;p&gt;
I&amp;#39;m working on getting enough of my real configuration into this
series so that I can dump my current one and use this one all them
time and grow it back up an episode at a time.
&lt;/p&gt;
&lt;p&gt;
I think we&amp;#39;re almost there.
&lt;/p&gt;
&lt;p&gt;
This time, we&amp;#39;re looking at a few small packages that I use all the
time.
&lt;/p&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Highlight line Mode
&lt;/h3&gt;
&lt;div class=&#34;src src-emacs-listp&#34;&gt;
&lt;pre&gt;&lt;code class=&#34;language-emacs-listp&#34; data-lang=&#34;emacs-listp&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-emacs-listp&#34; data-lang=&#34;emacs-listp&#34;&gt;(global-hl-line-mode t)&lt;/code&gt;&lt;/pre&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
this turns on highlight line mode.  It makes it easy to see the line
the cursor&amp;#39;s on. Nothing huge, I just like it.
&lt;/p&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
&lt;a href=&#34;https://github.com/Malabarba/beacon&#34;&gt;Beacon mode&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/Malabarba/beacon&#34;&gt;Beacon mode&lt;/a&gt; flashes the cursor whenever you scroll. It makes things
easy to locate the cursor when scrolling
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; flashes the cursor&amp;#39;s line when you scroll&lt;/span&gt;
(use-package beacon
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(beacon-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;; this color looks good for the zenburn theme but not for the one&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; I&amp;#39;m using for the videos&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; (setq beacon-color &amp;#34;#666600&amp;#34;)&lt;/span&gt;
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
&lt;a href=&#34;https://github.com/nflath/hungry-delete&#34;&gt;Hungry Delete mode&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/nflath/hungry-delete&#34;&gt;This mode&lt;/a&gt; deletes all the whitespace after the cursor (or before it)
when you use delete or backspace.
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; deletes all the whitespace when you hit backspace or delete&lt;/span&gt;
(use-package hungry-delete
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(global-hungry-delete-mode))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
&lt;a href=&#34;https://github.com/magnars/expand-region.el&#34;&gt;Expand Region&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/magnars&#34;&gt;Magnar Sveen&amp;#39;s&lt;/a&gt; awesome expand region mode is a must have. He also
wrote the amazing &lt;a href=&#34;https://github.com/magnars/multiple-cursors.el&#34;&gt;multiple cursors&lt;/a&gt; package. I highly recommend
checking out his work.
&lt;/p&gt;
&lt;p&gt;
Expand region expands the marked region by semantic units. It&amp;#39;s my go
to way of marking text for manipulation
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; expand the marked region in semantic increments (negative prefix to reduce region)&lt;/span&gt;
(use-package expand-region
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-=&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;er/expand-region&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I also tried to look at aggressive indent but that had some problems
so we&amp;#39;ll come back to that later.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/vKIFi1h0I5Y&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Setting up Linux for Flask Web Development</title>
      <link>https://cestlaz.github.io/posts/flask-setup-virtualenv/</link>
      <pubDate>Fri, 14 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/flask-setup-virtualenv/</guid>
      <description>&lt;p&gt;
Those laptops that my Hunter students were supposed to get have
finally arrived. We&amp;#39;re distributing them on Monday. Each student will
have a Dell laptop running Ubuntu 16.04 for as long as they&amp;#39;re in the
program.
&lt;/p&gt;
&lt;p&gt;
This means we can finally start using the web as a way of displaying
and sharing our projects.
&lt;/p&gt;
&lt;p&gt;
For this type of web development, I&amp;#39;m a big fan of using &lt;a href=&#34;http://flask.pocoo.org&#34;&gt;Flask&lt;/a&gt;. Flask
is a Python microframework. The easiest analogy is saying it&amp;#39;s like
Ruby on rails but in Python. That&amp;#39;s close enough for our purposes.
&lt;/p&gt;
&lt;p&gt;
I much prefer Python to Ruby as a teaching tool because it leads to
roads going in all sorts of directions so it was merely a matter of
figuring out which framework or platform to use. I found Django to be
far too big, cumbersome, and all encompasing while on the other hand,
&lt;a href=&#34;http://werkzeug.pocoo.org/&#34;&gt;Werkzeug&lt;/a&gt;, which Flask is based on is a little too low level.
&lt;/p&gt;
&lt;p&gt;
Flask hit the sweet spot. Easy routing, session and form handling,
templates, pretty much everything I was looking for but very
unopinionated and open ended. Perfect for teaching and learning and
perfect for lightweight projects. The sourecode is also
straightforward enough for a student to explore.
&lt;/p&gt;
&lt;p&gt;
Below is a video going over setting up Linux from right after an
install to use the python virtualenv package. The next video will go
over installing Flask and setting up a simple application. Later, I&amp;#39;ll
post a video on deployment to a &lt;a href=&#34;http://digitalocean.com&#34;&gt;Digital Ocean&lt;/a&gt; Droplet.
&lt;/p&gt;
&lt;p&gt;
Here are some notes relating to the video.
&lt;/p&gt;
&lt;p&gt;
First, go to your &amp;#34;software sources&amp;#34; or &amp;#34;software updates&amp;#34;
application from the menu and select all the sources (as described n
the video)
&lt;/p&gt;
&lt;p&gt;
To update a new system:
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo apt-get update
sudo apt-get upgrade
sudo apt-get dist-upgade&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
To install the most recent emacs snapshot
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo apt-add repository -y ppa:ubuntu-lisp
sudo apt-get update
sudo apt-get install emacs-snapshot&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
To install python pip (used to install other python packages)
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo apt-get install python-pip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and then to install the virtualenv packages
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo pip install virtualenv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
To create a python3 virtual environment
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;pip install -p python3 venv-folder&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
You can activate the envorinment (assuming you create the folder under
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
your home directory):
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;source ~/venv-folder/bin/activate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And to deactivate it, from the activated terminal
&lt;/p&gt;
&lt;div class=&#34;src src-sh&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;deactivate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Here&amp;#39;s the video. Next time, we&amp;#39;ll install Flask into an virtual
environment.
&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/cEqB4pkR1c4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 16 - Undo Tree</title>
      <link>https://cestlaz.github.io/posts/using-emacs-16-undo-tree/</link>
      <pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-16-undo-tree/</guid>
      <description>&lt;p&gt;
If you use emacs, you should keep an eye on Jon Snader&amp;#39;s &lt;a href=&#34;http://irreal.org/blog/&#34;&gt;blog&lt;/a&gt;,
&lt;a href=&#34;http://irreal.org/blog/&#34;&gt;irreal.org&lt;/a&gt;. A few days he posted on &lt;a href=&#34;http://irreal.org/blog/?p=5621&#34;&gt;Undo Tree&lt;/a&gt; - a package that extends
Emacs&amp;#39;s built in undo functionality.
&lt;/p&gt;
&lt;p&gt;
Basic emacs has undo, bound to &lt;strong&gt;&lt;strong&gt;C-/&lt;/strong&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;strong&gt;C-_&lt;/strong&gt;&lt;/strong&gt; but that&amp;#39;s about
it. Undo tree, which you can set up with:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package undo-tree
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(global-undo-tree-mode))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
adds two key features. First is redo, which you get by adding the
shift key to the undo keychords.
&lt;/p&gt;
&lt;p&gt;
The other, is the visual undo tree. You can bring that up wit &lt;strong&gt;&lt;strong&gt;C-x
u&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
Once you bring up the undo tree, you can use the up and down arrows or
&lt;strong&gt;&lt;strong&gt;C-n&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;C-p&lt;/strong&gt;&lt;/strong&gt; to move between undo and redos. When you get to
what you want, just quit the undo tree visualizer with &lt;strong&gt;&lt;strong&gt;q&lt;/strong&gt;&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
The cool part is that once you undo a few things and add new stuff,
you get a tree that you can navigate through using the arrows.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s much easier to get the flavor of this by watching the video
(which also has a lame example of using artist-mode which I&amp;#39;ll come
back t at some point).
&lt;/p&gt;
&lt;p&gt;
Enjoy.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/zL0FJ-jbDPU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>User friendly - I do not think that means what you think it means</title>
      <link>https://cestlaz.github.io/posts/user-friendly/</link>
      <pubDate>Wed, 28 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/user-friendly/</guid>
      <description>&lt;p&gt;
Saw this post the other day: &lt;a href=&#34;https://pupeno.com/2016/09/26/emacs-is-hurting-clojure/&#34;&gt;Emacs is hurting Clojure&lt;/a&gt; and this response: &lt;a href=&#34;http://irreal.org/blog/?p=5597&#34;&gt;Is Emacs Really HJard to Learn / Use&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
This called to mind those countless discussions about tools being user
friendly. I&amp;#39;m frequently on the unpopular side of these
discussions. Linux vs Windows vs Mac, Shell vs GUI, Emacs vs
fill-in-the-blank-editor-or-IDE and on and on.
&lt;/p&gt;
&lt;p&gt;
Don&amp;#39;t use Emacs, it isn&amp;#39;t user
friendly. Don&amp;#39;t use Linux, it isn&amp;#39;t user friendly.
&lt;/p&gt;
&lt;p&gt;
The thing is, I don&amp;#39;t think that word means what they think it does.
&lt;/p&gt;
&lt;p&gt;
I tell my kids that Linux and the shell is amazingly user friendly and
Windows and Macs aren&amp;#39;t user friendly at all. Windows, rather, is
&amp;#34;Learner Friendly.&amp;#34; For years, it&amp;#39;s been easy to learn what you can do
on Windows or Mac (as used via the GUI, not dropping to a shell) but
the truth is you can&amp;#39;t do that much. They&amp;#39;re designed as program
loaders not tool kits.
&lt;/p&gt;
&lt;p&gt;
You can learn how to get around and load programs and files very
quickly - much more quickly at first than using a command line
interface. The problem is, at that point, you hit a wall. No doubt
those operating systems are more learner friendly than Linux and the
shell but once you learn the command line, it can be leveraged for all
sorts of things and pretty easily at that - user friendly (see these
posts for some examples: &lt;a href=&#34;http://localhost:8000/categories/cli/&#34;&gt;Shell posts&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
This is important because we have our students use all sorts of tools
and we should be thinking about things like usability but we really
should be thinking about them a little differently.
&lt;/p&gt;
&lt;p&gt;
First, is it learner friendly. Part of this is cost of
entry. Linux has a high cost of entry. On the other hand, while Emacs
might look uglier than other modern editors, the cost of entry is
pretty much the same as any other editor - click or type a command and then you can use
the mouse and drop down menus to get started. Vim, in my opinion, on
the other hand has a higher cost of entry due to its modal nature.
&lt;/p&gt;
&lt;p&gt;
So, there&amp;#39;s no reason not to use Emacs (vs another editor) but you
might pause before using Linux. My approach is to start as if it were
Windows - use the gui, icons and menus, and then slowly introduce the
command line.
&lt;/p&gt;
&lt;p&gt;
Once your past the cost of entry, the we can think about being learner
friendly. As I mentioned, Linux, not so much. Emacs, sure - just like
any other editor with drop downs that then give you keyboard
equivalents.
&lt;/p&gt;
&lt;p&gt;
The keyboard equivalents lead us to another part of learner friendly
– discoverability - can you easily discover new things about the
tool. Here Emacs shines. Linux, maybe not so much.
&lt;/p&gt;
&lt;p&gt;
Once past learner friendly we get to user friendly. The core question
is &amp;#34;can I do what I need to and want to do easily.&amp;#34; For most people, it
comes down to - the tool I know is user friendly and the one I don&amp;#39;t
know and don&amp;#39;t want to take the time to know isn&amp;#39;t. There are some
things that are cumbersome no matter what, but really, when we say
user friendly, most people mean &amp;#34;what I like.&amp;#34; To me, it&amp;#39;s a little
more - is the tool expressive and powerful as well.
&lt;/p&gt;
&lt;p&gt;
So, why is this important? First, we shouldn&amp;#39;t allow our biases to
color the way we expose our kids to tools but at the same time, we
should pay attention to learnability, cost of entry, discoverability,
and indeed, true user friendliness.
&lt;/p&gt;
&lt;table border-spacing=&#34;10px&#34; padding=&#34;10px&#34; rules=&#34;all&#34; frame=&#34;border&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Low Power&lt;/th&gt;
&lt;th&gt;High Power&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;strong&gt;Low Learnability&lt;/strong&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;CP/M&lt;/td&gt;
&lt;td&gt;Linux Shell, Mac Terminal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;strong&gt;High Learnability&lt;/strong&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Windows / Mac OS GUI&lt;/td&gt;
&lt;td&gt;Most editors, including Emacs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
So, let&amp;#39;s stop with this &amp;#34;your tool isn&amp;#39;t easy to use&amp;#34; nonsense. Any
tool we don&amp;#39;t know isn&amp;#39;t easy to use until we learn it. Let&amp;#39;s focus on
the path to learning the useful ones.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Term, New Tool - repl.it</title>
      <link>https://cestlaz.github.io/posts/new-term-new-tool-repl.it/</link>
      <pubDate>Fri, 02 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/new-term-new-tool-repl.it/</guid>
      <description>&lt;p&gt;
We&amp;#39;re now a week in to my first class at Hunter. It&amp;#39;s a little early
for me to really compare and contrast the high school to college
experience but I thought I&amp;#39;d share some thoughts on a tool that I&amp;#39;ve
recently started to play with.
&lt;/p&gt;
&lt;p&gt;
My students were all supposed to be issued laptops at the beginning of
the semester. The plan was to have them learn Linux, the command line,
and a little DevOps along the way. I guess I shouldn&amp;#39;t have been too
surprised to learn that the laptops weren&amp;#39;t going to come in until
late September.
&lt;/p&gt;
&lt;p&gt;
Scratch all that advance lesson planning. A brief scramble and I was
able to relocate the class into a computer lab but now we can&amp;#39;t
customize the kids environments.
&lt;/p&gt;
&lt;p&gt;
Time to look for an online solution.
&lt;/p&gt;
&lt;p&gt;
We&amp;#39;re starting the kids off in Python, a choice that I&amp;#39;ll talk about
in some future post and normally my online go to for Python is
&lt;a href=&#34;http://codesters.com&#34;&gt;codesters.com&lt;/a&gt;. I&amp;#39;m a big fan of the codesters team and product. This
time, though, I decided to try something else. Specifically &lt;a href=&#34;http://repl.it&#34;&gt;repl.it&lt;/a&gt;. Partly because, as with
codesters, I like the people behind it. It&amp;#39;s also pretty simple and it
supports a lot of different languages:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
APL, ES2015 ,Bloop, BrainF, C, CoffeeScript, C++, C++11, C#, Emoticon,
Forth, F#, Go, Java, JavaScript, LOLCODE, Lua, Nodejs, PHP, Python,
Python3, QBasic, Roy, Ruby, Rust, Scheme, Swift, Unlambda, and HTML, CSS, JS
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
It&amp;#39;s still a pretty new product so there are occasional hiccups but
I&amp;#39;m really liking things so far. Some of the things I like include:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
a simple clean interface.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
sharing and embedding code:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&amp;lt;script src=&amp;#34;//repl.it/embed/DF3m/19.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
project mode which allows multi file projects
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
examples to get you started
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
But the thing I&amp;#39;m really liking are the teacher features they&amp;#39;re
working on. The teacher interface isn&amp;#39;t fancy. I like that. Things are
simple and clean and they let me get the job done.
&lt;/p&gt;
&lt;p&gt;
I had two extra minutes in class yesterday and in that time, I was
able to:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Make a classroom
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Invite all my students by email
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Create 2 quick assignments.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
The assignment page lets you give starter code as well as instructions
and it also lets you put in tests that are run when a student submits
their work for instant feedback.
&lt;/p&gt;
&lt;p&gt;
I really like the tests feature on projects. So far, I&amp;#39;ve only played
with Python unit tests. Repl.it uses a really easy to follow
interface and has a sample test to guide you. There&amp;#39;s also an option
for input/output matching which includes flexible matching and regular
expressions but I haven&amp;#39;t played with it yet.
&lt;/p&gt;
&lt;p&gt;
Overall, I&amp;#39;m liking this tool. When the kids get their laptops we&amp;#39;ll
probably use it somewhat less as they start to learn to use their own
systems but I&amp;#39;m glad to have repl.it in my teaching arsenal.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 15 - Macros</title>
      <link>https://cestlaz.github.io/posts/using-emacs-15-macros/</link>
      <pubDate>Fri, 02 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-15-macros/</guid>
      <description>&lt;p&gt;
I originally planned on do some videos on C++ development but I&amp;#39;m just
not feeling it. Probably because I&amp;#39;m excited to be working with my
new class and we&amp;#39;re working in Python. We&amp;#39;re not going to be using
C+++ for a few months so I&amp;#39;ll get to those videos a little later.
&lt;/p&gt;
&lt;p&gt;
Today, I want to cover what I consider a leatherman or multi-tool for
Emacs. Something that isn&amp;#39;t perfect for any particular job but can get
almost any job done: Macros.
&lt;/p&gt;
&lt;p&gt;
In their simplest form, macros let you record and play back
keystrokes.
&lt;/p&gt;
&lt;p&gt;
The video goes over the specifics.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Y1oVNBuIoXo&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Here are the main functions / keystrokes.
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;kmacro-start-macro-or-insert-counter&lt;/td&gt;
&lt;td&gt;F3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kmacro-end-and-call-macro&lt;/td&gt;
&lt;td&gt;F4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kmacro-name-last-macro&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;insert-kbd-macro&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
This covers most of my use of macros but there&amp;#39;s more. You can adjust
or set the counter, edit old macros and there&amp;#39;s even a way to have a
macro pause for input in the middle.
&lt;/p&gt;
&lt;p&gt;
Here are some links with more information:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html#Keyboard-Macros&#34;&gt;Emacs manual on macros&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://ergoemacs.org/emacs/emacs_macro_example.html&#34;&gt;http://ergoemacs.org/emacs/emacs_macro_example.html&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://emacs-fu.blogspot.com/2010/07/keyboard-macros.html&#34;&gt;http://emacs-fu.blogspot.com/2010/07/keyboard-macros.html&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
If you&amp;#39;re interested in checking out &lt;a href=&#34;http://repl.it&#34;&gt;Repl.it&lt;/a&gt;, which I reference in the
video, check out &lt;a href=&#34;http://cestlaz.github.io/posts/new-term-new-tool-replit/#.V8n_Ed9vH0o%0A&#34;&gt;my blog post&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 14 - Thoughts</title>
      <link>https://cestlaz.github.io/posts/using-emacs-14-thoughts/</link>
      <pubDate>Wed, 17 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-14-thoughts/</guid>
      <description>&lt;p&gt;
Sorry for the incosistancy of the posts. I hope to get to that one
video a week soon but I&amp;#39;ve still got a hectic couple of weeks ahead.
&lt;/p&gt;
&lt;p&gt;
No new material this week, or at least very little. This week, I talk
about some thoughts on the &amp;#34;Using Emacs&amp;#34; series.
&lt;/p&gt;
&lt;p&gt;
In the video I talk about Sacha Chua and her work as a leader in the
Emacs community. Check out her stuff here: &lt;a href=&#34;http://sachachua.com/blog/&#34;&gt;http://sachachua.com/blog/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the video - I hope you enjoy it.
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/tSx_sGgoVNk&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
As always, please leave feedback here or on the video.
&lt;/p&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 13 - Yasnippet</title>
      <link>https://cestlaz.github.io/posts/using-emacs-13-yasnippet/</link>
      <pubDate>Thu, 04 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-13-yasnippet/</guid>
      <description>&lt;p&gt;
It turns out that &lt;a href=&#34;https://github.com/jorgenschaefer/elpy&#34;&gt;Elpy&lt;/a&gt;, a popular emacs package for python development
is much easier to set up than I remember. It turns out all you need
is:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package elpy
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(elpy-enable))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video shows how to install and a bit of use. I don&amp;#39;t think it&amp;#39;s a
package I&amp;#39;m going to use much since I use other tools to do similar
things but it&amp;#39;s worth checking out.
&lt;/p&gt;
&lt;p&gt;
The main event this week is &lt;a href=&#34;https://github.com/joaotavora/yasnippet&#34;&gt;yasnippet&lt;/a&gt;, a package that lets you expand
text aliases. Let&amp;#39;s say you want to put the fairly standard:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
in my file. I can just type &lt;strong&gt;&lt;strong&gt;ifm&lt;/strong&gt;&lt;/strong&gt; and then hit the &lt;strong&gt;&lt;strong&gt;TAB&lt;/strong&gt;&lt;/strong&gt; key and
it would expand to the above code. Yasnippet also lets you leave
placeholders for variables, function names and more. It&amp;#39;s a pretty
neat package.
&lt;/p&gt;
&lt;p&gt;
I use it for boilerplate code. The example in the video shows how I
set up a snippet for the boilerplate code used when creating an
application with the &lt;strong&gt;&lt;strong&gt;Flask&lt;/strong&gt;&lt;/strong&gt; python microframework.
&lt;/p&gt;
&lt;p&gt;
Setting up yasnippet is as easy as:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package yasnippet
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(yas-global-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and it has built in support for &lt;a href=&#34;https://github.com/AndreaCrotti/yasnippet-snippets/tree/9ce0b05f4b4d693831e67dd65d660716a8192e8d&#34;&gt;tons of langauges&lt;/a&gt;. You can also easily
create your own snippets. See the documentation for details on the
file format. Just create a text file for the snippet and place it in a
subidectory under the snippets subdirectory of .emacs.d. The name of
the subdirectory should be the name of the emacs mode for which the
snippet is defined. I put up the snippet I use for flask so feel free
to check that out.
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/4aYMa8f6B0o&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Yasnippet:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/joaotavora/yasnippet&#34;&gt;Home Page&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://joaotavora.github.io/yasnippet/&#34;&gt;Docs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/AndreaCrotti/yasnippet-snippets/tree/9ce0b05f4b4d693831e67dd65d660716a8192e8d&#34;&gt;Included snippets&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Elpy:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/jorgenschaefer/elpy&#34;&gt;Home Page&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Flask:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://flask.pocoo.org&#34;&gt;Flask Home Page&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 12 - Flycheck, Jedi, Python</title>
      <link>https://cestlaz.github.io/posts/using-emacs-12-python/</link>
      <pubDate>Wed, 27 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-12-python/</guid>
      <description>&lt;p&gt;
This week, we&amp;#39;re going to look at my setup for Python programming.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m an educator, not a professional developer so I&amp;#39;m not working in
huge code bases with dozens or more files at a time. I do periodically
work in medium size code bases and will talk about cross file
navigation and project management later on. There are also more
powerful emacs Python packages. One being &lt;a href=&#34;https://github.com/jorgenschaefer/elpy&#34;&gt;elpy&lt;/a&gt;. Elpy looks pretty cool
but for me, it&amp;#39;s overkill.
&lt;/p&gt;
&lt;p&gt;
Today&amp;#39;s about the basics.
&lt;/p&gt;
&lt;p&gt;
The first tool I show is &lt;a href=&#34;http://www.flycheck.org/en/latest/&#34;&gt;flycheck&lt;/a&gt;. It does code checking on the fly
and supports &lt;a href=&#34;http://www.flycheck.org/en/latest/languages.html#flycheck-languages&#34;&gt;tons of languages&lt;/a&gt;. You might have to install some
external checkers though. For instance, I installed &lt;strong&gt;&lt;strong&gt;pylint&lt;/strong&gt;&lt;/strong&gt; for
python syntax checking with:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo pip install pylint&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Cofiguring flycheck is as easy as:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package flycheck
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(global-flycheck-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video all shows how I like to run Python from within emacs.
&lt;/p&gt;
&lt;p&gt;
The other tool I use is &lt;a href=&#34;https://github.com/tkf/emacs-jedi&#34;&gt;Jedi&lt;/a&gt;. It provides more extensive completion
for Python.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the setup:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package jedi
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jedi:setup&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jedi:ac-setup&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The last hook sets up the autocomplete.
&lt;/p&gt;
&lt;p&gt;
For jedi to work, you&amp;#39;ll need to install the jedi server which is done
in emacs by running &lt;strong&gt;&lt;strong&gt;M-x jedi:install-server&lt;/strong&gt;&lt;/strong&gt;. For that to work,
though, you&amp;#39;ll need to have &lt;a href=&#34;http://docs.python-guide.org/en/latest/dev/virtualenvs/&#34;&gt;Python Virtualenv&lt;/a&gt; istalled. I did that
with:
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;/strong&gt; I just got a report that you might need to also install epc (&lt;strong&gt;&lt;strong&gt;sudo pip install epc&lt;/strong&gt;&lt;/strong&gt;).
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo pip install virtualenv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Here&amp;#39;s the video:
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wbj_Wjm1Tuw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Flycheck:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://flycheck.org&#34;&gt;Flycheck home page&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.pylint.org/&#34;&gt;Pylint&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://flake8.pycqa.org/en/latest/&#34;&gt;Flake8&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Jedi:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/davidhalter/jedi&#34;&gt;Jedi&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://virtualenv.pypa.io/en/stable/&#34;&gt;Virtualenv&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 11 - Reveal.js presentations</title>
      <link>https://cestlaz.github.io/posts/using-emacs-11-reveal/</link>
      <pubDate>Tue, 19 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-11-reveal/</guid>
      <description>&lt;p&gt;
Happy to be back after a couple of weeks.
&lt;/p&gt;
&lt;p&gt;
My wife and son spent some time in San Francisco, Mountain View, and
Seattle. The main reason was to see our daughter who&amp;#39;s interning out
there for the summer but it was also a great opportunity to catch up
with over 100 former students. If you&amp;#39;re interested in seeing more, I
wrote a bit about it &lt;a href=&#34;http://cestlaz.github.io/posts/end-to-act-1/#.V45OGt9vGAk&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I was originally going to start talking about Python development but
then saw &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/4sp0xs/emacs_org_mode_and_revealjs/&#34;&gt;this&lt;/a&gt; post on reddit about &lt;a href=&#34;https://github.com/hakimel/reveal.js/&#34;&gt;reveal.js&lt;/a&gt; and using it with
org-mode. Since reveal.js with org-mode  is my goto presentation tool
I thought I&amp;#39;d do a video on that before getting back to &amp;#34;your
regularly schedueld program.&amp;#34;
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/psDpCpcIVYs&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
The main package you have to use for reveal.js presentations in
org-mode is org-reveal. The package to install is &lt;strong&gt;&lt;strong&gt;ox-reveal&lt;/strong&gt;&lt;/strong&gt;. I also
installed &lt;strong&gt;&lt;strong&gt;htmlize&lt;/strong&gt;&lt;/strong&gt; for syntax highlighting. Here&amp;#39;s the code from
our configuration file:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package ox-reveal
:ensure ox-reveal)

(setq org-reveal-root &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://cdn.jsdelivr.net/reveal.js/3.0.0/&amp;#34;&lt;/span&gt;)
(setq org-reveal-mathjax &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)

(use-package htmlize
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The org-reveal-root setq tells your presentation where to find the
reveal.js code. In this example, we&amp;#39;re getting from the cloud. You can
also install it locally.
&lt;/p&gt;
&lt;p&gt;
The org-reveal-mathjax is just so that LaTeX equations will look nice.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m hoping the video is pretty self-explanitory and the org-reveal
&lt;a href=&#34;https://github.com/yjwen/org-reveal%0A&#34;&gt;home page&lt;/a&gt; is pretty thorough but since the documentation is lagging a
bit behind the code and due to some versioning issues, here are a
couple of things to watch out for:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
I made a &lt;strong&gt;&lt;strong&gt;samples&lt;/strong&gt;&lt;/strong&gt; folder where I&amp;#39;ll put code for this series that
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
isn&amp;#39;t part of the configurations.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
I showed &lt;strong&gt;&lt;strong&gt;:frag (roll-in)&lt;/strong&gt;&lt;/strong&gt; as an example of revealing list items
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
one at a time. Those parens are important and are needed but weren&amp;#39;t
in earlier versions - this took me far too long to figure out.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
If you read the docs you&amp;#39;ll see that there are many more transitions
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
and you can mix and match them on a page.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
You might have to upgrade your emacs packages. If you
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;list-packages&lt;/strong&gt;&lt;/strong&gt;  in eamcs it will tell you if you have packages to
upgrade. You mark them for upgrading by typing &lt;strong&gt;&lt;strong&gt;U&lt;/strong&gt;&lt;/strong&gt; and then do the
upgrade with &lt;strong&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/strong&gt;. If this doesn&amp;#39;t work, you can try getting rid fo
the &lt;strong&gt;&lt;strong&gt;elpa&lt;/strong&gt;&lt;/strong&gt; folder and then re-installing.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
The &lt;a href=&#34;http://github.com/zamansky/mazelesson&#34;&gt;mazelesson&lt;/a&gt; sample presentation shows more features, many that we
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
haven&amp;#39;t covered yet. Check it out but remember that it&amp;#39;s for an
earlier version of org-reveal.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Github pages and rawgit are cool.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Hope you enjoy this. Please add any reveal.js tips and tricks of your
own.
&lt;/p&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Reveal.js related linls:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/hakimel/reveal.js/&#34;&gt;reveal.js home page&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/yjwen/org-reveal%0A&#34;&gt;org-reveal home page&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://github.com/zamansky/mazelesson&#34;&gt;Sample org reveal site (mazelesson from video)&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
rawgit.com - serving stuff from github
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Github pages: &lt;a href=&#34;https://pages.github.com/&#34;&gt;https://pages.github.com/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 10 - org init files</title>
      <link>https://cestlaz.github.io/posts/using-emacs-10-org-init/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-10-org-init/</guid>
      <description>&lt;p&gt;
I&amp;#39;ll be traveling for the next couple of weeks so I probably won&amp;#39;t
have time for another video until mid to late July. I&amp;#39;ll probably
write a post about this series and do some regular blogging over that
time but probably no new videos for a couple of weeks.
&lt;/p&gt;
&lt;p&gt;
Also, a couple of notes about the series:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Instead of making a separate git branch for each episode, I&amp;#39;m just
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
adding on to the master branch on GitHub. If you&amp;#39;re not familiar
with Git and GitHub don&amp;#39;t worry about this. Hardly anyone will
notice a difference.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
If this theme doesn&amp;#39;t show well on video, please let me know, I&amp;#39;ll
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
change it.
&lt;/p&gt;
&lt;p&gt;
Ok, now to this installments video.
&lt;/p&gt;
&lt;p&gt;
It talks about using org-mode to store our emacs init file.
&lt;/p&gt;
&lt;p&gt;
The first key is that you can put code-blocks in org-mode:
&lt;/p&gt;
&lt;div class=&#34;src src-org&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;,#+BEGIN_SRC emacs-lisp
(emacs-lisp code goes here)
(more emacs lisp goes here)
(and you can have even more here)
,#+END_SRC&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Since it&amp;#39;s elisp you can run the individual line using the usual &lt;strong&gt;&lt;strong&gt;C-x C-e&lt;/strong&gt;&lt;/strong&gt;
but you can run the entire block by placing your cursor anywhere in
the block and typing &lt;strong&gt;&lt;strong&gt;C-c C-c&lt;/strong&gt;&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
One minor annoyance about editing code blocks is that it doesn&amp;#39;t do
syntax highlighting or auto indentation. To solve this, emacs lets you
pull up an editing buffer by typing &lt;strong&gt;&lt;strong&gt;C-c &amp;#39;&lt;/strong&gt;&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
You&amp;#39;re supposed to be able to save your changes with &lt;strong&gt;&lt;strong&gt;C-c &amp;#39;&lt;/strong&gt;&lt;/strong&gt; again
or &lt;strong&gt;&lt;strong&gt;C-x C-s&lt;/strong&gt;&lt;/strong&gt; and kill the buffer without saving changes with &lt;strong&gt;&lt;strong&gt;C-x
C-k&lt;/strong&gt;&lt;/strong&gt;
but the version of org-mode that came with my version of emacs
didn&amp;#39;t support it - I had to install a newer version of org-mode from
melpa.
&lt;/p&gt;
&lt;p&gt;
I couldn&amp;#39;t figure out how to do this via use-package, but if this
problem happens to you, you can just type &lt;strong&gt;&lt;strong&gt;Alt-x package-install&lt;/strong&gt;&lt;/strong&gt;
and then type &lt;strong&gt;&lt;strong&gt;org&lt;/strong&gt;&lt;/strong&gt; and hit enter to install it.
&lt;/p&gt;
&lt;p&gt;
Once you do that, you might have to reload emacs but then everything
should work.
&lt;/p&gt;
&lt;p&gt;
This lets us move most of our configuration to a separate file. We&amp;#39;re
calling it &lt;strong&gt;&lt;strong&gt;myinit.org&lt;/strong&gt;&lt;/strong&gt; and storing it in our .emacs.d
directory. You can use any name &lt;strong&gt;&lt;strong&gt;except&lt;/strong&gt;&lt;/strong&gt; init.org as I mentioned in
the video.
&lt;/p&gt;
&lt;p&gt;
The file&amp;#39;s a little big so here&amp;#39;s a link to it:
&lt;a href=&#34;https://github.com/zamansky/using-emacs/blob/master/myinit.org&#34;&gt;https://github.com/zamansky/using-emacs/blob/master/myinit.org&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Notice how GitHub formats it to look all nice.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the raw file so you can see the gory details:
&lt;a href=&#34;https://raw.githubusercontent.com/zamansky/using-emacs/master/myinit.org&#34;&gt;https://raw.githubusercontent.com/zamansky/using-emacs/master/myinit.org&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Since we&amp;#39;re loading the file in overview mode, when we load it in
emacs we see:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; interface tweaks
&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; try
&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; which key
&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; Org mode
&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; Ace windows for easy window switching
&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; Swiper &lt;span style=&#34;color:#a6e22e&#34;&gt;/&lt;/span&gt; Ivy &lt;span style=&#34;color:#a6e22e&#34;&gt;/&lt;/span&gt; Counsel
&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; Avy &lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; navigate by searching for a letter on the screen and jumping to it
&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; Autocomplete
&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; Themes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We can tab open and close each section and add text to clarify things
around the code blocks.
&lt;/p&gt;
&lt;p&gt;
All that&amp;#39;s left in &lt;strong&gt;&lt;strong&gt;init.el&lt;/strong&gt;&lt;/strong&gt; is:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package&lt;/span&gt;)
(setq package-enable-at-startup &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package-archives&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;melpa&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://melpa.org/packages/&amp;#34;&lt;/span&gt;))
(package-initialize)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Bootstrap `use-package&amp;#39;&lt;/span&gt;
(unless (package-installed-p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package&lt;/span&gt;)
(package-refresh-contents)
(package-install &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package&lt;/span&gt;))

(org-babel-load-file (&lt;span style=&#34;color:#a6e22e&#34;&gt;expand-file-name&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/.emacs.d/myinit.org&amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
With the last line performing the magic of loading our org file and
running all the code blocks.
&lt;/p&gt;
&lt;p&gt;
Finally, we added a couple of small interface changes:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fset&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yes-or-no-p&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y-or-n-p&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f5&amp;gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;revert-buffer&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The first line lets us type y or n instead of yes or no and the second
let&amp;#39;s us reload a file into our current buffer using the &lt;strong&gt;&lt;strong&gt;f5&lt;/strong&gt;&lt;/strong&gt; key.
&lt;/p&gt;
&lt;p&gt;
I hope you enjoy this video and find it useful:
&lt;/p&gt;
 &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/EX9PKK3EMaw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 9 - Themes</title>
      <link>https://cestlaz.github.io/posts/using-emacs-9-themes/</link>
      <pubDate>Tue, 28 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-9-themes/</guid>
      <description>&lt;p&gt;
Now that we have a nice basic configuration, let&amp;#39;s make Emacs look a
little nicer.
&lt;/p&gt;
&lt;p&gt;
Like most editors, Emacs can be extensively themed.
&lt;/p&gt;
&lt;p&gt;
As shown in the video, you can quickly see the built in themes using
the &lt;strong&gt;&lt;strong&gt;customize-themes&lt;/strong&gt;&lt;/strong&gt; command.
&lt;/p&gt;
&lt;p&gt;
You can load one of these themes by using the &lt;strong&gt;&lt;strong&gt;load-theme&lt;/strong&gt;&lt;/strong&gt; command
interactively or, more likely by putting:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(load-theme &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leuven&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
in your init.el. The above code loads the built in &lt;strong&gt;&lt;strong&gt;leuven&lt;/strong&gt;&lt;/strong&gt; theme.
&lt;/p&gt;
&lt;p&gt;
I prefer the &lt;strong&gt;&lt;strong&gt;zenburn&lt;/strong&gt;&lt;/strong&gt; theme. For that, you have to load the zenburn
package. Here&amp;#39;s the code in our init.el:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package zenburn-theme
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config (load-theme &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zenburn&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In the video, I also mention the color theme package.
&lt;/p&gt;
&lt;p&gt;
So, customize away.
&lt;/p&gt;
&lt;p&gt;
In the links, you&amp;#39;ll find some links to some Emacs theme gallery sites
to help find something you like.
&lt;/p&gt;
&lt;p&gt;
Thanks for reading and watching and as always, please leave comments,
suggestions and favorite themes.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the video:
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/cod2ABxlrV8&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Zenburn theme home page: &lt;a href=&#34;https://github.com/bbatsov/zenburn-emacs&#34;&gt;https://github.com/bbatsov/zenburn-emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Emacs theme gallery: &lt;a href=&#34;https://pawelbx.github.io/emacs-theme-gallery/&#34;&gt;https://pawelbx.github.io/emacs-theme-gallery/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Another one: &lt;a href=&#34;https://emacsthemes.com/&#34;&gt;https://emacsthemes.com/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-9-themes&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-9-themes&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 8 - Autocomplete</title>
      <link>https://cestlaz.github.io/posts/using-emacs-8-autocomplete/</link>
      <pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-8-autocomplete/</guid>
      <description>&lt;p&gt;
Out of the box, Emacs supports various types of completion.
&lt;/p&gt;
&lt;p&gt;
Tab completion for filenames and commands basically work right out of
the box and Emacs has built in modes like &lt;a href=&#34;https://www.emacswiki.org/emacs/AbbrevMode&#34;&gt;Abbrev&lt;/a&gt;, &lt;a href=&#34;https://www.emacswiki.org/emacs/HippieExpand&#34;&gt;Hippie Expand&lt;/a&gt;, and
&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Dynamic-Abbrevs.html&#34;&gt;Dabbrev&lt;/a&gt; provide a manner of completion for in buffer text.
&lt;/p&gt;
&lt;p&gt;
I briefly show Dabbrev (Dynamic Abbrevs) in the video and if you&amp;#39;re
interested in the others, follow the links.
&lt;/p&gt;
&lt;p&gt;
We saw ow the built in Ido mode and third party packages like Ivy,
which I prefer, and Helm make for better completions on functions,
filenames, and the like and Emacs also has third party packages for in
buffer completion.
&lt;/p&gt;
&lt;p&gt;
The two main contenders are &lt;a href=&#34;https://github.com/auto-complete/auto-complete&#34;&gt;auto-complete Mode&lt;/a&gt; and &lt;a href=&#34;http://company-mode.github.io/%0A&#34;&gt;company Mode&lt;/a&gt;. I use
auto-complete, others swear by company. The video shows the basics of
auto-complete mode but check both out and decide for yourself.
&lt;/p&gt;
&lt;p&gt;
If you feel strongly about one or the other, please share in the
comments.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a basic configuration:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package auto-complete
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:init
(progn
(ac-config-default)
(global-auto-complete-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We&amp;#39;ll modify this as move along in the series.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the video:
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/5FBVhdyU4dA&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Autocomplete home page: &lt;a href=&#34;https://github.com/auto-complete/auto-complete&#34;&gt;https://github.com/auto-complete/auto-complete&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Autocomplete manual: &lt;a href=&#34;http://auto-complete.org/doc/manual.html&#34;&gt;http://auto-complete.org/doc/manual.html&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-8-autocompete&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-8-autocompete&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 7- Navigation with Avy</title>
      <link>https://cestlaz.github.io/posts/using-emacs-7-avy/</link>
      <pubDate>Fri, 24 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-7-avy/</guid>
      <description>&lt;p&gt;
Here&amp;#39;s a really cool navigation method that I&amp;#39;ve been meaning to use
more. Avy is a replacement for ace-jump mode which is an
implementation of easymotion, a vim plugin.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s pretty cool and lets you quickly navigate to any spot on the
screen.
&lt;/p&gt;
&lt;p&gt;
After triggering avy, or more specifically the &lt;strong&gt;&lt;strong&gt;avy-goto-char&lt;/strong&gt;&lt;/strong&gt;
function, emacs prompts you for a single character. When you type it,
all instances of the character that start out words change to a
highlighted letter. Type the highlighted letter and you jump to that
location.
&lt;/p&gt;
&lt;p&gt;
The avy package comes with a bunch of options including a 2 character
search variant, a timed variant which drops into search, and more.
&lt;/p&gt;
&lt;p&gt;
The Avy home page has all the details.
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ziytRbASKeU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Here&amp;#39;s the configuration I&amp;#39;m using:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package avy
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:bind (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; avy-goto-char))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You can check the &lt;a href=&#34;https://github.com/abo-abo/avy&#34;&gt;avy home page&lt;/a&gt; for their recommended configuration
which you get by configuring this way instead:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package avy
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(avy-setup-default))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Avy: &lt;a href=&#34;https://github.com/abo-abo/avy&#34;&gt;https://github.com/abo-abo/avy&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-7-avy&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-7-avy&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Better Comments or tooling as a time sink</title>
      <link>https://cestlaz.github.io/posts/better-comments/</link>
      <pubDate>Wed, 22 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/better-comments/</guid>
      <description>&lt;p&gt;
The other day my friend and fellow CS Ed Blogger &lt;a href=&#34;https://twitter.com/alfredtwo&#34;&gt;Alfred Thompson&lt;/a&gt; wrote
about &lt;a href=&#34;http://blog.acthompson.net/2016/06/better-comments-in-visual-studio.html&#34;&gt;Better Comments&lt;/a&gt;, an extension for visual studio that displays
comments that are marked up  with special characters in order to
highlight them. Here&amp;#39;s a screenshot:
&lt;/p&gt;
&lt;p&gt;
https://raw.githubusercontent.com/omsharp/BetterComments/master/screenshots/ClassificationC.png
&lt;/p&gt;
&lt;p&gt;
So, the first thing I though was &amp;#34;I bet emacs could do that pretty
easily&amp;#34; and down the rabbit hole I went.
&lt;/p&gt;
&lt;p&gt;
I had to figure out something about how emacs themes and font-locking
(emacs for syntax highlighting) works and of course spent far too much
time learning about Emacs, my favored tool, rather than getting actual
work done, but I came up with this:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(make-face &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-important&lt;/span&gt;)
(set-face-foreground &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-important&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#00ff00&amp;#34;&lt;/span&gt;)

(make-face &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-todo&lt;/span&gt;)
(set-face-foreground &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-todo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#ff0000&amp;#34;&lt;/span&gt;)

(make-face &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-strike&lt;/span&gt;)
(set-face-attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-strike&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; :strike-through &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)

(defun add-custom-keyw()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;adds a few special keywords&amp;#34;&lt;/span&gt;
(font-lock-add-keywords
&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cx \\(.+\\)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-strike&lt;/span&gt; prepend)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ct \\(.+\\)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-todo&lt;/span&gt; prepend)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ci \\(.+\\)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-important&lt;/span&gt; prepend)
)
))
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add-custom-keyw&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;js2-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add-custom-keyw&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;js-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add-custom-keyw&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It&amp;#39;s a hack but it does indeed work. In action, it looks something
like this:
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/3TLw1yOMKMc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Truth be told, it really colors anything following cx, ct, or ci, not
just in comments – I have to look a bit more into how emacs handles
comments to figure that one out.
&lt;/p&gt;
&lt;p&gt;
In any event, even though I spent too much time doing this, it&amp;#39;s nice
to know I&amp;#39;m working in a tool in which I can.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;&lt;/strong&gt; Thanks to user ncsuwolf on /r/emacs on reddit, here&amp;#39;s a
fully working, more properly done solution:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defface font-lock-comment-strike
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (:strike-through &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)))
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;For strike-through comments&amp;#34;&lt;/span&gt;)

(defface font-lock-comment-important
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (:foreground &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#00ff00&amp;#34;&lt;/span&gt;)))
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;For important&amp;#34;&lt;/span&gt;)
(defface font-lock-comment-todo
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (:foreground &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#ff0000&amp;#34;&lt;/span&gt;))
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;For todo comments&amp;#34;&lt;/span&gt;)
(defun add-custom-keyw()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;adds a few special keywords&amp;#34;&lt;/span&gt;
(font-lock-add-keywords
&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\s&amp;lt;+x[[:space:]]*\\(.*?\\)[[:space:]]*\\s&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-strike&lt;/span&gt; prepend)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\s&amp;lt;+t[[:space:]]*\\(.*?\\)[[:space:]]*\\s&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-todo&lt;/span&gt; prepend)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\s&amp;lt;+i[[:space:]]*\\(.*?\\)[[:space:]]*\\s&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-comment-important&lt;/span&gt; prepend))))

(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;prog-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;add-custom-keyw)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 6 - Searching a Swiper</title>
      <link>https://cestlaz.github.io/posts/using-emacs-6-swiper/</link>
      <pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-6-swiper/</guid>
      <description>&lt;p&gt;
This video is all about using incremental search to navigate through your emacs buffers.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/0mwwN0S1dnQ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
You can use the default incremental searchb, bound to &lt;strong&gt;&lt;strong&gt;C-s&lt;/strong&gt;&lt;/strong&gt; for
isearch-forward &lt;strong&gt;&lt;strong&gt;C-r&lt;/strong&gt;&lt;/strong&gt; to search backwards (reverse).
&lt;/p&gt;
&lt;p&gt;
They work really well as is but I prefer using &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;Swiper&lt;/a&gt;. The video demos
both and the &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;Swiper&lt;/a&gt; home page has loads of details.
&lt;/p&gt;
&lt;p&gt;
Part of the Swiper package includes ivy and counsel which I use instead of ido.
&lt;/p&gt;
&lt;p&gt;
The video also mentions lorem-ipsum mode for generating text quickly and &lt;strong&gt;&lt;strong&gt;describe-mode&lt;/strong&gt;&lt;/strong&gt; in the help system.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the code we added for swiper:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; it looks like counsel is a requirement for swiper&lt;/span&gt;
(use-package counsel
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
)

(use-package swiper
:ensure try
:config
(progn
(ivy-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
(setq ivy-use-virtual-buffers &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(global-set-key &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\C-s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;swiper&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c C-r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ivy-resume&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f6&amp;gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ivy-resume&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-x&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-M-x&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x C-f&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-find-file&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f1&amp;gt; f&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-describe-function&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f1&amp;gt; v&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-describe-variable&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f1&amp;gt; l&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-load-library&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f2&amp;gt; i&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-info-lookup-symbol&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;f2&amp;gt; u&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-unicode-char&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c g&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-git&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c j&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-git-grep&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c k&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-ag&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-x l&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-locate&lt;/span&gt;)
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-S-o&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-rhythmbox&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; read-expression-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;counsel-expression-history&lt;/span&gt;)
))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and we commented out the ido stuff:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; using swiper so ido no longer needed&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;(setq ido-enable-flex-matching t)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;(setq ido-everywhere t)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;(ido-mode 1)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
If you want to see a nice video specifically on swiper by the author, here it is:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/VvnJQpTFVDc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Swiper: &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;&lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;https://github.com/abo-abo/swiper&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The Swiper Manual: &lt;a href=&#34;http://oremacs.com/swiper/&#34;&gt;http://oremacs.com/swiper/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-6-swiper&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-6-swiper&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Robots platforms and practicalities</title>
      <link>https://cestlaz.github.io/posts/robot-survey/</link>
      <pubDate>Wed, 15 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/robot-survey/</guid>
      <description>&lt;p&gt;
I received an email from a friend the other day asking me about a
particular robotics platform she recently saw.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve played with robotics on and off over the years ranging from
building them from (not using) scratch using Atmel chips and programming them in
assembly to using Arduino based platforms to using pre-built robot
platforms. They&amp;#39;re really cool and since they interact with the real
world you can do all sorts of interesting and motivational things with students.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve done these on my own as a hobbyist and also with students either
individually or in small groups, but never as part of a class I had
been teaching.
&lt;/p&gt;
&lt;p&gt;
Why not?
&lt;/p&gt;
&lt;p&gt;
The biggest reason is that the classes I&amp;#39;ve taught are already so
packed full of CS goodness that we can&amp;#39;t even get everything done
that&amp;#39;s theoretically on the syllabi.
&lt;/p&gt;
&lt;p&gt;
The other has to do with practical concerns.
&lt;/p&gt;
&lt;p&gt;
Equipment costs - Let&amp;#39;s say we can get our platform at $100 a pop. I
just can&amp;#39;t see a public school with 34 kids in a class getting one per
student or one for every two.
&lt;/p&gt;
&lt;p&gt;
So, what&amp;#39;s the robot to student ratio and how much actual access do
the kids get? If they&amp;#39;re designing  building, do they all get to
design and build? Same question with coding and operating.
&lt;/p&gt;
&lt;p&gt;
Then there&amp;#39;s space – if we&amp;#39;re talking about a mobile platform as
opposed to something that sits on the desk and is near stationary, we
have a problem. The classrooms I&amp;#39;ve taught in can barely hold the
students.
&lt;/p&gt;
&lt;p&gt;
There are also issues with breakage, loss, theft and long term
maintainability - will we be able to or even want to fill in with
compatible units in a few years as needed or will we have to reboot
the program from scratch.
&lt;/p&gt;
&lt;p&gt;
All that to deal with before we even get to the fun of teaching and learning.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m really curious about the experiences of those of you who do teach
using robots and similar platforms.
&lt;/p&gt;
&lt;p&gt;
If you are such a teacher, could you please fill out this form or
leave a comment for anything that the form doesn&amp;#39;t cover?
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe src=&amp;#34;&lt;a href=&#34;https://docs.google.com/forms/d/1FlppDbeiK8uPxh_RkXoCbbdE_UDY_4qXmZWbXlZ0gGg/viewform?embedded=true&#34;&gt;https://docs.google.com/forms/d/1FlppDbeiK8uPxh_RkXoCbbdE_UDY_4qXmZWbXlZ0gGg/viewform?embedded=true&lt;/a&gt;&amp;#34; width=&amp;#34;760&amp;#34; height=&amp;#34;500&amp;#34; frameborder=&amp;#34;0&amp;#34; marginheight=&amp;#34;0&amp;#34; marginwidth=&amp;#34;0&amp;#34;&amp;gt;Loading…&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 5 - Windows</title>
      <link>https://cestlaz.github.io/posts/using-emacs-5-windows/</link>
      <pubDate>Tue, 14 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-5-windows/</guid>
      <description>&lt;p&gt;
Sorry for the delay in getting this next video / post up. I spent the
last part of last week at &lt;a href=&#34;http://go.personaldemocracy.com/&#34;&gt;The Personal Democracy Forum 2016&lt;/a&gt; which is really an exceptional conference.
&lt;/p&gt;
&lt;p&gt;
I posted a bit about it in my &lt;a href=&#34;http://cestlaz.github.io/posts/pdf2016-lost-in-the-silo/#.V2B9th9vGAk&#34;&gt;last post&lt;/a&gt; and plan to write some more on it, but for now, more Emacs.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/D6OUMVbPKSA&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
This video concerns using windows. By using buffers and windows and
the basics you got from the tutorial, you shouldn&amp;#39;t have to ever leave emacs.
&lt;/p&gt;
&lt;p&gt;
From here, we&amp;#39;ll be able to start going over effective Emacs and then
using it for things like development or document creation.
&lt;/p&gt;
&lt;p&gt;
Some of the key window bindings:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;what it does&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C-x 2&lt;/td&gt;
&lt;td&gt;split-window-below (vertically)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C-x 3&lt;/td&gt;
&lt;td&gt;split-window-right (horizontally)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C-x 0&lt;/td&gt;
&lt;td&gt;delete-window (this one)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C-x 1&lt;/td&gt;
&lt;td&gt;delete-other-windows&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C-x o&lt;/td&gt;
&lt;td&gt;other-window (moves foxus to the next window&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
You also have frames which use &lt;strong&gt;&lt;strong&gt;C-x 5&lt;/strong&gt;&lt;/strong&gt; as the prefix, so &lt;strong&gt;&lt;strong&gt;C-x 5 2&lt;/strong&gt;&lt;/strong&gt;
creats a new frame and &lt;strong&gt;&lt;strong&gt;C-x 5 1&lt;/strong&gt;&lt;/strong&gt; closes the other frames.
&lt;/p&gt;
&lt;p&gt;
Remember, you can always use the help system, in particular &lt;strong&gt;&lt;strong&gt;C-x k&lt;/strong&gt;&lt;/strong&gt;
to describe a key and &lt;strong&gt;&lt;strong&gt;C-x f&lt;/strong&gt;&lt;/strong&gt; to describe a function.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;C-x o&lt;/strong&gt;&lt;/strong&gt; can be a little clunky so some people like to use
&lt;strong&gt;&lt;strong&gt;windmove&lt;/strong&gt;&lt;/strong&gt; which lets you move between windows by holding the shift
key and with the arrows. To set that up, you can add this to your
&lt;strong&gt;&lt;strong&gt;init.el&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(windmove&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;keybindings)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I prefer using &lt;strong&gt;&lt;strong&gt;ace-window&lt;/strong&gt;&lt;/strong&gt; mode which still uses &lt;strong&gt;&lt;strong&gt;C-x o&lt;/strong&gt;&lt;/strong&gt;:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;; add this to init&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;el
(use&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;package ace&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;window
:ensure t
:init
(progn
(&lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;set&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;key [remap other&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;window] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ace-window)&lt;/span&gt;
(custom&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;set&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;faces
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(aw-leading-char-face&lt;/span&gt;
((t (:inherit ace&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;jump&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;face&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;foreground :height &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt;)))))
))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The other mode I mention in the video is winner mode:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(winner&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Which will allow you to use &lt;strong&gt;&lt;strong&gt;C-c left or right&lt;/strong&gt;&lt;/strong&gt; to move through past
window configurations.
&lt;/p&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Ace window mode: &lt;a href=&#34;https://github.com/abo-abo/ace-window&#34;&gt;https://github.com/abo-abo/ace-window&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-5-windows&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-5-windows&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 3 - How to think about Emacs</title>
      <link>https://cestlaz.github.io/posts/using-emacs-3-elisp/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-3-elisp/</guid>
      <description>  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/nyQxRarVYH4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Many people think of Emacs as an editor. I like to think of it as an Elisp interpreter where you live code documents.
&lt;/p&gt;
&lt;p&gt;
In some ways, it&amp;#39;s like those new fangled interactive programming environments where you type in code and the updates are reflected instantly.
&lt;/p&gt;
&lt;p&gt;
In this video, I try to explain the way I think about Emacs and why it&amp;#39;s so cool.
&lt;/p&gt;
&lt;p&gt;
The only change we made to our configuration was adding:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(tool&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bar&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mode &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Which gets rid of the tool bar at the top.
&lt;/p&gt;
&lt;p&gt;
Next time, we start talking about efficiently using Emacs.
&lt;/p&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-2-org&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-3-elisp&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-3-elisp&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - 4 - Buffers</title>
      <link>https://cestlaz.github.io/posts/using-emacs-4-buffers/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-4-buffers/</guid>
      <description>  &lt;iframe width=&#34;480&#34; height=&#34;270&#34; src=&#34;https://www.youtube.com/embed/v5eTK5lC0xs&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Now that we&amp;#39;re past the intro material, we&amp;#39;ll start looking at emacs
features one at a time. This will let you focus on using the one
feature we&amp;#39;re covering, fit it into your work flow, and really get
comfortable with it.
&lt;/p&gt;
&lt;p&gt;
This time we&amp;#39;ll dive into using Emacs effectively with buffers.
&lt;/p&gt;
&lt;p&gt;
Watch the video and then make a real effort to use buffers over the
next few emacs sessions. Before you know it, they&amp;#39;ll be a natural part
of your work flow.
&lt;/p&gt;
&lt;p&gt;
The idea of incrementally learning a tool this way seems to be called
&lt;a href=&#34;http://sachachua.com/blog/2015/01/developing-emacs-micro-habits-text-automation/&#34;&gt;developing micro-habits&lt;/a&gt; and I first read about the idea from &lt;a href=&#34;https://twitter.com/sachac&#34;&gt;Sacha
Chua&lt;/a&gt; who is an amazing member of the emacs community.
&lt;/p&gt;
&lt;p&gt;
When seeing beginners, I&amp;#39;ll frequently observe this work flow:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Open a terminal
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Load emacs on a file
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Edit the file
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Save and quit emacs
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Try to compile and run the program (since usually this is in a programming class)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
repeat
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
If the beginner needs to see multiple files at once, they fire up multiple separate emacs.
&lt;/p&gt;
&lt;p&gt;
All of this causes me physical pain.
&lt;/p&gt;
&lt;p&gt;
In emacs, your editor can load several buffers at once, each
associated with a separate file. You can quickly switch between them,
search across them, and more. The video will get you started.
&lt;/p&gt;
&lt;p&gt;
The video also mentions &lt;strong&gt;ido&lt;/strong&gt; mode. To set up &lt;strong&gt;ido&lt;/strong&gt; mode, add the
following code to your init.el:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(setq ido&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;enable&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;flex&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;matching t)
(setq ido&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;everywhere t)
(ido&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And here&amp;#39;s a great little write up on it by &lt;a href=&#34;https://www.masteringemacs.org/reading-guide&#34;&gt;Mickey Petersen&lt;/a&gt;:
&lt;/p&gt;
&lt;p&gt;
https://www.masteringemacs.org/article/introduction-to-ido-mode
&lt;/p&gt;
&lt;p&gt;
As I mentioned in the video, I actually use another mode for completions (&lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;swiper&lt;/a&gt;),
which I&amp;#39;ll cover in a future video and another popular option is &lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;helm&lt;/a&gt;
which we&amp;#39;ll also cover.
&lt;/p&gt;
&lt;p&gt;
For buffers, the keys to remember are:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C-x b&lt;/td&gt;
&lt;td&gt;switch-buffer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C-x C-b&lt;/td&gt;
&lt;td&gt;list-buffers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
To use ibuffer, which is more powerful than list-buffers you can add
either:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(defalias &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;list-buffers &amp;#39;&lt;/span&gt;ibuffer) ; make ibuffer default&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Or if you want to open ibuffer in another Window:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(defalias &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;list-buffers &amp;#39;&lt;/span&gt;ibuffer&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;other&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;window) ; make ibuffer default&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Here are a couple of useful links on ibuffer and buffer switching:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://ergoemacs.org/emacs/emacs_buffer_switching.html&#34;&gt;http://ergoemacs.org/emacs/emacs_buffer_switching.html&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://mytechrants.wordpress.com/2010/03/25/emacs-tip-of-the-day-start-using-ibuffer-asap/&#34;&gt;https://mytechrants.wordpress.com/2010/03/25/emacs-tip-of-the-day-start-using-ibuffer-asap/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Finally, if you like a tab bar, you can add the following to your
init.el:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(use&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;package tabbar
:ensure t
:config (tabbar&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
There&amp;#39;s also a package &lt;a href=&#34;https://github.com/mattfidler/tabbar-ruler.el&#34;&gt;tabbar-ruler&lt;/a&gt; which is supposed to make the
tabbar look nicer but since I don&amp;#39;t use the tabbar at all, I haven&amp;#39;t
checked it out.
&lt;/p&gt;
&lt;p&gt;
Hope this gets you using emacs more effectively.
&lt;/p&gt;
&lt;p&gt;
Stay tuned for our next video on window management.
&lt;/p&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-4-buffers&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-4-buffers&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-4-buffers&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - Intro to Org Mode</title>
      <link>https://cestlaz.github.io/posts/using-emacs-2-org/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-2-org/</guid>
      <description>  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/x5KiYDd9s8k?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
This video is a brief introduction to org-mode, a mode I use for all
sorts of things.
&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll dive into org-mode later in the series. Right now I just want
you to see the basics since we&amp;#39;ll be using org-mode for any notes that
are written up during this series.
&lt;/p&gt;
&lt;p&gt;
Actually, all my blog posts are written in org-mode.
&lt;/p&gt;
&lt;p&gt;
Here are the important lines to add to your Emacs &lt;strong&gt;init.el&lt;/strong&gt; file  to
get the nice looking bullets when in org-mode:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(use&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;package org&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bullets
:ensure t
:config
(add&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-mode-hook (lambda () (org-bullets-mode 1))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
About a month ago, Emacs user Harry Schwartz gave a nice overview talk
on org-mode. If you want to get a better idea as to all the things you
can do with it, check it out: &lt;a href=&#34;https://www.youtube.com/watch?v=SzA2YODtgK4&#34;&gt;https://www.youtube.com/watch?v=SzA2YODtgK4&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Next time, we&amp;#39;ll look at a little Elisp. After that, we&amp;#39;ll dive in to
using Emacs effectively and efficiently.
&lt;/p&gt;
&lt;p&gt;
Relevant links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-2-org&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-2-org&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-2-org&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Packages
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/sabof/org-bullets&#34;&gt;org-bullets&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - Introduction</title>
      <link>https://cestlaz.github.io/posts/using-emacs-introduction/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-introduction/</guid>
      <description>
&lt;p&gt;
I&amp;#39;m sure I&amp;#39;ve mentioned that I&amp;#39;ve been an Emacs wonk for
decades. Since the mid-80&amp;#39;s in fact. I&amp;#39;ve spent time using other
editors, word processors, and development tools but always find my way
back.
&lt;/p&gt;
&lt;p&gt;
I recommend that budding computer science students develop a good tool
set and encourage them to explore Emacs but while it&amp;#39;s pretty easy to
load Emacs and find your way around, particularly if you use the mouse
and menus there isn&amp;#39;t a clear path to take you from beginner to using
it as an efficient tool let alone customizing it.
&lt;/p&gt;
&lt;p&gt;
Inspired by &lt;a href=&#34;https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q/featured&#34;&gt;Mattias Petter Johansson&lt;/a&gt;, or MPJ who make a weekly video,
I decided to try to create a series of YouTube videos and matching
blog posts. I&amp;#39;ll try to post one a week and I&amp;#39;ll try to keep the
videos, at least after the first couple to just a few minutes and have
them focus on &lt;a href=&#34;http://sachachua.com/blog/2015/01/developing-emacs-micro-habits-text-automation/&#34;&gt;micro-habits&lt;/a&gt; - one or two small things that you can
bring to your work flow and internalize.
&lt;/p&gt;
&lt;p&gt;
The first three four (this one and the next three) will focus on
setting things up. After this post we&amp;#39;ll have
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Setting up the package manager
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Intro to org-mode (just so that you recognize the markup)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Intro to Elisp (just so you have an idea of those configuration
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
lines)
&lt;/p&gt;
&lt;p&gt;
and then we&amp;#39;re off to the races. Here&amp;#39;s what I&amp;#39;m thinking about for
the first few topics after the above mentioned ones:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Efficient Navigation
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Windows and Buffers
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Theming
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Auto Completion
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
and then a series of short topics to show some of my favorite editing
tools. We&amp;#39;ll also cover some larger topics including:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Python Development
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
C/C++ Development
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Document Preparation
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Scheduling / Calendaring / Note Taking
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I&amp;#39;ll put together an index to these posts along with any ancillary
materials here: &lt;a href=&#34;https://cestlaz.github.io/stories/emacs&#34;&gt;&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;&lt;/a&gt;.
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Getting started
&lt;/h2&gt;
&lt;p&gt;
This series is going to assume you&amp;#39;ve installed emacs and worked your
way through the included tutorial.
&lt;/p&gt;
&lt;p&gt;
To help you get to that point, here are some links to posts and sites
that I&amp;#39;ve found useful:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://www.braveclojure.com/basic-emacs/&#34;&gt;http://www.braveclojure.com/basic-emacs/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.masteringemacs.org/article/beginners-guide-to-emacs&#34;&gt;https://www.masteringemacs.org/article/beginners-guide-to-emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs&#34;&gt;http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-use-the-emacs-editor-in-linux&#34;&gt;https://www.digitalocean.com/community/tutorials/how-to-use-the-emacs-editor-in-linux&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
And here&amp;#39;s a 10 minute getting started guide:
&lt;/p&gt;
  &lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/K3_SFerNIeI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
So, stay tuned.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs - Setting up the Package Manager</title>
      <link>https://cestlaz.github.io/posts/using-emacs-1-setup/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-1-setup/</guid>
      <description>&lt;p&gt;
This video will step you through setting up Emacs to use &lt;a href=&#34;http://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt; for packages.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/49kBWM3RQQ8?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
We configured emacs by creating a folder named &lt;strong&gt;.emacs.d&lt;/strong&gt; and creating a
file within it named &lt;strong&gt;init.el&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the contents of that file:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(setq inhibit&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;startup&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;message t)


(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package)&lt;/span&gt;
(setq package&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;enable&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;at&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;startup nil)
(add&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package-archives&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(&amp;#34;melpa&amp;#34; . &amp;#34;https://melpa.org/packages/&amp;#34;))&lt;/span&gt;

(package&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;initialize)

;; Bootstrap &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;use&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;package&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
(unless (package&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;installed&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package)&lt;/span&gt;
(package&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;refresh&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;contents)
(package&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;install &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package))&lt;/span&gt;

(use&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;package &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
:ensure t)

(use&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;package which&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;key
:ensure t
:config
(which&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mode))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The last two &lt;strong&gt;inituse-package&lt;/strong&gt; clauses install two helpful packages:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;try&lt;/strong&gt;: let&amp;#39;s you try packages without installing them.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;which-key&lt;/strong&gt;: brings up help on key combinations.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Relavent links:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Video series overview page:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://cestlaz.github.io/stories/emacs&#34;&gt;http://cestlaz.github.io/stories/emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Code for this video:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-1-setup&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/lesson-1-setup&#34;&gt;https://github.com/zamansky/using-emacs/tree/lesson-1-setup&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Complete code built up over all videos:
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/using-emacs/tree/master&#34;&gt;https://github.com/zamansky/using-emacs/tree/master&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Melpa and packages
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://melpa.org&#34;&gt;&lt;a href=&#34;http://melpa.org&#34;&gt;http://melpa.org&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/justbur/emacs-which-key&#34;&gt;which-key&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/larstvei/Try&#34;&gt;try&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Collaborative Coding or Cheating</title>
      <link>https://cestlaz.github.io/posts/collaborative-coding-or-cheating/</link>
      <pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/collaborative-coding-or-cheating/</guid>
      <description>&lt;p&gt;
I haven&amp;#39;t been teaching this past semester. That&amp;#39;s why I haven&amp;#39;t been
writing much about lessons. I miss working with students but that will
resume in the fall and this semester has allowed me to get a jump on
new projects.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s also allowed me to look at some student issues from a bit of a
distance.
&lt;/p&gt;
&lt;p&gt;
One issue that keeps coming up is cheating.
&lt;/p&gt;
&lt;p&gt;
Some of it, classroom cheating. my friend &lt;a href=&#34;https://twitter.com/cscheerleader&#34;&gt;Ria&lt;/a&gt; recently asked a
question on Facebook about it. A nice thread ensued but unfortunately,
it&amp;#39;s locked in the Facebook silo. I&amp;#39;ve got a lot to say on that and
hope to explore it soon but today let&amp;#39;s focus on project
cheating - something that could just as easily apply to homeworks and
student essays and research papers as well.
&lt;/p&gt;
&lt;p&gt;
One part of the question is on students using code they find out in
the wild. &lt;a href=&#34;https://twitter.com/alfredtwo&#34;&gt;Alfred&lt;/a&gt; wrote a bit about it on his blog &lt;a href=&#34;http://blog.acthompson.net/2016/05/copying-codesteal-from-best.html&#34;&gt;here&lt;/a&gt; where he points
out some pluses, some minuses, and raises some good thought points.
&lt;/p&gt;
&lt;p&gt;
I want to keep it in the class - code sharing amongst students,
project and source code submission, and group projects.
&lt;/p&gt;
&lt;p&gt;
Teachers have all sorts of options these days including:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Using a CMS like Blackboard or Moodle
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Dropbox based solutions
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Emailing projects
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Using development tools and sites such as git with GitHub, BitBucket
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
or other repository hosting services
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve always been a fan of having the kids learn real software
engineering skills along with the CS so Git, GitHub and public repos
have been my weapon of choice.
&lt;/p&gt;
&lt;p&gt;
Interesting enough, I&amp;#39;ve gotten an earful both from fellow teachers
and professors and online for my stance on public repos.
&lt;/p&gt;
&lt;p&gt;
I keep hearing &amp;#34;the kids will copy from each other&amp;#34; or something like
that.
&lt;/p&gt;
&lt;p&gt;
As Alfred said in his post: &amp;#34;Students have been copying from
classmates for years.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
Students who want to copy assignments have done so long before we&amp;#39;ve
been teaching CS and they&amp;#39;ll be doing it for years to come.
&lt;/p&gt;
&lt;p&gt;
Using a hidden submission system doesn&amp;#39;t help and could hurt.
&lt;/p&gt;
&lt;p&gt;
Far better to create an open environment. You get an opportunity to
talk about code sharing, attribution, learning from each other,
supporting each other, and where to draw the line.
&lt;/p&gt;
&lt;p&gt;
On top of that, the students learn a real tool set and have a chance
to learn real development methodologies.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s a win all around.
&lt;/p&gt;
&lt;p&gt;
Will open repos stop cheating and irresponsible copying? Certainly
not. It could, however, raise awareness.
&lt;/p&gt;
&lt;p&gt;
So what do I do on the cheating front?
&lt;/p&gt;
&lt;p&gt;
Besides trying to create a culture where cheating is discouraged,
cooperation is encouraged but where students know the line, I will try
to keep them honest.
&lt;/p&gt;
&lt;p&gt;
Frequently, the day a big project is due, I&amp;#39;ll give a quiz on the
project. Students will have to describe parts of the project and what
they did. Either a student will have had to contributed or at least
will have had to have studied the rest of the teams code to pass the
quiz.
&lt;/p&gt;
&lt;p&gt;
GitHub also gives tools that help.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the GitHub graph for a project:
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/github-graph.png&#34; alt=&#34;/img/github-graph.png&#34; title=&#34;/img/github-graph.png&#34; align=&#34;center&#34;/&gt;
&lt;p&gt;
You can see who did what and when. The teacher can drill down further
to examine the diffs – what code did each student write, when, and
from where. If two students submit very similar code, the commit
timestamps will even tell you who was first.
&lt;/p&gt;
&lt;p&gt;
The tooling for teachers could be better but the infrastructure is
there.
&lt;/p&gt;
&lt;p&gt;
Technology isn&amp;#39;t going to prevent cheating and more often than not, it
seems that measures taken don&amp;#39;t stop the bad guys but inconvenience
those trying to do it right.
&lt;/p&gt;
&lt;p&gt;
Much better to build a class culture where the kids want to do it the
right way.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shell short - tagging old posts in Nikola</title>
      <link>https://cestlaz.github.io/posts/shell-short-tagging/</link>
      <pubDate>Sun, 15 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/shell-short-tagging/</guid>
      <description>
&lt;p&gt;
Quick post to add to the recent command line fu I&amp;#39;ve been writing
about.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://twitter.com/dougpete&#34;&gt;Douglas Peterson&lt;/a&gt; had another &lt;strong&gt;&lt;strong&gt;Whatever happened to&lt;/strong&gt;&lt;/strong&gt; post. This time
on &lt;a href=&#34;https://dougpete.wordpress.com/2016/05/15/whatever-happened-to-6/&#34;&gt;Logo&lt;/a&gt;. I wanted to reply, talk about NetLogo  and link to some of my
old NetLogo posts to help show how cool it is.
&lt;/p&gt;
&lt;p&gt;
Nikola supports tags, makes a nice &lt;a href=&#34;http://cestlaz.github.io/categories&#34;&gt;tags&lt;/a&gt; page and for each tag, a nice
page of all the &lt;a href=&#34;http://cestlaz.github.io/categories/netlogo&#34;&gt;links&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Nikola has a plugin &lt;strong&gt;&lt;strong&gt;tags&lt;/strong&gt;&lt;/strong&gt; which lets you manage tags from the
command line. For instance:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nikola tags -a netlogo posts/somepost.org&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Would add the tag &lt;strong&gt;&lt;strong&gt;netlogo&lt;/strong&gt;&lt;/strong&gt; to the specified post.
&lt;/p&gt;
&lt;p&gt;
The problem: The tags plugin only works if the post has a &lt;strong&gt;&lt;strong&gt;tag:&lt;/strong&gt;&lt;/strong&gt;
line already present in it&amp;#39;s header comment and I hadn&amp;#39;t put them in
my older posts.
&lt;/p&gt;
&lt;p&gt;
I had a bunch of posts, all of them in one directory. All the new ones
were &lt;strong&gt;&lt;strong&gt;.org&lt;/strong&gt;&lt;/strong&gt; files and had the tag slug. The others were &lt;strong&gt;&lt;strong&gt;.md&lt;/strong&gt;&lt;/strong&gt; markdown
files and &lt;strong&gt;&lt;strong&gt;.html&lt;/strong&gt;&lt;/strong&gt; html files.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what a typical top block looks like:
&lt;/p&gt;
&lt;div class=&#34;src src-html&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;title: &amp;#34;Looking for interesting questions&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;date: 2010-01-03
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Sed to the rescue. Here&amp;#39;s the what I ended up typing (from within the
posts directory) to add the
&lt;strong&gt;&lt;strong&gt;tags&lt;/strong&gt;&lt;/strong&gt; slug to the top comments right above the &lt;strong&gt;&lt;strong&gt;.. type: text:&lt;/strong&gt;&lt;/strong&gt; line:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ls *md *html | &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; read filename
&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/type: text/ i .. tags: &amp;#34;&lt;/span&gt; $filename
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
A line at a time:
&lt;/p&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
ls *md *html
&lt;/h3&gt;
&lt;p&gt;
This lists all the files with that end in &lt;strong&gt;&lt;strong&gt;md&lt;/strong&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;strong&gt;html&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
| while read filename
&lt;/h3&gt;
&lt;p&gt;
The vertical bar (pipe) sends the output of &lt;strong&gt;&lt;strong&gt;ls&lt;/strong&gt;&lt;/strong&gt; into the &lt;strong&gt;&lt;strong&gt;while read&lt;/strong&gt;&lt;/strong&gt;
command. The &lt;strong&gt;&lt;strong&gt;while&lt;/strong&gt;&lt;/strong&gt; command sets up a loop which, each time
through, reads the next input and places into the variable
&lt;strong&gt;&lt;strong&gt;filename&lt;/strong&gt;&lt;/strong&gt;. The body of the loop is between the &lt;strong&gt;&lt;strong&gt;do&lt;/strong&gt;&lt;/strong&gt; and the
&lt;strong&gt;&lt;strong&gt;done&lt;/strong&gt;&lt;/strong&gt;.
&lt;/p&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
sed &amp;#34;/ type: text/  i .. tags: &amp;#34; $filename
&lt;/h3&gt;
&lt;p&gt;
Sed is the stream editor. The stuff between the slashes finds the line
with the text &lt;strong&gt;&lt;strong&gt;type: text&lt;/strong&gt;&lt;/strong&gt; in it. The &lt;strong&gt;&lt;strong&gt;i&lt;/strong&gt;&lt;/strong&gt; inserts a line above and
the rest of the stuff in the quotes is what to insert. The
&lt;strong&gt;&lt;strong&gt;$filename&lt;/strong&gt;&lt;/strong&gt; expands to each filename, one each time through the
loop.
&lt;/p&gt;
&lt;p&gt;
Now all of my files have blank &lt;strong&gt;&lt;strong&gt;tag&lt;/strong&gt;&lt;/strong&gt; slugs so I can find my netlogo
posts and tag them:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nikola tags -a netlogo &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;grep -i -l netlogo posts/*&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Any command in backticks expands to the result of the commmand. The
grep command has two argiments: &lt;strong&gt;&lt;strong&gt;-i&lt;/strong&gt;&lt;/strong&gt; means ignore case so it will
find netlogo, NetLogo, NETLOGO, etc.. The &lt;strong&gt;&lt;strong&gt;-l&lt;/strong&gt;&lt;/strong&gt; tells grep to just
output the filenames. So, the grep command will expand to a list of
files that mention netlogo. The full command adds the netlogo tag to
all of them.
&lt;/p&gt;
&lt;p&gt;
So, just a bit of quick shell scripting and I&amp;#39;ve:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
modified all old posts to accept tags.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
added the netlogo tag to all my netlogo posts.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
You can find all those posts &lt;a href=&#34;http://cestlaz.github.io/categories/netlogo&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BASH scripting?</title>
      <link>https://cestlaz.github.io/posts/bash-scripting/</link>
      <pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/bash-scripting/</guid>
      <description>&lt;p&gt;
Over in the Facebook AP Computer Science Teachers group someone asked
for thoughts on covering BASH scripting as a post AP topic.
&lt;/p&gt;
&lt;p&gt;
A number of us made suggestions. I linked to &lt;a href=&#34;http://cestlaz.github.io/posts/2014-07-06-spreadsheet-vs-cli.html/#.VzR7Et9vETt&#34;&gt;this&lt;/a&gt; old blog post.
&lt;/p&gt;
&lt;p&gt;
One group member said she asked around for similar suggestions and the
response she got was &amp;#34;vi and awk.&amp;#34; I wanted to jokingly respond &amp;#34;and
after they suggested that they got into their time machine and went
back to the 70&amp;#39;s.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
In all seriousness though, I think that suggesting specific tools or
commands is off base.
&lt;/p&gt;
&lt;p&gt;
The important thing to know about Vi is how to get out of it but it
isn&amp;#39;t really a tool in the scripting sense. I do think students should
spend a good amount of time learning a powerful editor and should try
bot Emacs (my choice) and Vim but that&amp;#39;s another story.
&lt;/p&gt;
&lt;p&gt;
I also use AWK but as it&amp;#39;s a programming language in it&amp;#39;s own right,
I&amp;#39;m not sure if I&amp;#39;d introduce it right off the bat.
&lt;/p&gt;
&lt;p&gt;
There are a number of important ideas kids can take away from learning
some Linux (or other Unix flavor):
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
There&amp;#39;s something out there besides Windows and MacOS
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
All about free software
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_philosophy&#34;&gt;The Unix Philosophy&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
That last one is the biggie and more specifically, there&amp;#39;s a huge
upside in teaching kids the value of &amp;#34;OS as Toolset&amp;#34; where they can
compose the many tools that comprise the Linux experience to get
things done.
&lt;/p&gt;
&lt;p&gt;
I gave an example of that in the &lt;a href=&#34;http://cestlaz.github.io/posts/2014-07-06-spreadsheet-vs-cli.html/#.VzSBHt9vETu&#34;&gt;post&lt;/a&gt; I previously linked to.
&lt;/p&gt;
&lt;p&gt;
For the teacher, that means wrapping your head around that way of
working. Living in the shell and using pipes to connect program to
progarm to program.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;d recommend getting into a time
machine ourselves and taking a look at:
&lt;/p&gt;
&lt;p width=&#34;250px&#34; align=&#34;center&#34;&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/The_Unix_Programming_Environment&#34;&gt;&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/4/43/English4.gif&#34; alt=&#34;http://upload.wikimedia.org/wikipedia/en/4/43/English4.gif&#34; title=&#34;http://upload.wikimedia.org/wikipedia/en/4/43/English4.gif&#34;/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s dated but it&amp;#39;s really a great book on getting into the Unix way
of doing things, particularly the chapter about filters. It also has
one of the best and clearest introductions to writing a compiler in
the chapter on program development.
&lt;/p&gt;
&lt;p&gt;
As I said, it is dated - shells are much easier to use and much more
robust, there are many more tools now, and they&amp;#39;ve evolved but it&amp;#39;s
really a must read book.
&lt;/p&gt;
&lt;p&gt;
In terms of tools, I get a lot of mileage out of:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;th&gt;example&lt;/th&gt;
&lt;th&gt;explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cat&lt;/td&gt;
&lt;td&gt;catenate or display a file&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tr&lt;/td&gt;
&lt;td&gt;Translate characters&lt;/td&gt;
&lt;td&gt;tr A-Z a-z&lt;/td&gt;
&lt;td&gt;convert upper to lower case&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sed&lt;/td&gt;
&lt;td&gt;Stream editor&lt;/td&gt;
&lt;td&gt;sed &amp;#34;s/a/b/g&amp;#34;&lt;/td&gt;
&lt;td&gt;Replace all a with b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wc&lt;/td&gt;
&lt;td&gt;word count&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;counts words lines and chars&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cut&lt;/td&gt;
&lt;td&gt;cut columns&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sort&lt;/td&gt;
&lt;td&gt;sort lines&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
A nice simple thing you can do with these is clean data. Let&amp;#39;s say you
want to do some analytics on a book from Project Gutenberg. You might
want to convert all non letters to spaces, and all letters to lower
case:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cat book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/[^a-zA-Z ]/ /g | tr A-Z a-z&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
That sends book.txt into sed which uses a regular expression to convert
no space and letters to spaces. The tr command converts all upper case
letters to lower case.
&lt;/p&gt;
&lt;p&gt;
If you want one word per line, add:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/g&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and maybe get rid of blank lines:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/^$/d&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We can now count the number of words in the file using &lt;strong&gt;&lt;strong&gt;*wc&lt;/strong&gt;&lt;/strong&gt; or even
get counts of all the words:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; uniq &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;sort&lt;/strong&gt;&lt;/strong&gt; will sort all the lines, &lt;strong&gt;&lt;strong&gt;uniq -c&lt;/strong&gt;&lt;/strong&gt; will compress the lines that are
adjacent and the same and give you a count and then &lt;strong&gt;&lt;strong&gt;sort -n&lt;/strong&gt;&lt;/strong&gt; will
sort the results numerically.
&lt;/p&gt;
&lt;p&gt;
I wrote another post a while ago about using the shell to detect
who responded on a Google form. It looks like it didn&amp;#39;t convert when
I moved to my current blogging platform - I&amp;#39;ll repost that shortly.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>REPOST - Shell games - who confirmed attendance</title>
      <link>https://cestlaz.github.io/posts/duplicate-emails/</link>
      <pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/duplicate-emails/</guid>
      <description>
&lt;h3 id=&#34;headline-1&#34;&gt;
Repost
&lt;/h3&gt;
&lt;p&gt;
This is a repost from March 2015. It didn&amp;#39;t transfer when I rebooted the blog.
&lt;/p&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Original
&lt;/h3&gt;
&lt;p&gt;
Quick post on why I love the Unix command line.
&lt;/p&gt;
&lt;p&gt;
We&amp;#39;re busy organizing &lt;a href=&#34;http://cstuy.org&#34;&gt;CSTUY&amp;#39;s&lt;/a&gt; first &lt;a href=&#34;http://cstuy.org/programs/defhacks&#34;&gt;hackathon&lt;/a&gt;. It&amp;#39;s going to be at
&lt;a href=&#34;http://sumall.com&#34;&gt;SumAll&lt;/a&gt;, where we hold our weekly &lt;a href=&#34;http://cstuy.org/programs/hacking_sessions&#34;&gt;hacking sessions&lt;/a&gt; but while taking
registration, we had a little program.
&lt;/p&gt;
&lt;p&gt;
The kids signed up on a Google doc but we all know the story – when
people sign up for a free event, even one with free food and t-shirts,
many don&amp;#39;t show. I asked all of the applicants to confirm by filling
out a second Google doc.
&lt;/p&gt;
&lt;p&gt;
Then it got to reminder time - I wanted to send an email out to all
those kids who signed up on the first form, but hadn&amp;#39;t confirmed on
the second.
&lt;/p&gt;
&lt;p&gt;
Two Google spreadsheets with an email field. I needed all the people
on sheet 1 that weren&amp;#39;t on sheet 2. I&amp;#39;m sure there&amp;#39;s some
spreadsheet-fu that accomplishes this, but nothing I know. I also
could have written a little python script which isn&amp;#39;t so bad, but this
was a perfect time to turn to the shell.
&lt;/p&gt;
&lt;p&gt;
So, here&amp;#39;s how a command line guy would do this.
&lt;/p&gt;
&lt;p&gt;
To start, I put the emails in two files: e1 and e2. The first has
all the original applicants, the second those that confirmed.
&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;e1&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;e2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;25&amp;gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a@a.com&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;b@b.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b@b.com&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;F@f.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c@c.com&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;c@c.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;d@d.com&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;d@d.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;e@e.com&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f@f.com&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;g@g.com&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h@h.com&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
If we put these lists together, any email that appears twice would
indicate that it&amp;#39;s the email of someone that confirmed entry. Here we
use cat to catenate e1 and e2 and pipe them through sort.
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat e1 e2 | sort&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
First problem –the upper case F – let&amp;#39;s use &lt;strong&gt;&lt;strong&gt;tr&lt;/strong&gt;&lt;/strong&gt; to make
everything lower case:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat e1 e2 |  tr A-Z a-z | sort&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now we can see the duplicates next to each other. Next, &lt;strong&gt;&lt;strong&gt;uniq
-c&lt;/strong&gt;&lt;/strong&gt; tells us how many times each line appears:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat e1 e2 | tr A-Z a-z | sort | uniq -c | sort&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I added the sort at the end, but we didn&amp;#39;t need it.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what we get:
&lt;/p&gt;
&lt;div class=&#34;verse-block&#34;&gt;
&lt;p&gt;
1 a@a.com
1 c@c.com
1 c@c.dom
1 e@e.com
1 g@g.com
1 h@hc.om
2 b@b.com
2 d@d.com
2 f@f.com
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
To pull out the ones that haven&amp;#39;t replied I used egrep with a regex
that means &amp;#34;any line that starts with 1 or more spaces followed by the
number 1&amp;#34;:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat e1 e2 | tr A-z a-z | sort | uniq -c | egrep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^ +1&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and finally to isolate the emails using sed which removes the spaces
and number 1 from the beginning of the line:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat e1 e2 | tr A-z a-z | sort | uniq -c | egrep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^ +1&amp;#34;&lt;/span&gt; | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/\ \+1 //g&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Each of the little utilities aren&amp;#39;t all too useful by themselves but
if you learn them over time you start thinking about how you can
combine them to solve problems.
&lt;/p&gt;
&lt;p&gt;
If you think this way and know some basic tools, all of a sudden all
manner of text manipulation problems become pretty easy.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Should We Teach HTML?</title>
      <link>https://cestlaz.github.io/posts/teaching_html/</link>
      <pubDate>Mon, 09 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/teaching_html/</guid>
      <description>&lt;p&gt;
Yesterday, &lt;a href=&#34;https://twitter.com/dougpete&#34;&gt;Doug Peterson&lt;/a&gt; wrote a &amp;#34;Whatever happened to&amp;#34; post subtitled
&lt;a href=&#34;https://dougpete.wordpress.com/2016/05/08/whatever-happened-to-5/&#34;&gt;HTML as an essential 21st Century skill?&lt;/a&gt; It&amp;#39;s a nice post.
&lt;/p&gt;
&lt;p&gt;
I left a comment but thought I&amp;#39;d elaborate here.
&lt;/p&gt;
&lt;p&gt;
No, knowing HTML is not programming - it&amp;#39;s markup. Even so, when I
help people design CS programs, I&amp;#39;ll frequently recommend starting
with HTML or at least introducing it early.
&lt;/p&gt;
&lt;p&gt;
Why?
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s a gateway and not just to programming.
&lt;/p&gt;
&lt;p&gt;
HTML is pretty easy, you want &lt;strong&gt;&lt;strong&gt;something&lt;/strong&gt;&lt;/strong&gt; bold, you just wrap the
word in &lt;code class=&#34;verbatim&#34;&gt;&amp;lt;b&amp;gt;&lt;/code&gt; and &lt;code class=&#34;verbatim&#34;&gt;&amp;lt;/b&amp;gt;&lt;/code&gt;:
&lt;/p&gt;
&lt;div class=&#34;src src-html&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;b&lt;/span&gt;&amp;gt;something&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;b&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It&amp;#39;s also empowering and demystifies the web. Kids can create a simple
web page and load it right into their browser.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s true that today&amp;#39;s web pages are chock-full-o javascript and css
but with just the basics, students can get the idea. You can also show
them pages by right clicking and viewing source.
&lt;/p&gt;
&lt;p&gt;
You can even have them change a live page.
&lt;/p&gt;
&lt;p&gt;
Try it.
&lt;/p&gt;
&lt;p&gt;
Right click on the top of this page where it says &amp;#34;Musings about…&amp;#34;
Chose &lt;strong&gt;&lt;strong&gt;inspect element&lt;/strong&gt;&lt;/strong&gt;. In the &amp;#34;debugger&amp;#34; window double click the
text, change it and hit enter. This is just temporary - just reload
the page but it&amp;#39;s pretty neat for a kid to change an article and then
screenshot it.
&lt;/p&gt;
&lt;p&gt;
HTML is also a nice stepping stone towards coding. You&amp;#39;re working in a
plain text editor by adding special code words to basic text which are
then interpreted by, in this case, the web browser.
&lt;/p&gt;
&lt;p&gt;
The big reason for teaching html actually goes beyond this. Next step
after learning HTML is having the kids programatically generating web
pages in whatever language you&amp;#39;re using for the class. I like using
Python. This requires a little infrastructure setup to serve kids work
but then there are two huge wins.
&lt;/p&gt;
&lt;p&gt;
First, as the kids learn programming, instead of just printing out
results, they can make a web site with their results and share it with
friends, family, and the world.
&lt;/p&gt;
&lt;p&gt;
The other big bonus is that kids might be able to leverage take these
skills to other classes. If the student has a history paper to write,
maybe the teacher will accept a history web site where the student can
write code to do their analytics and build nice looking tables and
graphs with results.
&lt;/p&gt;
&lt;p&gt;
So while knowledge of HTML in and of itself isn&amp;#39;t really needed
anymore it&amp;#39;s still an important part of the programs I build.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I hate ruby or why I&#39;m switching blogging platforms</title>
      <link>https://cestlaz.github.io/posts/2016-04-14-i-hate-ruby/</link>
      <pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-04-14-i-hate-ruby/</guid>
      <description>&lt;!DOCTYPE html&gt;
&lt;p&gt;
I&#39;m moving to a new blogging platform. I&#39;m still going to use GitHub
pages but after a few years of using &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;, I&#39;m switching to &lt;a href=&#34;https://getnikola.com/&#34;&gt;Nikola&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I think I&#39;ve got the move worked out but if you&#39;re reading this via an
rss or atom reader, make sure to check back in a couple of days - you
might have to re-subscribe.
&lt;/p&gt;

&lt;p&gt;
Why am I switching?
&lt;/p&gt;

&lt;p&gt;
Because I hate Ruby.
&lt;/p&gt;

&lt;p&gt;
Ok, not really - I barely know the language. I was already a  Python
guy when Ruby came along and I didn&#39;t see any real added value to
switching.
&lt;/p&gt;

&lt;p&gt;
This isn&#39;t really about Ruby though, it&#39;s really about how that which
we don&#39;t know is strange and frightening. In this case, the ruby ecosystem.
&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/LV0wTtiJygY&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
I started using Jekyll because that&#39;s what was supported by GitHub
pages. It&#39;s fairly simple and it basically worked. It had a few
warts, specifically, I&#39;ve had problems getting org-mode blog posts to
publish just the way I&#39;d like and it&#39;s hard to debug when a post has
some bad markup in it, but it got the job done.
&lt;/p&gt;

&lt;p&gt;
Recently, though, I&#39;ve had to re-install Jekyll a number of  times and
for me, that&#39;s been a nightmare.
&lt;/p&gt;

&lt;p&gt;
One is supposed to just be able to &lt;b&gt;&lt;b&gt;sudo gem install jekyll&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Ok, so you need some packages installed:
&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install ruby-dev
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
But I&#39;ve got ruby 1.9 and I need ruby 2 point something. Ok:
&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install ruby2.0 ruby2.0-dev
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
But that fails since we&#39;re still running 1.9. Every time I look for a
solution I go down the ruby ecosystem rabbit hole.
&lt;/p&gt;

&lt;p&gt;
All I want is Jekyll!!!!!!
&lt;/p&gt;

&lt;p&gt;
Why can&#39;t I just &lt;b&gt;&lt;b&gt;pip install jekyll&lt;/b&gt;&lt;/b&gt; like I can do with Python
packages!!!!!
&lt;/p&gt;

&lt;p&gt;
In truth, there&#39;s nothing wrong with the ruby ecosystem, It&#39;s just
something I&#39;m not familiar with. I probably had to go through the same
battles with Python it&#39;s just that I did them incrementally over time.
&lt;/p&gt;

&lt;p&gt;
The truth is, setting up a development environment should be much
easier. It used to be that I installed Linux, it had C installed and I
just had to install &lt;a href=&#34;https://en.wikipedia.org/wiki/Make_(software)&#34;&gt;make&lt;/a&gt;. Now it&#39;s all about tool chains, virtual
environments, containers, and more.
&lt;/p&gt;

&lt;p&gt;
I think this is what &lt;a href=&#34;https://twitter.com/roybahat&#34;&gt;Roy&lt;/a&gt; was talking about when we traded
tweets on using development environments in an  &lt;a href=&#34;http://cestlaz.github.io/2016/04/12/ide-or-cloud.html#.Vw_nPN9vETt&#34;&gt;Ide or in the cloud&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
If it&#39;s hard for me to get an environment running, imagine some poor
soul who just went through a &#34;learn to code&#34; web site and now has to
figure out how to set up his or her own machine!!!!!!
&lt;/p&gt;

&lt;p&gt;
I don&#39;t have a solution but at least it hasn&#39;t stopped me and others
from trying new things.
&lt;/p&gt;

&lt;p&gt;
Two of my CS blogging friends, &lt;a href=&#34;https://gflint.wordpress.com/&#34;&gt;Garth Flint&lt;/a&gt; and &lt;a href=&#34;http://blog.acthompson.net/&#34;&gt;Alfred Thompson&lt;/a&gt; have in
their own ways talked about this same issue. Garth, showing a bias
towards VB yet still working to get his head around Python. Alfred
shows the same disdain for Linux and the command line as I show
towards Windows. All this leads to valuable learning experiences and
discussions.
&lt;/p&gt;

&lt;p&gt;
Personally, I&#39;m also going through this battle as I continue to
explore Clojure.
&lt;/p&gt;

&lt;p&gt;
So, I&#39;m going to finish the changeover to Nikola in the next day or
two. Remember to check back in case the feeds aren&#39;t working.
&lt;/p&gt;

&lt;p&gt;
Once I make the change, I&#39;ll talk about Jekyll vs Nikola as actual
blogging platforms.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IDE or the Cloud</title>
      <link>https://cestlaz.github.io/posts/2016-04-12-ide-or-cloud/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-04-12-ide-or-cloud/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;
&lt;div id=&#34;outline-container-orgheadline1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline1&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline1&#34;&gt;
&lt;p&gt;
This weekend, I had a conversation on Twitter with my friend &lt;a href=&#34;https://twitter.com/roybahat&#34;&gt;Roy Bahat&lt;/a&gt;:
&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/zamansky&#34;&gt;@zamansky&lt;/a&gt; Mike, unrelated, what do you think of &lt;a href=&#34;https://t.co/BT1ublbajF&#34;&gt;https://t.co/BT1ublbajF&lt;/a&gt; ?&lt;/p&gt;&amp;mdash; Roy Bahat (@roybahat) &lt;a href=&#34;https://twitter.com/roybahat/status/718835740738650112&#34;&gt;April 9, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/roybahat&#34;&gt;@roybahat&lt;/a&gt;Maybe I&amp;#39;ll blog about my thoughts about online environments vs local installs&lt;/p&gt;&amp;mdash; Mike Zamansky (@zamansky)
&lt;a href=&#34;https://twitter.com/zamansky/status/718837282334240768&#34;&gt;April 9, 2016&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/roybahat&#34;&gt;@roybahat&lt;/a&gt; Agree with this but there are many issues. I&amp;#39;ll try to write more later. Now going to see my son in &lt;a href=&#34;https://twitter.com/umgass&#34;&gt;@umgass&lt;/a&gt; prod of Pinafore.&lt;/p&gt;&amp;mdash; Mike Zamansky (@zamansky) &lt;a href=&#34;https://twitter.com/zamansky/status/718838508689993728&#34;&gt;April 9, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;
Another friend had just asked me about IDEs vs local installs for learning enviromnents the day before.
&lt;/p&gt;

&lt;p&gt;
So, should we use cloud based IDEs when teaching CS or should we use
local installs.
&lt;/p&gt;

&lt;p&gt;
There isn&#39;t a single right answer but I thought I&#39;d share some of my thoughts here.
&lt;/p&gt;

&lt;p&gt;
I&#39;m hoping this is helpful to both those of us in the trenches as well
as maybe some platform developers out there.
&lt;/p&gt;

&lt;p&gt;
Some times, you don&#39;t have a choice.
&lt;/p&gt;

&lt;p&gt;
On the web based side, does your school have the bandwidth. We&#39;re not
only talking about the pipe to the outside world but also &lt;a href=&#34;http://www.nytimes.com/2016/01/14/nyregion/bronx-science-bans-cellphones-from-wi-fi-as-students-devour-it.html?_r=0&#34;&gt;wifi within
the school&lt;/a&gt;.  If kids can&#39;t reliably get to the web based environment,
it&#39;s not a viable option. On the other hand, cloud based software will
always be up to date and properly configured and kids can use them
from home or pretty much anywhere they have a connection.
&lt;/p&gt;

&lt;p&gt;
On the other side we have local installs. This can also present
problems. Is the teacher allowed to install locally? Does he or she
know how to do it? Who&#39;s going keep all the machines up to date and configured?
&lt;/p&gt;

&lt;p&gt;
Assuming we can get past the technical issues we can start looking at
the education side of thing.
&lt;/p&gt;

&lt;p&gt;
On the web based side, you&#39;ve got a silo. This can be both good and
bad. In an intro class, using a tool like &lt;a href=&#34;http://codesters.com&#34;&gt;Codesters&lt;/a&gt; can keep the cost
of entry low, allow students to share work online and allow teachers
to make use of their curricular materials. If you can&#39;t tell, I&#39;m a
big fan of Codesters and the Codesters team. The limitation is that
you have to use their simplified interface and toolset.
&lt;/p&gt;

&lt;p&gt;
Some web based IDEs like &lt;a href=&#34;http://koding.com&#34;&gt;Koding&lt;/a&gt; offer more flexibility - one tool with
many languages as well as deployment. The cost is complexity. With
Koding, you&#39;re basically running a virtual machine in the
cloud. You&#39;ve got their web based IDE and a terminal shell so it&#39;s not
as complex as doign everything from scratch locally but it&#39;s not as
structured as Codesters and is more of a general purpose site rather
than one focussed soley on learning.
&lt;/p&gt;

&lt;p&gt;
Then you have &lt;a href=&#34;http://repl.it&#34;&gt;repl.it&lt;/a&gt;. This looks to be a great platform for
experienced programmers to play with and explore new languages but I&#39;d
be concerned about using it with beginners. It looks like they&#39;re
rolling out some teacher tools so this might be worth revisiting soon.
&lt;/p&gt;

&lt;p&gt;
In any case and with other web based products, you&#39;re living in the
providers silo.
&lt;/p&gt;

&lt;p&gt;
Personally, I&#39;m a command line wonk and confessed Emacs geek so I&#39;m
generally wary of an online environment without an exit strategy to
real world tools. Eventually, if all development moves into the
browser as platform then this problem goes away, but for now, you&#39;re
not going to have the expressive power and flexibility that a local
install gives.
&lt;/p&gt;

&lt;p&gt;
Local installs let you use more powerful and flexible tools either
alone or in combination.
&lt;/p&gt;

&lt;p&gt;
Keeping kids out of silos also makes it easier for them to learn new
tools, languages, and techniques.
&lt;/p&gt;

&lt;p&gt;
Since I like generic tools, I&#39;m not a fan of big professional IDEs
like Eclipse. I&#39;m an Emacs geek but Atom, Sublime Text, and Vim are
all good as well.
&lt;/p&gt;

&lt;p&gt;
There are also an assortment of beginner IDEs like Dr. Racket and I&#39;m
a fan with these for beginners as long as there&#39;s an exit strategy.
&lt;/p&gt;

&lt;p&gt;
For completeness, I should mention that if I weren&#39;t an old school
Emacs guy, I might check out something like JetBrain&#39;s IDEs. They&#39;re
much lighter weight than something like Eclipse but still full
featured. Somewhere between a true general purpose, customizable,
programmable editor and an all encompassing IDE.
&lt;/p&gt;


&lt;p&gt;
In general, I use online enviromnents with my classes early on when:
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;They&#39;re pretty much identical or equivalent to the installed version.&lt;/li&gt;
&lt;li&gt;They provide some value added (&lt;a href=&#34;http://codingbat.com&#34;&gt;codingbat&lt;/a&gt; for example) so they&#39;re not
being used as a development environment but for some other purpose.&lt;/li&gt;
&lt;li&gt;They help with student collaboration (such as cloud9 or Koding.com
for more advanced kids).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
In any case, it&#39;s imporant that our kids aren&#39;t locked into any IDE be
it web based or local.
&lt;/p&gt;

&lt;p&gt;
Our kids that go on to more advanced CS studies will certainly need to
break out of sheltered world of a learning IDE and we&#39;re not doing
them a service if we shelter them too long.
&lt;/p&gt;

&lt;p&gt;
Our other kids also benefit from seeing beyond these restrictive
environments. A student might learn to code in Python in one of our
classes, but if we do our jobs right, that student might be writing a
little Javascript to automate Google Docs.
&lt;/p&gt;

&lt;p&gt;
I can&#39;t tell you how many people I&#39;ve seen go through online coding
courses in a web based enviromnent only to be unable to do anything
outside of that enviromnent.
&lt;/p&gt;

&lt;p&gt;
At the end of the day, we want our kids to be empowered to grow on
their own. All of the things I&#39;ve talked about here are merely
tools. Each has it&#39;s place. It&#39;s up to the teacher to make the roadmap
and to lead the student down the path.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Debugging deployment</title>
      <link>https://cestlaz.github.io/posts/2016-01-23-debugging-deployment/</link>
      <pubDate>Sat, 23 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2016-01-23-debugging-deployment/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
SoftDev students are hard at work on their final projects. By now,
they all have fairly complex code bases. This limits how much I can
help them with debugging.
&lt;/p&gt;

&lt;p&gt;
There are some problems, though, that they have to contend with that
even with experience, are hard to spot. Notably because the very
tools you use to debug these errors are part of the problem.
&lt;/p&gt;

&lt;p&gt;
Last week, this happened twice. Both cases were brought to me by
really strong students which just goes to underscore how insidious
these problems can be.
&lt;/p&gt;


&lt;p&gt;
Here&#39;s a fake code snippet of a &lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt; application that illustrates
both problems.
&lt;/p&gt;


&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;&lt;span class=&#34;linenr&#34;&gt; 1: &lt;/span&gt;from flask import Flask, render_template
&lt;span class=&#34;linenr&#34;&gt; 2: &lt;/span&gt;
&lt;span class=&#34;linenr&#34;&gt; 3: &lt;/span&gt;app = Flask(__name__)
&lt;span class=&#34;linenr&#34;&gt; 4: &lt;/span&gt;
&lt;span class=&#34;linenr&#34;&gt; 5: &lt;/span&gt;@app.route(&#34;/&#34;)
&lt;span class=&#34;linenr&#34;&gt; 6: &lt;/span&gt;def index():
&lt;span class=&#34;linenr&#34;&gt; 7: &lt;/span&gt;    return &#34;hello&#34;
&lt;span class=&#34;linenr&#34;&gt; 8: &lt;/span&gt;
&lt;span class=&#34;linenr&#34;&gt; 9: &lt;/span&gt;@app.route(&#39;/test/&amp;lt;some_data&amp;gt;&#39;)
&lt;span class=&#34;linenr&#34;&gt;10: &lt;/span&gt;def test():
&lt;span class=&#34;linenr&#34;&gt;11: &lt;/span&gt;    picture_url = build_url(some_data)
&lt;span class=&#34;linenr&#34;&gt;12: &lt;/span&gt;    result = api_test(picture_url)
&lt;span class=&#34;linenr&#34;&gt;13: &lt;/span&gt;    do_something(result)
&lt;span class=&#34;linenr&#34;&gt;14: &lt;/span&gt;
&lt;span class=&#34;linenr&#34;&gt;15: &lt;/span&gt;if __name__ == &#34;__main__&#34;:
&lt;span class=&#34;linenr&#34;&gt;16: &lt;/span&gt;   app.debug = True
&lt;span class=&#34;linenr&#34;&gt;17: &lt;/span&gt;   app.secret_key = &#34;some secret key&#34;
&lt;span class=&#34;linenr&#34;&gt;18: &lt;/span&gt;   app.run(host=&#34;0.0.0.0&#34;, port=8000)
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
First, the &#34;easy&#34; one. The student was trying to deploy the
application. We use &lt;a href=&#34;http://gunicorn.org/&#34;&gt;Green Unicorn&lt;/a&gt; to deploy our applications,
ultimately on &lt;a href=&#34;http://digitalocean.com/&#34;&gt;Digital Ocean&lt;/a&gt; servers in the cloud.
&lt;/p&gt;

&lt;p&gt;
The student was using the correct command:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-shell&#34;&gt;gunicorn -W 4 -b 0.0.0.0:8000 app:app
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
but it wasn&#39;t working. It ran, but whenever he went to the site, it
came back with an error.
&lt;/p&gt;

&lt;p&gt;
The problem?
&lt;/p&gt;

&lt;p&gt;
He had to change:
&lt;/p&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;if __name__ == &#34;__main__&#34;:
app.debug = True
app.secret_key = &#34;some secret key&#34;
app.run(host=&#34;0.0.0.0&#34;, port=8000)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
to
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;app.secret_key = &#34;some secret key&#34;
if __name__ == &#34;__main__&#34;:
app.debug = True
app.run(host=&#34;0.0.0.0&#34;, port=8000)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Normally, when developing and testing our applications, we use the
test server that&#39;s bundled with Flask. The line that reads
&#34;app.run&amp;#x2026;&#34; takes care of this.
&lt;/p&gt;

&lt;p&gt;
When running the application as a &#34;main program&#34; - &#34;python app.py&#34; the
if statement is true and it runs the indented lines, setting the
secret key which is required for session management.
&lt;/p&gt;

&lt;p&gt;
When running under &lt;b&gt;&lt;b&gt;gunicorn&lt;/b&gt;&lt;/b&gt;, the &lt;b&gt;&lt;b&gt;gunicorn&lt;/b&gt;&lt;/b&gt; server loads the
application as a module and then runs it. In this case name isn&#39;t main
so it never sets secret key and so we have a problem.
&lt;/p&gt;

&lt;p&gt;
Pretty subtle and even though we did cover this in class, it comes up
pretty rarely so it&#39;s not an easy catch.
&lt;/p&gt;

&lt;p&gt;
Then there was this problem.
&lt;/p&gt;

&lt;p&gt;
The setup for this one&#39;s a little more complicated. The group was
using a facial recognition api. You provide the API with the url to an
image, it fetches it and does recognition.
&lt;/p&gt;

&lt;p&gt;
It&#39;s also important to note that when Flask is running, it will serve
files from a static directory, so, if I&#39;m running my flask server on
myhost, port 800 and you stored an image named picture.jpg in the
static directory, going to:
&lt;/p&gt;

&lt;verbatim&gt;
http://myhost:8000/static/picture.jpg
&lt;/verbatim&gt;
&lt;br&gt;&lt;br&gt;


&lt;p&gt;
would get that image.
&lt;/p&gt;

&lt;p&gt;
The group did things right. They ran the Flask test server to serve
the static files and then wrote a small python program to test the
api:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-python&#34;&gt;picture_url = build_url(some_data)
result = api_test(picture_url)
do_something(result)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Everything worked fine.
&lt;/p&gt;

&lt;p&gt;
But, when they put this code in as a route in their web app (as in the
top code fragment), it froze.
&lt;/p&gt;

&lt;p&gt;
They couldn&#39;t figure it out.
&lt;/p&gt;

&lt;p&gt;
The code worked as a &#34;stand alone&#34; but not in the web app.
&lt;/p&gt;

&lt;p&gt;
The problem?
&lt;/p&gt;

&lt;p&gt;
Once again, the built in Flask development server.
&lt;/p&gt;

&lt;p&gt;
The development server runs in a single thread / process. This means
it can only do one thing at a time. When they ran their test as a
separate program, the api they used made a request to their app to
serve up the static picture file and it worked.
&lt;/p&gt;

&lt;p&gt;
When they ran from the Flask application itself, their app made a call
to the web api (line 12) and then blocked while waiting for the
response. The web api tried to request the image from the Flask app
but it was blocked &amp;#x2013; &lt;b&gt;&lt;b&gt;deadlock&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Again, the solution was to run the web app using a server that could
handle multiple requests - gunicorn.
&lt;/p&gt;

&lt;p&gt;
Once again, that solved the problem.
&lt;/p&gt;

&lt;p&gt;
Both of these problems were fairly subtle and very hard to catch -
even with experience. I remember the hours I lost when I was learning
this stuff.
&lt;/p&gt;

&lt;p&gt;
Some times kids get caught up in algorithms or poor code design but
sometimes, it&#39;s just the tools.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Know your tools - intermediate Emacs</title>
      <link>https://cestlaz.github.io/posts/2015-10-28-emacs-intermediate/</link>
      <pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-10-28-emacs-intermediate/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;
&lt;div id=&#34;outline-container-orgheadline1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline1&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline1&#34;&gt;
&lt;p&gt;
A good workman is known by his tools, or so the saying goes. My tools
of choice are my terminal shell and Emacs.
&lt;/p&gt;

&lt;p&gt;
I suppose if I was a full time developer working with a limited set of
tools I might like an IDE like JetBrains or Eclipse but no matter how
many alternatives I try, I always end back in Emacs.
&lt;/p&gt;

&lt;p&gt;
I recommend that my students spend time not only in Emacs but also in
tools like Vim or Sublime Text.
&lt;/p&gt;

&lt;p&gt;
I do warn them, though, that as a commercial product, Sublime might
not be around forever, I mean before Sublime was sublime, TextMate was
sublime. If you go back to the 1980s, Brief was sublime.
&lt;/p&gt;

&lt;p&gt;
Commercial tools come and go but I&#39;ve been using Emacs since the mid
eighties.
&lt;/p&gt;

&lt;p&gt;
A few students have been asking me for some pointers on going past the
basics of Emacs so here we go.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id=&#34;outline-container-orgheadline2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline2&#34;&gt;Notes&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline2&#34;&gt;
&lt;p&gt;
This post just has some getting started notes. There are mode powerful
and advanced ways of doing most things.
&lt;/p&gt;

&lt;p&gt;
I think I&#39;ll just talk about a few of the basics here and will write
about code development with Emacs in a later post.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-orgheadline3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline3&#34;&gt;Starting out&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline3&#34;&gt;
&lt;p&gt;
Once you&#39;re OK with the basics (by using the built in tutorial or
on line resources) start to fore yourself to get to know:
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-orgheadline4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;orgheadline4&#34;&gt;Buffers&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-orgheadline4&#34;&gt;
&lt;p&gt;
when you find a new file &lt;b&gt;&lt;b&gt;(C-x C-f)&lt;/b&gt;&lt;/b&gt; it opens it into a new
buffer. You can also open a new buffer using &lt;b&gt;&lt;b&gt;C-x b&lt;/b&gt;&lt;/b&gt; and rather than
selecting a buffer typing in a new buffer name.
&lt;/p&gt;

&lt;p&gt;
Each buffer can hold a file and you can switch quickly between them
using &lt;b&gt;&lt;b&gt;C-x b&lt;/b&gt;&lt;/b&gt; and hitting &lt;b&gt;&amp;lt;Enter&amp;gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
You can kill the current buffer with &lt;b&gt;&lt;b&gt;C-x k&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Using buffers lets you edit multiple files in a project quickly and
efficiently.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-orgheadline5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;orgheadline5&#34;&gt;Windows&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-orgheadline5&#34;&gt;
&lt;p&gt;
Your Emacs frame can be split into multiple windows. &lt;b&gt;&lt;b&gt;C-x 2&lt;/b&gt;&lt;/b&gt; splits
the window top and bottom, &lt;b&gt;&lt;b&gt;C-x3&lt;/b&gt;&lt;/b&gt; left and right. You can switch
between windows using &lt;b&gt;&lt;b&gt;C-x o&lt;/b&gt;&lt;/b&gt; for other window. Switching to one
window is done with &lt;b&gt;&lt;b&gt;C-x 1&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-orgheadline6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline6&#34;&gt;Getting Help&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline6&#34;&gt;
&lt;p&gt;
Get to know the built in help. You can always use functions like
&lt;b&gt;&lt;b&gt;M-x describe-function&lt;/b&gt;&lt;/b&gt; or &lt;b&gt;&lt;b&gt;M-x describe-key&lt;/b&gt;&lt;/b&gt; and of course
you can use completion to help speed things up but the help functions
are bound to:
&lt;/p&gt;
&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;C-h k  for describe key&lt;/li&gt;
&lt;li&gt;C-h f  for describe function&lt;/li&gt;
&lt;li&gt;C-h a for search for command&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
You can usually type &lt;b&gt;&lt;b&gt;q&lt;/b&gt;&lt;/b&gt; to close the help.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-orgheadline7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline7&#34;&gt;Navigation&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline7&#34;&gt;
&lt;p&gt;
Use search for navigation rather than arrow keys.
&lt;/p&gt;

&lt;p&gt;
This can change the way you edit.
&lt;/p&gt;

&lt;p&gt;
For example ,if I wanted to go up to the word Navigation, above,
rather than using traditional motion keys, I&#39;d do a reverse search
(&lt;b&gt;&lt;b&gt;C-r&lt;/b&gt;&lt;/b&gt;) and search for Nav.
&lt;/p&gt;

&lt;p&gt;
Incremental search forward (&lt;b&gt;&lt;b&gt;C-s&lt;/b&gt;&lt;/b&gt;) and back are your friends.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-orgheadline8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline8&#34;&gt;Packages&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline8&#34;&gt;
&lt;p&gt;
You can check out my emacs configuration here:
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/dotemacs&#34;&gt;&lt;a href=&#34;https://github.com/zamansky/dotemacs&#34;&gt;https://github.com/zamansky/dotemacs&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
You can find basic installation instructions there or you can use the
interactive package manager, invoking it with &lt;b&gt;&lt;b&gt;M-x list-packages&lt;/b&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Some of my favorite general purpose packages are:
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;Swiper&lt;/a&gt; - for navigation and finding files&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nflath/hungry-delete&#34;&gt;Hungry Delete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/magnars/expand-region.el&#34;&gt;Expand Region&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/abo-abo/ace-window&#34;&gt;Ace Window&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-orgheadline9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgheadline9&#34;&gt;Next steps&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgheadline9&#34;&gt;
&lt;p&gt;
We haven&#39;t even talked about code development or killer packages like
org-mode but I think this will do for a start.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Shell games - who confirmed attendence</title>
      <link>https://cestlaz.github.io/posts/2015-03-19-duplicate-emails/</link>
      <pubDate>Thu, 19 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2015-03-19-duplicate-emails/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
Quick post on why I love the Unix command line.
&lt;/p&gt;

&lt;p&gt;
We&#39;re busy organizing &lt;a href=&#34;http://cstuy.org&#34;&gt;CSTUY&#39;s&lt;/a&gt; first &lt;a href=&#34;http://cstuy.org/programs/defhacks&#34;&gt;hackathon&lt;/a&gt;. It&#39;s going to be at
&lt;a href=&#34;http://sumall.com&#34;&gt;SumAll&lt;/a&gt;, where we hold our weekly &lt;a href=&#34;http://cstuy.org/programs/hacking_sessions&#34;&gt;hacking sessions&lt;/a&gt; but while taking
registration, we had a little program.
&lt;/p&gt;

&lt;p&gt;
The kids signed up on a Google doc but we all know the story &amp;#x2013; when
people sign up for a free event, even one with free food and t-shirts,
many don&#39;t show. I asked all of the applicants to confirm by filling
out a second Google doc.
&lt;/p&gt;

&lt;p&gt;
Then it got to reminder time - I wanted to send an email out to all
those kids who signed up on the first form, but hadn&#39;t confirmed on
the second.
&lt;/p&gt;

&lt;p&gt;
Two Google spreadsheets with an email field. I needed all the people
on sheet 1 that weren&#39;t on sheet 2. I&#39;m sure there&#39;s some
spreadsheet-fu that accomplishes this, but nothing I know. I also
could have written a little python script which isn&#39;t so bad, but this
was a perfect time to turn to the shell.
&lt;/p&gt;

&lt;p&gt;
So, here&#39;s how a command line guy would do this.
&lt;/p&gt;

&lt;p&gt;
To start, I put the emails in two files: e1 and e2. The first has
all the original applicants, the second those that confirmed.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-org&#34;&gt;|
</description>
    </item>
    
    <item>
      <title>Spreadsheet? I&#39;d rather use the command line.</title>
      <link>https://cestlaz.github.io/posts/2014-07-06-spreadsheet-vs-cli/</link>
      <pubDate>Sun, 06 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-07-06-spreadsheet-vs-cli/</guid>
      <description>&lt;!DOCTYPE html&gt;


&lt;style&gt;
div.center {text-align:center;}
&lt;/style&gt;

&lt;p&gt;
Spreadsheets are terrific - we&#39;ve all used them. I particularly like
Google spreadsheets - I use them all the time to collect data, usually
from students.
&lt;/p&gt;

&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;Go to Google Drive
&lt;/li&gt;
&lt;li&gt;Make a form
&lt;/li&gt;
&lt;li&gt;Send the form out to the students
&lt;/li&gt;
&lt;li&gt;Wait
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
All the data gets dumped into a Google spreadsheet. The trouble is,
what to do with it once it&#39;s in the spreadsheet.
&lt;/p&gt;

&lt;p&gt;
The other day, I wrote on a few basic stats for our upcoming SHIP
program. The data I reported on was all collected in a spreadsheet. I
also collected participant and parent emails in the spreadsheet.
&lt;/p&gt;

&lt;p&gt;
So, here&#39;s the task, compute some simple numbers form the spreadsheet
and also extract and use the email addresses.
&lt;/p&gt;

&lt;p&gt;
I&#39;m sure one could use some fancy spreadsheet magic to get the job
done, but I&#39;m a command line wonk &amp;#x2013; here&#39;s how I take care of tasks
like these.
&lt;/p&gt;

&lt;p&gt;
First, I downloaded the spreadsheet as a csv (comma separated value)
file. Each line looked something like this:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-csv&#34;&gt;last,first,email,address,gender,grade,school,...
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
First question, how many applicants did we have:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;cat cstuy.csv | wc -l
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Which gave:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
47
&lt;/pre&gt;



&lt;p&gt;
The |, or pipe means take the output of the first command and send it
to the  next one. &lt;b&gt;Cat&lt;/b&gt; just outputs the original file and &lt;b&gt;wc -l&lt;/b&gt; counts all
the lines in the file.
&lt;/p&gt;

&lt;p&gt;
Next, how many young ladies:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;cat cstuy.csv | grep female | wc -l
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The results:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
17
&lt;/pre&gt;

&lt;p&gt;
How many schools? Well, that&#39;s a little trickier. Here, I use a few
extra commands:
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-2&#34;&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-2&#34;&gt;
&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;cut - this will cut out one column from the csv file - in this case
the school column (the -d, says use a comma as delimiter and -f7 for
field 7).
&lt;/li&gt;
&lt;li&gt;sort - takes the lines and sorts them.
&lt;/li&gt;
&lt;li&gt;uniq - eliminates duplicate lines in a sorted file
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Putting it all together:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;cat cstuy.csv | cut -d, -f7 | sort | uniq | wc -l
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Results:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
30
&lt;/pre&gt;


&lt;p&gt;
Thirty different schools.
&lt;/p&gt;

&lt;p&gt;
Finally I needed the emails - here I wanted to be able to paste them
into Gmail&#39;s bcc field. I could have just used &lt;b&gt;cat&lt;/b&gt; and &lt;b&gt;cut&lt;/b&gt; and
then used the mouse, but instead:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;cat cstuy.csv | cut -d, -f3 | xclip -sel clip
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Then I can just do a Ctrl-v in Gmail and I&#39;m good to go.
&lt;/p&gt;

&lt;p&gt;
The cool thing is that the tools here - cut, sort, uniq, grep  - are
all general purpose tools that do simple text manipulations. Once you
know them and a few others, you can really quickly and efficiently do
all sorts of data processing without even thinking about it. I still
go to the spreadsheet for data collection ad also for when I need more
hardcore formulas but for day to day manipulations, I&#39;ll take the
command line.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Shell Games - an introduction</title>
      <link>https://cestlaz.github.io/posts/2014-02-04-shellgames-1-intro/</link>
      <pubDate>Tue, 04 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2014-02-04-shellgames-1-intro/</guid>
      <description>&lt;p&gt;A few weeks ago, I noticed this Twitter conversation between &lt;!-- raw HTML omitted --&gt;Alfred Thompson&lt;!-- raw HTML omitted --&gt;  and &lt;!-- raw HTML omitted --&gt;Steve Keinath&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;I briefly considered proposing a session for the conference but it was just a day or two before the deadline, I don&amp;rsquo;t know if I&amp;rsquo;m going to be able to attend the conference, and besides, who said anything I proposed would be accepted.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Still, I liked the idea - I&amp;rsquo;ve been an educator for 23 years, a Linux user for most of that time and an  Unix user for longer. I&amp;rsquo;m a firm believer in operating system as toolkit and so I think I&amp;rsquo;ll take Steve and Alfred&amp;rsquo;s suggestion and try to put together a series of posts on using Linux from a CS educators point of view.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;So, before we begin - a little background.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;I can proudly say that I&amp;rsquo;ve been Windows free since about 2000. That&amp;rsquo;s when I decided to wipe the lat traces of Microsoft from my hard drives. Prior to that I just booted up MS-DOS or Windows to play games or to use a Excel or Word.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Since the early days of Linux - back before Slackware, I dual booted. Before Linux, I dialed into public Unix systems such as &lt;!-- raw HTML omitted --&gt;Panix&lt;!-- raw HTML omitted --&gt; or &lt;!-- raw HTML omitted --&gt;The Big Electric Cat&lt;!-- raw HTML omitted --&gt;. At home, I tried to make MS-DOS as Unix like as I could. I ran the &lt;!-- raw HTML omitted --&gt;MKS Toolkti&lt;!-- raw HTML omitted --&gt;, and used my own shell (a project every young programmer should attempt).&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Why am I posting this now? It&amp;rsquo;s a new semester and I find myself, as usual, leveraging the Linux shell. It was time to set up a mailing list for the class.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;I&amp;rsquo;m able to go to our school&amp;rsquo;s data system and grab a tab delimited file that looks something like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;It&amp;rsquo;s tab delimited but I scrambled the letters so as to not reveal any student info.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Oh, how did I do that scrambling? Easy. First, I combined some basic utilities to make a random permutation of the upper and lower case letters and stored them in a shell variable. Don&amp;rsquo;t worry, I&amp;rsquo;ll explain these commands in upcoming posts:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Then I used tr (translate) to exchange the real letters for the matching letter in the random permutation:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;So back to the real work. I needed to isolate the students email addresses. The process:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;So, I typed:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;grep filters out lines that have MKS22X in them and sed replaces the tabs (\t) with commas and cut pulls out the email addresses. It&amp;rsquo;s all stored in a file named emails.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Now, I just have to import these into my maillist software (mailman).&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;So, that&amp;rsquo;s it, easy peasy.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;I&amp;rsquo;ll be away for most of this week at the Tapia conference and then I&amp;rsquo;ll be playing catch up, but I&amp;rsquo;m hoping to do a series of posts talking about my Linux toolset and how I use it.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;I hope you all find it interesting and maybe even useful.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Subversion for Homework part II and the start of the new term</title>
      <link>https://cestlaz.github.io/posts/2010-02-01-subversion-for-homework-part-ii-and/</link>
      <pubDate>Mon, 01 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2010-02-01-subversion-for-homework-part-ii-and/</guid>
      <description>&lt;!DOCTYPE html&gt;

Starting the new semester tomorrow and I&#39;ve got a whole bunch of interesting topics to blog about. Some about pedagogy, some technical, and some that I can&#39;t really catagorize.&lt;br /&gt;&lt;br /&gt;For now, though, just a brief follow up on using Subversion for homework collection.&lt;br /&gt;&lt;br /&gt;The basic model used in New York City for teacher improvement and evaluation is the official &#34;observation.&#34; Either your supervisor or the principal sits in on one of your classes. Afterwards you meet and discuss the lesson and a report is written up. Basically, there are two possible outcomes: satisfactory or unsatisfactory.&lt;br /&gt;&lt;br /&gt;Untenured teachers are generally observed three times a semester. Tenured teachers, once a year.&lt;br /&gt;&lt;br /&gt;In all cases, this system is severely flawed. The supervisor sees a 40 minute snapshot out of context and is supposed to evaluate the teacher and make recommendations for teacher improvement. It&#39;s generally of limited value at best.&lt;br /&gt;&lt;br /&gt;Because of this, years ago, I started to ask my students to evaluate me. For quite some time now, I&#39;ve used a custom written web app that allows students to complete long questionnaires over a period of weeks. The system allows me to know who submitted an evaluation while maintaining anonymity. &lt;br /&gt;&lt;br /&gt;I&#39;ve found these evaluations to be incredibly valuable and I&#39;ve used them to try to improve my classes and my teaching over the years.&lt;br /&gt;&lt;br /&gt;Having just wrapped the semester, I&#39;ve gone through my students responses and the vast majority liked using subversion for homework. As I figured, some felt that it was a little confusing at first and there was a learning curve but most felt it was either as good as any other method and many said it was superior.&lt;br /&gt; &lt;br /&gt;This combined with the fact that it makes me more efficient confirms that it&#39;s a win.&lt;br /&gt;&lt;br /&gt;It was also interesting that I had hardly any suggestions for alternative ways of collecting homework.&lt;br /&gt;&lt;br /&gt;Recently, I&#39;ve been using Git for my personal development work and I&#39;m planning on experimenting with it in one of my classes, so we&#39;ll see how that goes.&lt;br /&gt;&lt;br /&gt;Now, on to the new semester!!!!!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;img width=&#39;1&#39; height=&#39;1&#39; src=&#39;https://blogger.googleusercontent.com/tracker/468689896075458340-3477377644002525047?l=cestlaz.blogspot.com&#39; alt=&#39;&#39; /&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Subversion in the classroom</title>
      <link>https://cestlaz.github.io/posts/2010-01-19-subversion-in-classroom/</link>
      <pubDate>Tue, 19 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2010-01-19-subversion-in-classroom/</guid>
      <description>&lt;!DOCTYPE html&gt;

Ok, not &lt;a href=&#34;http://www.merriam-webster.com/dictionary/subversion&#34;&gt;subversion&lt;/a&gt;, rather &lt;a href=&#34;http://subversion.tigris.org/&#34;&gt;subversion&lt;/a&gt;, the version control system.&lt;br /&gt;&lt;br /&gt;I&#39;ve used subversion as a way for students to hand in their projects for years. I haven&#39;t used it with my intro classes as I think the learning curve is a little steep and the benefits few, but for A.P. and beyond (juniors and seniors) it&#39;s worked very well as a method of collection and I think it&#39;s good to get the kids in the habit of using versioning systems.&lt;br /&gt;&lt;br /&gt;A versioning, or revision control system let&#39;s an individual frequently save versions of their files, in our case, on a central server.&amp;nbsp; One can easily go back to earlier versions as well as manage changes made by multiple developers. Once one&#39;s in the habit of using a revision control system, it can greatly improve&amp;nbsp; productivity.&lt;br /&gt;&lt;br /&gt;For my classes, I would create a repository for a project, give the kids a little version control primer, and they would create projects in the repository.&lt;br /&gt;&lt;br /&gt;There are usually a few bumps in the road.&lt;br /&gt;&lt;br /&gt;At first the kids go kicking and screaming. They create the repository, and neglect it until the last minutes. I&#39;d wake up on a project due date, check out the repository and seem maybe 4 out of 60 projects only to see them mystically appear as the closing time approached.&lt;br /&gt;&lt;br /&gt;As we move through the year and work on more projects, things get better.&lt;br /&gt;&lt;br /&gt;Students start to update their projects more frequently. Not as frequently as I like, partly because SVN gets really slow on our system, but it&#39;s still an improvement.&amp;nbsp; Invariably, it saves a student or two when they accidentally delete all their files. Also, when things become&amp;nbsp; a real mess, being able to go back a few versions is a godsend. A much better alternative than what they had to do in the past, which was restarting the entire project.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;What I find really interesting is how wonderful a tool svn is from my point of view as an educator.&lt;br /&gt;&lt;br /&gt;By looking at the log files, I can see who made changes and when. By looking at the diffs, I can look at the projects progress much as an english teacher might look at drafts. &lt;br /&gt;&lt;br /&gt;&amp;nbsp;Version control for projects turns out to be a win across the board.&lt;br /&gt; &lt;br /&gt;Recently, I&#39;ve been using SVN for homeworks as well. Homework collection has always been difficult for me as I&#39;m disorganized and forgetful. SVN has made things much easier. At the start of the semester, I made a homework repository for each student. They then check it out at home.&lt;br /&gt;&lt;br /&gt;Whenever a student does a homework, he or she just names it according to our conventions (HW1-name, HW2-name, etc.), put it in their checked out repository, add the file(s) and commits. With tortoiseSVN under windows it&#39;s trivial.&lt;br /&gt;&lt;br /&gt;This lets me easily see all of the homeworks for a student as well as all submissions for a specific assignment. Again it&#39;s an overall win.&lt;br /&gt;&lt;br /&gt;Next semester I&#39;m going to be experimenting with GIT as a replacement for SVN.&lt;br /&gt;&lt;br /&gt;If you&#39;re looking for a way to collect and track assignments, I&#39;d highly recommend using a revision control system.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;img width=&#39;1&#39; height=&#39;1&#39; src=&#39;https://blogger.googleusercontent.com/tracker/468689896075458340-8125210248407710385?l=cestlaz.blogspot.com&#39; alt=&#39;&#39; /&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>