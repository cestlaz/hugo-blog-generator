<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sorting on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/sorting/</link>
    <description>C&#39;est la Z (sorting)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Mar 2020 11:11:51 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/sorting/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Try Something New - Quicksort</title>
      <link>https://cestlaz.github.io/post/try-something-new/</link>
      <pubDate>Mon, 09 Mar 2020 11:11:51 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/try-something-new/</guid>
      <description>&lt;p&gt;
Many teachers are reluctant to try new things. Sometimes it&amp;#39;s a bad
case of &amp;#34;I&amp;#39;vealwaysdoneitthisway-itis.&amp;#34; Sometimes it&amp;#39;s not being
comfortable with the new way or not having the time to develop
whatever happens to be needed for the lesson and sometimes it&amp;#39;s even
coming from a good place. 
&lt;/p&gt;
&lt;p&gt;
What&amp;#39;s that good place? Concern - if I try this new way and it doesn&amp;#39;t
work I&amp;#39;m going to lose some students and never get them back. My
population is too at risk. 
&lt;/p&gt;
&lt;p&gt;
Ok, I buy that but I don&amp;#39;t agree with it.
&lt;/p&gt;
&lt;p&gt;
There will be a normal ebb and flow to your lessons anyway. Some days
will be great, some not so much. Some lessons will be amazing, some
will put the kids to sleep. Besides, you can almost always recover
from a bad experience the following week.
&lt;/p&gt;
&lt;p&gt;
Last week was Quicksort time. I&amp;#39;ve approached the problem in a variety
of ways over the years. I straight out presented the algorithm,
approached it from a &lt;a href=&#34;https://cestlaz.github.io/posts/2010-03-14-sorting-from-top-and-from-bottom.html/&#34;&gt;functional point of view&lt;/a&gt;, &lt;a href=&#34;https://cestlaz.github.io/posts/quick-sort-starting/&#34;&gt;put a specific element
in place&lt;/a&gt;, approached it from a &lt;a href=&#34;https://cestlaz.github.io/posts/2014-03-12-select-to-sort.html/&#34;&gt;select the nth smallest&lt;/a&gt; item point of view
and probably a few others.
&lt;/p&gt;
&lt;p&gt;
This time, I thought I&amp;#39;d try code tracing. The motivation was that the
in place partition algorithm can be a little hairy. The idea is
actually pretty simple but first year CS2 students can find it
difficult. This time, I presented them with the code and some trial
runs for them to trace through. From there we developed the algorithm
&lt;/p&gt;
&lt;p&gt;
I won&amp;#39;t know if this approach was effective or not until next week but
my gut was telling me that it was a bit bumpy. I don&amp;#39;t think I was
effectively  able to connect from the code they worked through up to
the algorithm. Some of the other approaches I&amp;#39;ve tried over the years
left me equally unimpressed with myself but at the end of the day they
weren&amp;#39;t disasters so I&amp;#39;m guessing the class will ultimately prove to
have been alright. Right now, I think the approach I used a couple of
years ago of motivating quicksort by putting a specific element in
place works best for me and my classes. 
&lt;/p&gt;
&lt;p&gt;
The moral of the story? I tried something. I don&amp;#39;t think it worked
particularly well. That&amp;#39;s okay. I&amp;#39;ll probably rework it and try it
again in the future but as for today I know my kids will be
fine. Maybe I botched the quicksort a bit but I&amp;#39;ll fix that over the
next few classes.
&lt;/p&gt;
&lt;p&gt;
The real lesson of the day - Don&amp;#39;t be afraid to try something new. We
want our students to be unafraid of failure. We should be as
well. It&amp;#39;s rare the stakes are so high that we can&amp;#39;t stumble an bumble
a bit of a lesson and not recover. 
&lt;/p&gt;
&lt;p&gt;
When I was just starting out one of my mentors gave me some great
advice: &amp;#34;You can always fix it tomorrow.&amp;#34;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching Sorting</title>
      <link>https://cestlaz.github.io/post/teaching-sorting/</link>
      <pubDate>Mon, 19 Nov 2018 20:04:08 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/teaching-sorting/</guid>
      <description>&lt;p&gt;
Earlier today I saw a facebook post asking for thoughts on teaching
sorting. The question was specifically not  about motivations like
having the class act out sorts or sort cards but rather about the
coding. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been meaning to write about this since last summer when I
attended Owen Astrachan&amp;#39;s talk on the same subject.
&lt;/p&gt;
&lt;p&gt;
Early in my career when teaching sorting I developed the n^2 sorts as
standalone routines just as they&amp;#39;re presented in most books but as I
gained more experience as a teacher, I changed it up to build the
sorts (at least some of them) from existing concepts. 
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s look at the selection sort.
&lt;/p&gt;
&lt;p&gt;
We can demonstrate it by arranging an already dealt hand. Find the
smallest card place it all the way at the left. The next smallest,
next to it. Repeat until done.
&lt;/p&gt;
&lt;p&gt;
This is actually a very easy algorithm to develop using code the kids
have already written.
&lt;/p&gt;
&lt;p&gt;
By the time we do sorting, students have already written the code to
find the smallest or largest in a list time and time again. We&amp;#39;ve also
used that concept in developing other algorithms like the one I wrote
about &lt;a href=&#34;https://cestlaz.github.io/oldblog/2013-03-23-who_won_the_election-quadratic_to_linear_time/&#34;&gt;here&lt;/a&gt;. Assuming we&amp;#39;ve covered the ArrayList, We can easily code
up a sorting type algorithm (excuse any little Java errors, I&amp;#39;ve been
teaching this in C++ for the past 3 years):
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
      ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; min_index&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
          min_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; findMinIndex&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
          value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;min_index&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
          a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;min_index&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
          result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This won&amp;#39;t be efficient due to &lt;a href=&#34;https://cestlaz.github.io/posts/2014-11-17-hidden-complexity/&#34;&gt;hidden complexity&lt;/a&gt; but it&amp;#39;s very easy to
write and understand the algorithm
&lt;/p&gt;
&lt;p&gt;
From here it&amp;#39;s a simple matter to code this algorithm in place -
swapping the next smallest item each time. This time coded with an array::
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; min_index&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      min_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; findMinIndex&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// find min excluding what&amp;#39;s sorted so far
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;min_index&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
      swap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;],&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;min_index&lt;span style=&#34;color:#f92672&#34;&gt;]);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
If you want, you can then break out the findMinIndex routine and the
swap so that kids see all the code in one place but regardless, this
is an easy, incremental way of teaching selection sort.
&lt;/p&gt;
&lt;p&gt;
You can do something similar with insertion sort. Start with the code
to insert an item into an already sorted list. Write that as a routine
and then put a loop around it to complete the sort.
&lt;/p&gt;
&lt;p&gt;
Developing routines like this incrementally has a number of
advantages. The code is simpler, it reinforces old concepts, and it
gives students additional practice in composing more complex solutions
from building blocks.
&lt;/p&gt;
&lt;p&gt;
You can use a similar approach to coding the more advanced sorts but
I&amp;#39;ll save those ideas for a future post.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>