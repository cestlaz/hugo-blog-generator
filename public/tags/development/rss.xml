<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>development on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/development/</link>
    <description>C&#39;est la Z (development)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Apr 2020 08:34:40 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/development/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Sherlock Holmes, consulting developer</title>
      <link>https://cestlaz.github.io/post/sherlock-holmes-dev/</link>
      <pubDate>Sun, 12 Apr 2020 08:34:40 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sherlock-holmes-dev/</guid>
      <description>&lt;p&gt;
Stuart Halloway is a name in the Clojure community. I was rewatching
one of his talks this morning and I thought some of you would enjoy
it. Lots of gems on approaching programming and development. 
&lt;/p&gt;
&lt;p&gt;
Nothing radical or new here but lots of good stuff very well presented.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/OUZZKtypink&#34;&gt;https://www.youtube.com/embed/OUZZKtypink&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My code works -- and I have no idea why!!!</title>
      <link>https://cestlaz.github.io/post/my-code-works/</link>
      <pubDate>Sun, 09 Feb 2020 16:22:18 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/my-code-works/</guid>
      <description>&lt;p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcT-4l2Bv_a85wYiS-5pWgYdfb6lb50CIwZ3GvjtNIwqVL1VruoL&#34;/&gt; 
&lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;
One of my pet annoyances is how code ecosystems have gotten more and
more complex. Sometimes I think tool designers put together build
systems to show how clever they are rather than to solve dependency
problems as cleanly and simply as possible.
&lt;/p&gt;
&lt;p&gt;
Over the break I wrote &lt;a href=&#34;https://cestlaz.github.io/post/github-org-explorer/&#34;&gt;GitHub Org Explorer&lt;/a&gt; - a tool to help deal with
GitHub classroom repositories. It worked but was using &amp;#34;basic&amp;#34;
authentication where it sent a username and password with every
request. As GitHub was deprecating that from their API I started to
look at converting the application to use oauth. 
&lt;/p&gt;
&lt;p&gt;
First I threw together a little &lt;a href=&#34;https://github.com/zamansky/clojurescript-electron-oauth-test&#34;&gt;proof of concept app&lt;/a&gt; that just
authenticated with GitHub and then started to move that code into my
explorer app.
&lt;/p&gt;
&lt;p&gt;
First problem â€“ the code that that worked in the proof of concept was
crashing out in my actual app. I ultimately did a line by line
analysis and couldn&amp;#39;t find a difference. Even the configuration files
appeared the same. 
&lt;/p&gt;
&lt;p&gt;
Finally, in a fit of desperation, I killed all the supporting
libraries that the build system installed and downloaded them again. 
&lt;/p&gt;
&lt;p&gt;
It worked!!!!!
&lt;/p&gt;
&lt;p&gt;
It didn&amp;#39;t inspire much confidence though.
&lt;/p&gt;
&lt;p&gt;
So, I went on and finished converting the app to oauth. All done,
right? Wrong.
&lt;/p&gt;
&lt;p&gt;
I tried to build everything on another system and it crashed
out. Weird. It worked on one machine but not another. 
&lt;/p&gt;
&lt;p&gt;
Solved that problem by wiping out the entire build system - node and
npm using nvm and shadow-cljs and it worked.
&lt;/p&gt;
&lt;p&gt;
But it didn&amp;#39;t. 
&lt;/p&gt;
&lt;p&gt;
There was one final hurdle. 
&lt;/p&gt;
&lt;p&gt;
When I used the build system to compile and run in &amp;#34;development&amp;#34; mode
everything worked. Compile for production? Not so much.
&lt;/p&gt;
&lt;p&gt;
What could it be?
&lt;/p&gt;
&lt;p&gt;
After about a day of fretting, I discovered  that for some reason,
when compiling for dev you get certain libraries including a string
formatting one I was using. When compiling for production you didn&amp;#39;t
get them. Why would anyone set up a build system that way???????
&lt;/p&gt;
&lt;p&gt;
Given that I&amp;#39;m using a bunch of tools that I&amp;#39;m new to - using
shadow-cljs to go from clojurescript to javascript all ending up with
a build for the electron platform - I just stopped using the library 
&lt;/p&gt;
&lt;p&gt;
Problem solved. 
&lt;/p&gt;
&lt;p&gt;
Well, sort of. 
&lt;/p&gt;
&lt;p&gt;
I can now run my app but I&amp;#39;m still not filled with confidence.
&lt;/p&gt;
&lt;p&gt;
Now, I&amp;#39;ve been at this game for a very long time. I&amp;#39;ve been
programming for around 40 years. Imagine what it&amp;#39;s like for student or
beginner.
&lt;/p&gt;
&lt;p&gt;
I can&amp;#39;t tell you how many times I&amp;#39;ve seen a post on the learn
programming subreddit from some beginner who learned using an online
tool or in a class that had them develop in a sandbox and they left
with no clue how to write a real program outside of the classroom
environment. If they&amp;#39;re not prepared to merely write a program outside
of some courseware system they&amp;#39;ll have little chance going up against
webpack, lienengen, cmake and the like.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not saying that we should throw our beginners out into the wild
and start them with vi, C, and autotools but nobody&amp;#39;s paying attention
to the whole journey from Hello World to the real world.
&lt;/p&gt;
&lt;p&gt;
Somebody should.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>