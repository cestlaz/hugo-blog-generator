<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/cs/</link>
    <description>C&#39;est la Z (CS)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Apr 2020 18:45:50 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/cs/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Arbitrary Trees</title>
      <link>https://cestlaz.github.io/post/arbitrary-trees/</link>
      <pubDate>Mon, 27 Apr 2020 18:45:50 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/arbitrary-trees/</guid>
      <description>&lt;p&gt;
It&amp;#39;s been 10 days from my last post. Not really a big break for me
historically but certainly a big one given how much I&amp;#39;ve been posting
this year. 
&lt;/p&gt;
&lt;p&gt;
Been under the weather for the past couple of weeks dealing with
COVID-19. Haven&amp;#39;t had super bad symptoms and as symptoms have been
getting fewer and less severe I&amp;#39;m hoping I&amp;#39;m close to a full recovery.
&lt;/p&gt;
&lt;p&gt;
In any event, I&amp;#39;m feeling good enough for a quick post.
&lt;/p&gt;
&lt;p&gt;
In my data structures class we&amp;#39;ve been working on binary trees. Most
of the unit is focused on &lt;a href=&#34;https://en.wikipedia.org/wiki/Binary_search_tree&#34;&gt;Binary Search Trees&lt;/a&gt;. They used to be a big
part of the B part of the old APCS-AB and are still a mainstay of
college CS2 classes. 
&lt;/p&gt;
&lt;p&gt;
As usual, we covered all the basics. Creation, insertion, search,
traversal, and deletion. We discovered the run times and how a tree
structure can yield lgn behavior but can also degenerate to linear. We
also give a preview of more advanced data structures like red/back and
2-3 trees that address these issues (not to mention things like BTrees
and Splay trees).
&lt;/p&gt;
&lt;p&gt;
One side topic I always like talking about during this unit though are
arbitrary trees. That is, trees where each node can have an arbitrary
number of children. Students usually start by creating nodes with an
array of children and then sometimes a linked list of children but I
like discussing something simpler. A tree where in each node you hold
two pointers - a pointer to the first child and a pointer to the next
sibling. I like this because internally it&amp;#39;s the same as a binary
search tree where you also have two pointers in each node a left and a
right. Same &amp;#34;physical&amp;#34; representation but two very different
variations.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;
    &amp;lt;img src=&amp;#34;/img/arbtree.png&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;
&lt;/p&gt;
&lt;p&gt;
The image on the left is the actual arbitrary tree and the one on the
right shows the internal representation.
&lt;/p&gt;
&lt;p&gt;
In terms of applications, the file system is a
great example of an arbitrary tree. Another one that I like even more
is the DOM representation of a web page. That&amp;#39;s nice because there are
Javascript functions to get the next sibling.
&lt;/p&gt;
&lt;p&gt;
I put a short video together for my class. Here it is in case anyone
is interested. It&amp;#39;s code agnostic so would be suitable for an APCS-A
class that also covers data structures.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/K1lR3ssgxLc&#34;&gt;https://www.youtube.com/embed/K1lR3ssgxLc&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interesting Problems</title>
      <link>https://cestlaz.github.io/post/interesting-problems/</link>
      <pubDate>Sat, 07 Mar 2020 08:12:55 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/interesting-problems/</guid>
      <description>&lt;p&gt;
I organize a monthly professional development session for CS
teachers. It&amp;#39;s targeted at teachers who are beyond the beginner stage
and don&amp;#39;t want yet another hello world blinky arduino scratch
workshop. Don&amp;#39;t get me wrong, given the need for CS teachers we need
plenty of beginner workshops but we also need to take teachers to the
next level. I refer to my workshops as being for teachers of APCS-A,
similar, or beyond. Participants get three hours of CTLE credit and
thanks to our gracious hosts at &lt;a href=&#34;http://digitalocean.com&#34;&gt;Digital Ocean&lt;/a&gt; get to use a great space
and enjoy a free meal.
&lt;/p&gt;
&lt;p&gt;
I particularly enjoyed last weeks workshop for two reasons. One is
that we talked about &amp;#34;interesting problems.&amp;#34; This in itself is
interesting because different teachers find different things
interesting. For me, this time around, I was thinking of problems that
could be approached by beginners but had some interesting insight that
allowed them to look at the problem differently and solve it more
efficiently. 
&lt;/p&gt;
&lt;p&gt;
The second reason I liked this session is because I wasn&amp;#39;t the only
one presenting!!!
&lt;/p&gt;
&lt;p&gt;
I started the session talking about the Happy Ladybugs problem - a
Hackerrank problem I wrote about &lt;a href=&#34;https://cestlaz.github.io/posts/happy_ladybug/&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I then passed off to Justin who talked about finding the &lt;a href=&#34;https://en.wikipedia.org/wiki/Convex_hull&#34;&gt;convex hull&lt;/a&gt;
bounding a set of points. Justin talked about how you can relate this
abstract geometry problem to real world problems like bounding
neighborhoods as well as how this can be graphically motivated and
then moved to discussing &lt;a href=&#34;https://en.wikipedia.org/wiki/Convex_hull_algorithms&#34;&gt;algorithms&lt;/a&gt;. Students can pretty easily come
up with a in inefficient O(n^4) solution and then Justin talked about
incrementally guiding them through alternate solutions ending with
something that runs in O(nlgn). At the end of the day we had a problem
that could be done in a variety of ways with students at different
levels of experience. 
&lt;/p&gt;
&lt;p&gt;
We then moved to Barry&amp;#39;s presentation of a &lt;a href=&#34;http://www.baphl.org/20/&#34;&gt;puzzle hunt&lt;/a&gt; problem he
adapted. It involved decoding, translation, number bases and Barry
uses it as a platform to work with stacks.
&lt;/p&gt;
&lt;p&gt;
I finished the evening talking about three problems but we didn&amp;#39;t look
at solutions. These were teasers for next time when we also hope to do a
SIGCSE recap.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My code works -- and I have no idea why!!!</title>
      <link>https://cestlaz.github.io/post/my-code-works/</link>
      <pubDate>Sun, 09 Feb 2020 16:22:18 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/my-code-works/</guid>
      <description>&lt;p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcT-4l2Bv_a85wYiS-5pWgYdfb6lb50CIwZ3GvjtNIwqVL1VruoL&#34;/&gt; 
&lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;
One of my pet annoyances is how code ecosystems have gotten more and
more complex. Sometimes I think tool designers put together build
systems to show how clever they are rather than to solve dependency
problems as cleanly and simply as possible.
&lt;/p&gt;
&lt;p&gt;
Over the break I wrote &lt;a href=&#34;https://cestlaz.github.io/post/github-org-explorer/&#34;&gt;GitHub Org Explorer&lt;/a&gt; - a tool to help deal with
GitHub classroom repositories. It worked but was using &amp;#34;basic&amp;#34;
authentication where it sent a username and password with every
request. As GitHub was deprecating that from their API I started to
look at converting the application to use oauth. 
&lt;/p&gt;
&lt;p&gt;
First I threw together a little &lt;a href=&#34;https://github.com/zamansky/clojurescript-electron-oauth-test&#34;&gt;proof of concept app&lt;/a&gt; that just
authenticated with GitHub and then started to move that code into my
explorer app.
&lt;/p&gt;
&lt;p&gt;
First problem â€“ the code that that worked in the proof of concept was
crashing out in my actual app. I ultimately did a line by line
analysis and couldn&amp;#39;t find a difference. Even the configuration files
appeared the same. 
&lt;/p&gt;
&lt;p&gt;
Finally, in a fit of desperation, I killed all the supporting
libraries that the build system installed and downloaded them again. 
&lt;/p&gt;
&lt;p&gt;
It worked!!!!!
&lt;/p&gt;
&lt;p&gt;
It didn&amp;#39;t inspire much confidence though.
&lt;/p&gt;
&lt;p&gt;
So, I went on and finished converting the app to oauth. All done,
right? Wrong.
&lt;/p&gt;
&lt;p&gt;
I tried to build everything on another system and it crashed
out. Weird. It worked on one machine but not another. 
&lt;/p&gt;
&lt;p&gt;
Solved that problem by wiping out the entire build system - node and
npm using nvm and shadow-cljs and it worked.
&lt;/p&gt;
&lt;p&gt;
But it didn&amp;#39;t. 
&lt;/p&gt;
&lt;p&gt;
There was one final hurdle. 
&lt;/p&gt;
&lt;p&gt;
When I used the build system to compile and run in &amp;#34;development&amp;#34; mode
everything worked. Compile for production? Not so much.
&lt;/p&gt;
&lt;p&gt;
What could it be?
&lt;/p&gt;
&lt;p&gt;
After about a day of fretting, I discovered  that for some reason,
when compiling for dev you get certain libraries including a string
formatting one I was using. When compiling for production you didn&amp;#39;t
get them. Why would anyone set up a build system that way???????
&lt;/p&gt;
&lt;p&gt;
Given that I&amp;#39;m using a bunch of tools that I&amp;#39;m new to - using
shadow-cljs to go from clojurescript to javascript all ending up with
a build for the electron platform - I just stopped using the library 
&lt;/p&gt;
&lt;p&gt;
Problem solved. 
&lt;/p&gt;
&lt;p&gt;
Well, sort of. 
&lt;/p&gt;
&lt;p&gt;
I can now run my app but I&amp;#39;m still not filled with confidence.
&lt;/p&gt;
&lt;p&gt;
Now, I&amp;#39;ve been at this game for a very long time. I&amp;#39;ve been
programming for around 40 years. Imagine what it&amp;#39;s like for student or
beginner.
&lt;/p&gt;
&lt;p&gt;
I can&amp;#39;t tell you how many times I&amp;#39;ve seen a post on the learn
programming subreddit from some beginner who learned using an online
tool or in a class that had them develop in a sandbox and they left
with no clue how to write a real program outside of the classroom
environment. If they&amp;#39;re not prepared to merely write a program outside
of some courseware system they&amp;#39;ll have little chance going up against
webpack, lienengen, cmake and the like.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not saying that we should throw our beginners out into the wild
and start them with vi, C, and autotools but nobody&amp;#39;s paying attention
to the whole journey from Hello World to the real world.
&lt;/p&gt;
&lt;p&gt;
Somebody should.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AI For All</title>
      <link>https://cestlaz.github.io/post/pd-ai-for-all/</link>
      <pubDate>Fri, 31 Jan 2020 07:00:01 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pd-ai-for-all/</guid>
      <description>&lt;p&gt;
Yesterday we had another Professional Development Workshop for High
School CS Teachers and as usual, I wnat to express my thanks to
&lt;a href=&#34;digitalocean.com&#34;&gt;Digital Ocean&lt;/a&gt; for continuing to provide space, food, and great overall support.
&lt;/p&gt;
&lt;p&gt;
This time though, instead of JonAlf and I having
to run the show we had a guest speaker. We were joined by &lt;a href=&#34;https://twitter.com/SarahEJudd&#34;&gt;Sarah Judd&lt;/a&gt;
of &lt;a href=&#34;http://ai-4-all.org/about/what-is-ai/&#34;&gt;AI4ALL&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Sarah gave an overview of what AI4ALL was up to and why but the core
of her presentation was taking us through some of the exercises 
they have been developing at AI4All. Specifically, they&amp;#39;re developing
what they call &lt;a href=&#34;http://ai-4-all.org/open-learning/&#34;&gt;AI4All Open Learning&lt;/a&gt; which consists of curricular
materials aimed at high school students. 
&lt;/p&gt;
&lt;p&gt;
As we only had a short time, Sarah took us on a whirlwind tour of what
they&amp;#39;re building from the baseline concepts of AI that she feels (and
I agree) that every students should know up to specific AI topics like
neural nets. Obviously you can&amp;#39;t cover even a single course in one
evening professional development session but Sarah did a great job
giving both a taste and an overview.
&lt;/p&gt;
&lt;p&gt;
The activities were all engaging and and covered both ethical/societal
issues as well as the technical/CS. I appreciated that the materials weren&amp;#39;t
presented as canned experiences but rather tools that a teacher would
use to deliver their own experiences. On the other hand I&amp;#39;m skeptical
of the website&amp;#39;s claims of &amp;#34;No AI or computer science experience
necessary.&amp;#34; I&amp;#39;m a firm believer that a CS teacher must know both CS
and how to teach it - maybe not at first due to necessity, but
ultimately. Regardless, Sarah has both real teaching experience and CS
knowledge and I put more faith in what she&amp;#39;s saying than a PR blurb on a
web site. 
&lt;/p&gt;
&lt;p&gt;
Now you&amp;#39;ll notice I haven&amp;#39;t said anything specific about Sarah&amp;#39;s
presentation or AI4All and that&amp;#39;s because Sarah will be giving a
variation of it at SIGCSE in March. If you teach high school and are
going to be at SIGCSE, I highly recommend you check out her session.
&lt;/p&gt;
&lt;p&gt;
If not, perhaps I&amp;#39;ll blog more specifics after the event.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keeping Current Between Semesters</title>
      <link>https://cestlaz.github.io/post/keeping-current-between-semesters/</link>
      <pubDate>Fri, 27 Dec 2019 11:56:23 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/keeping-current-between-semesters/</guid>
      <description>
&lt;p&gt;
People say that one of the impossible problems for CS teachers is
keeping current - they say the field is constantly changing, how can a
teacher keep up with all the new things going on.
&lt;/p&gt;
&lt;p&gt;
Well, on the one hand it isn&amp;#39;t true - most of the core of CS is the
same. We still teach roughly the same programming constructs, data
structures and algorithms. 
&lt;/p&gt;
&lt;p&gt;
On the other hand, it is true. When I was in college, OOP was just
starting to pick up steam and now an established and one might argue,
dominant paradigm. Functional programming has been around forever but
is only recently making inroads into the mainstream. Some fields have
radically changed. Just look at AI and related fields now that data is
so abundant. I remember looking over a Natural Language Processing
text in the mid 90s and it was all about programs with tons of if
statements. A later edition read more like a statistics text book.
&lt;/p&gt;
&lt;p&gt;
Then there are the changing technologies - the web and how we program
it, new languages, embedded systems are more accesible and much more.
&lt;/p&gt;
&lt;p&gt;
So the field both changes and stays the same.
&lt;/p&gt;
&lt;p&gt;
One of the ways I try to stay on top of things is with my own personal
projects. We encourage our students to write side projects
to scratch itches so why shouldn&amp;#39;t we do the same.
&lt;/p&gt;
&lt;p&gt;
This might be taking a course like when I did the Stanford online AI
and ML courses or it might be writing something like when I wanted to
figure out that &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; thing that was all the rage a couple of years
ago but ended up diving more deeply into  &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt; as I felt it made
more sense.
&lt;/p&gt;
&lt;p&gt;
Now that we&amp;#39;re between semesters at Hunter I thought I&amp;#39;d scratch an
itch related to &lt;a href=&#34;https://classroom.github.com/classrooms&#34;&gt;GitHub Classroom&lt;/a&gt;. I love the tool but it has two pain
points. First, you end up accumulating a HUGE number of repositories
(one per student per assignment) and deleting them is a bear of a
task. The second is that while you can download all the submissions
for a given assignment, there&amp;#39;s no easy way to download all the
assignments for a given student. There are also some issues mapping
student names to GitHub accounts but I&amp;#39;ve pretty much worked that one
out.
&lt;/p&gt;
&lt;p&gt;
So, I figured I&amp;#39;d spend some time this December and January learning
some new technologies adn writing something to make those pain points
go away.
&lt;/p&gt;
&lt;p&gt;
So, what will I be learning about?
&lt;/p&gt;
&lt;h5 id=&#34;headline-1&#34;&gt;
The GitHub API
&lt;/h5&gt;
&lt;p&gt;
I&amp;#39;ve worked with APIs before and even messed around with &lt;a href=&#34;https://developer.github.com/&#34;&gt;GitHub&amp;#39;s&lt;/a&gt;. The
change is that their &lt;a href=&#34;https://developer.github.com/v4/&#34;&gt;latest&lt;/a&gt; version uses GraphQL which brings me to my
first brand new technology:
&lt;/p&gt;
&lt;h5 id=&#34;headline-2&#34;&gt;
GraphQL
&lt;/h5&gt;
&lt;p&gt;
&lt;a href=&#34;https://graphql.org/&#34;&gt;GraphQL&lt;/a&gt; is a query language developed by Facebook for APIs. In spite
of the name, it has nothing to do with databases. The idea is instead
of a bunch of random REST endpoints with every API call being
different you have one endpoint. You put together a query describing
what you want and the services responds with your content. 
&lt;/p&gt;
&lt;p&gt;
It looks pretty neat but we&amp;#39;ll see.
&lt;/p&gt;
&lt;h5 id=&#34;headline-3&#34;&gt;
Reagent / Clojurescript
&lt;/h5&gt;
&lt;p&gt;
The next thing I&amp;#39;ll be playing with is &lt;a href=&#34;https://clojurescript.org/&#34;&gt;Clojurescript&lt;/a&gt; and &lt;a href=&#34;https://reagent-project.github.io/&#34;&gt;Reagent&lt;/a&gt;. I&amp;#39;ve
been playing on and off with Clojure for a while ahd Clojurescript
transpiles Clojure to Javascript instead of compiling for the
JVM. I&amp;#39;ve  already made a few &lt;a href=&#34;https://github.com/zamansky/clojure-life&#34;&gt;small&lt;/a&gt; &lt;a href=&#34;https://github.com/zamansky/clojure-breakout&#34;&gt;projects&lt;/a&gt; &lt;a href=&#34;https://github.com/zamansky/clojure-snake&#34;&gt;using&lt;/a&gt; it and like it much
better for the web than Javascript. &lt;a href=&#34;https://www.learnreagent.com/&#34;&gt;Reagent&lt;/a&gt; is essentially React for
Clojurescript.
&lt;/p&gt;
&lt;h6 id=&#34;headline-4&#34;&gt;
Electron
&lt;/h6&gt;
&lt;p&gt;
I thought for a while about doing this as a command line tool since
that&amp;#39;s how I usually work but decided that if I do finish it something
GUI based might be useful to more people. I then considered a web
applicaiton but realized that wouldn&amp;#39;t do since there isn&amp;#39;t a way to
clone GitHub repos from a web application due to security issues. 
&lt;/p&gt;
&lt;p&gt;
I then briefly considered doing a Clojure based GUI which would
basically be something like a Java Swing application but then decided
to explore &lt;a href=&#34;https://electronjs.org/&#34;&gt;Electron&lt;/a&gt;. An Electron appication is essentially a locally
run web application. You write it in a similar manner to a web app -
HTML/CSS/JS or in my case Clojurescript but then it&amp;#39;s run locally on a
platfomr based on the open source Chromium browser. Since it&amp;#39;s running
locally it has access to the local filesystem and resources.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve already started to play with things and already learned a
lot. Looking forward to coming out of this with a bunch of new
technologies and tools in the toolbelt and maybe an application that
will solve a couple of annoyances with what&amp;#39;s overall a great product.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multi Stage Assignments - the good and the bad - Advent of Code</title>
      <link>https://cestlaz.github.io/post/multi-stage-assignments/</link>
      <pubDate>Thu, 12 Dec 2019 17:19:27 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/multi-stage-assignments/</guid>
      <description>&lt;p&gt;
In the real world you&amp;#39;re usually not building your own projects from
scratch. Much more frequently you&amp;#39;re working on a team and you and
other players come and go over time. 
&lt;/p&gt;
&lt;p&gt;
This is in stark contrast to most CS educational experiences where
students typically complete relatively small assignments from
beginning to end. One of my biggest fears way back when as I was about
to graduate college was when I woke up one night in a cold sweath &amp;#34;oh
crap - in a couple of weeks I&amp;#39;m going to have to actually produce good
code. Not just code good enough to get by the grader.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
So, as a general rule,  having students build a project and then later
extend it or, even better, having them extend another student&amp;#39;s project
can be a very good experience. On the other hand, it can also be a
very bad one.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s a great feeling when you leverage a previous project to create
something new. On the other hand, there can be tremendous frustration
if the original project forms a faulty foundation and you have to go
back and rebuild and even then you&amp;#39;re never 100% sure that you&amp;#39;re
building on a solid base.
&lt;/p&gt;
&lt;p&gt;
Building on a previous project has been big in this years &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of
Code&lt;/a&gt;. It started with &lt;a href=&#34;https://adventofcode.com/2019/day/2&#34;&gt;day 2&lt;/a&gt; when we were asked to write a simple
computer that ran &amp;#34;intcode programs.&amp;#34; Not a bad little challenge. It
then returned in &lt;a href=&#34;https://adventofcode.com/2019/day/5&#34;&gt;day 5&lt;/a&gt; where we had to add a number of features to our
intcode machines. This too was a nice assignment. It had to be built
on a correct and complete day 2 solution but as far as I could tell,
regardless of how you completed day 2 there was a straightforward way
to extend it to integrate the requirements for day 5.
&lt;/p&gt;
&lt;p&gt;
Things got interesting in &lt;a href=&#34;https://adventofcode.com/2019/day/7&#34;&gt;day 7&lt;/a&gt; and this is where a teacher, or
competition designer for that matter has to start being careful. Day 5
had us modify and build on day 2 but day 7 had us &lt;strong&gt;use&lt;/strong&gt; what we
created in days 2 and 5. From a teacher who&amp;#39;s building assignments
point of view, this changes the equation. Day 2 and 5 had you build
something that took some input and produced some output. Now, in day 7
you had to do something on top of your intcode machine, feed it into
it (or them as it turned out) and get an output. Depending on the
assumptions you made in building your intcode machine you would either
have an easy time with day 7 or you&amp;#39;d have to go back and redo day 2
and/or 5 - much less fun. As part 2 of day 7 had us running multiple
intcode machines &amp;#34;simultaneously,&amp;#34; my set up didn&amp;#39;t work. I still have
to go back and finish that problem.
&lt;/p&gt;
&lt;p&gt;
Herein lies a big problem with multi part assignments. Unless you
really lay out the parameters of the early assignment students can,
and frequently will make assumptions you never dreamed of. Those
assumptions can make their lives easier in parts 2 and beyond but it
can also leave them with an impossible task. This on top of any
student that doesn&amp;#39;t finish the early version to begin with.
&lt;/p&gt;
&lt;p&gt;
Moving on, &lt;a href=&#34;https://adventofcode.com/2019/day/9&#34;&gt;day 9&lt;/a&gt; added some more features to the intcode machine and
since then, days &lt;a href=&#34;https://adventofcode.com/2019/day/11&#34;&gt;11&lt;/a&gt;, &lt;a href=&#34;https://adventofcode.com/2019/day/13&#34;&gt;13&lt;/a&gt;, &lt;a href=&#34;https://adventofcode.com/2019/day/15&#34;&gt;15&lt;/a&gt;, &lt;a href=&#34;https://adventofcode.com/2019/day/17&#34;&gt;17&lt;/a&gt;, and &lt;a href=&#34;https://adventofcode.com/2019/day/19&#34;&gt;19&lt;/a&gt; have all used our intcode
machine. I&amp;#39;ve had issues with my machine for days 11 and 13 and have
to fix my intcode machine&amp;#39;s input/output handling to finish those
challenges but my machine worked well enough to complete days 15, 17,
and 19.
&lt;/p&gt;
&lt;p&gt;
So, at the end of the day building on a previous project can be very
cool and for a student very rewarding but it can also be really
challenging. On top of the issue I&amp;#39;ve already talked about this can
also leave students in a very uneasy state when extending a project by
using it rather than building on it. Did they write the early parts
fully correctly or just enough to get by the early test cases? It can
be very unsettling to work on an uncertain foundation. What&amp;#39;s more,
while a teacher can even provide base code, this might only be useful
to help check results as now having a student use provided code adds
yet another challenge (albeit one that provides many useful lesosns).
&lt;/p&gt;
&lt;p&gt;
As to doing this in Advent of Code? I doubt &lt;a href=&#34;https://twitter.com/ericwastl&#34;&gt;Eric Wastl&lt;/a&gt; and the other
organizers will read this but in case they do, this isn&amp;#39;t a complaint
about Advent of Code. I love the event and we can all quibble about
details we like or don&amp;#39;t like. Advent of Code also isn&amp;#39;t a class with
a grade and if I never finish, let&amp;#39;s say, day 11, there are no
consequences - unlike if a student doesn&amp;#39;t finish part 2 of a graded
project. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m writing this because I think there are some interesting parallels
between creating an event like Advent of Code and designing projects
and lessons for students and more interestingly , where those //s
diverge.
&lt;/p&gt;
&lt;p&gt;
Now to get to grading. Hoping to get done to spend at least a few
minutes on &lt;a href=&#34;https://adventofcode.com/2019/day/20&#34;&gt;day 20&lt;/a&gt;. 
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent 2019 Day 8 - addendum - generating inputs</title>
      <link>https://cestlaz.github.io/post/advent-2019-day8-part2/</link>
      <pubDate>Sun, 08 Dec 2019 17:04:30 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2019-day8-part2/</guid>
      <description>&lt;p&gt;
As I sad in my &lt;a href=&#34;https://cestlaz.github.io/post/advent-2019-day8/&#34;&gt;last post&lt;/a&gt;, &lt;a href=&#34;https://adventofcode.com/2019/day/8&#34;&gt;day 8&lt;/a&gt; would be a nice project or lesson in
an APCS-A or college CS1 class. Another nice problem would be to
write a program to generate an image in the format required by the
question. Alternatively, a teacher doing day 8 with their classes
might want to generate a bunch of images for the students to test
their decoders on. 
&lt;/p&gt;
&lt;p&gt;
I thought I&amp;#39;d write one to see how appropriate it would be for the
students. I tried to do it without anything fancy or advanced.
&lt;/p&gt;
&lt;p&gt;
To start, you&amp;#39;ll need a way to generate the block text for the
images. I found &lt;a href=&#34;http://www.patorjk.com/software/taag/#p=display&amp;amp;f=Banner3&amp;amp;t=Hello&#34;&gt;this&lt;/a&gt; site and used the &lt;strong&gt;Banner3&lt;/strong&gt; font. I generated
some text and saved it in a file. The important thing for our purposes
is that any space will count as white and any character as black.
&lt;/p&gt;
&lt;p&gt;
The encoded image is a N * Width * Height sequence of digits  where
each Width * Height sequence of digits represents one layer. See the
&lt;a href=&#34;https://adventofcode.com/2019/day/8&#34;&gt;problem text&lt;/a&gt; for details.
&lt;/p&gt;
&lt;p&gt;
You can follow along with the code &lt;a href=&#34;https://github.com/zamansky/advent2019/blob/master/day08-generator.py&#34;&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
So, here&amp;#39;s how the program works:
&lt;/p&gt;
&lt;p&gt;
The top 51 lines of the program consist of a routine which I&amp;#39;ll
describe later and code to handle command line argument (to set the
number of layers).
&lt;/p&gt;
&lt;p&gt;
Then, on line 55 I erad  in the file with the source image (from stdin). 
&lt;/p&gt;
&lt;p&gt;
In line 57 through 63, I loop over the data and changed each non space
or newline to a star character. I really don&amp;#39;t have to do this but I
wanted to see what the image looked like in just &amp;#34;black and white.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
Line 65 through 67 is where I split on the newlines. Now I could take
the length of any line to get the image width and the number of lines
the height.
&lt;/p&gt;
&lt;p&gt;
70 through 79 creates a long list for the image. At each location, I
generate a list of values. Each list has one entry per layer. The
actual pixel value (1 or 0) is stored at a random location. Everything
before that is a random choice between the real color and transparent
and everything after is just random. Details for that step are in the
&lt;code&gt;genpixel&lt;/code&gt; routine.
&lt;/p&gt;
&lt;p&gt;
Finally, in 83 through 89 I loop over each layer and for each layer
the image and and output all the values into a single string. 
&lt;/p&gt;
&lt;p&gt;
This is then output to stdout while the dimensions go to stderr.
&lt;/p&gt;
&lt;p&gt;
If I had a source image in a file named &amp;#34;hello.dat&amp;#34; I&amp;#39;d convert it to
source input for day 8 by typing &lt;code&gt;cat hello.dat | python3 day08-generator.py
-l 10 &amp;gt; day08-input.dat&lt;/code&gt;. This would create a 10 layer input.
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s it. Once again, the code is all &lt;a href=&#34;https://github.com/zamansky/advent2019/blob/master/day08-generator.py&#34;&gt;here&lt;/a&gt;. It would make for another
nice student assignment or for a teacher to prepare inputs for the
class.
&lt;/p&gt;
&lt;p&gt;
Enjoy.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent 2019 Day - 8</title>
      <link>https://cestlaz.github.io/post/advent-2019-day8/</link>
      <pubDate>Sun, 08 Dec 2019 08:42:32 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2019-day8/</guid>
      <description>&lt;p&gt;
I spent most of last week up in Albany working on the NY State K12 CS
Standards so fell a bit behind. I had to go back to complete &lt;a href=&#34;https://adventofcode.com/2019/day/5&#34;&gt;day 5&lt;/a&gt; but
still haven&amp;#39;t finished &lt;a href=&#34;https://adventofcode.com/2019/day/7&#34;&gt;day 7&lt;/a&gt; which builds on day 5 which in turn
builds on &lt;a href=&#34;https://adventofcode.com/2019/day/2&#34;&gt;day 2&lt;/a&gt;. I might not get to finishing 7 for a while but it
looks like a good chance to play with &lt;a href=&#34;https://www.braveclojure.com/core-async/&#34;&gt;core.async&lt;/a&gt; - Clojure&amp;#39;s
facilities for concurrency. I also want to write up &lt;a href=&#34;https://adventofcode.com/2019/day/6&#34;&gt;day 6&lt;/a&gt; but today
let&amp;#39;s look at &lt;a href=&#34;https://adventofcode.com/2019/day/8&#34;&gt;day 8&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Day 8 is image processing problem so it fits nicely into an APCS-A
type class. You&amp;#39;re given the height and width of the image and you&amp;#39;re
told that the image comes in layers. The input is a long string of
digits. So, if you&amp;#39;re told that the width is 5 and height is 3 you
might get this as your input representing an image with 3 layers:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;100210120100120001102020112100000121002110102&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Adding commas and spaces:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;10021,01201,00120   00110,20201,12100   00012,10021,10102&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
The first part of the task is to find the layer with the most 0s and
return the number of 1s multiplied with the number of 2s.
&lt;/p&gt;
&lt;p&gt;
This is just a nice little data parsing problem. You have to break the
input into &lt;code&gt;width*height&lt;/code&gt; chunks, see which has the most zeros, count
the ones and the twos and return the result. 
&lt;/p&gt;
&lt;p&gt;
Part 2 is where the image stuff comes in. We&amp;#39;re told that a color
value of 0 is black, 1 is white, and 2 is transparent. We&amp;#39;re also told
that the image&amp;#39;s actual color is the first color it sees (black or
white) when going through the layers. Depending on how you read in
your data, this could be easy or hard. You have to scan down the
layers and keep the first non-transparent color. 
&lt;/p&gt;
&lt;p&gt;
For part 1, I read my data into a list of lists where each item was a
layer. I did this in Clojure, but the Python representation of the
sample image above might look something like this:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;[ [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
  [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
  [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
There was no reason to subdivide each layer into rows and columns.
&lt;/p&gt;
&lt;p&gt;
For part 1, I wanted to have lists where each list was all the values
of each pixel across the layers. This meant &lt;a href=&#34;https://en.wikipedia.org/wiki/Transpose&#34;&gt;transposing&lt;/a&gt; the matrix -
tat is, if you look at the above list of lists as a matrix, switching
the rows and columns. This was pretty easy to do in Clojure using
&lt;code&gt;(apply mapv vector matrix)&lt;/code&gt; but it shouldn&amp;#39;t be too hard in other
languages.
&lt;/p&gt;
&lt;p&gt;
Next, we have to keep the first non-transparent color we see in each
list.
&lt;/p&gt;
&lt;p&gt;
The final fun part is then taking the colors and printing out the
final image.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s what I got:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;XXX  XXXX  XX   XX  X  X 
X  X X    X  X X  X X X  
X  X XXX  X    X  X XX   
XXX  X    X    XXXX X X  
X    X    X  X X  X X X  
X    X     XX  X  X X  X &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
What&amp;#39;s nice about this problem from a teacher&amp;#39;s point of view? First,
it&amp;#39;s the puzzle aspect of finding the hidden text. Second, it&amp;#39;s an
image problem which in APCS-A usually means 2D arrays but you can also
solve it without any 2D matrices. My solution involved a bunch of
filtering of data and the matrix transpose. Both interesting concepts
to bring to your classes.
&lt;/p&gt;
&lt;p&gt;
If you want to see my Clojure solution, you can find it &lt;a href=&#34;https://github.com/zamansky/advent2019/blob/master/day08.clj&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent 2019 Day 4</title>
      <link>https://cestlaz.github.io/post/advent-2019-day4/</link>
      <pubDate>Wed, 04 Dec 2019 19:32:34 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2019-day4/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2019/day/4&#34;&gt;Day 4&lt;/a&gt;. Most of the day was spent working on the NY State CS standards
to I didn&amp;#39;t figure to have much time to work on the
problem. Fortunately, I was able to knock out part 1 before work
started and part 2 was a quick adjustment when I got back to it at the
start of lunch.
&lt;/p&gt;
&lt;p&gt;
Once again, it was a problem with a few interesting teacher side
aspects.
&lt;/p&gt;
&lt;p&gt;
I only wrote a &lt;a href=&#34;https://github.com/zamansky/advent2019/blob/master/day04.clj&#34;&gt;Clojure solution&lt;/a&gt; today so that&amp;#39;s what I&amp;#39;ll use for my
code examples.
&lt;/p&gt;
&lt;p&gt;
The gist was that you were going to use a 6 digit integer as a
password but only  subset of the numbers between a start and end
point. Only numbers in that range for which these two properties held:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
There were at least one repeated digit, that is 123445 is o since
we have two consecutive 4s but 124354 isn&amp;#39;t
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The digits are increasing. That is, given any digit, the digit to
its right has either the same or a greater value.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
You had to find the number of &amp;#34;valid passwords.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
At first read this sounds like a math problem but it really
isn&amp;#39;t. Looking at the first constraint, if you convert the number to a
string, looking to see that at least two consecutive characters are
the same is pretty easy - it&amp;#39;s just a simple loop. 
&lt;/p&gt;
&lt;p&gt;
It turns out that it&amp;#39;s even easier using &lt;a href=&#34;https://www.regular-expressions.info/&#34;&gt;Regular Expressions&lt;/a&gt;. Regular
expressions (regex) aren&amp;#39;t usually an explicit part of a CS sequence
but man are they useful. Basically they allow you to set up a pattern
that will match text. Some examples:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;pattern&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Matches&lt;/th&gt;
&lt;th&gt;doesn&amp;#39;t match&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;aa[0-9]bb&lt;/td&gt;
&lt;td&gt;Matches aa a digit than bb&lt;/td&gt;
&lt;td&gt;aa3bb&lt;/td&gt;
&lt;td&gt;ax3b, aacbb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a+bb[a-z]&lt;/td&gt;
&lt;td&gt;one or more of a then two b then an a-z&lt;/td&gt;
&lt;td&gt;aabbc&lt;/td&gt;
&lt;td&gt;aabcb&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
You can use parentheses to form a &amp;#34;match group&amp;#34; and then use &amp;#34;\1&amp;#34; to
match the group, so this regular expression:
&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;&lt;code class=&#34;language-regex&#34; data-lang=&#34;regex&#34;&gt;([0-9])\1&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
will match two any substring with two of digits, adjacent. Many regex
engines allow you to use &lt;strong&gt;\d&lt;/strong&gt; instead of &lt;strong&gt;[0-9]&lt;/strong&gt; as a shorthand for
match a single digit.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the line that will take a list of potential passwords in a
variable &lt;strong&gt;passwords&lt;/strong&gt; and return a list that only containsn the
passwords that meet the two consecutive of the same digit rule.
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(filter &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(re-seq &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(\d)\1&amp;#34;&lt;/span&gt; %) passwords)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
I knew that Python has a &lt;strong&gt;partition&lt;/strong&gt; function that would take a string
with a potential password (I convert the number to a string before
doing the regex test above). It would take a string &amp;#34;1245&amp;#34; and convert
it into something like this &lt;strong&gt;(1,2), (2,3), (3,4), (4,5)&lt;/strong&gt;. Here&amp;#39;s the instruction:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;partition&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; %) passwords)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Next we test each pair in the partition to see that the first value in
the pair is less than or equal to the second one:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(every? (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[ [a b]] (&amp;lt;= (int a) (int b))) %) passwrods)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Pull out the ones where the above is true and count them:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(count (filter true?))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
And that&amp;#39;s part one.
&lt;/p&gt;
&lt;p&gt;
The Python equivalent would be easier to read for the non-lisper but
the idea is the same and pretty straightforward. 
&lt;/p&gt;
&lt;p&gt;
What I like is that we just solved a number problem without math, just
text processing.
&lt;/p&gt;
&lt;p&gt;
Part 2 is more of the same. This time we still need a pair of adjacent
same digits but runs of 3 or more didn&amp;#39;t count. Now, 122234 wouldn&amp;#39;t
be a valid password because the run is of 3 while 1222344 would
because while the repeated 2s don&amp;#39;t count the 4s would.
&lt;/p&gt;
&lt;p&gt;
Fortunately, this is just more text processing:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Check to make sure the sequence is increasing (as above)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Remove all the sequences of 3 or more repeats. This can also be
xdone using a regular expression search and replace. In Clojure
it&amp;#39;s:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;     cleaned (&lt;span style=&#34;color:#a6e22e&#34;&gt;string/replace&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;([0-9])\1\1+&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) 
     &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The [0-9]\1\1+ says match any sequence of 3 or more of the same
digit and we replace it with an empty string.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
If the remaining string has a pair of adjacent same digits (as
above) its a valid password.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
And that&amp;#39;s it. Both parts solved as a text processing problem. What
I love here is that it seems to be a numeric problem but it has a text
based solution. Certainly something worth talking about.
&lt;/p&gt;
&lt;p&gt;
Another thing I thought about as a teacher but didn&amp;#39;t pay attention to
in my solution was efficiency. My range consisted of about 500,000
values to check. Not huge enough to make a time difference but it&amp;#39;s
worth noting that there are only about 500 that fulfill the
&amp;#34;increasing&amp;#34; requirement but almost 200,000 that have a double digit
subsequence. 
&lt;/p&gt;
&lt;p&gt;
This means it could be more efficient to look for increasing first and
throw away most of the data and then do the digit test. This type of
ordering can be a big deal for other problems so could be worth
discussing. 
&lt;/p&gt;
&lt;p&gt;
Another issue is pipelining. Are you looping over the entire (or even
culled) data set over and over or can you take each number and put it
through a sequence of tests and/or transformations - the pipeline
could also lead to a more efficient solution.
&lt;/p&gt;
&lt;p&gt;
Lots of good teacher fodder.
&lt;/p&gt;
&lt;p&gt;
In closing I&amp;#39;ll mention one last thought - not mine but rather a
suggestion I found while perusing the Advent of Code subreddit after I
had submitted my solutions 
&lt;/p&gt;
&lt;p&gt;
Someone noted that since a valid number has increasing digits, if
digits appear more than once they &lt;strong&gt;have&lt;/strong&gt; to be adjacent to each
other. If they weren&amp;#39;t they&amp;#39;d violate the increasing restriction. This
means that you could solve this problem more numerically by:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
do the &amp;#34;increasing&amp;#34; test
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Find the sum of the counts of each digit value (0 through 9)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Test to see if at least one digit appears twice.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Based on tomorrows schedule I doubt I&amp;#39;ll get to AoC day 5 but we&amp;#39;ll
see.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent 2019 Day 3</title>
      <link>https://cestlaz.github.io/post/advent-2019-day3/</link>
      <pubDate>Tue, 03 Dec 2019 19:01:13 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2019-day3/</guid>
      <description>&lt;p&gt;
Today&amp;#39;s &lt;a href=&#34;https://adventofcode.com/2019/day/3&#34;&gt;problem&lt;/a&gt; dealt with intersecting paths. You start with two
inputs, figure out the paths they represent and where they intersect
and then find the intersection that correctly answers the question.
&lt;/p&gt;
&lt;p&gt;
For part 1 you have to find the intersection closest to the
origin. From a teacher&amp;#39;s point of view, the interesting part here is
data representation. This problem deals with a two dimensional grid on
which the paths live. For most students, at least in my experience, if
they&amp;#39;re trained in a language like C++ or Java they go for the direct
representation - a 2D array. For many problems this makes a lot of
sense. For this one, however, it probably doesn&amp;#39;t. We start at a
specific point but can travel in any direction for any distance. This
means we might need a crazy large array and what&amp;#39;s more, it&amp;#39;s probably
going to be sparsely filled.
&lt;/p&gt;
&lt;p&gt;
A more practical solution involves maintaining a data structure with
just the individual points of interest - the points on the path. 
&lt;/p&gt;
&lt;p&gt;
I chose a dictionary (or hash-map or hash-table depending on language)
The key would be a tuple representing a point and the value would hold
whatever data was needed. For part one that would be a set of the
paths that went through the point. 
&lt;/p&gt;
&lt;p&gt;
So, if we had a path made up of 2 intersecting lines:
&lt;/p&gt;
&lt;div class=&#34;src src-ditaa&#34;&gt;
&lt;pre&gt;&lt;code class=&#34;language-ditaa&#34; data-lang=&#34;ditaa&#34;&gt; |
-+-----
 |&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
We could use a 2D array to represent it (assume the lines have ID&amp;#39;s 1
and 2):
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&#34;align-right&#34;&gt;&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;0&lt;/td&gt;
&lt;td&gt;nil&lt;/td&gt;
&lt;td&gt;#{2}&lt;/td&gt;
&lt;td&gt;nil&lt;/td&gt;
&lt;td&gt;nil&lt;/td&gt;
&lt;td&gt;nil&lt;/td&gt;
&lt;td&gt;nil&lt;/td&gt;
&lt;td&gt;nil&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;td&gt;#{1}&lt;/td&gt;
&lt;td&gt;#{1 2}&lt;/td&gt;
&lt;td&gt;#{1}&lt;/td&gt;
&lt;td&gt;#{1}&lt;/td&gt;
&lt;td&gt;#{1}&lt;/td&gt;
&lt;td&gt;#{1}&lt;/td&gt;
&lt;td&gt;#{1}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;2&lt;/td&gt;
&lt;td&gt;nil&lt;/td&gt;
&lt;td&gt;#{2}&lt;/td&gt;
&lt;td&gt;nil&lt;/td&gt;
&lt;td&gt;nil&lt;/td&gt;
&lt;td&gt;nil&lt;/td&gt;
&lt;td&gt;nil&lt;/td&gt;
&lt;td&gt;nil&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
That&amp;#39;s already a good deal of wasted space. using a dictionarey we&amp;#39;d
have:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key (row,col)&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;(0,1)&lt;/td&gt;
&lt;td&gt;#{2}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(1,0)&lt;/td&gt;
&lt;td&gt;#{1}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(1,1)&lt;/td&gt;
&lt;td&gt;#{1 2}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(1,2)&lt;/td&gt;
&lt;td&gt;#{1}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(1,3)&lt;/td&gt;
&lt;td&gt;#{1}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(1,4)&lt;/td&gt;
&lt;td&gt;#{1}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(1,5()&lt;/td&gt;
&lt;td&gt;#{1}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(1,6)&lt;/td&gt;
&lt;td&gt;#{1}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(2,1)&lt;/td&gt;
&lt;td&gt;#{2}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Which becomes much more space efficient once we go beyond the smallest
test cases.
&lt;/p&gt;
&lt;p&gt;
Once we have the representation, the problem becomes one of stepping
through the paths and adding them to the dictionary. After that we can
pull out the small number of entries in our dictionary that were
visited by both paths and then we can find the final answer.
&lt;/p&gt;
&lt;p&gt;
I coded this up in Clojure &lt;a href=&#34;https://github.com/zamansky/advent2019/blob/master/day03.clj&#34;&gt;(solution here)&lt;/a&gt; but forgot to account for the fact that
when a path repeats itself it shouldn&amp;#39;t count as an intersection for
the purpose of the problem. Oops. I fudged things to get the right
answer but then had to head off to Albany.
&lt;/p&gt;
&lt;p&gt;
When I arrived I fixed the code but was pretty zonked so decide to
code the second part in Python &lt;a href=&#34;https://github.com/zamansky/advent2019/blob/master/day03.py&#34;&gt;(solution here)&lt;/a&gt;. Both solutions are pretty similar but
as I&amp;#39;m more comfortable with Python it didn&amp;#39;t require too much focus
to get it right.
&lt;/p&gt;
&lt;p&gt;
Given the wording of this problem, I think that most people will steer
towards the type of dictionary representation I used rather than a 2D
array but this way of storing data is worth discussing with classes
when you might otherwise use a 2D array.
&lt;/p&gt;
&lt;p&gt;
When might you ask?
&lt;/p&gt;
&lt;p&gt;
How about something like Conway&amp;#39;s Game of Life. When this is done in a
CS1 class the world is usually represented as a 2D array. It&amp;#39;s simple
 and direct. Another approach would be to only store the live cells in
a list. You can check out a Clojurescript implementation that does
just that &lt;a href=&#34;https://github.com/zamansky/clojure-life/tree/master/src&#34;&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Another would be the N-Queens problem. Insead of a board, just store
the queens locations. 
&lt;/p&gt;
&lt;p&gt;
Image processing? Well, there probably not. When doing image work,
you actually use all the cells in the 2D array.
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s pretty much all I have to say about today&amp;#39;s problem. It got me
thinking about alternate ways of representing our data. That&amp;#39;s
something we usually don&amp;#39;t have too much of an opportunity to discuss
with our students. That&amp;#39;s unfortunate.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent 2019 Day 2</title>
      <link>https://cestlaz.github.io/post/advent-2019-day2/</link>
      <pubDate>Mon, 02 Dec 2019 17:11:43 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2019-day2/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://adventofcode.com/2019/day/2&#34;&gt;Day 2&lt;/a&gt; of Advent of Code 2019 was also pretty straightforward and once
again I wrote &lt;a href=&#34;https://github.com/zamansky/advent2019/blob/master/day02.clj&#34;&gt;my solution&lt;/a&gt; in Clojure but in order to talk about this
from a teacher&amp;#39;s point of view, we&amp;#39;ll look at a &lt;a href=&#34;https://github.com/zamansky/advent2019/blob/master/day02.py&#34;&gt;Python solution&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
At its core, this is a simulation problem - read the data into an
array or list and write a program to run through the steps. At first I
was hoping that the solution would consume the data - that is, once
you read past an instruction you don&amp;#39;t go back to it. If it was, I was
going to try to write some clever reduce. It wasn&amp;#39;t. In this problem,
any instruction could affect any part of the data set. This means you
have to keep the entire data set in memory and preferably in a random
access structure like an array. 
&lt;/p&gt;
&lt;p&gt;
Step 1 is to read in the data and convert it into a list of integers.
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
If you don&amp;#39;t know comprehensions you can just do something like this:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now we just have to run the simulation:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The most likely source of error here is forgetting to change the
values in &lt;code&gt;program[1]&lt;/code&gt; and &lt;code&gt;program[2]&lt;/code&gt; in lines 18 and 19 as
specified in the question. The other likely error is forgetting to do
the two level indirection in lines 7 and 8. That is writing
&lt;code&gt;program[ip+1]&lt;/code&gt; and &lt;code&gt;program[ip+2]&lt;/code&gt; by mistake. Truth be told, I made
both of these mistakes but I didn&amp;#39;t find them to be &amp;#34;interesting&amp;#34;
mistakes. 
&lt;/p&gt;
&lt;p&gt;
The interesting part of this program is part 2 where instead of
setting &lt;code&gt;program[1]&lt;/code&gt; to &lt;code&gt;12&lt;/code&gt; and &lt;code&gt;program[2]&lt;/code&gt; to &lt;code&gt;2&lt;/code&gt; you have to try
values between 0 and 99 inclusive for each entry until you find a
specific answer. 
&lt;/p&gt;
&lt;p&gt;
This is a great platform to talk about memory. The problem refers to
the values you put into &lt;code&gt;program[1]&lt;/code&gt; as &lt;strong&gt;nouns&lt;/strong&gt; and &lt;code&gt;program[2]&lt;/code&gt; as
&lt;strong&gt;verbs&lt;/strong&gt;. The issue is that every time you run your program for a
specific &lt;strong&gt;noun verb&lt;/strong&gt; combination you change the array (list)
representing your program. If you don&amp;#39;t reset the array to its
original contents before the next run, the next run will be working
off of new values and therefore give you incorrect results. 
&lt;/p&gt;
&lt;p&gt;
This is a great platform for discussion. Students usually start with
&lt;strong&gt;pass by value&lt;/strong&gt; semantics so passing a list to a function and then
having the list change can seem weird even though it can still be pass
by value:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Here&amp;#39;s a finished solution:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Note that in line 30 we copy over the original data for each noun,verb
combo. also note the list comprehension in line 35 to find the final
answer. 
&lt;/p&gt;
&lt;p&gt;
One last potential error point is notice that we had to add the array
copy in line 20. Otherwise part1 will change the data and if we run it
before part2 we won&amp;#39;t get the correct result.
&lt;/p&gt;
&lt;p&gt;
So there it is. Another nice problem and even though it&amp;#39;s a
straightforward problem, there&amp;#39;s still some interesting meat to
discuss with your students.
&lt;/p&gt;
&lt;p&gt;
Tomorrow, snowstorm notwithstanding, I&amp;#39;ll be heading up to Albany for
the remainder of the week so might not be able to get to day 3 and
beyond until Friday so who knows if I&amp;#39;ll post any more of these
write ups.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code 2019 Day 1</title>
      <link>https://cestlaz.github.io/post/advent-2019-day1/</link>
      <pubDate>Sun, 01 Dec 2019 14:23:35 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-2019-day1/</guid>
      <description>&lt;p&gt;
Like most programming challenges, &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; ramps out from
easier, more accessible problems to harder, more complex ones. As
such, a number of the early challenges are great problems for early CS
students. 
&lt;/p&gt;
&lt;p&gt;
I thought that while I watched my NY Giants play valiantly in their
attempt to get a high draft pick I&amp;#39;d talk about today&amp;#39;s &lt;a href=&#34;https://adventofcode.com/2019/day/1&#34;&gt;challenge&lt;/a&gt;
from a teacher&amp;#39;s point of view.
&lt;/p&gt;
&lt;p&gt;
The summary of part one is that you have a list of inputs (masses of
components) and for each one you have to perform a calculation (how
much fuel is needed). The answer will be the sum of the fuels.
&lt;/p&gt;
&lt;p&gt;
The most challenging part of this for a beginner might be reading in
the data but that&amp;#39;s not too much of a challenge:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now we can calculate part1:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Part 2 adds a twist. Now, you have to also consider the fuel needed
for the fuel you&amp;#39;ve added. Basically, you have to calculate how much
fuel you&amp;#39;ll need for a given item and then how much fuel you&amp;#39;ll need
for that fuel. You repeat this until the amount of fuel you need is
either 0 or negative. See &lt;a href=&#34;https://adventofcode.com/2019/day/1&#34;&gt;the challenge&lt;/a&gt; for more info on this. 
&lt;/p&gt;
&lt;p&gt;
This is our first &amp;#34;teaching moment.&amp;#34; This is going to be messy to work
into our part1 solution but if we had factored out the original fuel
calculation we could probably reused it and maybe more of our
solution:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now we can just add an inner loop that repeatedly adds the fuel costs.
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
More &amp;#34;teachable moments.&amp;#34; We have to change up variables in our fuel
calculations (lines 8 and 11) and for a beginner, the loop within a
loop can be somewhat muddled. It&amp;#39;s more complex but it&amp;#39;s doing
something that &lt;strong&gt;is&lt;/strong&gt; more complex. It&amp;#39;s also good nested loop practice.
&lt;/p&gt;
&lt;p&gt;
For more advanced students, if they&amp;#39;re familiar with list
comprehensions you can really clean up part 1:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
#+END_SRC
&lt;/p&gt;
&lt;p&gt;
but I think part 2 either stay&amp;#39;s more or less as is.
&lt;/p&gt;
&lt;p&gt;
Personally, I wrote my solutions in Clojure:
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;ns &lt;/span&gt;day01
  (&lt;span style=&#34;color:#e6db74&#34;&gt;:require&lt;/span&gt; [clojure.string &lt;span style=&#34;color:#e6db74&#34;&gt;:as&lt;/span&gt; string]
            [utils &lt;span style=&#34;color:#e6db74&#34;&gt;:as&lt;/span&gt; u]))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;test-masses [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1969&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100756&lt;/span&gt;])

&lt;span style=&#34;color:#75715e&#34;&gt;;; load data&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;masses (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;
             (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;day01.dat&amp;#34;&lt;/span&gt;)
             string/split-lines
             (map u/parse-int)
             ))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;calc-mass-part1 [mass]
  (- (quot mass &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;part1 [masses]
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;calculate fuel for each mass then sum them all&amp;#34;&lt;/span&gt;
  (reduce + (map calc-mass-part1 masses)))



(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;calc-mass-part2
  ([mass] (&lt;span style=&#34;color:#a6e22e&#34;&gt;calc-mass-part2&lt;/span&gt; mass &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
  ([mass cost]
   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Same as part 1 but loop to calculate fuel for the fuel&amp;#34;&lt;/span&gt;
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[fuel (&lt;span style=&#34;color:#a6e22e&#34;&gt;calc-mass-part1&lt;/span&gt; mass)]
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;lt;= fuel &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
       cost
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;recur&lt;/span&gt; fuel (+ cost fuel))))))
  
(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;part2 [masses]
  (reduce + (map calc-mass-part2 masses )))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;main []
(println (str &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Part1: &amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt; masses)))
(println (str &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Part2: &amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;part2&lt;/span&gt; masses)))
)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
So that&amp;#39;s day 1. I don&amp;#39;t know if I&amp;#39;ll write up any more or, given my
travel and work schedule for the week,if I&amp;#39;ll even be able  to work
on more problems until next weekend. 
&lt;/p&gt;
&lt;p&gt;
In any event. If you&amp;#39;re teaching CS0 or CS1 students, you should
really check out Advent of Code.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent Of Code 2019</title>
      <link>https://cestlaz.github.io/post/advent-of-code-2019/</link>
      <pubDate>Fri, 29 Nov 2019 09:02:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/advent-of-code-2019/</guid>
      <description>&lt;p&gt;
It&amp;#39;s almost December which means it&amp;#39;s almost time for &lt;a href=&#34;http:/adventofcode.com&#34;&gt;Advent of Code
2019&lt;/a&gt;. Advent of code is an annual computer programming competition
created and ruyn by &lt;a href=&#34;https://twitter.com/ericwastl&#34;&gt;Eric Wastl&lt;/a&gt;. It&amp;#39;s been running since 2015. I&amp;#39;ve
written about it before, mostly from a teacher&amp;#39;s point of view (&lt;a href=&#34;https://cestlaz.github.io/post/solve-a-to-solve-b/&#34;&gt;Solve
A to Solve B&lt;/a&gt;, &lt;a href=&#34;https://cestlaz.github.io/post/aoc-data-structures-hidden-complexity/&#34;&gt;Data structures and Hidden Complexity&lt;/a&gt;, &lt;a href=&#34;https://cestlaz.github.io/posts/advent-2017-4-6/&#34;&gt;Tools can shape
how we think&lt;/a&gt; and a few others). 
&lt;/p&gt;
&lt;p&gt;
Basically, Eric releases one poblem a day at midnight from Dec 1
through Dec 25. Each problem has two parts with a correct solution to
part 1 unlocking part 2. Problems can be solved using any language as
each challenge just requires you to enter the correct result rather
than you submitting code. This allows you to use any language or even
no language at all.
&lt;/p&gt;
&lt;p&gt;
In terms of difficulty, some problems are certainly doable by students
in CS1 or even CS0. In fact, Eric takes great pains to keep from using
CSSpeak so as to make the problems approachable even if you aren&amp;#39;t a
CS major or professional.
&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re a CS Teacher you can find some great lesson and problem
ideas here. If you&amp;#39;re a student, they&amp;#39;re great interview prep and will
stretch your problem solving capabilities. If you&amp;#39;re just a techie,
they&amp;#39;re just fun challenges. 
&lt;/p&gt;
&lt;p&gt;
There aren&amp;#39;t any prizes so it&amp;#39;s all just for the fun of it. You can
also get help and see great discussions on the challenges over on the
Advent of Code &lt;a href=&#34;https://www.reddit.com/r/adventofcode/&#34;&gt;subreddit&lt;/a&gt;. Lots of people also put their solutions up
online. I&amp;#39;ve never finished but you can find a bunch of my old
solutions up on &lt;a href=&#34;https://github.com/zamansky?utf8=%25E2%259C%2593&amp;amp;tab=repositories&amp;amp;q=adve&amp;amp;type=&amp;amp;language=&#34;&gt;GitHub&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
Finally, you can get to the challenges from previous years by just
adding the year to the url, that is:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://adventofcode/2019&#34;&gt;&lt;a href=&#34;http://adventofcode.com/2019&#34;&gt;http://adventofcode.com/2019&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://adventofcode.com/2018&#34;&gt;http://adventofcode.com/2018&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://adventofcode.com/2017&#34;&gt;http://adventofcode.com/2017&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://adventofcode.com/2016&#34;&gt;http://adventofcode.com/2016&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://adventofcode.com/2015&#34;&gt;http://adventofcode.com/2015&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Finally, here&amp;#39;s a really interesting video by Eric on the whole AoC
thing:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/bS9882S0ZHs&#34;&gt;https://www.youtube.com/embed/bS9882S0ZHs&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with texts part 3 - word chains</title>
      <link>https://cestlaz.github.io/post/word-chains/</link>
      <pubDate>Mon, 25 Nov 2019 05:45:55 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/word-chains/</guid>
      <description>&lt;p&gt;
At this point, we&amp;#39;ve done a fair amount of playing with text so it&amp;#39;s
time for a fun little project. We&amp;#39;re going to generate some text &amp;#34;in
the style&amp;#34; of a source text. The technique we&amp;#39;re going to use is
usually called a Markov Chain text generator. Basically a model where
the next state or word is based entirely on the current state. I don&amp;#39;t
dwell on the math under the hood but in case you&amp;#39;re interested, here
are a few links: &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Markov_chain&#34;&gt;Wikipedia&lt;/a&gt;, &lt;a href=&#34;http://setosa.io/ev/markov-chains/&#34;&gt;Explained Visually&lt;/a&gt;, &lt;a href=&#34;https://www.math.ucdavis.edu/~daddel/linear_algebra_appl/Applications/MarkovChain/MarkovChain_9_18/MarkovChain_9_18.html&#34;&gt;UC Davis Math&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
You can motivate this lesson in a number of ways. One is to start by
showing some generated text - for this, a flowery, poetic text like
the Book of Psalms works well. You can generate text a bunch of times
until you get a good result. 
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the start of the Book of Psalms:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Blessed is the man that walketh not in the counsel of the
ungodly, nor standeth in the way of sinners, nor sitteth in
the seat of the scornful.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
and here&amp;#39;s some generated text:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Blessed is the people that delight in war. Princes shall come out of
Zion,  the perfection of beauty god hath shined our god shall come and
shall declare thy mighty acts. I will speak of the glory of the lord
surely i will not lie unto David.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I added the punctuation as our generator strips it all and converts
the text to lower case.
&lt;/p&gt;
&lt;p&gt;
The generated text looks reasonable in some ways but is clearly wrong
in others.
&lt;/p&gt;
&lt;p&gt;
This leads to the conversation.
&lt;/p&gt;
&lt;p&gt;
If we look at the original text, it starts with &amp;#34;blessed&amp;#34; but if we
look at our bag of words we also can see that &amp;#34;blessed&amp;#34; appears 49
times. What&amp;#39;s interesting for generating text are the words the follow
&amp;#34;blessed&amp;#34; and the number of times they follow it. Here they are
(sorted for convenience):
&lt;/p&gt;
&lt;blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Word&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;How many times it follows the word &amp;#34;blessed&amp;#34;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;are&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;art&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;be&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;blessed&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;depart&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;for&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;his&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;in&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;is&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;of&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;that&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thee&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thy&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;upon&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wealth&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;you&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;p&gt;
So we&amp;#39;ll have a lot of things like &amp;#34;blessed be the&amp;#34; &amp;#34;blessed be he&amp;#34;
etc. but only one occurrence of &amp;#34;blessed uponâ€¦.&amp;#34; To generate text, we
can build a dictionary where the keys are the words and the values are
all the words that follow the key. We can build this with a variation
on our bag of words builder:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Note that we need a counting loop rather than just iterating over the
list since we need both the current item and the one after it in each
iteration.
&lt;/p&gt;
&lt;p&gt;
The (partial) value for the wordlists for the Book of Psalms would be:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
At this point, generating text is easy. 
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Start with a word
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Add the word to yoru story.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Look  it up in your wordlists dictionary.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
select a random word from that words dictionary entry (it&amp;#39;s list).
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
That becomes the word for the next iteration
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Repeat until you have enough words.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
This won&amp;#39;t add any punctuation and it will crash when it gets to the
last word in the original text (as it can&amp;#39;t find any &amp;#34;next words&amp;#34; but
basically it will work. Here&amp;#39;s the code:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The &lt;code&gt;random.choice()&lt;/code&gt; randomly selects a word from a list. This is
perfect for us since words that follow our key more frequently will
have more entries in the list and thus appear more often. I decided to
build a list of words and then use the &lt;code&gt;&amp;#34; &amp;#34;.join()&lt;/code&gt; to turn it all
into a space separated string.
&lt;/p&gt;
&lt;p&gt;
This is pretty fun but the students will note that it really doesn&amp;#39;t
work that well. This can lead to increasing our sample. Instead of
using a single word as our key and having chain links based on two
words (key, random choice from value), we can use three word
links. Use a two word tuple for the key and the same list of words as
the value.
&lt;/p&gt;
&lt;p&gt;
For example, a partial dictionary based on this idea from Macbeth Act
1 Scene 1 could be:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This takes a bit more work to build and also a bit more work to
generate text but it&amp;#39;s eminently doable and the result is
better. What about three word keys? Four? These aren&amp;#39;t hard to write
and ambitious students can write a generic dicitonary builder and
story generator routine so as to be able to use any key lenght.
&lt;/p&gt;
&lt;p&gt;
Students will find that the longer the key, the better the resultant
story. They&amp;#39;ll also notice that at some point, all you&amp;#39;ll ever
generate is the original back again. This is a great time to talk
about over-training.
&lt;/p&gt;
&lt;p&gt;
This can be a fun unit and / or assignment. I used source materials
that I like but any text will work.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lesson and project inspiration from old BSD games</title>
      <link>https://cestlaz.github.io/post/bsdgames/</link>
      <pubDate>Fri, 22 Nov 2019 13:55:09 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/bsdgames/</guid>
      <description>&lt;p&gt;
When I was writing the &lt;a href=&#34;https://cestlaz.github.io/post/i-speak-jive/&#34;&gt;I Speak Jive&lt;/a&gt; post, the first thing I had to do
was find those old programs. It turned out to be harder than I
thought. I found online versions but it took a while to find &lt;a href=&#34;https://github.com/hyperrealm/talkfilters&#34;&gt;this&lt;/a&gt;
GitHub repo.
&lt;/p&gt;
&lt;p&gt;
On the way, I seemed to recall that these might be bundled with a
bunch of old &lt;a href=&#34;https://github.com/vattam/BSDGames&#34;&gt;BSD games&lt;/a&gt; so I took a look at the BSD games package for
Linux. While I didn&amp;#39;t find the filters, I found a whole bunch of old
programs that I hadn&amp;#39;t played with in years along with a few that I
never knew existed. To me it felt like an interesting project and
lesson treasure trove so I wanted to share.
&lt;/p&gt;
&lt;p&gt;
I think this makes more sense to do as a video so I can actually show
the programs as they run so check out the video at the end of this
post.
&lt;/p&gt;
&lt;p&gt;
In the video I talk about controlling the cursor on the screen so that
students can write programs like the ones I demo. That can be done in
a number of ways. You could use a library like &lt;a href=&#34;https://github.com/mabe02/lanterna&#34;&gt;lanterna&lt;/a&gt; for Java or
&lt;a href=&#34;https://en.wikipedia.org/wiki/Curses_%2528programming_library%2529&#34;&gt;curses&lt;/a&gt; or ncurses for C but you can also just use Ansi Escape
codes. Basically you print out &lt;a href=&#34;http://ascii-table.com/ansi-escape-sequences-vt-100.php&#34;&gt;special escape squences&lt;/a&gt; to move the
cursor, clear the screen and even set text and background colors. For
example, to move the cursor to the middle of the screen and print
&lt;strong&gt;Hello&lt;/strong&gt; you would use this: &lt;code&gt;System.out.print(&amp;#34;^[[12;40HHello&amp;#34;);&lt;/code&gt; The
first &lt;code&gt;^[&lt;/code&gt; is actually the ascii code for the escape character. I
enter it in Emacs by typing Control-q then hitting the escape
key. Other editors will have a way of doing the same.
&lt;/p&gt;
&lt;p&gt;
So here you go â€“ old BSD games. I hope you get as many ideas out of
this as I did.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Uyvh1Q9SLbE&#34; frameborder=&#34;0&#34;
&lt;p&gt;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with texts part 2 - bag of words</title>
      <link>https://cestlaz.github.io/post/bag-of-words/</link>
      <pubDate>Wed, 20 Nov 2019 08:15:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/bag-of-words/</guid>
      <description>&lt;p&gt;
Following up on a &lt;a href=&#34;https://cestlaz.github.io/post/cleaning-textx/&#34;&gt;previous post&lt;/a&gt;, we&amp;#39;re going to continue to talk about
playing with text. This time, building and working with a bag of words
from a text. 
&lt;/p&gt;
&lt;p&gt;
A bag of words is a simple language processing model where you just
consider individual words in a text. What they are and how many times
they occur. This is a pretty simple model but you can still have a
good bit of fun with your students with it.
&lt;/p&gt;
&lt;p&gt;
For example, if you take a text like this:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
This land is your land
this land is my land
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Once you clean the a data as per the previous post you get the
following bag:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;word&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;Count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;is&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;land&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;my&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;this&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;your&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Not too interesting but it gets more interesting on a larger text. We
used:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Act 1 Scene 1 from Macbeth (for testing - it&amp;#39;s only 13 lines)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Cyrano de Bergerac (because it&amp;#39;s my favorite play)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Moby Dick (chapter 1)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Moby Dick (full text)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The Book of Psalms
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Assuming a cleaned string with all the text, building the bag is
pretty easy:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;cleaned_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a string with all the cleaned text&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;bag&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cleaned_text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split():
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;  bag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setdefault(word,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;  bag[word] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bag[word] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;setdefault&lt;/code&gt; in line three says that if &lt;code&gt;word&lt;/code&gt; isn&amp;#39;t a key in the
dictionary then insert it with a value of 0, otherwise, if &lt;code&gt;word&lt;/code&gt; &lt;strong&gt;is&lt;/strong&gt;
already a key in the dictionary do nothing. This saves us from
constructs like:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bag:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;      bag[word]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;      bag[word] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bag[word] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Once we have our bag we can do some explorations. Take out all the
values using &lt;code&gt;bag.values()&lt;/code&gt; and sort them. Ask &amp;#34;what words are going
to occur most frequently?&amp;#34; It&amp;#39;s easy to guess that it will be words
like &lt;strong&gt;the&lt;/strong&gt;, &lt;strong&gt;of&lt;/strong&gt;, &lt;strong&gt;and&lt;/strong&gt; etc.. Words that don&amp;#39;t really tell us anything
about the text. It&amp;#39;s a fun puzzle to figure out where the
&amp;#34;interesting&amp;#34; words start and even the question of what might make a
word in a text &amp;#34;interesting.&amp;#34; Words like &lt;strong&gt;the&lt;/strong&gt;, *and&amp;#34;, etc. are known
as &lt;a href=&#34;http://xpo6.com/list-of-english-stop-words/&#34;&gt;stop words&lt;/a&gt;. Depending on the application, you might want ot remove
them. Then again, you might not.
&lt;/p&gt;
&lt;p&gt;
Usually we take a bit of time just to play with the bag, looking at
the types of words in various count ranges. Sometimes we&amp;#39;ll make bags
for different chapters of books and compare them. This is also when I
cover Python list comprehensions which make experimenting on bags of
words much cleaner. Say, for instance you want to find all the words
that occur between 50 and 100 times. Without list comprehensions you
might write:
&lt;/p&gt;
&lt;p&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;  result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bag:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; bag[word] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; bag[word] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;          result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(word) &lt;span style=&#34;color:#75715e&#34;&gt;# or (word,count) or whatever&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
While with the comprehension it&amp;#39;s:
&lt;/p&gt;
&lt;p&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ word &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bag &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; bag[word] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; bag[word] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;]
  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Besides basic exploring, what else can you do? You can make word
vectors, that is a list or vector where an element is 1 if the word is
present and 0 otherwise. Then you can do simple document
comparisons. You can kick this up a notch if you calculate word
frequencies based on the bag counts and use these. 
&lt;/p&gt;
&lt;p&gt;
You can also do basic sentiment analysis. Download a list of
&amp;#34;positive&amp;#34; and &amp;#34;negative&amp;#34; words and then check bags against them. You
can check to see how many negative or positive words are in a bag or
you can work with frequencies. You can also use other categories. 
&lt;/p&gt;
&lt;p&gt;
While we were discussing this at our PD, some teachers thought that
their classes might ahve a hard time doing all of this  from scratch
but thought that they could provide either the cleaning code or the
bag building code and have the students build experiments off of the
base. I thought it was a great idea.
&lt;/p&gt;
&lt;p&gt;
At the end of our session we all agreed to think about how we might
build a lesson or unit out of this bag of words idea. I&amp;#39;ll leave you
all with some web sites that use these ideas in what I think are
interesting ways:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://davidamackenzie.com/tmbg_lyrics/&#34;&gt;They Might Be Giants Lyrics&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://blogs.sap.com/2014/01/07/measuring-word-use-frequency-in-rap-song-lyrics/&#34;&gt;Word use in rap lyrics&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://genius.com/Sameoldshawn-rap-stats-breaking-down-the-words-in-rap-lyrics-over-time-annotated&#34;&gt;Another analysis of rap lyrics&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://towardsdatascience.com/text-analysis-of-successful-song-lyrics-e41a4ccb26f5&#34;&gt;Analysis of succesful song lyrics&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Enjoy!
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>School Visit Update 2019</title>
      <link>https://cestlaz.github.io/post/school-visit-update-2019/</link>
      <pubDate>Wed, 06 Nov 2019 12:25:17 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/school-visit-update-2019/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been spending a lot of time at area high schools this fall. Today
I was at &lt;a href=&#34;https://en.wikipedia.org/wiki/Franklin_Delano_Roosevelt_High_School_(New_York_City)&#34;&gt;FDR High School&lt;/a&gt; in Broooklyn.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure&amp;gt;
    &amp;lt;img src=&amp;#34;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/2/25/FDR_HS_20th_Av_jeh.jpg/330px-FDR_HS_20th_Av_jeh.jpg&#34; alt=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/2/25/FDR_HS_20th_Av_jeh.jpg/330px-FDR_HS_20th_Av_jeh.jpg&#34; title=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/2/25/FDR_HS_20th_Av_jeh.jpg/330px-FDR_HS_20th_Av_jeh.jpg&#34; /&gt;&amp;#34; width=&amp;#34;500px&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;
&lt;/p&gt;
&lt;p&gt;
I only learned about FDR HS a little over a year ago when I met their
CS teacher &lt;a href=&#34;https://twitter.com/jhans404&#34;&gt;Josh Hans&lt;/a&gt; at a NYC PD event. I visit last fall and then
again today.
&lt;/p&gt;
&lt;p&gt;
Whenever I visit a school it&amp;#39;s a different experience. Sometimes I
speak to the CS classes, sometimes at an event like a CS Week
hackathon, once I even got to address an entire senior class in an
auditorium. 
&lt;/p&gt;
&lt;p&gt;
I really loved how Josh and FDR set things up for me today.
&lt;/p&gt;
&lt;p&gt;
Before I get to the arrangement, let&amp;#39;s talk about the talk.
&lt;/p&gt;
&lt;p&gt;
When I meet with a room of seniors, even a room full of CS students, I
know that only a few students are going to end up with me at
Hunter. A room of 30 seniors should probably end up in something like
25 different colleges. I also know that even in a CS class many of
the students will end up pursuing other majors.
&lt;/p&gt;
&lt;p&gt;
I really don&amp;#39;t think it&amp;#39;s right for me to take a full class period and
talk just about Hunter and my Daedalus program so instead I start by
talking about college choices. I try to share things that I&amp;#39;ve learned
over my career as a student, teacher, parent, and now someone reading
applications with my audiuence. Things I&amp;#39;ve learned from both my
experiences and through my relationships with former students. At the
end we talk about Hunter, Hunter CS and the Daedalus program.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been told that the approach has been really valuable to the
majority of students I&amp;#39;ve delivered it to.
&lt;/p&gt;
&lt;p&gt;
There were a few things that Josh set up today that made it a lot of
fun. First, we were in the auditorium. I had Josh&amp;#39;s APCS-A class but
he also invited a couple of others. I also had APCS-P students and
also a class of Calculus students. This was a big deal. Just like
everyone, I&amp;#39;m working hard to build a program with a diverse
population and sometimes outreach is difficult. Specifically, if a
school only allows me to speak with their APCS-A students, I
frequently end up with a pre-culled group. If a school, for example,
has a very low percentage of women in their APCS-A class and that&amp;#39;s
where I&amp;#39;m speaking, I&amp;#39;m not going to be able to convince many women to
look into what we&amp;#39;re offering. By having the calc sutdents in the
audience I had a more diverse audience and also almost certainly had
the chance to expose some students to CS in a new and different
way. Now, don&amp;#39;t get me wrong. Given the nature of my program, I really
love talking to APCS-A students and going with probability, they&amp;#39;re
the most likely the ones to want my program but I love casting the
wider net.
&lt;/p&gt;
&lt;p&gt;
The other think Josh did was he gave me two periods. My talk usually
takes most of a period with little time for discussion. It should take
less but I tend to go into yammer mode and start telling
stories. Sorry - it&amp;#39;s just what I do. With two periods we had plenty
of time for discussion afterwards. What&amp;#39;s more, after most of the
students left, I was left with about 6 students who wanted to continue
to talk. I really enjoyed that. 
&lt;/p&gt;
&lt;p&gt;
Once I was done I did what I usually do - went to the local bakery to
bring home some baked goods. I stopped at the &lt;a href=&#34;https://www.google.com/maps/place/18th+Avenue+Bakery/@40.6212881,-73.9847415,17z/data=!4m8!1m2!2m1!1sbakery!3m4!1s0x0:0xd4dca91422790dec!8m2!3d40.6217849!4d-73.9877902&#34;&gt;18th street Bakery&lt;/a&gt;. An
Italian place and got an assortment. Also had a great chat with the
lady at the counter. It reminded me of when I&amp;#39;d go to &lt;a href=&#34;https://www.yelp.com/biz/moishes-kosher-bakery-new-york&#34;&gt;Moishes Bakery&lt;/a&gt;
before they closed albeit Italian rather than Jewish. 
&lt;/p&gt;
&lt;p&gt;
I pointed to a pile of cookes and asked &amp;#34;what are these?&amp;#34; and she
merely said &amp;#34;No!!!!!&amp;#34; We joked back and forth and she explained that
they were on the older side and didn&amp;#39;t feel right selling them and was
going to throw the rest of the batch out. They&amp;#39;d bake new ones for
tomorrow. I was disappointed not to try a new cookie but glad that I
wasn&amp;#39;t sold stale goods. It was like at Moishes when I once asked
about the Babka and was told &amp;#34;that was made  on Wednesday, you don&amp;#39;t
want it. This is what&amp;#39;s fresh. New Babka tomorrow.
&lt;/p&gt;
&lt;p&gt;
So, then, on the way home, thinking about Moishes and realizing that
there were  also Jewish bakeries in the neighborhood I decided to see
if I could find &lt;a href=&#34;https://en.wikipedia.org/wiki/Kichel&#34;&gt;Kichel&lt;/a&gt; - one of Devorah&amp;#39;s favorite cookies. I
sometimes make them but haven&amp;#39;t in a while. I found some at &lt;a href=&#34;https://www.google.com/maps/place/Korn&amp;#39;s+Bakery/@40.630628,-73.9799457,17z/data=!4m9!1m3!2m2!1sbakery!6e5!3m4!1s0x0:0xf6f303e4b6cd6dfe!8m2!3d40.6308331!4d-73.9764149&#34;&gt;Korn&amp;#39;s&lt;/a&gt;
Bakery and then it was back into Manhattan.
&lt;/p&gt;
&lt;p&gt;
So, overall a succesful day. I got to talk to a bunch of great High
School cookies and got tasty neighborhood baked goods. 
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve hit a bunch of schools already this fall as I work to spread the
gospel about CS and about Hunter&amp;#39;s &lt;a href=&#34;http://info.huntercs.org&#34;&gt;Daedalus&lt;/a&gt; program and am still
looking to get more on the schedule so if you know a school that&amp;#39;s a
good fit a visit, hit me up.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Give me a break (and a continue)</title>
      <link>https://cestlaz.github.io/post/break-continue/</link>
      <pubDate>Wed, 01 May 2019 08:39:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/break-continue/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;
What can I do to discourage my students from using the &amp;#34;break&amp;#34;
statement?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That was more or less the gist of the comment and it elicited some
good responses. This time the conversation was on Facebook but I&amp;#39;ve
seen this one and participated in it many times before. I never liked
the question when presented as a &amp;#34;how can I stop them&amp;#34; one.  I equally
dislike when the offered advice is basically &amp;#34;never use break no
matter what&amp;#34; or something similar. When writing code the best advice
is rarely to never or always do something. The question should really
be &amp;#34;when is it appropriate for my students to use a break statement
and how can I steer them  towards using it correctly.&amp;#34; The answer, of
course is &amp;#34;it depends.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
For those unfamiliar with the statements, &lt;code&gt;break&lt;/code&gt; jumps to the end and
exits the loop or switch statement that encloses it. The &lt;code&gt;continue&lt;/code&gt;
statement jumps up to the next iteration of its enclosing loop. I&amp;#39;ll
show some examples below.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s true that you never &lt;strong&gt;need&lt;/strong&gt; to use break but in my opinion, if
used correctly it can create clearer code. Let&amp;#39;s look at a related
situation. Suppose you write a function to find and return some item
from  a data set (in pseudocode):
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You could tighten it up a bit but there are two things that I don&amp;#39;t
like about the above solution. First, it goes through the entire data
set even if the item you&amp;#39;re searching for is near the beginning. You
could fix that by putting in a more complex loop boolean:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; numitems &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;found &lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Second. you&amp;#39;ve got the conditional after the loop. I find the
following much clearer:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
To me this is perfectly clear. Look for an item, if and when we find
it, we&amp;#39;re done so let&amp;#39;s get out of here. If not, the loop finishes and
we return the not found stuff at the end. It&amp;#39;s clean, easy to
understand, and potentially a little faster.
&lt;/p&gt;
&lt;p&gt;
You have a similar situation with &lt;code&gt;break&lt;/code&gt;. Without it you might have
code like this:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And with:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Not significantly different. 
&lt;/p&gt;
&lt;p&gt;
People who don&amp;#39;t like the break statement usually adhere to a very
strict interpretation of structured programming - one entry point, one
exit point but I&amp;#39;d argue that break (and continue) are not like
arbitrary jumps. They&amp;#39;re well defined and don&amp;#39;t introduce spaghetti
code. They either specifically exit a bounding language construct or
jump to the next iteration. Actually, now that I think about it,
&lt;code&gt;exceptions&lt;/code&gt; can be used in a way that mucks with clear code in a much
more dangerous way than break and continue can.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s an example with continue:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
as opposed to:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Which is better? It&amp;#39;s purely subjective. Nothing wrong with either.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll share a final example. This one lifted from an &lt;a href=&#34;https://cestlaz.github.io/post/globals-breaks-and-returns/&#34;&gt;older post&lt;/a&gt; on
&amp;#34;best practices.&amp;#34; If you&amp;#39;re writing an event handler, you could put
the exit event in the loop boolean but I find including it
as a case using a &lt;code&gt;break&lt;/code&gt; to be cleaner:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
At the end of the day, &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;, like most langauge
constructs can be used for either good or evil. There have been times
when they&amp;#39;ve led me to cleaner code so I&amp;#39;ve used them. At other times,
using them would have been forced.
&lt;/p&gt;
&lt;p&gt;
If we agree that &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; can be appropriate, the other
question is when to introduce them. One comment from the most recent
Facebook thread on this (name withheld since that&amp;#39;s a semi-private
forum) was that it shouldn&amp;#39;t be right off the bat but rather after
they&amp;#39;re comfortable with loops, conditionals and booleans so that they
can use the new constructs when they make sense and not willy-nilly. I
tend to agree with this.
&lt;/p&gt;
&lt;p&gt;
Personally, I think it&amp;#39;s important to show our kids constructs like
&lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; and it&amp;#39;s also important for us to talk about
good code and &lt;a href=&#34;https://cestlaz.github.io/posts/best-practices-cli/&#34;&gt;best practices&lt;/a&gt; but the important thing is that we don&amp;#39;t
have our kids blindly follow any practice but empower them to make good
decisions based on their situations.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On Technical Interviews And Diversity</title>
      <link>https://cestlaz.github.io/post/technical-interviews-and-diversity/</link>
      <pubDate>Sun, 28 Apr 2019 11:27:46 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/technical-interviews-and-diversity/</guid>
      <description>&lt;p&gt;
I recently stumbled upon &lt;a href=&#34;https://twitter.com/laurieontech/with_replies&#34;&gt;Laurie Barth&lt;/a&gt; on Twitter and noticed a couple
of tweets about tech interviews and the hiring process, something I&amp;#39;ve
been thinking about recently.
&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Solid rant. I
think the teach to the programming test market already exists. And
itâ€™s why interviewers who subscribe to these tactics get upset if a
candidate admits theyâ€™ve seen the problem previously. Because it ruins
the illusion that this is revealing how candidates think. &lt;a
href=&#34;https://t.co/DpHgQx0TST&#34;&gt;https://t.co/DpHgQx0TST&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Laurie (@laurieontech) &lt;a
href=&#34;https://twitter.com/laurieontech/status/1121879805862064131?ref_src=twsrc%5Etfw&#34;&gt;April
26, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async
src=&#34;https://platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;One of the
things I often think about is feeling like I got lucky making it
through some of my interviews...and then killed it on the job. We know
interviews donâ€™t match the on the job skills, itâ€™s about time we did
something about it. &lt;a
href=&#34;https://t.co/xmUXkGvtoA&#34;&gt;https://t.co/xmUXkGvtoA&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Laurie (@laurieontech) &lt;a
href=&#34;https://twitter.com/laurieontech/status/1122496300912717825?ref_src=twsrc%5Etfw&#34;&gt;April
28, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async
src=&#34;https://platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
I guess I&amp;#39;ve been thinking about it because I&amp;#39;m teaching a section of
Data Structures which, along with Algorithms, provides the base
knowledge you need to have a shot at the typical &amp;#34;Google Style&amp;#34;
technical interview.
&lt;/p&gt;
&lt;p&gt;
I say &amp;#34;base knowledge&amp;#34; because just completing those two classes
doesn&amp;#39;t really prepare you. It gives you the building blocks but you
really have to prep specifically for the types of questions they might
give you. Unfortunately, for most kids it involves a whole lot of
rejection and failure before you start getting offers. 
&lt;/p&gt;
&lt;p&gt;
You might get a problem that has a bad brute force solution and during
the relatively short interview, devoid of your typical resources and
comforts you have to turn it into a much more efficient one. The
argument is that the interviewer is really trying to see how you think
about a problem but having spoken to many, many tech employees who do these
interviews that&amp;#39;s a specious argument at best. It&amp;#39;s really a test of
&amp;#34;who has seen the problem or something similar before but can fake
that they haven&amp;#39;t the best.&amp;#34; 
&lt;/p&gt;
&lt;p&gt;
While it&amp;#39;s true that you will get some candidates who can solve the
problems on the spot you&amp;#39;re going to miss out on a whole bunch of
great candidates who just don&amp;#39;t do well on that &amp;#34;Google style&amp;#34; of
interview. At the same time we keep hearing that, as Laurie tweeted,
the skills required on the job don&amp;#39;t match the ones needed to pass the
interview. 
&lt;/p&gt;
&lt;p&gt;
This doesn&amp;#39;t really matter to the big, hot companies. The Googles and
Facebooks of the world. So many students coming out of college want to
work for them that they can afford to miss on tons of great candidates
so long as they hit on enough good ones. 
&lt;/p&gt;
&lt;p&gt;
I put the word &amp;#34;diversity&amp;#34; in the title of this post and you might
wonder what I was going for there. So far, I&amp;#39;m just ranting about the
interview process. This becomes a diversity and privilige issue
because the process favors &amp;#34;elite&amp;#34; CS schools with established CS
cultures. I&amp;#39;m not talking about the fact that they pre-select high
performing candidates nor the fact that all the tech companies go to
those schools, sometimes exclusively for recruiting. I&amp;#39;m talking about
how the school&amp;#39;s student tech culture helps prepare the students for
the technical interview. 
&lt;/p&gt;
&lt;p&gt;
From my discussions with many graduates from many of these institutions, while
classes don&amp;#39;t prep for interviews, students at these CS schools
regularly share interview questions. Friends and classmates talk about
the questions they got and help each other out with practice
sessions - formal or otherwise. I&amp;#39;m certainly not faulting students
for doing this but it&amp;#39;s another known  secret. We all know that the
more tech interview questions you see the better prepared you&amp;#39;ll be -
both because you&amp;#39;ll get better at that specific problem solving skill
and also because you&amp;#39;ll likely get interview questions that are
already in your library. It&amp;#39;s that latter part that makes the whole
process very nod, nod, wink wink. 
&lt;/p&gt;
&lt;p&gt;
Nothing stops other students at other schools from doing similar but
it&amp;#39;s much harder at a commuter school where kids live off campus and
have to work part time jobs. It&amp;#39;s the reason I&amp;#39;m fighting so hard for
space and working on building a postitive tech culture at Hunter. Not
specifically for interviews but to help my students become a support
network for each other.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll finish by noting that while this &amp;#34;technical interview&amp;#34; process
might more or less work for the big boys - the hot company du jour, it
probably doesn&amp;#39;t for eveyrone else. A buddy of mine was talking to me
about the process he uses at his much smaller company. He noted that
he could use the &amp;#34;Google interview&amp;#34; process for his future employees
but since his company was much smaller and lesser known, people who
did well would probably also get offers from the big boys and go work
for them. His goal was to come up with a process that catches the
great candidates that &lt;strong&gt;don&amp;#39;t&lt;/strong&gt; do well on the Google interview to try
to catch the great talent that doesn&amp;#39;t do well on today&amp;#39;s technical
interviews. A number of smaller companies seem to be starting to do
this and from the few I&amp;#39;ve spoken to it seems to be going well.
&lt;/p&gt;
&lt;p&gt;
I get that big companies are machines and look for uniformity in all
processes including the interview process but there has to be a
better, more human way to evaluate talent than a one size fits all
process where the norm is failure - particularly when it seldom
relates to actual skills needed on the job.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Seam Carving and Dynamic Programming</title>
      <link>https://cestlaz.github.io/post/seam-carving/</link>
      <pubDate>Mon, 22 Apr 2019 13:51:52 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/seam-carving/</guid>
      <description>&lt;p&gt;
It&amp;#39;s spring break and for me that&amp;#39;s always been a good time to explore
some new ideas.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s one that some of you might like, particularly if you&amp;#39;re
teaching APCS-A or something similar. 
&lt;/p&gt;
&lt;p&gt;
Many APCS-A teachers do a unit on image processing using the &lt;a href=&#34;https://docs.google.com/viewer?url=http%253A%252F%252Fmedia.collegeboard.com%252FdigitalServices%252Fpdf%252Fap%252Fpicture-lab-studentguide.pdf%0A&#34;&gt;picture
lab&lt;/a&gt; (&lt;a href=&#34;http://www.apcs.mathorama.com/index.php?n=Main.PictureLab&#34;&gt;alternate resource&lt;/a&gt;). Image processing is a nice platform to
explore two dimensional arrays. You basically use a 2D array of pixels
(points) to represent an image. You can just use a 2D array of ints
and store 0-255 at each location for a grayscale image and three ints
per pixel for red, green, blue. For this you can just use a simple
2D array of some color class - I think there&amp;#39;s even one built into
Java that you can use.
&lt;/p&gt;
&lt;p&gt;
I like to use the PPM format to save and later reload the images. PPM
is a simple text format. It starts with a header, then an optional
comment (starting with #), the width and height (4x4 in the example
below), then the maximum color number. Here&amp;#39;s an example:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
P3
# feep.ppm
4 4
15
 0  0  0    0  0  0    0  0  0   15  0 15
 0  0  0    0 15  7    0  0  0    0  0  0
 0  0  0    0  0  0    0 15  7    0  0  0
15  0 15    0  0  0    0  0  0    0  0  0
&lt;/pre&gt;
&lt;p&gt;
You can even cut and paste the above into a file and view it with an
image viewer. 
&lt;/p&gt;
&lt;p&gt;
You can find the full format specification &lt;a href=&#34;http://netpbm.sourceforge.net/doc/ppm.html%0A&#34;&gt;here&lt;/a&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Netpbm_format&#34;&gt;alternate resource&lt;/a&gt;). 
&lt;/p&gt;
&lt;p&gt;
The picture lab has a bunch of interesting exercise ideas but if
you&amp;#39;re looking for something &amp;#34;next level&amp;#34; check this out:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/6NcIJXTlugc&#34;&gt;https://www.youtube.com/embed/6NcIJXTlugc&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34;
allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
&lt;p&gt;
Seam Carving is no longer a new cutting edge
technique but it still blows me away. It&amp;#39;s also a really cool project
for more advanced students for two reasons: one, it&amp;#39;s not a toy
assignment - it&amp;#39;s from real research and two, it contains a very
approachable example of dynamic programming which I&amp;#39;ll talk about in a
bit.
&lt;/p&gt;
&lt;p&gt;
If you watch the video, there are two pieces that can sound
intimidating. One is the &amp;#34;dynamic programming algorithm.&amp;#34; The other is
when they talk about the &amp;#34;gradient magnitude.&amp;#34; 
&lt;/p&gt;
&lt;p&gt;
Gradient magnitude. That sounds pretty hard. Actually, it could be
worse. When I first starting looking at the basics of image processing
it was described as &amp;#34;the derivative of the pixels.&amp;#34; &lt;strong&gt;The dirivative of
the pixels????&lt;/strong&gt; I have to know calculus for this?????? Not really. I
hate it when they use big words for simple ideas. All they&amp;#39;re really
talking about is the difference between the color of neighboring
pixels. That is, how much the color changes from one pixel to the
next. Let&amp;#39;s say you have a greyscale image (or have converted an image
to greyscale by averaging the red green and blue values), if you have
a vertical row of pixels with all the values of, let&amp;#39;s say 200 and the
row right next to it is also of values 200, then the two lines are of
the same color - there is no difference. If one pixel has a value of
200 and its neighbor has a value of 50, it changes quite a lot.
&lt;/p&gt;
&lt;p&gt;
The APCS-A picture lab describes a simple way to calculate this in
exercise 9 (linked above). You can also just do a search on &amp;#34;edge
detection tutorial&amp;#34; or &amp;#34;sobol edge detection tutorial&amp;#34; or something
similar.
&lt;/p&gt;
&lt;p&gt;
For Seam Carving, you have to find a sequence of pixels from one side
of the image to the other where the sum off all the differences is the
lowest. This is where the dynamic programming comes in.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Dynamic_programming&#34;&gt;Dynamic Programming&lt;/a&gt; is a technique that, in basic terms takes a
problem that decomposes into subproblems and you store the optimal
subproblem solution rather than recalculating it.
&lt;/p&gt;
&lt;p&gt;
Probably the easiest example is Fibonacci numbers. You can generate
Fibonacci numbers recursively using something like this:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(n):
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fib(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;fib(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It&amp;#39;s very simple but it gets very slow very fast. That&amp;#39;s because it
keeps recalculating the same subproblems over and over and over.
&lt;/p&gt;
&lt;p&gt;
You can &amp;#34;fix&amp;#34; this by creating a list of previously found Fibonacci 
numbers and just return them rather than recalculating:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  fibs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# make room for 1000 fib numbers&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(n):
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; fibs[n] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
          &lt;span style=&#34;color:#75715e&#34;&gt;# we already have the answer, just return it&lt;/span&gt;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fibs[n]
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
          &lt;span style=&#34;color:#75715e&#34;&gt;# otherwise, calculate it, store it, return it&lt;/span&gt;
          f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fib(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;fib(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
          fibs[n]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;f
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and that&amp;#39;s a dynamic programming solution for Fibonacci numbers,
specifically using a technique known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Memoization&#34;&gt;memoization&lt;/a&gt;.  
&lt;/p&gt;
&lt;p&gt;
How does this apply to finding the proper seam to remove? The one with
the lowest total change? 
&lt;/p&gt;
&lt;p&gt;
First, go through the image array and build a second 2D array where
each element contains the pixels &amp;#34;gradient magnitude&amp;#34; or change using
either the method described in task 9 of the picture lab or
elsewhere. 
&lt;/p&gt;
&lt;p&gt;
For the first row, the sum of each pixels path so far is just the
array element.
&lt;/p&gt;
&lt;p&gt;
For each successive row, the value of any pixel is going to be it&amp;#39;s
value plus one of the values abov it, either up left, up center, or up
right. Specifically, the elements new value will be it&amp;#39;s value + the
smallest of the above three.
&lt;/p&gt;
&lt;p&gt;
For example, given this array representing the color changes:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;
    &amp;lt;img src=&amp;#34;/img/seam-mat1.png&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;
&lt;/p&gt;
&lt;p&gt;
When calculating the second item in the second row, you&amp;#39;ll consider
the three values above it:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;
    &amp;lt;img src=&amp;#34;/img/seam-mat2.png&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;
&lt;/p&gt;
&lt;p&gt;
The smallest is 0 so that 2 remains a 2. If we do this for every
element in the second row we get the following:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;
    &amp;lt;img src=&amp;#34;/img/seam-mat3.png&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;
&lt;/p&gt;
&lt;p&gt;
The green boxes added a 0 from the line above but the yellow ones
added the smallest non zero value from the above  row. Note that the
edges just considered the two values above them and didn&amp;#39;t wrap.
&lt;/p&gt;
&lt;p&gt;
Working the rest of the way through, you get this final array:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;
    &amp;lt;img src=&amp;#34;/img/seam-mat4.png&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;
&lt;/p&gt;
&lt;p&gt;
You can now easily identify the best seam to remove by finding the
smallest value in the bottom row and working your way up to the top.
&lt;/p&gt;
&lt;p&gt;
All together this is very doable by an advanced APCS-A student and the
results are very cool, particularly if you do it in an interactive
environment like processing.
&lt;/p&gt;
&lt;p&gt;
So, check out seam carving. I&amp;#39;ll leave you with one more link to a
longer presentation on the topic: 
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=ZBtXl3EuU14&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ZBtXl3EuU14&#34;&gt;https://www.youtube.com/watch?v=ZBtXl3EuU14&lt;/a&gt;&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adapting A Nifty Assignment</title>
      <link>https://cestlaz.github.io/post/adapting-a-nifty-assignment/</link>
      <pubDate>Sat, 16 Mar 2019 08:20:47 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/adapting-a-nifty-assignment/</guid>
      <description>&lt;p&gt;
&amp;lt;figure class=&amp;#34;z_image_center&amp;#34;&amp;gt;
    &amp;lt;img src=&amp;#34;&lt;img src=&#34;http://nifty.stanford.edu/2019/popyack-nifty-post-it/samples/animation/Animated_325.gif&#34; alt=&#34;http://nifty.stanford.edu/2019/popyack-nifty-post-it/samples/animation/Animated_325.gif&#34; title=&#34;http://nifty.stanford.edu/2019/popyack-nifty-post-it/samples/animation/Animated_325.gif&#34; /&gt;&amp;#34;/&amp;gt; 
&amp;lt;/figure&amp;gt;
&lt;/p&gt;
&lt;p&gt;
The &lt;a href=&#34;http://nifty.stanford.edu/&#34;&gt;Nifty Assignments&lt;/a&gt; session at SGICSE is always a popular one.
&lt;/p&gt;
&lt;p&gt;
Go to &lt;a href=&#34;http://nifty.stanford.edu/&#34;&gt;the site&lt;/a&gt; and you&amp;#39;ll find links to all the assignments presented
from 1999 to the present year.
&lt;/p&gt;
&lt;p&gt;
On the one hand, it&amp;#39;s a great resource. On the other, the assignments
vary in nifty-ness depending on one&amp;#39;s personal taste. To me, there
seemed to be a run of nifty assignments that were really just &amp;#34;take a
generic assignment and fancy up the graphics&amp;#34; mixed in with one&amp;#39;s that
I found really cool. There&amp;#39;s also no way to really tell if an
assignment scratches your fancy without clicking through and reading
all of them.
&lt;/p&gt;
&lt;p&gt;
I thought I&amp;#39;d talk about one of the assignments presented at this past
SIGCSE. I don&amp;#39;t think I&amp;#39;ll have an opportunity to use it directly but
I did find it pretty nifty. I also thought I&amp;#39;d share some tweaks I&amp;#39;d
consider if I were to use it.
&lt;/p&gt;
&lt;p&gt;
The assignment is Jeffrey L. Popyack&amp;#39;s &lt;a href=&#34;http://nifty.stanford.edu/2019/popyack-nifty-post-it/&#34;&gt;Post-It Pandemoniim&lt;/a&gt; assignment.
&lt;/p&gt;
&lt;p&gt;
At first glance, or rather at the start of the presentation it seemed
a pretty lightweight assignment - kids make a pixelated image by
putting colored postit notes on a grid. That&amp;#39;s a simple, nice
intro to 2D arrays but not all that nifty. The nifty part came when
you drilled down into the details. 
&lt;/p&gt;
&lt;p&gt;
The assignment starts with a GIF image. First you process it  with a program
provided hich produces sheets describing a 3x5 section of the overall
image. These sheets are ultimately distributed to the students
perofming the activity. This still doesn&amp;#39;t sound tremendously deep but
the activity also lets you talk about file formats with color
palettes. The idea that instead of storing the rgb triple for each
pixel you store an index into a palette of 256 colors that&amp;#39;s also
embedded into the file. This is a great way to introduce indirect
lookups. Another feature Poplyack spoke about was compression. He
mentioned the project lending itself to Run Length Encoding. The idea
that if the image has a run of adjacent pixels of the same color,
let&amp;#39;s say 9 reds in a row, instead of encoding them as &amp;#34;RRRRRRRRR&amp;#34; you
would use something like &amp;#34;9R.&amp;#34; Add this all together and it&amp;#39;s pretty
nifty. 
&lt;/p&gt;
&lt;p&gt;
I did have a problem, though with the compression part. During the
talk, Poplyack talked about Run Length Encoding which is pretty simple
and approachable to beginners. GIF, however, as far as I know uses
Lempel-Ziv compression which is much more complex.
&lt;/p&gt;
&lt;p&gt;
If I were to use this assignment, I&amp;#39;d probable make a few changes. I&amp;#39;m
not sure which of the following I&amp;#39;d actually do but here&amp;#39;s what I
would think about.
&lt;/p&gt;
&lt;p&gt;
First I would consider using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Netpbm_format&#34;&gt;NetPBM&lt;/a&gt; formats. Some of these formats
are simple ASCII. You can see some examples on the &lt;a href=&#34;https://en.wikipedia.org/wiki/Netpbm_format&#34;&gt;Wikipedia&lt;/a&gt;
page. This lets them go directly from the file to the poster. You also
have binary encoded versions of the format which adds a layer of
complexity if desired.
&lt;/p&gt;
&lt;p&gt;
The second thing I would consider is using &lt;a href=&#34;https://en.wikipedia.org/wiki/PCX&#34;&gt;PCX&lt;/a&gt; files instead of
GIFs. PCX is a pretty simple format. It uses a color palette and also
RLE compression so while it&amp;#39;s no longer as well known as GIF I think
it might present a more accessible way of getting to a format with Run
Length Encoding and a palette.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not sure of the exact direction I&amp;#39;d go in with this assignment but
these are the additional things I&amp;#39;d think about. It&amp;#39;s pretty nifty as
is but as with a lot of nifty assignments, part of the fun is
customizing it for your situation.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2019 - the keynotes</title>
      <link>https://cestlaz.github.io/post/sigcse-2019-keynotes/</link>
      <pubDate>Mon, 04 Mar 2019 15:25:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/sigcse-2019-keynotes/</guid>
      <description>
&lt;p&gt;
It&amp;#39;s that time of the year to write a series of blog posts about
SIGCSE. I thought I&amp;#39;d start with one on the keynotes. 
&lt;/p&gt;
&lt;p&gt;
There were four keynote speakers. Marie desJardins, Gloria Townsend,
Mark Guzdial, and Blair Taylor. I wasn&amp;#39;t at the first timer&amp;#39;s lunch
where Townsend spoke so I won&amp;#39;t talk at all about that keynote.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m also not going to summarize the talks. Andy Ko wrote up a terrific
summary of his &lt;a href=&#34;https://medium.com/bits-and-behavior/sigcse-2019-trip-report-celebrating-50-years-b3460835a09a&#34;&gt;SIGCSE experience&lt;/a&gt; and did a much better job giving
overviews to the keynotes than I ever could so I&amp;#39;ll just refer you to
Andy&amp;#39;s &lt;a href=&#34;https://medium.com/bits-and-behavior/sigcse-2019-trip-report-celebrating-50-years-b3460835a09a&#34;&gt;blog post&lt;/a&gt;. Rather, I&amp;#39;m just going to talk a bit about what they
left me thinking about. It might be something that&amp;#39;s pretty tangential
to the actual talk but hey, it&amp;#39;s the direction that the speaker sent
my brain to follow.
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Marie des Jardin - the pinch hitter
&lt;/h2&gt;
&lt;p&gt;
Marie desJardins wasn&amp;#39;t supposed to be the keynote. She was filling in
for a flu ridden &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Freeman_A._Hrabowski_III&#34;&gt;Freeman Hrabowski&lt;/a&gt; at the last minute and she did a
more than admirable job.
&lt;/p&gt;
&lt;p&gt;
The big line for me was her plea for us not to create &amp;#34;weed out&amp;#34;
courses but rather to create &amp;#34;launch&amp;#34; courses. I think this resonated
with many in the audience. It got me thinking about something that&amp;#39;s
been a concern of mine for a while. We see a lot of examples of making
student&amp;#39;s first CS experience more gentle and more varied. Probably
the biggest example is APCS-P but you can also find it in many college
CS0 classes. Hunter&amp;#39;s no exception - we&amp;#39;re now in the second year of a
more varied CS0 class (although truth be told, our problem
wasn&amp;#39;t so much that our old CS0 was a gatekeeper but more that
students hardly did any programming). 
&lt;/p&gt;
&lt;p&gt;
I started to become aware of the problem as I would hear stories of
kids who did Girls Who Code programs who then dropped out of CS
classes that were too hard and then later when my former students at
Harvard told me that many kids &amp;#34;dropped like flies&amp;#34; in the class after
CS50. I&amp;#39;ve also seen these problems at Hunter but at least here I know
we&amp;#39;re working on it. Having a more accessible entry point is terrific
but not if you just set the kids up to fail one step down the line. It
seems that not enough people are looking at the complete path: from
first course to last and the transitions in between. This is a hidden
danger. We can proudly say that diversity and enrollments are up based
on those first experiences and no one&amp;#39;s the wiser that we&amp;#39;re killing
the kids later on. We have to do better.
&lt;/p&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Mark Guzdial - the outstanding contributer
&lt;/h2&gt;
&lt;p&gt;
Mark was this year&amp;#39;s winner of SIGCSE&amp;#39;s Award for Outstanding
Contribution to CS Education. A well deserved award. Mark&amp;#39;s talk was
terrific and similar to the one he gave at the Code and Beyond
conference in NY which I wrote about &lt;a href=&#34;https://cestlaz.github.io/post/thoughts-on-code-and-beyond-ct/&#34;&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
As with the previous keynote you can get a great summary if you read
Andy&amp;#39;s post linked above.
&lt;/p&gt;
&lt;p&gt;
One point Mark made was that he felt that all students should learn
programming but if I remember the talk correctly he didn&amp;#39;t make a
strong statement about all students learning CS. He also said that
first course our CS majors take shouldn&amp;#39;t be the same as the first
course for non majors. I see where Mark&amp;#39;s coming from I&amp;#39;m not sure I
agree. Well, I do agree given what a first CS course for a major
typically looks like versus what a never-CS major might need for life but
the few CS0 for non major courses I&amp;#39;ve seen don&amp;#39;t leave their students
with enough to continue on to the CS major or a minor (which could be
valuable to a HUGE swath of students) so they end up taking the CS0
for CS majors anyway. This means one more course and one more
semester. More cost and more time spent. I&amp;#39;ll say that I do agree with
Mark UNLESS you can design a course that can address the needs of both
parties and the truth is I think you can. We did it at Stuy. Students
come back with that having been their only course and talk of its
usefulness and utility and students come back having used it to launch
a tech career in later high school, college, and beyond. What we built
isn&amp;#39;t perfect and is for a particular population but as proof of
concept it&amp;#39;s convinced me that a single course for both can be done
&lt;/p&gt;
&lt;p&gt;
Another one of Mark&amp;#39;s big points was taking CS into other subject
areas. I love this and I love when he said (apologies if the quote&amp;#39;s a
little off) &amp;#34;They need things and we can build stuff&amp;#34; as a call to
action to partner with and to develop the languages and tools needed
to support a new vision of CS embedded in other subject areas.
&lt;/p&gt;
&lt;p&gt;
My thoughts here are that as a community we are ignoring the realities
of K12 education. Mark mentioned Bootstrap World, a sprogram both he
and I like very much. It is embedded in Algebra classes and uses CS in
Racket (nee Scheme) to support learning said algebra. Mark noted that
Racket looks like Algebra and that&amp;#39;s one of the reasons Bootstrap
works. Another fact often left out is that algebra is frequently
taught either over two years or with a double period allocated to
it. It is given more time than most classes and that allows teachers to experiment
a bit more with instruction. Even if we develop more tools like
Bootstrap that align themselves to teaching other subjects those
subject teachers might not have the time to dedicate to the new
tool. Why not? That&amp;#39;s another thing Mark indirectly mentioned. At one
point he said that we might have to &amp;#34;take a step back&amp;#34; first in terms
of results and quite frankly, K12 teachers sometimes can&amp;#39;t take that
chance. In addition to not wanting to give their current students a
worse experience even with the promise that future classes would get a
better one they have to face the specter of high stakes testing. If
I&amp;#39;m using a new CS tool in a history class and my student&amp;#39;s test
results go down, they might have to repeat the class and the teacher
could put their license in jeopardy.
&lt;/p&gt;
&lt;p&gt;
In the end I loved just about everything Mark had to say but it still
got me thinking about a lot and to me that&amp;#39;s one of the hallmarks of a
great talk. 
&lt;/p&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Blair Taylor - the controversy
&lt;/h2&gt;
&lt;p&gt;
Blair Taylor gave the final keynote and this one had some controversy
around it. Andy&amp;#39;s blog post again summarizes things well. 
&lt;/p&gt;
&lt;p&gt;
My only take on the content is that the talk was more about
Dr. Taylor&amp;#39;s journey and less about Cyber Security (I hate it that
it&amp;#39;s now just being called &amp;#34;cyber&amp;#34;) but that was fine. 
&lt;/p&gt;
&lt;p&gt;
What I want to talk about here is not so much the controversy over how
some people took parts of Dr. Taylor&amp;#39;s talk and the Q&amp;amp;A at the end but
rather the fact that more and more recently I&amp;#39;ve felt that as a
community we can&amp;#39;t talk about difficult issues concerning gender,
race, and the like. 
&lt;/p&gt;
&lt;p&gt;
I consider myself an ally to under represented and under served groups
but have found myself in situations recently where unless I 100%
parrot one side&amp;#39;s extreme view I&amp;#39;m accused of sexism or racism at
which point ANYTHING I say is treated as such. One is not allowed to
see any nuance in what is a very complex topic. 
&lt;/p&gt;
&lt;p&gt;
At one point, the speaker made a joke. She prefaced it with something
like &amp;#34;I&amp;#39;m going to tell this offensive joke&amp;#34; and that she could,
presumably because she is a women. The joke fell flat (although I&amp;#39;ve
told the story of the keynote to a few women in tech and they chuckled
and said they actually kind of liked the joke). My take was that the
speaker was setting the stage to maybe dive into a difficult
conversation. My take was also that some members of the audience right
then and there decided that the speaker was wrong about all things. 
&lt;/p&gt;
&lt;p&gt;
After the talk I was a bit more convinced that this was the case as I
read a tweet stream explaining what happened that included the joke
but none of the context for the reader to make an informed decision. 
&lt;/p&gt;
&lt;p&gt;
In the end, I felt that Dr. Taylor has honestly worked for under
represented groups and while this might be unpopular, her pragmatism of
sometimes swallowing an insult and &amp;#34;having a sense of humor&amp;#34; is the
right thing to do. Unfortunately, Dr. Taylor misread the audience and that
some people decided somewhere in her talk that even though she was
working to empower women in her own way, it wasn&amp;#39;t &amp;#34;my way&amp;#34; so it was
wrong. 
&lt;/p&gt;
&lt;p&gt;
The situation was unfortunate and my big fear is that as a community
we still have a long way to go before we can have these conversations
and personally, as someone who considers themselves an ally of the
undeserved I&amp;#39;m becoming more gun shy of partaking in discussions.
&lt;/p&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
That&amp;#39;s all for now.
&lt;/h2&gt;
&lt;p&gt;
So, that&amp;#39;s my take on the keynotes. Much more to come on the
conference in future posts. 
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>March PD for CS Teachers</title>
      <link>https://cestlaz.github.io/post/pd-apcs-a-and-beyond-3-14-2019/</link>
      <pubDate>Tue, 26 Feb 2019 15:49:22 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pd-apcs-a-and-beyond-3-14-2019/</guid>
      <description>&lt;p&gt;
Back in December we ran our first &lt;a href=&#34;https://cestlaz.github.io/post/pd-apcs-a-and-beyond/&#34;&gt;PD session for CS teachers&lt;/a&gt;. This was
to address the need for professional development for teachers who were
more experienced in terms of computer science - we aimed this at people who were ready to
teach APCS-A, similar, or beyond and also to start to build a
community for these teachers. 
&lt;/p&gt;
&lt;p&gt;
We had trouble setting things up for February but we&amp;#39;re good to go for
March, April and May.
&lt;/p&gt;
&lt;p&gt;
Just as with our first session, each session will consist of a content
piece, a pedagogy piece, and will overall be driven by the
participants.
&lt;/p&gt;
&lt;p&gt;
The next session is set for Thursday, March 14 from 5:00 - 8:00 and
will be hosted by Digital Ocean. The sessions will earn you 3 CTLE
hours and dinner will be provided.
&lt;/p&gt;
&lt;p&gt;
If you or a CS teacher you know is interested in this, they can sign
up here: &lt;a href=&#34;https://goo.gl/forms/DCXqPtwYS47Ooo8j1&#34;&gt;https://goo.gl/forms/DCXqPtwYS47Ooo8j1&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Interfaces</title>
      <link>https://cestlaz.github.io/post/java-interfaces/</link>
      <pubDate>Fri, 08 Feb 2019 09:40:44 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/java-interfaces/</guid>
      <description>&lt;p&gt;
Two of the hardest topics to make meaningful to students in APCS-A are
inheritance and interfaces. It&amp;#39;s not that they&amp;#39;re super difficult
topics but rather that they&amp;#39;re not often needed, useful, or superior
to not using them on beginner assignments. More often than not the
motivation is a bit forced as are the assignments. 
&lt;/p&gt;
&lt;p&gt;
Inheritance is its own can of worms and to be honest, something I&amp;#39;ve
not found to be all that useful or necessary. The class abstraction
made sense to me for a number of projects but deep inheritance just
hasn&amp;#39;t come up much. 
&lt;/p&gt;
&lt;p&gt;
In any event, today I thought I&amp;#39;d talk about interfaces.
&lt;/p&gt;
&lt;p&gt;
When Java was first built a decision was made not to allow multiple
inheritance - the idea that a class can be derived from multiple
parents. Multiple inheritance is powerful but it can also be
complicated and confusing. By not including multiple inheritance Java
ended up easier to work with than say C++ but there were times where
you needed features that multiple inheritance provide. Specifically
there are times when you need some functionality that operates across
multiple unrelated classes. Without any other features, you&amp;#39;d have to
start &lt;strong&gt;all&lt;/strong&gt; of your classes from a single based class and include that
functionality. Clearly not a good idea.
&lt;/p&gt;
&lt;p&gt;
The first useful example is probably &lt;code&gt;Comparable&lt;/code&gt;
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
At first blush it might not seem all that useful. 
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s suppose you are doing something like finding the first String
(alphabetically) from an array:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
That&amp;#39;s easy enough but what if you had another class, &lt;code&gt;Shape&lt;/code&gt; where
you wanted to find the &amp;#34;smallest&amp;#34; based on area and a third class
&lt;code&gt;Person&lt;/code&gt; where you want to find the smallest by age? Without
interfaces you would need three independent search routines or set up
a crazy inheritance hierarchy where &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Person&lt;/code&gt; and &lt;code&gt;Shape&lt;/code&gt; all
come from the same parent. Instead, by having your two new classes
implement the &lt;code&gt;Comparable&lt;/code&gt; interface all three can use the same
search:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This is not entirely true. The above solution will give you compiler
warnings. You&amp;#39;ll have to decide if it makes sense to jump through the
hoops necessary to get rid of the warnings or if it&amp;#39;s sufficient to do
some vigorous had waving.
&lt;/p&gt;
&lt;p&gt;
This is the benefit of interfaces. You can create functionality that
works across classes. In addition to writing things like our
 &lt;code&gt;findSmallest&lt;/code&gt; above, if our classes implement &lt;code&gt;Comparable&lt;/code&gt; we can sort
collections of our classes using the built in sort methods.
&lt;/p&gt;
&lt;p&gt;
This is a benefit that our students can probably appreciate.
&lt;/p&gt;
&lt;p&gt;
Anther place interfaces come up and make sense are with GUI
programming. It&amp;#39;s pretty easy to show the utility of using interfaces
with the assorted listeners. That said, Java GUI programming is
something of a bear so maybe that&amp;#39;s not the way to go.
&lt;/p&gt;
&lt;p&gt;
Where else can you explore interfaces in APCS-A? Any program where you
have different entities that change in different ways over time. This
might be a simulation where time passes via a control loop or maybe a
game where time passes a turn at a time.
&lt;/p&gt;
&lt;p&gt;
For example, you might have a simulation with various resources that
implement an interface with an &lt;code&gt;update&lt;/code&gt; routine:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Maybe a food resource updates by raising or lowering the amount of
food it provides or perhaps an animal resource updates its location. You could
have an array of objects that implement this interface and just call
update on each one.
&lt;/p&gt;
&lt;p&gt;
You could do the same with a game. Maybe the human player&amp;#39;s &lt;code&gt;update&lt;/code&gt; 
prompts for keyboard input while non player characters just calculate
their next state.
&lt;/p&gt;
&lt;p&gt;
Interfaces are not the easiest thing to teach. The mechanics are
straightforward but the motivation is frequently forced for
beginners. I was never 100% happy with how I did it and now that I&amp;#39;m
in a C++ shop it doesn&amp;#39;t come up but I hope this is helpful to some of
you out there.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solve A To Solve B</title>
      <link>https://cestlaz.github.io/post/solve-a-to-solve-b/</link>
      <pubDate>Fri, 18 Jan 2019 19:36:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/solve-a-to-solve-b/</guid>
      <description>&lt;p&gt;
So many programming assignments involve a direct solution. Write a
program to do this or write a problem to solve that. It&amp;#39;s pretty
typical. There&amp;#39;s nothing wrong with assignments like these. They allow
students to practice what they&amp;#39;ve been learning and it gives them the
opportunity to create some cool programs. All the same, I like it when
there&amp;#39;s an indirect problem. You&amp;#39;re faced with a problem but in order
to solve it you first have to solve some other problem
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s why I liked &lt;a href=&#34;https://adventofcode.com/2018/day/10&#34;&gt;day 10&lt;/a&gt; from this year&amp;#39;s Advent of Code. 
&lt;/p&gt;
&lt;p&gt;
At it&amp;#39;s core the question presents you with a collection of points
along with velocities in this form::
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
position=&amp;lt; 9,  1&amp;gt; velocity=&amp;lt; 0,  2&amp;gt;
position=&amp;lt; 7,  0&amp;gt; velocity=&amp;lt;-1,  0&amp;gt;
position=&amp;lt; 3, -2&amp;gt; velocity=&amp;lt;-1,  1&amp;gt;
position=&amp;lt; 6, 10&amp;gt; velocity=&amp;lt;-2, -1&amp;gt;
&lt;/pre&gt;
&lt;p&gt;
Each point moves by adding the x and y components if its velocity each
second. For example, the last two points listed above - points (3,-2)
nad (6,10) would be transformed overtime as follows:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Point&lt;/th&gt;
&lt;th&gt;Velocity&lt;/th&gt;
&lt;th&gt;Second 0&lt;/th&gt;
&lt;th&gt;Second 1&lt;/th&gt;
&lt;th&gt;Second 2&lt;/th&gt;
&lt;th&gt;Second 3&lt;/th&gt;
&lt;th&gt;Second 4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3, -2&lt;/td&gt;
&lt;td&gt;-1,1&lt;/td&gt;
&lt;td&gt;3,-2&lt;/td&gt;
&lt;td&gt;2,-1&lt;/td&gt;
&lt;td&gt;1,0&lt;/td&gt;
&lt;td&gt;0,1&lt;/td&gt;
&lt;td&gt;-1,2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6,10&lt;/td&gt;
&lt;td&gt;-2,-1&lt;/td&gt;
&lt;td&gt;6,10&lt;/td&gt;
&lt;td&gt;4,9&lt;/td&gt;
&lt;td&gt;2,8&lt;/td&gt;
&lt;td&gt;0,7&lt;/td&gt;
&lt;td&gt;-2 6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
At some point in time, if you look at the points on a grid they will
spell out a message or at least a sequence of letters. The question
asks you to figure out that message. There&amp;#39;s a complete example and a
nice story around the problem on the &lt;a href=&#34;https://adventofcode.com/2018/day/10&#34;&gt;Advent of Code site&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
The first thought is probably to run this as a simulation. Set up a
loop, update the point locations, visualize and see if you have an
answer. This isn&amp;#39;t trivial for a beginner but it&amp;#39;s certainly
approachable. It also has a big problem. Unless you happen to have
some optical character recognition libaray handy you have to draw and
look at the output on every change. Given that it could take thousands
of iterations, this is not practical at all. 
&lt;/p&gt;
&lt;p&gt;
We can do better by solving another problem first. The key insight is
that each point travels along a line. In fact, this problem is a great
time to talk about a parametric representation of a line like 
&lt;/p&gt;
&lt;p&gt;
&amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;&lt;a href=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&lt;/a&gt;&amp;#34;&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/p&gt;
&lt;p&gt;
\(L=P+tV\) 
&lt;/p&gt;
&lt;p&gt;
Where \(P\)represents an \((x,y)\) point and \(V\) a direction vector
\((dx,dy)\).
&lt;/p&gt;
&lt;p&gt;
Regardless of where the points start, at some point all of them will
be contained within your field of view after which they will continue
along their paths outside of that field of view. We can look at a
bounding box for all of the points and when that bounding box is
smallest we should be at or close to our message.
&lt;/p&gt;
&lt;p&gt;
This is readily accomplished. We can find a bounding box by finding the
smallest and largest x and y coordinates for all the current points
and using \((X_{min},Y_{min})\) and \((X_{max},Y_{max})\) as the
diagonals of a bounding rectangle and then compare areas of these
rectangles. They should decrease at first and then eventually
increase. 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,some_large_value,stepsize):
      new_pts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; transform(pts,time) 
      bbox &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bounding_box(new_pts)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (area(bbox) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; area(previous_bbox)):
          &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re close to or at the smallest bounding box&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
We can start with a big &lt;code&gt;stepsize&lt;/code&gt; and then refine it down until we
hone in on the smallest bounding box.
&lt;/p&gt;
&lt;p&gt;
From there, we can transform all the points using the time that
resulted in the smallest bounding box and then display the points to
see our message. We might have to go through a small window of times
since the actual message might just be close to the configuration
yielded from the smallest bounding box. Of course that visualization
takes some doing - the actual viewing window might not align with your
screeen coordinates, they could all, for example, be negative so
you&amp;#39;ll probably have to do one last transformation to translate and
possibly scale the final points to make it all viewable.
&lt;/p&gt;
&lt;p&gt;
When I first solved the problem, I just dumped the coordinates into a
2 dimentional array and printed it but afterwards I wrote a little
clojurescript html5 canvas visualization:
&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://cestlaz.github.io/img/advent-2018-10.gif&#34; width=&#34;200px&#34; height=&#34;20px&#34;/&gt; 
&lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;
So there it is. It&amp;#39;s not a trivial problem for beginners but it is doable. There&amp;#39;s a
lot to deal with:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
parse the data
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
This isn&amp;#39;t too bad. You could cover regular expressions but even
without it isn&amp;#39;t too big of a deal. You could also just use an editor
to extract the important data or preprocess this for the kids.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Figure out how to transform the points.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
This also isn&amp;#39;t too bad. Just loop over all the points with &lt;code&gt;newpoint
= oldpoint + t * velocity&lt;/code&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Figure out the bounding boxes
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Also not too bad. Loop over all the points to find the smallest and
largest x and y coordinates
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Set up a loop to find the smallest bounding box and hence the time
that the message will appear.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
and then finally:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
draw the points to visually inspect the answer.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
This might be the most persnickety part. When I first coded it my
output was upside down and backwards but good enough.
&lt;/p&gt;
&lt;p&gt;
I can&amp;#39;t fully put my finger on it but I really enjoyed this problem. I
hope you enjoyed my writeup. If you want to check out my solution for
this (minus the clojurescript visualization) along with the other
Advent of Code problems I finished this year you can find them &lt;a href=&#34;https://github.com/zamansky/advent2018&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code, Data Structures, and Hidden Complexity</title>
      <link>https://cestlaz.github.io/post/aoc-data-structures-hidden-complexity/</link>
      <pubDate>Sun, 30 Dec 2018 15:17:14 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/aoc-data-structures-hidden-complexity/</guid>
      <description>&lt;p&gt;
Since 2015, &lt;a href=&#34;https://twitter.com/ericwastl&#34;&gt;Eric Wastl&lt;/a&gt; has gifted us each December with &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of
Code&lt;/a&gt; - a 25 day programming competition that I very much enjoy. This
year I haven&amp;#39;t been able to get to too many of the problems. I only
completed the first two days on the day they were released, problem
three a day late and then I didn&amp;#39;t get back to the problems until
almost 12/25 - the final day of the competition. I&amp;#39;ve spent a bit of
time over the break working through the problems. I&amp;#39;m currently
through 9. I started working through the problems in Clojure - part of
my yearly attempt to dive into the language but then did a few in
Python just to speed up my progress.
&lt;/p&gt;
&lt;p&gt;
Yesterday, I did &lt;a href=&#34;https://adventofcode.com/2018/day/9&#34;&gt;question 9&lt;/a&gt; which I found interesting as a teacher -
so much so that I think I&amp;#39;ll assign at some point in the future.
At the core of the problem you have to maintain a list of items
inserting and deleting items at assorted locations. I threw together
this solution:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;num_players &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;431&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 9&lt;/span&gt;
last_score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70950&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 255&lt;/span&gt;
players &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(num_players&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]

player&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
board&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
next_marble &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; next_marble &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; last_score:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; next_marble &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;#regular insert&lt;/span&gt;
        L &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(board)
        index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(index&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;L
        index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(index&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;L
        board&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insert(index,next_marble)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        players[player]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;players[player]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; next_marble
        index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(index&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;len(board)
        players[player]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;players[player]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;board[index]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; board[index]
    player&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(player&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;num_players
    next_marble &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_marble &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(max(players))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
It worked and I got my first star. This unlocked part 2 which changed
the number of marbles in the game from 70950 to 70950&amp;lt;b&amp;gt;00&amp;lt;/b&amp;gt;. This
brings me to my first observation - hidden complexity. Seeing my input
I knew my part 2 would be crazy slow. The solution requires you insert
and delete into a list over and over again and I did it using a Python
list and a Python list is backed by an array. This means that every
insert and delete will be linear and I had a whole bunch of them.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s another great simple example of hidden complexity. Students and
beginners use Python lists as if they were linked structures with
direct indexing - the best of all worlds. It&amp;#39;s great if you&amp;#39;re dealing
with small data sets but unless you&amp;#39;re careful things can get very
slow very fast. It&amp;#39;s important that students learn about this and it
appears that many don&amp;#39;t. 
&lt;/p&gt;
&lt;p&gt;
Even though I knew the program would take forever to run it was my bed
time so I started it on part two and turned in for the night.
&lt;/p&gt;
&lt;p&gt;
When I woke up I had an answer to part 2, entered it and earned my
next star. 
&lt;/p&gt;
&lt;p&gt;
Of course I knew that the solution should really be written using a
doubly linked list. The funny thing is that if you&amp;#39;re comfortable with
creating dynamic data structures like linked lists, writing a solution
using a doubly linked list and running it on part 2 actually takes a fraction of
the time of writing the original solution and running it. To make
sure, I did it. I decided to code it up in Java since I might assign
something like this to my students in C++. You can check it out &lt;a href=&#34;https://github.com/zamansky/advent2018/tree/master/java&#34;&gt;here&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
The second take away was that it&amp;#39;s actually beneficial for students to
be able comfortable with pointers and dynamic memory and while
creating a linked list let alone a tree can be tricky at first, &lt;a href=&#34;https://cestlaz.github.io/posts/it-gets-easier-advent19/&#34;&gt;it
does get easier.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
With all the debate going on over coding vs computational thinking vs
CS it&amp;#39;s things like this - thinking about things like this that marks
one of the ways a computer scientist is different from a programmer. 
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Professional Development - APCS-A, similar and beyond</title>
      <link>https://cestlaz.github.io/post/pd-apcs-a-and-beyond/</link>
      <pubDate>Sat, 15 Dec 2018 08:56:06 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pd-apcs-a-and-beyond/</guid>
      <description>&lt;p&gt;
A while ago I wrote about &lt;a href=&#34;https://cestlaz.github.io/post/pd-in-nyc/&#34;&gt;our plans&lt;/a&gt; at Hunter to run professional
development for CS teachers. Specifically, running once a month
sessions for teachers who teach APCS-A, similar and beyond.
&lt;/p&gt;
&lt;p&gt;
The idea started as a joke but morphed into a legit idea.
&lt;/p&gt;
&lt;p&gt;
I was talking to some friends about CTLE hours and how ridiculous the
system is. NY State teachers need 100 hours of CTLE credit (PD hours)
every so many years. It&amp;#39;s something of a scam for a few
reasons. First, two of the biggest providers are the NYC DOE and the
UFT, the teacher&amp;#39;s union. I&amp;#39;ve been told they both charge money for
many CTLE credit bearing activities. That certainly doesn&amp;#39;t seem
kosher â€“ your boss and your union set up a system to charge you to keep your
job. 
&lt;/p&gt;
&lt;p&gt;
Well, it turns out that Hunter is certified to issue CTLE credits so
we joked that we should get dinner and hang out once a month and call
it professional development. We were only half joking - whenever you
get a bunch of teachers in a room they talk shop and that is actually
the best PD there is. Upon talking among ourselves and also to other
teachers we realized there was a legitimate need for PD for teachers
who were beyond the basics and so we turned this silly idea into the
real deal.
&lt;/p&gt;
&lt;p&gt;
Last Thursday we had our first session. We had about 25 attendees for
a three hour session.
&lt;/p&gt;
&lt;p&gt;
I can&amp;#39;t tell you if it was any good - you&amp;#39;ll have to ask the
participants, I can tell you what we did and what we plan moving
forward.
&lt;/p&gt;
&lt;p&gt;
We started with a content piece. I ran through &lt;a href=&#34;https://cestlaz.github.io/posts/2013-03-23-who_won_the_election-quadratic_to_linear_time/&#34;&gt;this lesson&lt;/a&gt; (or &lt;a href=&#34;https://cestlaz.github.io/posts/when-they-change-the-script/&#34;&gt;this
one&lt;/a&gt;) where the students find the mode of a list, realize it&amp;#39;s a slow
(n^2) algorithm and then refine it to a linear solution. The key idea
is to give the students an intuitive feeling for run time issues and
also to introduce them to &lt;a href=&#34;https://cestlaz.github.io/posts/2014-11-17-hidden-complexity.html/&#34;&gt;hidden complexity&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
After this we had dinner, provided by our friends at Google. Over
dinner the teachers talked shop. In addition to getting to know each
other, their programs, and their classes we also asked them to
consider these three items:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
What are things that cause you difficulty that you&amp;#39;d like us to
cover?
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
What are things you wish you knew about that you&amp;#39;d like us to
cover?
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
What are things you&amp;#39;re comfortable with that you&amp;#39;d be willing to
share with the group?
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
After dinner we circled up and JonAlf presented the way he set up
student note taking in his class.
&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://cestlaz.github.io/img/pd-apcs-a.jpg&#34; width=&#34;500&#34; height=&#34;500px&#34;/&gt; 
&lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;
Finally, we discussed next steps - specifically what we came up with
for those three bullet points above.
&lt;/p&gt;
&lt;p&gt;
I like the idea of having at least one short content piece, one short
pedagogy piece and a deeper dive at each meeting. For the first one,
JonAlf and I had to guess as to what might be useful and at the
appropriate level. We advertised for teachers who did APCS-A, similar,
or beyond but I&amp;#39;m sure we had teachers for whom the mode lesson was a
bit too advanced to do without scaffolding and also some for whom it
was way to simple. As we continue to meet, we&amp;#39;ll nail down the right
level and the right activities.
&lt;/p&gt;
&lt;p&gt;
The real hope is that many of the participants will become regulars
and together we&amp;#39;ll turn this into both an amazing once a month
activity and also a community of teachers.
&lt;/p&gt;
&lt;p&gt;
Right now, I&amp;#39;m looking for companies who want to feed us and possibly
provide space so if you know of any, hook me up. We&amp;#39;re also collecting
feedback and ideas from the attendees. 
&lt;/p&gt;
&lt;p&gt;
We&amp;#39;re targetting February for our next session followed by March,
April, May and possibly June.
&lt;/p&gt;
&lt;p&gt;
In the meantime, stay tuned.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PD in NYC</title>
      <link>https://cestlaz.github.io/post/pd-in-nyc/</link>
      <pubDate>Sun, 18 Nov 2018 19:43:36 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/pd-in-nyc/</guid>
      <description>&lt;p&gt;
I spent this past Saturday morning up at the Microsoft building in
Times Square. What was I doing there? &lt;a href=&#34;https://twitter.com/aankit?lang=en&#34;&gt;Aankit Patel&lt;/a&gt; invited me to check
out the professional development that he and his team organized for
the teachers involved in the assorted CSforAllNYC programs that his
office runs. 
&lt;/p&gt;
&lt;p&gt;
Wow.
&lt;/p&gt;
&lt;p&gt;
Lots of great things going on. I was only able to stay for a couple of
hours but I spent some time in two rooms run by &lt;a href=&#34;https://www.tealsk12.org/&#34;&gt;TEALS&lt;/a&gt;, a room of &lt;a href=&#34;https://bjc.berkeley.edu/&#34;&gt;BJC&lt;/a&gt;
teachers, a group working with &lt;a href=&#34;https://p5js.org&#34;&gt;p5.js&lt;/a&gt;, one doing physical computing and
a bunch more.
&lt;/p&gt;
&lt;p&gt;
While there was good content all around I was really impressed with
the sense of community in many of the rooms. One of the hardest parts
of being a computer science teacher in K12 is that you&amp;#39;re frequently
the only CS teacher in your school. That can be an awfully lonely
existence. It&amp;#39;s hard to be the only teacher. No one to bounce lesson
ideas off of or to debrief with and if you leave your school they&amp;#39;re
left in the lurch. 
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s simply amazing that all these NYC teachers have opportunities
like this past weekends PD and the communty it provides. 
&lt;/p&gt;
&lt;p&gt;
On the other hand, teachers who are not part of city programs like
SEP or TEALS don&amp;#39;t have these opportunities and at Hunter we&amp;#39;re trying
to do our piece to help solve that problem.
&lt;/p&gt;
&lt;p&gt;
A few months ago I wrote about our plans to roll out once a month
professional development sessions for CTLE hours specifically aimed at
teachers who are ready for the next step. Those who are already
comfortable with the first courses and student experiences. I&amp;#39;m
describing the sessions as being for high school teachers teaching
APCS-A, similar or beyond.
&lt;/p&gt;
&lt;p&gt;
Were hosting our first session on December 13th. There will be a
couple of presentations or activities to get us started but the bulk
of the time will be about planning the rest of the sessions which will
run until the end of the school year and the hope is that we will
cover both content beyond the basics.
&lt;/p&gt;
&lt;p&gt;
So, if you&amp;#39;re a public school CS teacher in NYC (and need CTLE hours)
and you&amp;#39;re ready for something more advanced than the usual PD
opportunities, why don&amp;#39;t you join us. Just sign up &lt;a href=&#34;https://goo.gl/forms/FJDyCx7qFec1yPjr1&#34;&gt;here&lt;/a&gt;. Space is
limited so if we fill, we&amp;#39;ll add you to the waitlist and we&amp;#39;ll work on
trying to find a bigger space to acomodate more teachers.
&lt;/p&gt;
&lt;p&gt;
Looking forward to getting this thing started!!!!
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Who Played Spiderman - part 3</title>
      <link>https://cestlaz.github.io/post/who-played-spiderman-3/</link>
      <pubDate>Tue, 16 Oct 2018 17:25:33 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/who-played-spiderman-3/</guid>
      <description>
&lt;h2 id=&#34;headline-1&#34;&gt;
Parts 1 and 2
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman/&#34;&gt;Part 1&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-2/&#34;&gt;Part 2&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Part 3
&lt;/h2&gt;
&lt;p&gt;
In the first two parts of this set of posts I wrote about the
motivation and design a question answering system that can answer
&amp;#34;who&amp;#34; queries like &amp;#34;who played Spiderman&amp;#34; or &amp;#34;who shot John Lennon?&amp;#34;
It&amp;#39;s not perfect. When doing the Spiderman query, chances are the
desired answer will be at or near the top of the list of most
frequently appearing names but so will &amp;#34;Peter Parker.&amp;#34; How do you
distinguish between a real answer and a fictional name? Likewise, if
you ask &amp;#34;Who shot John Lennon?&amp;#34; You&amp;#39;ll probably get Mark David (if you
search for two word names) or if you&amp;#39;re more inclusive, Mark David
Chapman, but you&amp;#39;ll also find John Lennon at or near the top of your
results.
&lt;/p&gt;
&lt;p&gt;
This system may not be perfect but then again, it can be written by one or a
small group of students relatively new to CS in a few periods as
opposed to a team of full time Google Software Engineers. I also truly
 &lt;strong&gt;like&lt;/strong&gt; the fact that it isn&amp;#39;t perfect. Too many student experiences involve
perfect questions with predetermined perfect answers. I love the fact
that they see false positives and true negatives in this. I love that
they can get pretty good but not perfect results. This makes the
experience more interesting, more fun, and more authentic.
&lt;/p&gt;
&lt;p&gt;
This lesson can also easily be extended beyond &amp;#34;who&amp;#34; queries. &amp;#34;When&amp;#34;
queries are also pretty straightforward. Things like &amp;#34;When was D-Day&amp;#34;
or &amp;#34;When did Elvis die?&amp;#34; For a &amp;#34;when&amp;#34; query, you start the same way as
for a &amp;#34;who&amp;#34; query. Use the search API to get a bunch of documents that
mention the query terms. Then you look for dates. Dates can be even
easier to search for than names. Particularly if your students know
regular expressions. Dates could be things like:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
two digits / two digits / two digits
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Month name number, number
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
etc.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
or in regular expressions, something like:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
[0-9]{2}/[0-9]{2}/[0-9]{2}/
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
(Jan|Feb|Marâ€¦)[0-9]{2}, {0-9]{4}}
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
etc.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Just as with &amp;#34;who&amp;#34; queries there are issues to deal with - searching
for &amp;#34;when did Elvis die&amp;#34; might give you when Elvis was born instead
but again, these are great motivators for further exploration and
discussion.
&lt;/p&gt;
&lt;p&gt;
So, there&amp;#39;s the project. What level of students can do this? It
depends. I first did this in my Software Devepment class. That class
was offered to student who had completed APCS-A. The class covered
using APIs and setting up a web application using Python and Flask so
they were able to do the entire project, soup to nuts. An APCS class
could also do the project without the web application just so long as
they have access to the search API. In fact, an intro programming
class could also have success with this project.
&lt;/p&gt;
&lt;p&gt;
This was actually one of the lessons I&amp;#39;ve missed since I haven&amp;#39;t been
able to work it into my Hunter courses so I was really happy when the
class discussion led me to call and audible and talk about it.
&lt;/p&gt;
&lt;p&gt;
I hope some of you out there experiment with it and if you do, I&amp;#39;d
love to hear about your tweaks, implementations and successes.
&lt;/p&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Parts 1 and 2
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman/&#34;&gt;Part 1&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-2/&#34;&gt;Part 2&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Who Played Spiderman part 2</title>
      <link>https://cestlaz.github.io/post/who-played-spiderman-2/</link>
      <pubDate>Sat, 13 Oct 2018 16:04:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/who-played-spiderman-2/</guid>
      <description>
&lt;h2 id=&#34;headline-1&#34;&gt;
Parts 1 and 3
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman/&#34;&gt;Part 1&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-3/&#34;&gt;Part 3&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Part 2
&lt;/h2&gt;
&lt;p&gt;
When we left off &lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman/&#34;&gt;last time&lt;/a&gt; we used a search engine API to gather a
whole bunch of documents with the term &amp;#34;played Spiderman&amp;#34; or &amp;#34;who
played Spiderman.&amp;#34; Now we have to process these documents to answer
the question. Fortunately, the documents are basically just big
strings of text.
&lt;/p&gt;
&lt;p&gt;
Since we&amp;#39;re doing a &amp;#34;who&amp;#34; query  we want to find all the names in all
the documents. This leads to a class discussion on how to find names
in a large string. They&amp;#39;ll come up with rules like:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
two adjacent words each with a capital first letter.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
an honorific (Mr, Ms, etc.) followed by a capitalized word
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A word that matches a name from a &amp;#34;popular name&amp;#34; list followed by a
capitalized word.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The class might come up with different or additional rules. Actually
writing the code to pull out the names is an nice little assignment
that can be done with classes at many different levels. A beginning
class might just use string operations while an intermediate one could
use regular expressions. 
&lt;/p&gt;
&lt;p&gt;
Will the students write code that always finds all the names? Probably
not. Will their code incorrectly identify some word sets as names?
Most likely. It doesn&amp;#39;t really matter. Actually, this is a good
thing. You now have a great platform to talk about false positives and
true negatives.
&lt;/p&gt;
&lt;p&gt;
Now the moment of truth - what&amp;#39;s the most common name? To answer that
you have to decide on the meaning of &amp;#34;most common.&amp;#34; Is it the name
that appeared the most times? How about the name that appeared in the
most documents? Does it matter? Whichever way you do it, chances are
the correct answer will be near the top of your list.
&lt;/p&gt;
&lt;p&gt;
Next up in part 3 - other types of queries and why I love this sequence of
lessons so much.
&lt;/p&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Parts 1 and 3
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman/&#34;&gt;Part 1&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-3/&#34;&gt;Part 3&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Who Played Spiderman part 1 or my Nifty Assignment (that was rejected)</title>
      <link>https://cestlaz.github.io/post/who-played-spiderman/</link>
      <pubDate>Thu, 11 Oct 2018 17:16:23 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/who-played-spiderman/</guid>
      <description>
&lt;h2 id=&#34;headline-1&#34;&gt;
Parts 2 and 3
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
[[/post/who-played-spiderman-2/][Part 2]
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-2/&#34;&gt;Part 3&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I wasn&amp;#39;t going to teach this lesson today. I was planning on starting
a multi day project starting with an exercise in specification writing
and design.
&lt;/p&gt;
&lt;p&gt;
Beforehand though, we had to talk about classes. One of my students
asked if probability and/or statistics were really important for CS. I
started to cite a few examples and then decided to segue into
this. Normally, I do this as a couple of lessons which leads to a
project, we just did the first part. I might do it as a project with
my class later on.
&lt;/p&gt;
&lt;p&gt;
I also submitted this as a &amp;#34;Nifty Assignment&amp;#34; for SIGCSE a couple of
years ago but it wasn&amp;#39;t accepted. I was going to share the lesson at
some point so, well, here goes.
&lt;/p&gt;
&lt;p&gt;
It starts with a question:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Who played Spiderman?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That&amp;#39;s it. Every student writes down their answer. No talking, no
Googling or other searching, just write something down.
&lt;/p&gt;
&lt;p&gt;
We then go around the room an tally up the answers. I got something
like this:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;Count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Toby Maguire&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tom Holland&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Andrew Garfield&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Peter Parker&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I don&amp;#39;t know&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
So as a class, we think that Toby MAguire played Spiderman with Tom
Holland also being a good choice. 
&lt;/p&gt;
&lt;p&gt;
After painstakingly explaining that Peter Parker couldn&amp;#39;t play
Spiderman because he &lt;strong&gt;IS&lt;/strong&gt; Spiderman I also shared some of the more
interesting answers I&amp;#39;ve gotten over the years.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve gotten &amp;#34;the lady playing the song on the violin in the movie in
front of the subway&amp;#34; which is technically correct and I also get
Willem Dafoe because as the Green Goblin / Norman Osborn he &lt;strong&gt;PLAYED&lt;/strong&gt; Spiderman.
&lt;/p&gt;
&lt;p&gt;
In any event, it appears that if we get a lot of data on who &amp;#34;played
Spiderman&amp;#34; it&amp;#39;s likely that the most popular result is the right
answer or at least the right answer will be among the most popular
results. Of course, this is &lt;a href=&#34;https://www.nbc.com/saturday-night-live/video/common-knowledge/n9612&#34;&gt;not always the case&lt;/a&gt; but with reliable
data sources. 
&lt;/p&gt;
&lt;p&gt;
So, the basic idea is that if we have a question to answer like &amp;#34;Who
played spiderman?&amp;#34; we can start by collecting a whole bunch of
documents from the web with terms like &amp;#34;played Spiderman&amp;#34; in them.
&lt;/p&gt;
&lt;p&gt;
When I first taught this lesson, we used the Google API to search for
web pages with the search terms in them but more recently I&amp;#39;ve used
the Bing API instead.
&lt;/p&gt;
&lt;p&gt;
This leaves us with a large number of documents that could potentially
answer a search for &amp;#34;who played Spiderman?&amp;#34; 
&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll leave it at this for now. Next time, we&amp;#39;ll talk about how we can
go from this collection of documents to a likely answer to our query. 
&lt;/p&gt;
&lt;p&gt;
Tune in again tomorrow, same bat Time, same bat channel.
&lt;/p&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Parts 2 and 3
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
[[/post/who-played-spiderman-2/][Part 2]
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://cestlaz.github.io/post/who-played-spiderman-2/&#34;&gt;Part 3&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Compile Each Concept</title>
      <link>https://cestlaz.github.io/post/compile-each-concept/</link>
      <pubDate>Tue, 09 Oct 2018 14:46:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/compile-each-concept/</guid>
      <description>
&lt;p&gt;
We&amp;#39;ve all been there:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Student: Teacher, I need help
Teacher (comes over)
Student (shows screen listing three bazillion errors)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The student has just written pages of code and finally decided to try
to run it only to end up with pages of errors.
&lt;/p&gt;
&lt;p&gt;
Error messages can at times be hard to read for beginners but to see
and truth be told, they frequently don&amp;#39;t even read them but over the
years I&amp;#39;ve developed a practice that I&amp;#39;ve found helpful as a software
developer and if students adopt the same practice it can save them a
lot of time and effort.
&lt;/p&gt;
&lt;p&gt;
The idea is very simple. 
&lt;/p&gt;
&lt;p&gt;
Compile and test one concept at a time.
&lt;/p&gt;
&lt;p&gt;
It might seem silly, but if I&amp;#39;m writing a a program, my first compile
might be code that looks like this:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  using std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout;
  using std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
  {
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
or 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloWorld&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

      &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
	
      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
This might seem silly but it really doesn&amp;#39;t take any effort. I have a
key sequence to do this under Emacs and if I&amp;#39;m using an interactive
language like Python or Clojure I just have to hit &lt;code&gt;c-c c-c&lt;/code&gt; 
&lt;/p&gt;
&lt;p&gt;
This might seem silly but I do it out of muscle memory and it
immediately tells me I don&amp;#39;t have any syntax errors and my build system
works.
&lt;/p&gt;
&lt;p&gt;
Going further, I compile and test every time I code up what I call a
concept. What&amp;#39;s a concept? Let&amp;#39;s look at some code. A student might
write something like this to find prime number up to n:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a lot going on there. To me, a concept is
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
A loop
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A complex calculation
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
a conditional
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
All of these can have other concepts within.
&lt;/p&gt;
&lt;p&gt;
In the above code, I&amp;#39;d probable write it as follows, adding in tests
and print statements throughout the process:
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Step 1:
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Step 2
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i,j)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Step 3
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is not prime&amp;#34;&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Step 4 
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i,i_isPrime)
  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Step 5
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
It might not play out exactly this way but if not it would be something
similar. The idea is that if you test every time you add one concept
or construct there are fewer places where you can introduce an error.
&lt;/p&gt;
&lt;p&gt;
If you enter 100 lines before you test there are 100 places where
things can go wrong. If you type 10, there are only 10. On top of
that, if you&amp;#39;ve added 100 lines, conecptually you&amp;#39;ve probably added a
lot and the error can be anywhere. While it&amp;#39;s not always the case,
most of the time, if you just added an &lt;strong&gt;if&lt;/strong&gt;, the problem will be in the
&lt;strong&gt;if&lt;/strong&gt; or as a result of the if. Same with a &lt;strong&gt;loop&lt;/strong&gt; or any other construct.
&lt;/p&gt;
&lt;p&gt;
Once you get in the habit, it&amp;#39;s easy and doesn&amp;#39;t really take any
time. A couple of keystrokes to compile and a couple more to run. 
&lt;/p&gt;
&lt;p&gt;
All too often students try to write everything at once and it&amp;#39;s so
rare that it works. If we can get them to develop incrementally
they&amp;#39;ll be able to write much more complex systems and write them with
much less frustration.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a school for CS</title>
      <link>https://cestlaz.github.io/posts/creating-a-school/</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/creating-a-school/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;http://blog.acthompson.net/2018/09/do-we-really-need-cs-focused-high.html&#34;&gt;Do we really need CS focused high schools?&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
That&amp;#39;s the question Alfred Thompson asked partly in reaction to my
&lt;a href=&#34;https://cestlaz.github.io/posts/that-time-bill-gates-visited-afse&#34;&gt;post&lt;/a&gt; talking about Bill Gates&amp;#39; visit to &lt;a href=&#34;http://afsenyc.org&#34;&gt;AFSE&lt;/a&gt;, a NYC public school
with a CS focus.
&lt;/p&gt;
&lt;p&gt;
On both posts, &lt;a href=&#34;https://twitter.com/reallymdp&#34;&gt;Michael Preston&lt;/a&gt; shared some important and good points about
AFSE as a starting point and gateway that helped lead to CS4All in NYC
and also specifically about AFSE.
&lt;/p&gt;
&lt;p&gt;
In response to Alfred&amp;#39;s question I thought it was time I shared a bit
about what I was pushing for AFSE back when I was involved. I wasn&amp;#39;t
able to talk publicly about any of this at the time because I was
warned very sternly by one DOE person involved that I shouldn&amp;#39;t talk
to &amp;#34;outsiders&amp;#34; about my concerns or designs. In retrospect, since I
stopped getting replies to my emails and was apparently dropped from
email lists after they selected their founding principal, I probably
should have been more public about my critiques. On the other hand, I
should have been more politic internally prior to getting to that
point.
&lt;/p&gt;
&lt;p&gt;
Reading Alfred&amp;#39;s post, what I was pushing for AFSE at the time cuts
right to Alfred&amp;#39;s question so I thought I&amp;#39;d write about it today.
&lt;/p&gt;
&lt;p&gt;
Before starting though I want to be &lt;strong&gt;absolutely clear&lt;/strong&gt; about one
thing. This is not a critique of AFSE as it stands. There are some
great teachers and wonderful students there and I do what I can to
support both whenever I can. This is a post about my design vs the
DOE&amp;#39;s design and later implementation. Also note that the numbers,
sizes, restrictions and designs are all based on NY state and NYC
requirements along with what one can typically do in a NYC public
school.
&lt;/p&gt;
&lt;p&gt;
Even though it&amp;#39;s the least important issue with respect to a CS school
or not, let&amp;#39;s start by getting the dirty word out of the way. Given
the stated mission of the school (at the time) I wanted a screen. Not
a &amp;#34;Stuy test&amp;#34; screen but something. Probably something more along the
lines of the screen used by the Manhattan Science Hunter High
School. We never got that far in discussing it. My contention was and
still is that if you want to produce &amp;#34;Google ready&amp;#34; software engineers
by high school graduation, particularly in a small school, you can&amp;#39;t
start with kids 2 or 3 years behind in math. Now, if your goal isn&amp;#39;t
&amp;#34;Google ready engineers&amp;#34; but rather to use CS to engage a population
that isn&amp;#39;t otherwise engaged, I can get behind that and you don&amp;#39;t need
a screen. It&amp;#39;s important however to note it&amp;#39;s a different mission.
&lt;/p&gt;
&lt;p&gt;
The DOE would maintain that you don&amp;#39;t need any screen and kids can
start out years behind and by the end of their senior year they&amp;#39;d be
years ahead. It doesn&amp;#39;t work that way.
&lt;/p&gt;
&lt;p&gt;
They&amp;#39;d ask tech people at meetings what they looked for in employees
knowing that they&amp;#39;d get back &amp;#34;teamwork, creativity etc.&amp;#34; I would of
course follow up with &amp;#34;where do you look for these candidates&amp;#34; and
they&amp;#39;d say &amp;#34;MIT, Cal Tech, Harvard.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
The DOE insisted on no screen. This is fine but it&amp;#39;s no surprise that
Google&amp;#39;s not beating down the doors for AFSE graduates right out of
high school and the math regents show that you indeed can&amp;#39;t take kids
from multiple years behind and end up with them multiple years ahead
given typical school resources. They&amp;#39;re doing really good work there
but there&amp;#39;s no such thing as a miracle school just hard work and
incremental progress. I have heard more than once that the founding
principal had lobbied for a screen so I feel my original assessment
was correct.
&lt;/p&gt;
&lt;p&gt;
Next up, size. The DOE insisted on a small school focused on CS. They
wanted a school of around 136 kids per grade, which makes for 4
&amp;#34;homerooms,&amp;#34; and that the school would focus on CS. My proposal was
very different. I advocated for a school with about 340 kids per grade
and not specifically focused on CS but rather with a great model CS
program - a Software Engineering Institute at the blah blah school if
you would.
&lt;/p&gt;
&lt;p&gt;
A small school can&amp;#39;t support a wide range of classes. With 4 classes
of kids per grade you don&amp;#39;t have a lot of schedule flexibility in
terms of class levels or electives. You also have very few teachers
per subject - for a subject taught for a full year every year for a
single period, you&amp;#39;d have one teacher per grade in that subject. If
you&amp;#39;re a school for CS you&amp;#39;re not going to be able to offer a robust
schedule of music or arts classes. Likewise an arts school is going to
be hard pressed to offer a suite of science electives. Remember,
public schools are not flush with money and can&amp;#39;t just offer loads of
courses for a handful of kids.
&lt;/p&gt;
&lt;p&gt;
What we end up with is a school with limited offerings beyond CS and
we&amp;#39;re asking kids to decide in 8th grade if that&amp;#39;s the career path for
them. This is a hidden problem of all small schools. Kids shouldn&amp;#39;t
have to decide on their future in the 8th grade. They should all be
able to go to schools that offer a wide range of subjects to a good
degree of depth. Only large public schools can do this. I know that
public schools come with their own problems but this is one of the
trade offs. I believe that having this selection done in 8th grade
along with the tech stereotypes and preconceptions is a big part of
the schools difficulty in appealing to girls.
&lt;/p&gt;
&lt;p&gt;
Now even if every student who applied and is randomly accepted into
AFSE does indeed want to be a CS person then we&amp;#39;ve also lost because
we&amp;#39;ve done nothing to get more kids into the pool. It could still
potentially function as a model school in terms of courses or possibly
pedagogy but it won&amp;#39;t expose and inspire anyone new with respect to
tech.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s contrast that with what I proposed. I wanted around 340 kids per
grade or 10 &amp;#34;homerooms.&amp;#34; How did I arrive at that number? It wasn&amp;#39;t
just a guess. Schools like Stuyvesant or Brooklyn Tech are clearly too
large and impersonal but small 136 kids per grade schools are too
small. The 10 homeroom per grade school seems to be the best
compromise. There are enough teachers so that there&amp;#39;s institutional
memory when one leaves, enough of them and students for a varied set
of electives. It also means that there are enough teachers to avoid
bad fits between teacher and student. At the same time, it&amp;#39;s not so
large that kids get lost. I also spoke with some of the best
programmers I know - not computer programmers but people who schedule
students for classes in schools and this seems to be the best
compromise size range. Also, with this size you don&amp;#39;t necessarily need
a screen if you want &amp;#34;Google ready&amp;#34; software engineers. There will be
enough of a range kids that come in behind and kids that come in ahead
can get what they need.
&lt;/p&gt;
&lt;p&gt;
I also didn&amp;#39;t want it to be a CS school but rather a school with great
CS. That way it would appeal to a range of students. Kids who think
they want to do CS and those who don&amp;#39;t. At the end of they day some of
the kids that think they wanted CS won&amp;#39;t want it and those kids will
have other options. At the same time some of the non-tech kids will
take the required CS and find out that &amp;#34;this is neat stuff&amp;#34; and we get
to increase the number of people in the tent.
&lt;/p&gt;
&lt;p&gt;
I still believe my design would have worked out better but that&amp;#39;s not
to say that I don&amp;#39;t think that AFSE has been and is important. As Mike
pointed out in his comment, AFSE was the first unscreened school to
offer legit and it did (and does) offer a place for CS kids that don&amp;#39;t
get into or don&amp;#39;t want to go to a place like Stuy which is very much a
large school and an unforgiving machine. It was also a showpiece that
helped pave the way for CS in all NYC schools. All of that&amp;#39;s good.
&lt;/p&gt;
&lt;p&gt;
I do regret parts of what went down between me and DOE. I don&amp;#39;t regret
sticking to my beliefs in terms of school design but I would like to
have been able to handle the politics of the situation better. Had I
remained involved I think I had more to offer. I don&amp;#39;t regret it too
much â€“ at the time it went from the DOE telling me one week to &amp;#34;you
can have any role in the school you want&amp;#34; to the next week &amp;#34;we want to
introduce you to the person who we&amp;#39;re making principal&amp;#34; and I
recognize that I&amp;#39;d have a hard time putting that aside now and the me
of a decade ago would have found it impossible. That said, I think
everyone would have been better off if both sides could have played
things better.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;d still love to have the chance someday to set up and run a school
of my design with my team. It&amp;#39;ll probably never happen but it would be
nice.
&lt;/p&gt;
&lt;p&gt;
&amp;#34;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do you need to know binary for CS?</title>
      <link>https://cestlaz.github.io/posts/why-binary/</link>
      <pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/why-binary/</guid>
      <description>&lt;p&gt;
Yesterday, Alfred Thompson asked &lt;a href=&#34;https://twitter.com/alfredtwo/status/1036982959587446784&#34;&gt;&amp;#34;Why is it important for CS students
to understand binary?&amp;#34;&lt;/a&gt; on Twitter which led to a number of interesting
responses. Alfred summarized and wrote his own thoughts on &lt;a href=&#34;http://blog.acthompson.net/2018/09/why-teach-binary-in-computer-science.html&#34;&gt;his blog&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I wanted to add a comment but I already wrote a post for yesterday so
put it off until today.
&lt;/p&gt;
&lt;p&gt;
First let me say that you can have a very successful career in tech
and not really know binary or number bases other than 10. That career
could be as as programmer, software engineer, network specialist,
devops or in many other areas that fall on the CS side of tech.
&lt;/p&gt;
&lt;p&gt;
You also can&amp;#39;t really get through a CS program without learning about
binary. If you&amp;#39;re self taught or go to a code school then that&amp;#39;s
another story.
&lt;/p&gt;
&lt;p&gt;
The question is, is it worth the time spent.
&lt;/p&gt;
&lt;p&gt;
One can easily argue that systems - that is low level, close to the
metal knowledge is one of the two &amp;#34;latins&amp;#34; of CS, the other being CS
theory. You might not explicitly use either but they give you a
stronger foundation in everything. You also can&amp;#39;t study systems without a
good knowledge of binary so if you want to do anything low level, you
need it.
&lt;/p&gt;
&lt;p&gt;
What about beyond those easy but not all to convincing to new students
answers?
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s loo at a few things we can do with binary.
&lt;/p&gt;
&lt;p&gt;
A big part of binary notation is that you can look at data as a string
of bits. You can also manipulate that data using things like &lt;code&gt;and&lt;/code&gt;,
&lt;code&gt;or&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, and &lt;code&gt;xor&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
At it&amp;#39;s core &lt;code&gt;and&lt;/code&gt; let&amp;#39;s you turn off bits. &lt;code&gt;And&lt;/code&gt; any bit with a 0 and
it will become a 0. &lt;code&gt;And&lt;/code&gt; it with a 1 and it stays the same.
&lt;/p&gt;
&lt;p&gt;
\begin{array}{ccccc}
&amp;amp;1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0\\
and &amp;amp;0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1\\\hline
&amp;amp;0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0\\
\end{array}
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;Or&lt;/code&gt; is used to turn on bits. You &lt;code&gt;or&lt;/code&gt; any bit with a 1 and it gets
turned on. &lt;code&gt;Or&lt;/code&gt; it with a 0 and it stays as it was.
$$
\begin{array}{ccccc}
&amp;amp;1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0\\
or &amp;amp;0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1\\\hline
&amp;amp;1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1\\
\end{array}
$$
&lt;code&gt;Xor&lt;/code&gt; a bit with a 1 and the bit flips, with a 0 it stays the same.
$$
\begin{array}{ccccc}
&amp;amp;1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0\\
xor &amp;amp;0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1\\\hline
&amp;amp;1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1\\
\end{array}
$$
&lt;/p&gt;
&lt;p&gt;
What can we do with this? For one thing, image processing. Students
frequently play with images where each pixel is represented as a 24
bit color. Three bytes, one each for red, green, and blue. Each byte
is really 8 bits. We can use bitwise operations on the binary digits
to turn on or off color.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s say we have this rgb triple: (200, 15, 80) which in hexadecimal
is C8 0F 50 or 10111000 00001111 01010000 in binary. If we want to
turn off the reddest reds we could &lt;code&gt;and&lt;/code&gt; the color with 00001111
11111111 11111111 or 0FFFFF:
&lt;/p&gt;
&lt;p&gt;
$$
\begin{array}{cccc}
&amp;amp; 10111000 &amp;amp; 00001111 &amp;amp; 01010000\\
and &amp;amp; 00001111 &amp;amp; 11111111 &amp;amp; 11111111\\\hline
&amp;amp; 00001000 &amp;amp; 00001111 &amp;amp; 01010000\\
\end{array}
$$
Yes, you could just use the base 10
values and keep on calling color setting and conversion functions but
if you understand binary it&amp;#39;s quicker and easier and what&amp;#39;s going on
will actually make sense.
&lt;/p&gt;
&lt;p&gt;
Of course you probably wouldn&amp;#39;t write out the binary but would rather
use the hex notation which once a student realizes is just 4 bit
groupings of binary becomes really easy. As a bonus, once you&amp;#39;re used
to binary and hex those hexadecimal color values will all of a sudden
make sense.
&lt;/p&gt;
&lt;p&gt;
This is just the tip of the image processing and graphics iceberg with
respect to binary.
&lt;/p&gt;
&lt;p&gt;
Related although I haven&amp;#39;t played with it myself, I&amp;#39;d imagine you could use
these types of bitwise operations on images to play with
steganography.
&lt;/p&gt;
&lt;p&gt;
Another use of binary is in cybersecurity. Things like buffer
overflows and blowing the stack all make much more sense if you know
how memory is arranged and that&amp;#39;s easier to understand if you
understand binary, bytes, and word sizes. I do experiments with my
classes when we use C or C++ where they access arrays off the ends and
end up messing with neighboring variables. It seems like magic unless
you know about memory and to know memory you need to know binary.
&lt;/p&gt;
&lt;p&gt;
How about image file formats? Many image file formats start with a
fixed size header. Here&amp;#39;s the header definition for the GIF file
format:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&#34;align-right&#34;&gt;Offset&lt;/th&gt;
&lt;th&gt;Length&lt;/th&gt;
&lt;th&gt;Contents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;0&lt;/td&gt;
&lt;td&gt;3  bytes&lt;/td&gt;
&lt;td&gt;&amp;#34;GIF&amp;#34;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;3&lt;/td&gt;
&lt;td&gt;3  bytes&lt;/td&gt;
&lt;td&gt;&amp;#34;87a&amp;#34; or &amp;#34;89a&amp;#34;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;6&lt;/td&gt;
&lt;td&gt;2  bytes&lt;/td&gt;
&lt;td&gt;&amp;lt;Logical Screen Width&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;8&lt;/td&gt;
&lt;td&gt;2  bytes&lt;/td&gt;
&lt;td&gt;&amp;lt;Logical Screen Height&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;10&lt;/td&gt;
&lt;td&gt;1  byte&lt;/td&gt;
&lt;td&gt;bit0: Global Color Table Flag (GCTF)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;bit&lt;/td&gt;
&lt;td&gt;1..3:  Color&lt;/td&gt;
&lt;td&gt;Resolution&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;bit&lt;/td&gt;
&lt;td&gt;4:  Sort&lt;/td&gt;
&lt;td&gt;Flag to Global Color Table&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;bit&lt;/td&gt;
&lt;td&gt;5..7:  Size&lt;/td&gt;
&lt;td&gt;of Global Color Table:2^(1+n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;11&lt;/td&gt;
&lt;td&gt;1  byte&lt;/td&gt;
&lt;td&gt;&amp;lt;Background Color Index&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;12&lt;/td&gt;
&lt;td&gt;1  byte&lt;/td&gt;
&lt;td&gt;&amp;lt;Pixel Aspect Ratio&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;13&lt;/td&gt;
&lt;td&gt;?  bytes&lt;/td&gt;
&lt;td&gt;&amp;lt;Global Color Table(0..255 x 3 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;?&lt;/td&gt;
&lt;td&gt;bytes  &amp;lt;Blocks&amp;gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;align-right&#34;&gt;1&lt;/td&gt;
&lt;td&gt;bytes  &amp;lt;Trailer&amp;gt;&lt;/td&gt;
&lt;td&gt;(0x3b)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
The header info is defined bit by bit so you have to know about binary
and know how to manipulate data on a bit level.
&lt;/p&gt;
&lt;p&gt;
Those were three biggies but there are other places where knowing
binary makes tons of sense:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
flag type parameters
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
understanding floating point numbers
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
using shifts for quick doubling and halving of data
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Does this mean that binary has to be or should be in a first course?
No. Should it be somewhere? Certainly and rather than doing binary
because it&amp;#39;s on the test or because &amp;#34;you should know it&amp;#34; you can pick
and choose your spots and cover it when it will be fun and interesting
for your kids.
&lt;/p&gt;
&lt;p&gt;
world
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rite Of Passage Projects</title>
      <link>https://cestlaz.github.io/posts/rite-of-passage-projects/</link>
      <pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/rite-of-passage-projects/</guid>
      <description>&lt;p&gt;
JCS&amp;#39;s &lt;a href=&#34;https://irreal.org/blog/?p=7414#comment-4045190612&#34;&gt;post&lt;/a&gt; on Irreal today brought me back. It was about &lt;a href=&#34;https://en.wikipedia.org/wiki/Brief_(text_editor)&#34;&gt;Brief&lt;/a&gt; which
was the editing hotness back in the day. I played with it a little
really mostly used Emacs clones for real work when I was stuck on
MS-DOS systems. Usually either &lt;a href=&#34;https://en.wikipedia.org/wiki/JOVE&#34;&gt;JOVE&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Epsilon_(text_editor)&#34;&gt;Epsilon&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
In the comments Jon reminded me about the &lt;a href=&#34;https://en.wikipedia.org/wiki/MKS_Toolkit&#34;&gt;MKS Toolkit&lt;/a&gt;
which brought most everyday Unix tools to DOS along with a shell and
a version of Vi. I didn&amp;#39;t use Vi much and I only used their shell
until I wrote my own.
&lt;/p&gt;
&lt;p&gt;
This got me thinking about &amp;#34;rite of passage&amp;#34; projects. I was in
college in the mid to late 80s. It was the heyday of the
IBM-PC. Schools still used older time sharing systems like DEC-20s and
Vaxen but the PC was all the rage. The cool thing about them was that
you had full control and access to the machine and it was simple
enough to get your head around pretty much everything about it. The
downside was that MS-DOS was very limited and of course there was
little to no networking going on.
&lt;/p&gt;
&lt;p&gt;
On the one hand, you could dive into the low level machine language
stuff very easily. Get Norton&amp;#39;s book:
&lt;/p&gt;
&lt;img src=&#34;https://covers.openlibrary.org/b/id/7446489-L.jpg&#34; alt=&#34;https://covers.openlibrary.org/b/id/7446489-L.jpg&#34; title=&#34;https://covers.openlibrary.org/b/id/7446489-L.jpg&#34; align=&#34;center&#34; height=&#34;250&#34;/&gt;
&lt;p&gt;
and you&amp;#39;re on your way.
&lt;/p&gt;
&lt;p&gt;
On the other hand many student&amp;#39;s graduated with no concept of time
sharing and the ramifications of sharing a system or resources were
foreign to many kids.
&lt;/p&gt;
&lt;p&gt;
Even though we always look back to the &amp;#34;good old days,&amp;#34; in many ways
things weren&amp;#39;t much different. I got a very strong background in
academic CS from NYU (Courant Institute) but just like today, there
was no real preparation for the real world.If you wanted to really develop your
coding chops you had to work on side projects.
&lt;/p&gt;
&lt;p&gt;
I seem to recall, a typical &amp;#34;rite of passage&amp;#34; side project was writing
your own shell. It didn&amp;#39;t have to be anything as powerful as BASH or
ZSH but it would typically be much more powerful than DOS and much
more Unixy.
&lt;/p&gt;
&lt;p&gt;
I recall writing my first shell down in UC-49 of Tisch Hall when the
computer labs weren&amp;#39;t busy. I wrote it in C which was what the cool
kids used back then. Specifically I used the &lt;a href=&#34;https://en.wikipedia.org/wiki/Mark_Williams_Company&#34;&gt;Let&amp;#39;s C&lt;/a&gt; compiler from the
Mark Williams company. This was before Turbo C 2.0 so Let&amp;#39;s C was
pretty much the only game in town for a cheap Unix style C compiler
for DOS. There was also Run/C but that was a C interpreter, not a
compiler. I also used that to learn C. Funny story - I certainly
didn&amp;#39;t know this at the time but Run/C was written by Peter
Brooks. Peter and I would later meet when he became my colleague at
Stuyvesant teaching CS and I now have the privilege of being able to
call him friend. I joke that I owe him ~ $100 for the interpreter from
back in the day.
&lt;/p&gt;
&lt;p&gt;
Since this was on DOS, I couldn&amp;#39;t do real Unix style pipes like
&lt;code&gt;cat file | sort | uniq -c | sort -n&lt;/code&gt; but I did simulate it with redirection and temporary
files. It also supported aliases, simple scripts and I think a few
other things.
&lt;/p&gt;
&lt;p&gt;
I was pretty happy with it and used it for a couple of years. It was
also one of the first substantial programs I wrote. I learned a lot
from doing it.
&lt;/p&gt;
&lt;p&gt;
Another &amp;#34;rite of passage&amp;#34; program that was common back then was a
text based window library. Somethig like ncurses that would allow you
to make text based windows and menus on the text only screen. I also
wrote one of these and actually got to use it for a project when I
started working at Goldman.
&lt;/p&gt;
&lt;p&gt;
I guess the third &amp;#34;rite of passage&amp;#34; project I remember was writing a C
compiler but that was different because it was for a class. It was a
significant project but the class didn&amp;#39;t really help with writing a
large program in general - it was all about the compiler and all the
theory behind it. Great course but not one in software engineering.
&lt;/p&gt;
&lt;p&gt;
Nowadays the projects have changed. Text based windowing is long gone
and while I still think writing a shell is a useful and rewarding
exercise it&amp;#39;s not scratching an itch the way it did back when we were
stuck on DOS. I guess writing a full stack web app is probably a
pretty typical one for students these days.
&lt;/p&gt;
&lt;p&gt;
Any others?
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hunter CS - a lot of progress in a short time</title>
      <link>https://cestlaz.github.io/posts/hunter-cs-year-two/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/hunter-cs-year-two/</guid>
      <description>&lt;p&gt;
Yesterday I was back on campus for an early orientation session for
Hunter&amp;#39;s incoming Daedalus CS honors students. It was the first time
all of us got to meet face to face. The students I met with will be
my third cohort. I got to thinking how far we&amp;#39;ve come in under three
years.
&lt;/p&gt;
&lt;p&gt;
Hunter&amp;#39;s had a strong but little known undergraduate
CS program for as long as I&amp;#39;ve known. Much like any program, we&amp;#39;ve got
our strengths and weaknesses but you go through our program and
academically you&amp;#39;ll be as well prepared as from anywhere else. We have some
challenges being a commuter school, a liberal arts school and a school
not commonly thought of for CS but the core has always been there.
&lt;/p&gt;
&lt;p&gt;
Hunter has been making a concerted effort to up its computer science
game and my joining the team has been part of that. The Daedalus
program is an honors scholarship program. It&amp;#39;s similar to the well
known CUNY Macaulay program but it&amp;#39;s specific to Hunter and specific to
CS. Our kids get scholarships, laptops, special classes (with me),
activities and events and more. Our first cohort had 12. This past
year we had 23 but a funny thing happened right after we started. Hunter&amp;#39;s
Macaulay CS students heard about what was going on and wanted in. The
end result was that last years cohort had a total of 27 students
as we invited the incoming Hunter Macaulay CS students into the
fold. This year, we&amp;#39;re up to about 50 total and it looks to be a very
strong group. To be honest I&amp;#39;m a little
scared of growing this quickly. The kids will be great but it will be
a challenge building the community across multiple classes.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m really pleased with the first two cohorts performance both in
class and out. They&amp;#39;re progressing well through the academic program
and are ahead of schedule in terms of internships and outside
activities but I&amp;#39;m even happier that they&amp;#39;ve been working to level up
Hunter CS as a whole. They started a once a week Dojo last year where
all Hunter CS students could hang out and work on tech projects and
have a speaker series on tap for this coming year. For my part, I&amp;#39;ve
got a couple of new ideas up my sleeve but I&amp;#39;m going to keep them
under wraps for now.
&lt;/p&gt;
&lt;p&gt;
Three years ago Hunter wasn&amp;#39;t so much on the map for CS inclined high
school students and while there&amp;#39;s much work to be done, many of our
incoming cohort members chose us over other programs that have
traditionally been considered CS strongholds.
&lt;/p&gt;
&lt;p&gt;
At the same time, our efforts to connect Hunter CS to the NY Tech community have begun to
raise our profile on the other end of the pipeline.
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s still a long rode ahead but I thought I&amp;#39;d give myself a day to
look back on how far we&amp;#39;ve come in a short time. Having a great public college option for CS
education is critical for NYC. This was one of the things I left Stuy to
accomplish and we&amp;#39;re well on our way.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching recursion early? Make sure to use a good tool.</title>
      <link>https://cestlaz.github.io/posts/recursion-early/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/recursion-early/</guid>
      <description>&lt;p&gt;
I replied this tweet yesterday and thought I&amp;#39;d expound a bit.
&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;We started kids using scheme on 10th grade at stuy so did recursion early. Not everyone got all of it but it think it made things much easier for those that you more CS later.&lt;/p&gt;&amp;mdash; Mike Zamansky (@zamansky) &lt;a href=&#34;https://twitter.com/zamansky/status/1001508028439519233?ref_src=twsrc%5Etfw&#34;&gt;May 29, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
We introduced recursion very early in our intro course at Stuy and I
think it worked well. In that course we started by using Racket (nee
Scheme) as the first programming unit. Originally we
started the kids out first using NetLogo or StarLogo and followed with
Scheme but after a few years we switched the order.
&lt;/p&gt;
&lt;p&gt;
I wouldn&amp;#39;t always recommend Scheme for a first course and in fact
frequently don&amp;#39;t but given how the Stuy course was introduced and
developed it made sense and worked.
&lt;/p&gt;
&lt;p&gt;
Was it worth doing things this way? I think so. Prior to that intro
course becoming a requirement I got to see students coming in from
different pathways to APCS. Some came in raw with zero formal
experience, some self taught, some through that intro course and some
having taken another more traditional intro programming course or
experience. The kids who started on Scheme had no more difficulty
mastering loops and iteration but had an easier time getting to the
more advanced recursive techniques. This wasn&amp;#39;t a surprise - it wasn&amp;#39;t
their first rodeo. This also jived with reports I read at the time
that felt that when students did recursion first, iteration was just
as easy but when they did iteration first, recursion was harder.
&lt;/p&gt;
&lt;p&gt;
You can of course make a strong case that recursion isn&amp;#39;t necessary
for a kid that isn&amp;#39;t going to study more CS. I&amp;#39;ll merely argue that
what we did at Stuy worked with that population and I wouldn&amp;#39;t change
it. At the same time, I&amp;#39;ve helped a number of teachers design classes and programs
where we agreed that recursion first was not the way to go.
&lt;/p&gt;
&lt;p&gt;
In any event, it wasn&amp;#39;t that I specifically wanted to do recursion
early but rather, there were a number of things I wanted to do with
the class for which Scheme made sense and recursion was just one of
them.
&lt;/p&gt;
&lt;p&gt;
Some reasons to like (or for some, to dislike) Scheme early:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
It&amp;#39;s functional â€“ everything is a function. While this is
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
technically not true, we can fudge it a bit at this level. You put
things in parens so instead of add(a,b) you write (add a b) or
really (+ a b). You can also do (+ a b c). Things that would be
statements are also functions: (if Booelean TruePart FalsePart) is the &lt;strong&gt;if&lt;/strong&gt;
statement. For example &lt;code&gt;(if (&amp;gt;= a b) a b)&lt;/code&gt; returns the larger of a
and b.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Because it&amp;#39;s functional it avoids the issue kids have with &lt;code&gt;=&lt;/code&gt; being
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
for assignment rather than comparison.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
It has great support for list processing.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Recursion is much more natural.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
It&amp;#39;s a super simple language with simple rules and a simple, small  syntax
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Of course, Scheme isn&amp;#39;t perfect and some people dislike the above
reasons. It&amp;#39;s also easy to come up with a number of other good reasons
not to use a language like Scheme.
&lt;/p&gt;
&lt;p&gt;
On the recursion front, it makes things much easier. There are no
loops so recursion develops as a natural form for repetition:
&lt;/p&gt;
&lt;div class=&#34;src src-scheme&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;f (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
(* x  (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; (- x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This defines a function that takes one parameter and returns
&lt;code&gt;x*(x-1)*(x-2)...&lt;/code&gt;. It repeats, but never ends. This leads to adding
a base case:
&lt;/p&gt;
&lt;div class=&#34;src src-scheme&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;f (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;lt; x &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
(* x (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; (- x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Which is your basic factorial function.
&lt;/p&gt;
&lt;p&gt;
Since this use of recursion for repetition  develops naturally as we
introduce language concepts it&amp;#39;s easier for kids to get their heads
around it as opposed to when they&amp;#39;ve seen loops already and have an
&amp;#34;easier&amp;#34; alternative. You can make the case that you could introduce
recursion this way in a language with loops like Python but once loops
are available and particularly when loops are idiomatic, students will
find them and getting them to think recursively will be more
difficult.
&lt;/p&gt;
&lt;p&gt;
Scheme and most other functional programming languages also have
strong support for lists and list recursion. This means you don&amp;#39;t have
to limit yourself to mathy problems. Think about a todo list:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Go to the market
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Buy a gallon of milk
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
If they have eggs, get a dozen (heh heh)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Go home
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Processing a todo list is really a recursive problem:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
If the list is empty you&amp;#39;re done
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Take the first item off  the list
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Do it
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Recurse
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Once you start working with lists, you can play with all sorts of
recursive examples.
&lt;/p&gt;
&lt;p&gt;
At the end of the Scheme unit the big project is creating a sentence
generator. The kids don&amp;#39;t know it but they&amp;#39;re learning about grammars
and in fact are writing a recursive descent parser - they just think
they&amp;#39;re writing a program that creates silly sentences. It&amp;#39;s a really
nice project that uses recursion in a way that&amp;#39;s different and I&amp;#39;d
argue more fun and interesting than the usual approaches.
&lt;/p&gt;
&lt;p&gt;
I chose Scheme for a variety of reasons. I also chose NetLogo for
specific reasons. Unlike Scheme (or most other popular learning
languages), NetLogo is really all about agent based parallel
processing. There are concepts that we can explore easily and in depth
with NetLogo that would be tremendously difficult in any other
language and at the same time, there are things that are easy to
explore in other languages that Netlogo doesn&amp;#39;t lend itself to.
&lt;/p&gt;
&lt;p&gt;
So, in the end, this post really isn&amp;#39;t about when to teach
recursion. It&amp;#39;s more about how languages lend themselves to solving
different problems and teaching different concepts in different
ways. If all you have is a hammer, everything looks like a
nail. Fortunately, we can do better.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why Strong K12 Teacher Certification is Important</title>
      <link>https://cestlaz.github.io/posts/strong-teacher-certification/</link>
      <pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/strong-teacher-certification/</guid>
      <description>&lt;p&gt;
About a week ago New York State&amp;#39;s new regulation creating a &lt;a href=&#34;http://www.crainsnewyork.com/article/20180327/NEWS/180329893/new-york-will-finally-have-certified-computer-science-teachers&#34;&gt;K12 CS
teacher certification&lt;/a&gt; went live. Just the other day I was honored to be
interviewed by  &lt;a href=&#34;https://twitter.com/mflamm_reporter&#34;&gt;Matt Flamm&lt;/a&gt; of Crain&amp;#39;s New York in a &lt;a href=&#34;http://www.crainsnewyork.com/article/20180410/TECHNOLOGY/180419999/asked-answered-teacher-changed-jobs-to-push-for-new-york-states-new&#34;&gt;follow up piece&lt;/a&gt;
about it.
&lt;/p&gt;
&lt;p&gt;
Having K12 CS teacher certification is big and having quality programs
that lead to certification is &lt;strong&gt;HUGE&lt;/strong&gt;. In my view, it&amp;#39;s a game changer.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s Focus on high school, my wheelhouse.
&lt;/p&gt;
&lt;p&gt;
From a course offerings point of view it&amp;#39;s the wild west. I don&amp;#39;t mean
this as a bad thing, it&amp;#39;s just that there&amp;#39;s a huge range of offerings
from AP to home brew, physical computing, game based, cyber security,
you name it, there&amp;#39;s a curriculum. The long and short of this is that
schools need teachers to teach all of these experiences. Without a
strong certification pathway we&amp;#39;re going to be stuck with the current
training based model where teachers are trained to deliver canned
curricula rather than truly teach. With strong teacher preparation
programs teachers will be prepared not only to deliver all the
existing curricula but, arguable more importantly design their own
learning experiences appropriate for the populations they work with.
&lt;/p&gt;
&lt;p&gt;
This is important and alone would make having CS certification
worthwhile but to me the BIG win is that it creates a viable career
path.
&lt;/p&gt;
&lt;p&gt;
People say we&amp;#39;ll never find enough CS teachers because the tech
industry pays so well. I&amp;#39;ve never believed that. We find math teachers
even though many could flee to finance and chem teachers in spite of
big pharma&amp;#39;s call so why can&amp;#39;t we find CS teachers? Because we&amp;#39;ve
never provided a path into the profession and a viable career track.
&lt;/p&gt;
&lt;p&gt;
Certification means that over time schools will be able to build CS
teachers and the discipline will be treated as the other
subjects. Prior to certification, a CS teacher might be cut if a
school&amp;#39;s math department downsized. With certification, the career
track for a CS teacher is the same as the track for any other teacher.
&lt;/p&gt;
&lt;p&gt;
It also means that young people starting out who are interested in
both teaching and computer science will have a way of getting into the
profession - something that has never before existed.
&lt;/p&gt;
&lt;p&gt;
Having CS certification alone won&amp;#39;t woo a
plethora of current tech professionals into teaching but over time,
we&amp;#39;ll start to have CS Ed majors or CS majors pursuing CS ED Masters
degrees and entering the profession. This won&amp;#39;t happen in a press or
election cycle but it will happen.
&lt;/p&gt;
&lt;p&gt;
This all hinges on quality prep programs. I think I&amp;#39;ve hit the sweet
spot with what I&amp;#39;ve designed at Hunter. The critical components are of
course content and pedagogy. Teacher candidates must have both
sufficient depth and breadth in the subject and all the pedagogical
content knowledge that comes along with it. I don&amp;#39;t agree with the
common approach of taking a course to teach a course - that is, having
courses like &amp;#34;APCS - Principles for teachers&amp;#34; or &amp;#34;APCS - A for
teachers.&amp;#34;  I want my teachers to be able to teach any reasonable
curriculum or design their own so we&amp;#39;ll be rolling out courses that
examine the commonly offerd curricula but prepare teachers for a whole
lot more.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s been an exciting week in NY CS Ed and there&amp;#39;s a lot more to come.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Competitions and Hackathons</title>
      <link>https://cestlaz.github.io/posts/hs-competitions/</link>
      <pubDate>Fri, 06 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/hs-competitions/</guid>
      <description>&lt;p&gt;
Today&amp;#39;s the last day of spring break. After the weekend it&amp;#39;s back to
the grind. It really hasn&amp;#39;t been much of a spring break. The rain and
the snow made for very little spring and between working on the Hunter
/ CUNY2X Internship program and reviewing applications for my Hunter
Daedalus CS Honors program there has been very little break.
&lt;/p&gt;
&lt;p&gt;
Today was no exception - I spent much of the day working but I did
take a few hours to head over to Cornell Tech on Roosevelt
Island. Why? To check out the &lt;a href=&#34;https://www.cs.cornell.edu/events/cornell-high-school-programming-contest&#34;&gt;Cornell High School Progrmaming
Contest&lt;/a&gt; - first time in NYC.
&lt;/p&gt;
&lt;p&gt;
I was invited by my friend and organizer &lt;a href=&#34;https://twitter.com/diane_levitt&#34;&gt;Diane Levitt&lt;/a&gt;. I only stayed
for an hour or so but it was shaping up to be a great event. It looked
like around a hundred kids from maybe a dozen or so schools and it was
run simultaneously with high schoolers on the Ithaca campus where the
competition has been running for a few years.
&lt;/p&gt;
&lt;p&gt;
The format was similar to other high school programming competitions
I&amp;#39;ve been to. Teams of two or three sharing a single computer to solve
a number of programming problems that varied in difficulty. You can
check out a few &amp;#34;warm up&amp;#34; problems on the competition &lt;a href=&#34;https://www.cs.cornell.edu/events/cornell-high-school-programming-contest&#34;&gt;site&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
The competition reminded me of the &lt;a href=&#34;https://www.sjcny.edu/long-island/academics/programs-departments/mathematics-and-computer-science/programming-competition&#34;&gt;St. Joseph&amp;#39;s High School
Programming Competition&lt;/a&gt; held every spring but in NYC so more
convenient for city dwellers. I went to the St. Joseph&amp;#39;s competition a
few times and I&amp;#39;m a big fan. I particularly like the awards luncheon
after the competition. If I were to make one suggestion to the
organizers there it would be to mix the seating at the luncheon so
that kids get to sit with and spend time with kids from different
schools.
&lt;/p&gt;
&lt;p&gt;
These competitions contrast nicely with hackathons like &lt;a href=&#34;http://stuyhacks.com/%0A&#34;&gt;StuyHacks&lt;/a&gt;
for which I acted as a judge a couple of months ago. Competitions are, well,
competitive. Hackathons can be but don&amp;#39;t have to be. Competitions are
about solving problems, hackathons, building things. Each can speak to
a different kind of student.
&lt;/p&gt;
&lt;p&gt;
Both competitions and hackathons have problems as well. On the competition
side we have:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Schools with more developed CS programs dominate
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A single strong student can carry a team
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Some kids don&amp;#39;t like or do well in the competitive environment
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
And on the hackathon side:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
24 hours of straight work is just a bad idea and a bad thing to
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
encourage.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Big advantage to teams that bring prefab code.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Big advantage to kids with experience.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Both types of events are great opportunities for young
programmers. They&amp;#39;re celebrate academic work, bring tech kids together
as a community and when done right are
something of a CS party. Neither type of event speaks to all kids so
it&amp;#39;s great to have both competitions and hackathons to go along with
other types of events available for our kids.
&lt;/p&gt;
&lt;p&gt;
Another thing I love abut the Cornell and St, Joseph&amp;#39;s competitions
along with StuyHacks is that they&amp;#39;re open to all schools and hence all
students. There&amp;#39;s room for the novice and also the expert and you
don&amp;#39;t have to be in a particular school or program to participate.
&lt;/p&gt;
&lt;p&gt;
There are other events beyond these three. There are online
competitions like &lt;a href=&#34;http://www.usaco.org/&#34;&gt;the USACO&lt;/a&gt;, competitions on HackerRank and Topcoder,
&lt;a href=&#34;http://halite.io&#34;&gt;Halite&lt;/a&gt; along with it&amp;#39;s hackathon which is great but specialized and in
person ones that are farther away like the &lt;a href=&#34;http://pclassic.org/%0A&#34;&gt;PClassic&lt;/a&gt; in Philidelphia
and Rowan&amp;#39;s &lt;a href=&#34;http://elvis.rowan.edu/rupc/%0A&#34;&gt;HS programming competition&lt;/a&gt; in New Jersey but it&amp;#39;s great to
see great local opportunities like these emerging and hopefully
running for years to come.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tools and Complexity</title>
      <link>https://cestlaz.github.io/posts/tools-and-complexity/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/tools-and-complexity/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://twitter.com/alfredtwo&#34;&gt;Alfred Thompson&lt;/a&gt; wrote about &lt;a href=&#34;http://blog.acthompson.net/2018/04/thoughts-on-where-cs-education-tools.html&#34;&gt;CS education tools&lt;/a&gt; earlier today. I&amp;#39;ve
also been meaning to write on the topic but from a different point of
view.
&lt;/p&gt;
&lt;p&gt;
I do my best to keep up with the latest and greatest in the CS world
both on the academic side as well as the professional one. That&amp;#39;s not
really possible, but I do my best. When I have a small project to work
on I&amp;#39;ll some times use it as an excuse to play with some recent
technology. Over December, I wanted to write an application viewer to
use for company / student internship matching. I started by looking at
&lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; but ended up using &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt; which I liked much more for a variety
of reasons.
&lt;/p&gt;
&lt;p&gt;
The viewer served it&amp;#39;s purpose but I think it can be turned into a
much more comprehensive student / employer internship platform. I
tried to steal a few minutes over this past week&amp;#39;s spring break to
start a rewrite using another toolset, Clojure, Clojurescript and
Reagent. I&amp;#39;m really liking the Clojure stack and using
Emacs and Cider for the IDE is really blowing me away.
&lt;/p&gt;
&lt;p&gt;
What I&amp;#39;ve noticed is that for every new language of framework you also
have to learn a whole set of ancillary tools.
&lt;/p&gt;
&lt;p&gt;
It didn&amp;#39;t used to be that way. Back in the day, things were much
simpler. I remembering doing work at Goldman Sachs, it was as simple
as typing something on the command line like &lt;code&gt;cc file1.c file2.c
file3.c&lt;/code&gt;. I of course had to be cutting edge and use fancy modern
tools like &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;Make&lt;/a&gt;. What&amp;#39;s more, the tools I used in industry were very
similar to what I used in college.
&lt;/p&gt;
&lt;p&gt;
We now live in very different times.
&lt;/p&gt;
&lt;p&gt;
If you go to the getting started guides for React or Vue it&amp;#39;s pretty easy to
get hello world up and running but beyond that you start to fall in to
the Javascript tooling hole. To start you need either &lt;strong&gt;npm&lt;/strong&gt; or &lt;strong&gt;yarn&lt;/strong&gt;
just to manage packages and dependencies. Then you need a build system
or bundler like &lt;strong&gt;webpack&lt;/strong&gt;, &lt;strong&gt;browserify&lt;/strong&gt;, or &lt;strong&gt;parcel&lt;/strong&gt; and that&amp;#39;s not even
considering older options like &lt;strong&gt;gulp&lt;/strong&gt; and &lt;strong&gt;grunt&lt;/strong&gt; and ancillary tools
like &lt;strong&gt;babel&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
A typical React or Vue project is going to need a &lt;a href=&#34;https://github.com/krasimir/react-webpack-starter/blob/master/package.json&#34;&gt;project.json&lt;/a&gt; and
&lt;a href=&#34;https://github.com/krasimir/react-webpack-starter/blob/master/webpack.config.js&#34;&gt;webpack.config.js&lt;/a&gt; file and sometimes some other files as well. Check
out the links. They&amp;#39;re from a simple project template I found
online. Far from simple.
&lt;/p&gt;
&lt;p&gt;
When I was playing with Vue.js a couple of months ago, I ended up
using Webpack to convert the source code into the final JS, take care
of live-reloading, and in general manage the project. I still have no
idea how most of it works. I don&amp;#39;t know if it&amp;#39;s just me but I&amp;#39;m very
uncomfortable relying on tools that I really don&amp;#39;t fully understand to
build my systems.
&lt;/p&gt;
&lt;p&gt;
The Clojure world is little better with Leiningen and Boot. If you
don&amp;#39;t believe me, try to make heads or tails of &lt;a href=&#34;https://github.com/bhauman/figwheel-template/blob/master/src/leiningen/new/figwheel/project.clj&#34;&gt;this&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
While it&amp;#39;s true that as a professional you&amp;#39;ll likely use one set of
tools on a day to day basis and you&amp;#39;ll eventually get to know them
that doesn&amp;#39;t mean it&amp;#39;s not a good idea to prepare kids for what&amp;#39;s to
come.
&lt;/p&gt;
&lt;p&gt;
On the K12 side we have drag and drop languages, specialized learning
IDEs like BlueJ, simple cut down IDEs like Dr Racket and completely
online environments like repl.it. All great starter tools that
insulate beginners from the complexities to come. College&amp;#39;s
might get closer to the &amp;#34;real world&amp;#34; but just a tad.
&lt;/p&gt;
&lt;p&gt;
Don&amp;#39;t get me wrong, I like many of the tools used in K12
classes and there&amp;#39;s far too much complexity in the professional world to
throw at beginners. If we look at a student&amp;#39;s entire school
career, classes are already so packed with material it would be hard to
really prepare kids for the real world within their classes. You could
take that tried and true teacher / professor technique of just
requiring it and having the kids figure it out on their own but that&amp;#39;s
really just downright abusive.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t have an answer for this one.
&lt;/p&gt;
&lt;p&gt;
I have my kids use tools like Git and GitHub early along with using
testing frameworks and external libraries. I also try to move my
students to a general purpose programmable platform like Emacs or
Vim. I think these are sound practices but students will still have a
big learning curve when they finally get to industry.
&lt;/p&gt;
&lt;p&gt;
What I really would love it to see the tooling become simpler and
documentation better. &lt;a href=&#34;https://github.com/parcel-bundler/parcel&#34;&gt;Parcel&lt;/a&gt;, a Javascript bundler is one of the newer
kids on the block and is much simpler and cleaner than alternatives
like Webpack. The new version of Clojure has it&amp;#39;s own command line
tool which is also simpler than the alternatives. Maybe we are already
moving in the right direction and this entire rant will become moot in a couple of years.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do It The Dumb Way</title>
      <link>https://cestlaz.github.io/posts/do-it-the-dumb-way/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/do-it-the-dumb-way/</guid>
      <description>&lt;p&gt;
There&amp;#39;s so much to like in the shape drawing lessons I talked about
in my &lt;a href=&#34;http://cestlaz.github.io/posts/refactoring/&#34;&gt;refactoring&lt;/a&gt; post that I thought I&amp;#39;d share a little more here.
&lt;/p&gt;
&lt;p&gt;
It can be argued that the most important things for a program to do is work. The
most clever, elegant, creative program is worthless if it doesn&amp;#39;t
produce the desired result. All too often, beginners and hot shot beginners in particular try to
be too clever too early and get themselves into trouble.
&lt;/p&gt;
&lt;p&gt;
When doing the shape drawing lessons the first couple of shape are
pretty easy
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;

| ****            |    | *               |
| ****            |    | **              |
| ****            |    | ***             |
| ****            |    | ****            |
| ****            |    |                 |
|                 |    |                 |
&lt;/pre&gt;
&lt;p&gt;
but things get more interesting with the right justified triangle:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
----*       *
---**      **
--***     ***
-****    ****
*****   *****
&lt;/pre&gt;
&lt;p&gt;
For this triangle, students want to come up with the formula for the
number of spaces. They usually figure out something like this with
&lt;code&gt;h-i-1&lt;/code&gt; spaces and &lt;code&gt;i+1&lt;/code&gt; stars:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The formulas become harder to figure out as the shapes become more
complex and sometimes students get stymied.
&lt;/p&gt;
&lt;p&gt;
The truth is that while they&amp;#39;re struggling to find the perfect
solution, it&amp;#39;s sometimes better to do it the dumb way.
&lt;/p&gt;
&lt;p&gt;
Consider drawing a trapezoid like this example of height 5 and
starting width 12:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
************
**********
********
******
****
&lt;/pre&gt;
&lt;p&gt;
A student could come up with the &amp;#34;formulas&amp;#34; for spaces and stars but
sometimes there&amp;#39;s a more straightforward way.
&lt;/p&gt;
&lt;p&gt;
Consider the number of spaces on each line on the left hand side of
the shape. First line is 0 then 1, 2 etc. Why not start a variable
&lt;code&gt;spaces&lt;/code&gt; at 0 and increment it on each loop iteration.
&lt;/p&gt;
&lt;p&gt;
For the number of stars, it&amp;#39;s starting at the width and being reduced
by 2 each time.
&lt;/p&gt;
&lt;p&gt;
This leads to a solution similar to this (using the line routine from
the earlier refactoring post):
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This solution is simple to construct, simple to understand, and quite
frankly, hard to get wrong.
&lt;/p&gt;
&lt;p&gt;
It can also lead a student to discovering a pattern or &amp;#34;formula&amp;#34; such
as what was used to solve the earlier problems.
&lt;/p&gt;
&lt;p&gt;
This might seem to some as a cheap way out, the dumb approach -
creating extra variables and have them count along the way but I
don&amp;#39;t. There&amp;#39;s nothing wrong with simple and straightforward. Yes, you
could come up with an elegant formula but the bottom line is you need
something to count 0,1,2,3â€¦ so create a variable to do it. You need
something to count 12,10,8,â€¦ create one for that as well.
&lt;/p&gt;
&lt;p&gt;
Now, I&amp;#39;m not advocating writing 100 if statements rather than a loop
but I think you get the idea.
&lt;/p&gt;
&lt;p&gt;
The best solution is one that works and Sometimes the &amp;#34;dumb&amp;#34; approach is the best approach.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Refactoring</title>
      <link>https://cestlaz.github.io/posts/refactoring/</link>
      <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/refactoring/</guid>
      <description>&lt;p&gt;
One of my laments on teaching computer science is that students are
rarely taught and given the chance to develop  good programming
practices. There&amp;#39;s usually not enough time. Beginners work on small
&amp;#34;toys&amp;#34; which don&amp;#39;t lend themselves to good software development
practices and later on, there&amp;#39;s so much other material like
algorithms, data structures etc. to teach and
learn that programming practices usually amount to lines like:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&amp;#34;Make sure to comment your code..&amp;#34;
&lt;/p&gt;
&lt;p&gt;
&amp;#34;Indent properlyâ€¦&amp;#34;
&lt;/p&gt;
&lt;p&gt;
&amp;#34;Use functionsâ€¦&amp;#34;
&lt;/p&gt;
&lt;p&gt;
&amp;#34;It&amp;#39;s important to test your codeâ€¦&amp;#34;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
so when I see an opportunity to use a simple example to drive home a
good practice,  I try to jump on it.
&lt;/p&gt;
&lt;p&gt;
Drawing shapes with text is a typical early project. I&amp;#39;ve seen it in
text books and online and have been doing it for years. I recall doing
it back in the 80s in Fortran IV when the programs we wrote were on &lt;a href=&#34;https://en.wikipedia.org/wiki/Punched_card&#34;&gt;punch cards&lt;/a&gt;, run
overnight on an &lt;a href=&#34;https://en.wikipedia.org/wiki/IBM_1130&#34;&gt;IBM 1130&lt;/a&gt;, and printouts picked up the next day.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s a nice use of nested loops. The students will write functions to
create assorted shapes out of asterisks  like rectangles and
triangles. Typical solutions look like this:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Which results in shapes like these:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;

| ****            |    | *               |
| ****            |    | **              |
| ****            |    | ***             |
| ****            |    | ****            |
| ****            |    |                 |
|                 |    |                 |
|                 |    |                 |
| *************** |    | *               |
| *************** |    | **              |
| *************** |    | ***             |
| *************** |    | ****            |
| *************** |    | *****           |
| *************** |    | ******          |
| *************** |    | *******         |
&lt;/pre&gt;
&lt;p&gt;
Then there will be more interesting shapes including things like:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;

*       *            *****
**      ***           *   *            and more
***     *****          *   *
****      ***           *****
&lt;/pre&gt;
&lt;p&gt;
This is a great time to talk about refactoring.  All of the shape
drawing functions follow the same pattern - there&amp;#39;s an outer loop for
the height and then one or more inner loops to draw each line. We can
factor out the inner loops in to a separate &lt;code&gt;line()&lt;/code&gt; function.
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It&amp;#39;s just like factoring in algebra:
&lt;/p&gt;
&lt;div class=&#34;latex-block&#34;&gt;
&lt;p&gt;
(RectangleOuterLoop Ã— Line) + (TriangleOuterLoop Ã— Line) â‡’ Line  (Rectangleouterloop Ã— TriangleOuterloop)
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
We end up with:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It&amp;#39;s simpler, cleaner, and also can lead us to thinking about the
&amp;#34;harder&amp;#34; shapes in an interesting way. Instead of looking at the right
justified triangle as a triangle, we can think of each level as two
lines - one of spaces (shown here as dashes) followed by a line of
stars:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
----*       *
---**      **
--***     ***
-****    ****
*****   *****
&lt;/pre&gt;
&lt;p&gt;
Noticing that  for a height of 5, the dashed lines count down in
length 4,3,2,1,0 and the star lines count up 1,2,3,4,5, we get:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Here we have typical early CS assignment that really lends itself to
talking about structuring programs and refactoring. Where else can we
inject good programming practices in ways that make sense early on?
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing Part 2</title>
      <link>https://cestlaz.github.io/posts/testing-part2/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/testing-part2/</guid>
      <description>&lt;p&gt;
A few weeks ago I wrote about &lt;a href=&#34;https://cestlaz.github.io/posts/testing-testing/#.Wq7Ud3XwZhE&#34;&gt;introducing testing&lt;/a&gt; in CS classes,
specifically using a testing framework. In that post I talked about
the plan but now I can talk about the results.
&lt;/p&gt;
&lt;p&gt;
My class interleaves with Hunter&amp;#39;s CSCI 13500 - Software Analysis and
Design I class. One day each week, my students have complete a hands
on lab focusing on whatever is being covered in the 13500 class. I
decided to use one of those labs as a first foray into testing.
&lt;/p&gt;
&lt;p&gt;
I had each student use a classmates lab solution. They were to examine
their solution and write a test suite for the lab using the &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt;
C++ testing framework.
&lt;/p&gt;
&lt;p&gt;
I think this proved to be a valuable exercise.
&lt;/p&gt;
&lt;p&gt;
Partway into the exercise, a few students independently had an issue -
they couldn&amp;#39;t even build the tests.
&lt;/p&gt;
&lt;p&gt;
The code looked right. Something like this:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It looked like at textbook example of a test case but it wouldn&amp;#39;t even
compile.
&lt;/p&gt;
&lt;p&gt;
In all cases, the original student code compiled and ran and gave the
correct result. All the students had code similar to this:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This stumped everyone for a while - why wouldn&amp;#39;t the test even
compile.
&lt;/p&gt;
&lt;p&gt;
The answer was &amp;#34;data types.&amp;#34; The lab specification required that
getValue was supposed to return a &lt;code&gt;double&lt;/code&gt; but in all the problem
cases, the student returned a &lt;code&gt;std::string&lt;/code&gt;. The lab appeared to work
since &lt;code&gt;std::cout&lt;/code&gt; handles strings as well as numeric data types but
once they put it in to a test case that actually checked types the
problem was apparent and easy to fix.
&lt;/p&gt;
&lt;p&gt;
As it turns out, I was pretty excited about this â€“ even before
finishign the tests, the act of writing tests revealed a problem. This
is a good thing.
&lt;/p&gt;
&lt;p&gt;
From there, it was pretty easy for students to finish writing the
tests for their classmates labs.
&lt;/p&gt;
&lt;p&gt;
Fast forward a week. This was the first lab where I required
the students to submit their own test suite as part of their lab. This
didn&amp;#39;t seem to slow anyone down by an appreciable and time will tell
if this leads to better development practices but it certainly made my
life easier. I was able to quickly move from repo to repo and type:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make tests
./tests -s
... watch the tests run
make
./main
--- watch the program run&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Easy peasy.
&lt;/p&gt;
&lt;p&gt;
Not only did it make it faster for me, it also gave me insights into
their programs by seeing their decisions in terms of test writing.
&lt;/p&gt;
&lt;p&gt;
Is it a win?
&lt;/p&gt;
&lt;p&gt;
At the very worst, they&amp;#39;re learning an
industry practice and at best, it&amp;#39;s going to help them improve as
software engineers. Add on the fact that it&amp;#39;s making my life as a
teacher easier both in terms of understanding the students work and in
terms of speed of evaluation. Sounds like a win to me.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sigcse2018 Making theory more acccesible</title>
      <link>https://cestlaz.github.io/posts/sigcse2018-theory/</link>
      <pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse2018-theory/</guid>
      <description>&lt;p&gt;
Next up from SIGCSE 2018 is John MacCormick&amp;#39;s session on
&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3159557&#34;&gt;Strategies for Baing the CS Theory Course on Non-decision Problems&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
MacCormicks&amp;#39;s stance is that CS theory  is tough the first time around
and using non-decision problems is a viable approach to make theory
more accessible to beginners. As MacCormick said in his paper:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
â€¦ a decision problem may ask the yes/no question, &amp;#34;Does this graph
have a Hamilton cycle?&amp;#34; The corresponding non-decision problem is,
&amp;#34;Please give me a Hamilton cycle of this graph if it has one.&amp;#34;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This leads to writing programs to explore concepts in CS theory rather
than just living in the world of proof.
&lt;/p&gt;
&lt;p&gt;
MacCormick goes on to say that:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
For this audience, the key advantage of non-decision problems
is that they are more realistic: they match the previous programming
and algorithms experience of undergraduates more closely.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I love the idea. Writing a program can make an abstract problem more
concrete and can lead to better understanding for those of us who are
less math inclined.
&lt;/p&gt;
&lt;p&gt;
My next thought was that this shouldn&amp;#39;t just be a change implemented
in theory courses. Some of these ideas should move down to more
introductory CS classes. Not the hardcore stuff but light
introductions to the topics so that we can layer the learning. If we
introduce some of these concepts in CS 1 classes then when they get to
the theory class it won&amp;#39;t be the students first rodeo.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve had success with this when teaching recursion early. I&amp;#39;ve also
done it with other concepts. When we teach the Towers of Hanoi, yes,
it&amp;#39;s a nice recursion problem but really it&amp;#39;s to get the students
thinking about run time and a bit of proof. likewise, when we do a
maze solver in NetLogo we&amp;#39;re alluding to dynamic programming, search,
and path finding.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t have too much more to say on this topic right now. I&amp;#39;m not
enough of a theory guy to sensibly design these experiences. The good
news is that MacCormick has written an soon to be released &lt;a href=&#34;https://www.amazon.com/What-Can-Computed-Practical-Computation/dp/0691170665/ref=asap_bc?ie=UTF8&#34;&gt;book&lt;/a&gt; on the subject. I
signed up for a reviewer copy at SIGCSE and look forward to receiving
a copy. Once I do I hope to be able to find some gems that I can work
into CS 1 experiences.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sigcse2018 Bootstrapworld on Creativity in CS classes</title>
      <link>https://cestlaz.github.io/posts/sigcse2018-bootstrap/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse2018-bootstrap/</guid>
      <description>&lt;p&gt;
I really didn&amp;#39;t know what to expect at the &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3159471&#34;&gt;Creativity, Customization,
and Ownership: Game Design in Bootstrap: Algebra&lt;/a&gt; session. I&amp;#39;ve been a
big fan of &lt;a href=&#34;http://www.bootstrapworld.org/&#34;&gt;Bootstrep&lt;/a&gt; for years and looking at the authors, &lt;a href=&#34;http://blog.acthompson.net/2017/10/cs-teacher-interview-emmanuel.html&#34;&gt;Emmanuel
Schanzer&lt;/a&gt;&amp;#39;s been a freind forever. I&amp;#39;ve never met &lt;a href=&#34;https://twitter.com/ShriramKMurthi&#34;&gt;Shriram Krishnamurthi&lt;/a&gt;
in person but am looking forward to it. We&amp;#39;ve traded emails and blog
comments. I&amp;#39;d like to consider him a friend and I certainly respect
him and his work even though we frequently disagree around the
edges. The third author and presenter, Kathi Fisler was new to me.
&lt;/p&gt;
&lt;p&gt;
The Bootstrap program is embedded in algebra classes. In it, students
use Racket (nee scheme) to reinforce math skills while building
computer science skills. The big student project is a graphical game.
&lt;/p&gt;
&lt;p&gt;
When designing the project, students are asked to decide on and find
four resources:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
The background image
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The player image
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The target image
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The enemy image
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Students are given a short amount of time to decide on and find these
four images. I think it was about ten minutes and that&amp;#39;s it. That&amp;#39;s
all the &amp;#34;creativity&amp;#34; in the assignment. After that, all the students
are essentially creating the same game with different skins.
&lt;/p&gt;
&lt;p&gt;
This design makes sense. You can&amp;#39;t have students going all over the
place. Constraining the assignment in this way allows teachers who
might now be strong in computer science to guide the kids through the
program to completion.
&lt;/p&gt;
&lt;p&gt;
At the time I was thinking: I really like all of this but is it really
open ended creativity and discovery with respect to math or computer
science? As it turned out, Fisler addressed this point at the end of
the talk in a way that made me vary happy.
&lt;/p&gt;
&lt;p&gt;
Fisler went on to describe the rest of the student experience and then
went on to talk about the statistics they gathered.
&lt;/p&gt;
&lt;p&gt;
One big takeaway was that while all the students were essentially
writing the same game varying only the graphical elements, this
encouraged students to create very different themes. They also created
rich stories around their games. The project might not have been
&amp;#34;creative&amp;#34; with respect to the CS or Math directions but it was certainly
creative in other important areas. The other takeaway was that
survey&amp;#39;s indicated all sorts of positives from the program as a whole
so the project didn&amp;#39;t seem to have suffered by having the students
essentially write the same program. Participants were proud of their
work, they felt their games were different from their peers and in
general the experience was good.
&lt;/p&gt;
&lt;p&gt;
During questions, someone asked about adding a fifth element - a
projectile or missile. It turns out that at one point the program had a
projectile component but that led to the vast majority of projects to
be themed in very similar ways. Even though not the same, it reminded me to something Randy
Pausch said in his &lt;a href=&#34;https://www.youtube.com/watch?v=ji5_MqicxSo&#34;&gt;Last Lecture&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
You make whatever you want. Two rules: no shooting violence and no
pornography. Not because Iâ€™m opposed to those in particular, but you know, thatâ€™s been done with
VR, right? [laughter] And youâ€™d be amazed how many 19-year-old boys are completely out of ideas
when you take those off the table.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
At the very end, Fisler addressed my questions about creativity and
discovery. She posed these questions of her own: &amp;#34;Do we overstate the
case for creativity?&amp;#34; and &amp;#34;Is pure constructivism a win?&amp;#34;
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve ranted on contructivism before. It can be great but a
constructivist lesson takes a knowledgeable educator and a lot of time,
preparation, and effort. It&amp;#39;s a big ask for, say, a high school
teacher who&amp;#39;s already taking home hours of work every evening. Too
often I&amp;#39;ve seen the following &amp;#34;contructivist&amp;#34; model instead:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Take an isntructor that doesn&amp;#39;t know their craft, the content, or
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
niether.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Let the kids play with stuff.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Show off the couple of autodidacts that figure it out as success
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
stories.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll rant more about this &amp;#34;model&amp;#34; with respect to the new buzz word
&amp;#34;lead learner&amp;#34; at some point in the future.
&lt;/p&gt;
&lt;p&gt;
On the creativity side, it&amp;#39;s important but there are also times for
the instructor to lead and for guidelines to be followed.
We want to foster creativity but that doesn&amp;#39;t mean that it&amp;#39;s 100%
creativity 100% of the time. Education is like life, a balance. The
Bootstrap program had to constrain the CS and math learning but
allowed for creativity in other areas. It&amp;#39;s smart and it&amp;#39;s a win.
&lt;/p&gt;
&lt;p&gt;
I still want to meet Shriram in person one day and now also Kathi
Fisler. I didn&amp;#39;t know what to expect walking in but I left the talk
reminded of why I&amp;#39;m such a fan of Emmanuel, his team, and their work.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sigcse2018 - Malloc Lab</title>
      <link>https://cestlaz.github.io/posts/sigcse2018-malloc-lab/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse2018-malloc-lab/</guid>
      <description>&lt;p&gt;
I wasn&amp;#39;t going to go to this session. I started out in a panel on
integrating social good into CS Ed. With the panel not meeting my
expectations I moved over to my second choice - the system programming
sessions where I saw &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3159597&#34;&gt;Implementing Malloc: Students and Systems
Programming&lt;/a&gt;, a paper presented by &lt;a href=&#34;http://www.cs.cmu.edu/~bpr/&#34;&gt;Brian Railing&lt;/a&gt; of CMU.
&lt;/p&gt;
&lt;p&gt;
I really liked both the paper and the talk.
&lt;/p&gt;
&lt;p&gt;
CMU computer science students all take a systems course that uses
&lt;a href=&#34;https://www.amazon.com/Computer-Systems-Programmers-Perspective-3/dp/9332573905/ref=pd_lpo_sbs_14_t_0?_encoding=UTF8&amp;amp;psc=1&amp;amp;refRID=Y5ZKG2V8ZYZZPZHQP8SQ&#34;&gt;Computer Systems: A Programmer&amp;#39;s Perspective&lt;/a&gt;. It&amp;#39;s a great book. I
read through the first edition years ago and felt it was great
resource not only in a systems course but also for self study. One of
the labs has the students implement their own memory allocation calls,
or &lt;strong&gt;malloc&lt;/strong&gt; for us old time C wonks.
&lt;/p&gt;
&lt;p&gt;
There were a number of self perceived  deficiencies with the
assignment such as encouraging bad programming style by modeling
less than ideal practices but the biggest deficiency as that students
could game the assignment. Students could do very well on the
assignment by exploiting knowledge of the assignment rather than by
writing a full and correct malloc implementation. One example is that
students were able to figure out that no allocation would be more than
100MB so they really didn&amp;#39;t have to deal with 64 bit pointers. They
could use smaller offsets thus simplifying the assignment. The
assignment became more about figuring out how to get it through the
grader and less about learning memory management. I&amp;#39;m sure I&amp;#39;m
overstating it but that&amp;#39;s the idea.
&lt;/p&gt;
&lt;p&gt;
Railing explained all of the deficiencies and then how they changed
the assignment to address them.
&lt;/p&gt;
&lt;p&gt;
At the end of the day, the assignment had fewer loopholes to game so
students had to really write the malloc library and presumably learn
about memory management.
&lt;/p&gt;
&lt;p&gt;
They also added an intermediate deliverable so students couldn&amp;#39;t leave
everything for the last minute.
&lt;/p&gt;
&lt;p&gt;
Near the end of the talk, Railing discussed results where he pointed
out that students final exam scores didn&amp;#39;t change but they did better
on the malloc questions. It wasn&amp;#39;t clear if the overall scores didn&amp;#39;t
change, meaning that the students did better on the malloc questions
but worse somewhere else or if they did similarly to past students on
the other sections and in addition they scored better on the malloc
questions. I&amp;#39;m not sold on the final exam questions being the best way
to evaluate learning but it is an easy data point.
&lt;/p&gt;
&lt;p&gt;
I loved the presentation and paper and I love what Railing is doing
but my big takeaway wasâ€¦
&lt;/p&gt;
&lt;p&gt;
Well, Duhâ€¦
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
students aren&amp;#39;t doing as they should
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
teacher realizes students are gaming assignment
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
teacher reworks assignment
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
students do better
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Teachers do this all the time. Of course when we do it, it&amp;#39;s not
&amp;#34;research.&amp;#34; This was a recurring theme for me at SIGCSE2018 and I
tweeted it. While it&amp;#39;s true that K12 teachers can learn a lot about CS
content from higher ed, people in higher ed can learn a lot about
teaching from teachers.
&lt;/p&gt;
&lt;p&gt;
What Railing presented was terrific and important as changing
assignments like this will now be considered by people who haven&amp;#39;t
thought about this before but this is second nature to a teacher. Of
course I&amp;#39;m talking about a good teacher, not one who blindly follows
scripted lessons.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t mean this as a slight to professors. They&amp;#39;re hired and
promoted based on research so much of their job involves another skill
set. I know many professors who care very much about teaching but they
might only teach one or two classes a semester that meets once or
twice a week while a typical high school teacher meets 150 students a
day five days a week over five different classes a day.  Much more of
an opportunity for deliberate practice.
&lt;/p&gt;
&lt;p&gt;
This presents a huge challenge. How can professors who are hired and
promoted as researchers be given the time and ability to develop as
teachers? What about adjuncts or Teaching Assistants? I&amp;#39;d imagine it&amp;#39;s
even harder for them. I know that colleges have lines for teaching
faculty but from what I can see, those instructors are usually super
overloaded with classes and students so that doesn&amp;#39;t solve the
problem. Even if you do have teaching faculty that have the time to
develop their craft, how do you get those teaching chops over to the
research faculty?
&lt;/p&gt;
&lt;p&gt;
After the session, I was talking about this with &lt;a href=&#34;http://www.cs.cmu.edu/~mjs/&#34;&gt;Mark Stehlik&lt;/a&gt;,
Assistant Dean at CMU&amp;#39;s School of Computer Science. Mark was telling
me about CMU&amp;#39;s efforts to develop teaching faculty across the
disciplines. I was happy to hear about the efforts CMU was taking but
it sounds like they have the same challenges with respect to pedagogy
as everyone else. If it&amp;#39;s a challenge for CMU with all their
resources, what does that mean for the rest of us?
&lt;/p&gt;
&lt;p&gt;
Still, it was encouraging to go to a number of sessions where it was
clear that professors - both teaching and research faculty are serious
about the craft of teaching and conferences like SIGCSE can bring them
together with those of us who don&amp;#39;t have the chops as researchers but
do so as teachers.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing, Testing</title>
      <link>https://cestlaz.github.io/posts/testing-testing/</link>
      <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/testing-testing/</guid>
      <description>&lt;p&gt;
With CS4All being the buzzword of the day we&amp;#39;re paying a lot of
attention to the fact that when we teach a CS class for all students,
most of them won&amp;#39;t end up studying CS or going directly
into a tech heavy field.
&lt;/p&gt;
&lt;p&gt;
Among those that do study CS though, there is another division. Those
studying CS as an academic exercise or to go on to graduate studies
and those who are going in to the tech sector. For those going into
the tech field, it&amp;#39;s important that they&amp;#39;re prepared in terms of
software development, design, and all those goodies not covered in CS
classes.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not advocating removing the good stuff currently in most colleg CS
curricua, although I will say that most CS programs I&amp;#39;ve reveiwed could benefit by
trimming some requriements and adding some electives. I am advocating
doing more than telling your students &amp;#34;comment your code,&amp;#34; - a refrain
many undergrads have heard frequently with little guidance.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m advocating to begin by bringing in tools and practices that either
don&amp;#39;t detract from current CS classes or in fact can add to or
streamline them.
&lt;/p&gt;
&lt;p&gt;
Last year I wrote about &lt;a href=&#34;https://cestlaz.github.io/posts/sigcse-2017-github-4/&#34;&gt;using Git and GitHub&lt;/a&gt; in my classes. Students
have to submit projects anyway and frequently have to work in teams so
using Git and a Git hosting service can actually make both student&amp;#39;s
and instructor&amp;#39;s class experiences better while introducing them to an
industry best practice.
&lt;/p&gt;
&lt;p&gt;
Today I want to talk about testing.
&lt;/p&gt;
&lt;p&gt;
Students are always told to test their code but frequently not given
tremendous guidance. The results can be:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
projects that don&amp;#39;t compile
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
projects that compile and run but not the way they&amp;#39;re supposed to.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
wonky input or interfaces
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
projects that don&amp;#39;t work for all cases
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
On the instructor side, we have to evaluate the student&amp;#39;s
submissions and deal with all of this. Some teachers use auto graders
to help. I have mixed feelings on them. On the one hand they can speed
up grading but on the other hand it&amp;#39;s important for me as the teacher
to actually dive into the student&amp;#39;s code. In any case, using an auto grader
is actually somewhat similar to running a test suite.
&lt;/p&gt;
&lt;p&gt;
Why not have the students create their own test suites? If done right,
this should encourage students to evaluate their own code more
carefully and also cut down on the time it takes the intructor to
evaluate a given submission.
&lt;/p&gt;
&lt;p&gt;
This means that we have to use a testing framework with a very low
cost of entry.
&lt;/p&gt;
&lt;p&gt;
I ended up finding &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt; for C++. It&amp;#39;s really simple and just a
single include file. This means that students don&amp;#39;t have to actually
install anything on their machines. Here&amp;#39;s the example from the
project page:
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://github.com/onqtam/doctest/raw/master/scripts/data/using_doctest_888px_wide.gif&#34; alt=&#34;https://github.com/onqtam/doctest/raw/master/scripts/data/using_doctest_888px_wide.gif&#34; title=&#34;https://github.com/onqtam/doctest/raw/master/scripts/data/using_doctest_888px_wide.gif&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;
Basically, the students can just start writing tests.
&lt;/p&gt;
&lt;p&gt;
Python also has a couple of low friction testing options. One is to
use the built in &lt;a href=&#34;https://docs.python.org/3/library/doctest.html&#34;&gt;doctest&lt;/a&gt; facility. Basically you put sample runs in the doc
string at the top of a function with the expected output:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This might seem a little cumbersome, particularly if you look at the
example at the link. It also requires the tests go on top of each
function and that the tests will print out as part of the docstring.
&lt;/p&gt;
&lt;p&gt;
The other easy Python option is the built in &lt;a href=&#34;https://docs.python.org/3/library/unittest.html&#34;&gt;unittest&lt;/a&gt; module.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s an example of testing strings from the link above:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I havn&amp;#39;t played with Java testing in years but I&amp;#39;d guess there&amp;#39;s
something similarly light weight.
&lt;/p&gt;
&lt;p&gt;
Tomorrow I&amp;#39;m hoping to finish the groundwork on using C++ doctest with
my class and I&amp;#39;ll write another post afterwards. Probably after SIGCSE
since I&amp;#39;ll be attending that from Wednesday on.
&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll see how this goes but I&amp;#39;m guessing it will work well. If it
does, it should make my life as a grader easier and also get the kids
on track to using test frameworks - something they&amp;#39;ll need wherever
they end up.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>APCS-P -  Bigger Intake Or Leaky Pipe</title>
      <link>https://cestlaz.github.io/posts/apcsp-bigger-intake-or-leaky-pipe/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/apcsp-bigger-intake-or-leaky-pipe/</guid>
      <description>&lt;p&gt;
Advanced Placement Computer Science got top billing on Alfred
Thompson&amp;#39;s &lt;a href=&#34;http://blog.acthompson.net/2018/01/computer-science-education-things-im.html&#34;&gt;Things I&amp;#39;m Watching in 2017&lt;/a&gt; post. Alfred talks about how
APCS-P exploded onto the scene and wonders what will happen with APCS
this year.
&lt;/p&gt;
&lt;p&gt;
I have some questions as well but mine won&amp;#39;t be answered for years to
come, if ever.
&lt;/p&gt;
&lt;p&gt;
Like it or not, the College Board has an out sized influence on K12
education. As long as people are convinced that AP=good there will be
a push for more and more AP classes and APCS-P is a perfect class to
push. CS is the hot topic in K12, the topic is getting a big push
from both politicians and industry, the class has no pre-requisites
and in spite of being called a college course is somehow appropriate
for a typical tenth grader.
&lt;/p&gt;
&lt;p&gt;
The concern here is that at the end of the day. APCS-P is an exam or
rather an exam plus two other assessments. The quality can vary
greatly. I&amp;#39;ve heard of APCS-P implementations that seem pretty
rigorous and I&amp;#39;ve seen implementations that are, quite frankly, a
joke. The question is this: is APCS-P both motivating kids to go on to
the next level and just as importantly preparing them to succeed at
that level?
&lt;/p&gt;
&lt;p&gt;
We might never know.
&lt;/p&gt;
&lt;p&gt;
A high school might only offer APCS-P. If APCS-A isn&amp;#39;t offered, we
might not know if the student went on to take more CS and we won&amp;#39;t
know if the student succeeded or not. I&amp;#39;ve seen this with some very
high profile, popular, after school/summer non-profits. The kids have
a great time and the non-profits rave about how much their kids learn
but then the kids take a real CS class in school and drop like
flies. Was it the teacher/professor or did the non-profit set the kids up to
fail by convincing them they knew a whole lot more than they did and
that CS was super easy all the time.
&lt;/p&gt;
&lt;p&gt;
If credit is given for APCS-P, it looks like it will be blanket
credit. CS majors and minors will still have to take all the same classes in
college and CS so it will be very hard to tell if APCS-P is
responsible for any uptick in CS.
&lt;/p&gt;
&lt;p&gt;
At the end of the day, the College Board is going to make a lot of
money but if APCS-P becomes the standard high school CS course will
this leave us with true, quality CS4All? I have my doubts.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2017 in review - Hunter Undergraduate CS</title>
      <link>https://cestlaz.github.io/posts/2017-review-hunter-cs/</link>
      <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/2017-review-hunter-cs/</guid>
      <description>&lt;p&gt;
I usually don&amp;#39;t do year in review posts. At Stuy, not much changed
year after year so I never felt it worth summarizing the past and
projecting the future. At Hunter, now that I&amp;#39;m a couple of years in,
projects are really picking up steam so I think it&amp;#39;s worth talking
about them.
&lt;/p&gt;
&lt;p&gt;
One of my two major missions at Hunter was to build a CS Honors
program and raise the profile of Hunter&amp;#39;s undergraduate CS program in
general. Hunter had a strong CS program before I joined the team it&amp;#39;s
just that few people knew about it.
&lt;/p&gt;
&lt;p&gt;
My goal is to see Hunter become the &amp;#34;go to&amp;#34; institution for
undergraduate CS in New York City before my time is done.
&lt;/p&gt;
&lt;p&gt;
This is an extremely important mission.
&lt;/p&gt;
&lt;p&gt;
There are other strong CS options besides Hunter but compare the costs:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Institution&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;&lt;/th&gt;
&lt;th&gt;Annual Tuition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;NYU&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;$50,464&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NYY Tandon&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;$48,750&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Columbia&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;$54,504&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hunter&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;$6,530&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;Hunter is about one tenth the cost.&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
True, if you&amp;#39;re wealthy this isn&amp;#39;t a problem and if you&amp;#39;re at the
bottom of the economic ladder you might get a full ride but if you
fall into that category where you earn more than the financial aid
people think is &amp;#34;poor&amp;#34; but are clearly not rich you&amp;#39;re left in a bad place. This seems
particularly true for New Yorkers as our income seems higher than that
of people from other parts of the country but our cost of living is
higher as well.
&lt;/p&gt;
&lt;p&gt;
My wife and I are both career public educators. No one would confuse a
family of two working teachers as upper class but we were granted no
financial aid for our kids. The alternatives without a great public
option are to have saved for our entire lives and now liquidate those
savings or go into tremendous debt.
&lt;/p&gt;
&lt;p&gt;
This alone makes the mission critical. Add to that the accessibility
issue - elite private institutions only have to concern themselves
with whatever slice of the population they choose to accept. We are
charged with providing a top flight education to all - be they the
high achievers, the late bloomers, the struggling students or anyone
else.
&lt;/p&gt;
&lt;p&gt;
So, what&amp;#39;s happened in the past year?
&lt;/p&gt;
&lt;p&gt;
First, the Daedalus honors program is developing nicely. In our first
year we had a cohort of 12. This past year 27. I haven&amp;#39;t seen the
applicant pool yet - Hunter applications are open until the end of
January, but I&amp;#39;m hoping to bring in an even larger cohort this year. I
spent a good amount of time this fall visiting high schools to talk
about Hunter CS and CS options in general. Not as many as I&amp;#39;d like but
more than during year one.
&lt;/p&gt;
&lt;p&gt;
We had classes, trips, and special events but more important was that
the cohort is starting to form a community and the students want it to
be a community that includes ALL of Hunter CS, not just the honors
students.
&lt;/p&gt;
&lt;p&gt;
They&amp;#39;ve started a once a week Dojo where students can work on projects
and interact and we&amp;#39;re starting an evening speaker series in
the Spring.
&lt;/p&gt;
&lt;p&gt;
Overall there&amp;#39;s a vibe of excitement and an energy around Hunter CS
that I&amp;#39;ve been told hasn&amp;#39;t been there before.
&lt;/p&gt;
&lt;p&gt;
In my class, I&amp;#39;ve been introducing a number of real world practices
that are usually not covered in undergraduate CS and we&amp;#39;re starting to
talk about bringing those practices into the non-honors sections.
&lt;/p&gt;
&lt;p&gt;
Finally, we&amp;#39;ve started to partner with the New York Tech
community. We&amp;#39;re bringing together the Hunter students and the tech
professionals to raise awareness outside of Hunter of what our
students can do and to best prepare our students for their next
steps. These partnerships, in addition to internship possibilities
have led to us planning some great things this coming semester
incuding:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
workshops such as how to work on an open source project or how to do
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
a code review.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Having industry mentors at our local Dojo sessions.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Mixer events to educate our students as to the variety of pathways
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
they can follow when they graduate.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
and more.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
This past year set the stage but there will be some challenges moving
forward.
&lt;/p&gt;
&lt;p&gt;
The biggest one is continued outreach to high schools. Getting to the
students and their parents to let them know that we have a great
program. It&amp;#39;s also about convincing them to come to Hunter. Back in
the day CUNY was &amp;#34;the poor man&amp;#39;s Harvard&amp;#34; but open enrollment in the
1970s killed that reputation. CUNY has been making it&amp;#39;s way back and
Hunter has many excellent programs but reputations are decades in the
making and at Hunter CS we&amp;#39;re just starting to get the word out.
&lt;/p&gt;
&lt;p&gt;
The other big challenge will be with time. Right now, for the most
part, I&amp;#39;m a team of one. I have tremendous support from my colleagues
but they all have their own full time obligations and the overall
growth in Hunter CS has already put a strain on personnel and
resources.
&lt;/p&gt;
&lt;p&gt;
In spite of the challenges, I&amp;#39;m not complaining. This has been an
exciting year for Hunter CS and an exciting year for me to be a part
of it.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Breaking down problems and writing</title>
      <link>https://cestlaz.github.io/posts/whats-next/</link>
      <pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/whats-next/</guid>
      <description>&lt;p&gt;
This question appeared on Facebook a few days ago:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Does anyone have an effective way to teach students how to break down
a problem into steps and then solve each step one by one? I think my
students are struggling with a large question and breaking it in
subsequent parts.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
There were some good suggestions. I wanted to add something but didn&amp;#39;t
have time then so I thought I&amp;#39;d write it up now.
&lt;/p&gt;
&lt;p&gt;
As an aside, it took me forever to find the post again over on
Facebook. If there&amp;#39;s a way to mark posts or save a direct link I&amp;#39;d
love to hear it. I had to look through all the CS Ed groups I belong
to manually until I found it again.
&lt;/p&gt;
&lt;p&gt;
When I read the program I was reminded of a PD session we had to
attend back at Stuyvesant. Back then the fad was &lt;a href=&#34;https://en.wikipedia.org/wiki/Writing_across_the_curriculum&#34;&gt;Writing Across the
Curriculum&lt;/a&gt;. Every teacher in every class was to give some significant
writing assignment, evaluate it and provide feedback. Let&amp;#39;s forget the
fact that most of us never had any training or preparation to do so.
&lt;/p&gt;
&lt;p&gt;
On that PD day the guest speaker was &lt;a href=&#34;https://en.wikipedia.org/wiki/William_Zinsser&#34;&gt;William Zinsser&lt;/a&gt;. The first thing
he said was that what we were being asked to do by our principal was
bunk. He then proceeded to give advice on  simple good writing.
&lt;/p&gt;
&lt;p&gt;
The procedure he recommended following was to ask yourself (or have
the student ask themselves) &amp;#34;what does my audience need to know next?&amp;#34;
That&amp;#39;s your next sentence. Then ask the question again. Rinse and
repeat until done.
&lt;/p&gt;
&lt;p&gt;
It was simple and it made sense. It also applied to introductory CS
problems. When starting out, students have a limited CS / programming
tool box so a good question for them to ask when trying to solve a
problem is not only &amp;#34;what do I need to do next? but also &amp;#34;what can I
do next?&amp;#34;
&lt;/p&gt;
&lt;p&gt;
When students have a limited CS vocabulary and set of idioms - loops,
conditionals, functions, whatever, there will only be so many things
they can do to move a problem along. If they go through the things the
&lt;strong&gt;&lt;strong&gt;can&lt;/strong&gt;&lt;/strong&gt; do they will likely fall on to what they &lt;strong&gt;&lt;strong&gt;should&lt;/strong&gt;&lt;/strong&gt; do.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s similar to doing a proof in geometry. Students have a set of
givens. Given that set, what can they do? They only know so many
theorems at the beginning.
&lt;/p&gt;
&lt;p&gt;
Over time, they&amp;#39;ll recognize patterns and develop as problem solvers.
&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re part of the AP CS A teachers facebook group you probably saw
the question. Many good answers were posted. I just wanted to add this
thought to the collection.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New York State moving forward with CS Teacher Certification</title>
      <link>https://cestlaz.github.io/posts/ny-cs-certificate/</link>
      <pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/ny-cs-certificate/</guid>
      <description>&lt;p&gt;
Last April I woke up early and trekked up to Albany along with a few
of my Hunter College colleagues to share our thoughts on K12 Computer
Science teacher certification with the Board of Regents. We gave a
presentation to the Regents Higher Education Committee and afterwards
had a chance to talk with some of the Regents as well as other members
of the New York State Department of Education.
&lt;/p&gt;
&lt;p&gt;
I left feeling that our proposals were well received and I think
everyone present - both the Hunter and NYSED contingents hoped that
things would move forward on this important issue.
&lt;/p&gt;
&lt;p&gt;
Fast forward to today, December 8, 2017. I was up at the crack
of dawn. Driving in the dark in the snow from NYC to Albany to once
again attend a Board of Regents Higher Education Committee
meeting. This time, the agenda item was:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Proposed Amendments to Part 30 of the Regents Rules and Section 52.21
and Part 80 the Regulations of the Commissioner of Education Relating
to a New Certification Area and Tenure Area for Computer Science
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
No discussion or debate this time around just the proposal. If I
understand the process correctly, this should come up again at the
March meeting at which point it will be voted on. If approved, it
looks like we&amp;#39;ll have a pathway towards certification for CS teachers.
&lt;/p&gt;
&lt;p&gt;
I haven&amp;#39;t had a chance to dive into the details but at the meeting a
few key points came up:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
As the proposal indicates this will be a subject area in which a
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
teacher can be certified and be awarded tenure.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
There will be a traditional pathway for new teachers - Bachelors /
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Masters degree
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
There will be an alternative pathway for people entering from the
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
workforce
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
There will be an extension for teachers with another license so they
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
won&amp;#39;t have to give up tenure in their current license.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
There will be an &amp;#34;individual evaluation&amp;#34; pathway which sounds to me
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
like it could catch people who fall through the cracks.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
There looks to be a sensible ramp up period - until September 2022
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
There&amp;#39;s a grandfathering provision that looks to last 10 years.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
This sounds like a smart sensible plan. Multiple pathways, shallow
ramp up and provisions to protect existing teachers.
&lt;/p&gt;
&lt;p&gt;
Of course, the devil is in the details. What&amp;#39;s an approved program?
Can a grandfathered teacher teach all CS classes or just intro ones?
etc.
&lt;/p&gt;
&lt;p&gt;
As I said, I haven&amp;#39;t had a chance to dive into the details yet but
this is very exciting.
&lt;/p&gt;
&lt;p&gt;
Prior to the meeting I was chatting with a few other people
attending. One, a &lt;a href=&#34;http://www.uft.org/&#34;&gt;UFT&lt;/a&gt; representative was very excited about the
prospect. Another contingent, a group from &lt;a href=&#34;https://www.nysut.org/&#34;&gt;NYSUT&lt;/a&gt; was very much against
a new certification area. Their position was that this would create a
teacher shortage because no one would have a CS license and no one
would get one due to the difference in salary between teaching and the
tech industry. I&amp;#39;ve already written on how I feel that this is a &lt;a href=&#34;https://cestlaz.github.io/posts/will-we-lose-cs-teachers-to-industry&#34;&gt;red
herring&lt;/a&gt;. What shocked me though was their feeling that &amp;#34;we already
have many non-CS teachers effectively teaching CS across the
state. They&amp;#39;re doing a great job and don&amp;#39;t need any additional content
or pedagogical knowledge.&amp;#34; I think they&amp;#39;re wrong and I also think that
when we as a community talk about how our summer professional
development is all that&amp;#39;s needed, we undercut CS education and
the teaching profession as a whole.
&lt;/p&gt;
&lt;p&gt;
In any event this was a big step for New York. I tried to individually
thank as many of the participants as I could for helping shepherd this
along but could only speak to a few so I&amp;#39;ll just give a blanket thank
you here to the NY State Board of Regents, Board of Education and
State Education department.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code 2017 - Day 1</title>
      <link>https://cestlaz.github.io/posts/advent-2017-1/</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-2017-1/</guid>
      <description>&lt;p&gt;
It&amp;#39;s once again time for &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt;. That one a day programming
competition that&amp;#39;s been running now for three years.
&lt;/p&gt;
&lt;p&gt;
Here are some thoughts on &lt;a href=&#34;http://adventofcode.com/2017/day/1&#34;&gt;day 1&lt;/a&gt;. The core of the problem is that you
have a large string of digits and you have to calculate a
checksum. This is done by adding the sum of a subset of the
digits. Only the ones that are identical to the digit to their
right. To make it a little more interesting, the last digit wraps
around to the first for checksum purposes.
&lt;/p&gt;
&lt;p&gt;
For example, the input &lt;strong&gt;&lt;strong&gt;2234335&lt;/strong&gt;&lt;/strong&gt; leads to the calculate &lt;code&gt;2 + 3&lt;/code&gt; or
&lt;code&gt;5&lt;/code&gt;. The input &lt;strong&gt;&lt;strong&gt;234445662&lt;/strong&gt;&lt;/strong&gt; leads to &lt;code&gt;4+4+6+2&lt;/code&gt; or &lt;code&gt;16&lt;/code&gt;. We add 4 for
twice because the first four is adjacent the second and the second the
third. We add the 2 at the end because it wraps around to match the
one at the front.
&lt;/p&gt;
&lt;p&gt;
We first read in the data and strip off the trailing newline
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Then, since we can access the elements of the string as a list (or
array) it&amp;#39;s a simple loop to calculate the sum:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Pretty straightforward but I don&amp;#39;t like the special case of checking
the last element for the wraparound. Sometimes it&amp;#39;s possible to get
rid of edge cases like this by &lt;a href=&#34;https://cestlaz.github.io/posts/2014-02-26-change-the-data.md&#34;&gt;changing the data&lt;/a&gt;. We can do that here
by simply appending a copy of the first character to the end of the
list.
&lt;/p&gt;
&lt;p&gt;
This leads to a slightly cleaner solution:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This is pretty much what I&amp;#39;d expect from a Python programmer that&amp;#39;s
just starting out. We can use a couple of more advanced Python
features to make what I consider a more elegant solution.
&lt;/p&gt;
&lt;p&gt;
Python&amp;#39;s &lt;strong&gt;&lt;strong&gt;zip&lt;/strong&gt;&lt;/strong&gt; function takes two lists and interleaves them.
&lt;code&gt;zip(&amp;#34;abc&amp;#34;,&amp;#34;def&amp;#34;)&lt;/code&gt; will yield &lt;code&gt;[ (a,d), (b,e), (c,f)]&lt;/code&gt;. If the lists
are of different length, it just zips up until the shorter list is
exhausted. We can use array slicing to zip the input string with it&amp;#39;s
neighbor by using &lt;code&gt;new_list = zip(data,data[1:])&lt;/code&gt;. For the string &amp;#34;122344&amp;#39;
zipping gives us &lt;code&gt;[(1,2),(2,2),(2,3),(3,4),(4,4)]&lt;/code&gt;. We can put this in
a list comprehension that only keeps the tuples representing an
element with an identical neighbor and also converts it to an int:
&lt;code&gt;new_list = [int(a) for a,b in new_list if a==b]&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Finally, we can just calculate the sum. This leads to the following
complete solution:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
List comprehensions for the win!!!!
&lt;/p&gt;
&lt;p&gt;
Each Advent of Code problem has two parts. You unlock the second by
solving the first. Here, the wrinkle is that instead of checking each
digit with it&amp;#39;s neighbor to the right, you check it with the one
that&amp;#39;s halfway around the list.
&lt;/p&gt;
&lt;p&gt;
With loops, the solution is just a quick modification of part 1. We
just add half the length and use mod to find the digit to compare with:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I wanted to see if I could do this with a list comprehension
though. The trick was to figure out how to make two lists to zip
together to get the pairs to check then add. Here&amp;#39;s the solution:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The insight was that we could just make a second list that starts
halfway through and then wraps around. I did this by adding
&lt;code&gt;data[l//2:] + data&lt;/code&gt;. &lt;code&gt;l//2&lt;/code&gt; is the integer division of the length (in
Python3). &lt;code&gt;data[l//2:]&lt;/code&gt; represents the second half of data (from the
midway point to the end). Technically I should have only added the second
half of data: &lt;code&gt;data[l//2:] + data[:l//2]&lt;/code&gt; where &lt;code&gt;data[:l//2]&lt;/code&gt; gives us
the first half of the list but since zip will just stop when it
exhausts the shorter list, this wasn&amp;#39;t necessary.
&lt;/p&gt;
&lt;p&gt;
Day 2 also has a nice list comprehension based solution. Maybe I&amp;#39;ll
write that up later.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Motivating and understanding quicksort</title>
      <link>https://cestlaz.github.io/posts/quick-sort-starting/</link>
      <pubDate>Tue, 21 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/quick-sort-starting/</guid>
      <description>&lt;p&gt;
Thks question was posed the other day - how can one get students to
truly understand the quicksort algorithm?
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve written a few posts about quicksort. The last time I did a &lt;a href=&#34;https://cestlaz.github.io/posts/2014-03-12-select-to-sort.html/&#34;&gt;lesson
writeup&lt;/a&gt; on the subject I wrote about first looking and quickselect and
then moving to the quicksort. The class was first faced with the
problem of writing a routine to find the Kth smallest item in an
unsorted data set. The first solution was n^2 and then refined to a
quickselect. This led directly to the quicksort.
&lt;/p&gt;
&lt;p&gt;
I liked the lesson and I think it worked well when I taught it but
that was partly due to the overall tenor of that particular group of
students.
&lt;/p&gt;
&lt;p&gt;
A similar approach develops the quicksort in a similar way but is
both more direct and accessible.
&lt;/p&gt;
&lt;p&gt;
The motivating problem is to put one item in a data set in its proper
place. You could select one person in class and arrange the class so
that the selected student is in their proper size place, that is
everyone shorter on one side, taller on the other. You could also do
this for age. A similar exercise could be done with any number of
manipulatives.
&lt;/p&gt;
&lt;p&gt;
This operation of arranging the rest of the set around one selected
item or person is very easy and in fact it&amp;#39;s trivial to show that this
can be done in linear time.
&lt;/p&gt;
&lt;p&gt;
Once we&amp;#39;ve done this arrangement, we can discuss what we can infer
from this new arrangement. We can now tell that:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
everyone to the left of the &amp;#34;pivot&amp;#34; is less than the pivot
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
everyone to the right is greater
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The pivot element is at its true location if the list were
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
sorted. That is, if we started arranging around item k, then we&amp;#39;ve
moved item k to the kth location in the dataset.
&lt;/p&gt;
&lt;p&gt;
From here it&amp;#39;s a small jump to the quicksort algorithm, just repeat
the process on the left and right data sets.
&lt;/p&gt;
&lt;p&gt;
This approach not only makes the algorithm and its development clear
and simple but it also can be used to illustrate the worst case n^2
behavior.
&lt;/p&gt;
&lt;p&gt;
The whole thing, minus the coding, can also be done as an unplugged activity.
&lt;/p&gt;
&lt;p&gt;
In case anyone&amp;#39;s interested, I also wrote a post on subtle
implementation errors when writing the quicksort (&lt;a href=&#34;https://cestlaz.github.io/posts/2014-03-17-subtle-errors-sorting.html&#34;&gt;here&lt;/a&gt;) and also
looking at the qucksort from the point of view of different
programming paradigms (&lt;a href=&#34;https://cestlaz.github.io/posts/2010-03-14-sorting-from-top-and-from-bottom.html&#34;&gt;here&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
Enjoy.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Professional Development beyond Scratch</title>
      <link>https://cestlaz.github.io/posts/election-day-pd-2017/</link>
      <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/election-day-pd-2017/</guid>
      <description>&lt;p&gt;
Today was Election Day. One of the few days each year when students
stay home and teachers spend all day attending what is generously
known as professional development.
&lt;/p&gt;
&lt;p&gt;
Years ago I was in a room with a few colleagues when my friend Dave -
one of the best math teachers I know said &amp;#34;you know, every time we
have a PD day in NJ and my wife and I have to scramble to take care of
the kids I get a little annoyed but then think I shouldn&amp;#39;t get annoyed
since they&amp;#39;re spending the day doing all sorts of valuable PD.&amp;#34; He
then said &amp;#34;but then I realize that their PD is probably about as
useful as our PD and I get really angry.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
There you have it. This is not to say that there is no good PD but it
seems that the professional development opportunities provided by our
schools have over the years ranged from useless to insulting with
maybe a small bright spot here and there. Historically it&amp;#39;s been worse
for CS teachers because we get lumped in with math teachers and have
to spend the day learning about tools and techniques we&amp;#39;ll never use
or discussing curricula we never teach.
&lt;/p&gt;
&lt;p&gt;
So, when I spoke to JonAlf about rescuing the Stuy teachers for the
day and hosting them at Hunter, he and the other CS teachers were
pretty excited. It wasn&amp;#39;t as though I had the magic PD answer but I
was going to provide a space and we&amp;#39;d figure out together what would
be productive and valuable for them.
&lt;/p&gt;
&lt;p&gt;
As it turns out, I&amp;#39;ve been spending a good amount of time these past
few weeks visiting high schools to talk about Hunter CS and when I was
at Bronx Science the topic of Election Day PD came up and I thought
that it would be nice to get the Bronx Science and Stuy teachers
together. After thinking about it more, I recalled that there were few
good PD opportunities for CS teachers who taught advanced classes as
opposed to all the CS PD floating around these days at more of a
beginner level.
&lt;/p&gt;
&lt;p&gt;
I thought that we could change this. In the end, I hosted PD today and
had teachers from Stuyvesant, Bronx Science, Brooklyn Tech, and the
Manhattan Hunter Science High School in attendance. I invited teachers
from a few more schools but in the end we had those four schools and
seventeen teachers.
&lt;/p&gt;
&lt;p&gt;
The original agenda was:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
09:00 - 10:00 : Each school describes it&amp;#39;s program and courses
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
10:00 - 11:00 : An intro to Git and GitHub for the classroom
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
10:00 - 11:45 : Sharing neat lessons
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
11:45 - 12:00 : Presentation by &lt;a href=&#34;http://chicktech.org&#34;&gt;ChickTech&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
12:00 - 01:00 : Lunch
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
01:00 - End   : Small group lesson and curriculum work
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Oh boy did I mess up on the timing. The description and
discussion of school programs took all morning. It was interesting to
hear how each school&amp;#39;s program evolved and how they fit into the
school&amp;#39;s culture. Brooklyn Tech, for instance is a school where
students declare majors. This has a big impact on what classes kids
have to take and are able to take. This is very different from Stuy or
Science where kids programs are more open ended or MHSHS which is a
much smaller school and has restrictions related to size. It was also
interesting to note Brooklyn Tech&amp;#39;s decision to have every student
take APCS-P. Interesting because Brooklyn Tech is one of the country&amp;#39;s
largest high schools and most of them should have done well on the
exam. That gave NYC around 1,400 passing AP scores in one shot. On
the other hand none of the other schools present today offered APCS-P
but did have their own intro CS class that students took prior to
APCS-A.
&lt;/p&gt;
&lt;p&gt;
We finished the morning with a visit by Heather from
&lt;a href=&#34;http://chicktech.org&#34;&gt;ChickTech&lt;/a&gt;. ChickTech is a non-profit dedicated to retaining women in
Tech. It works with both girls in K12 and also those in industry. My
hope was to get a conversation started and see if there were some
potential avenues of partnership between the organization and the
schools.
&lt;/p&gt;
&lt;p&gt;
After lunch, the group decided that we should do the Git/GitHub
workshop and JonAlf obliged.
&lt;/p&gt;
&lt;p&gt;
Overall I think the day was a success.
&lt;/p&gt;
&lt;p&gt;
My hope is that today&amp;#39;s attendees can form a core group of CS teachers
who teach more advanced courses and we can form something of a support
group for each other.
&lt;/p&gt;
&lt;p&gt;
I plan to try to facilitate future meetings and hopefully we&amp;#39;ll be
able to attract more teachers to our group.
&lt;/p&gt;
&lt;p&gt;
All in all I&amp;#39;m very happy with how the day went.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Early Interesting Problems - Happy Ladybugs</title>
      <link>https://cestlaz.github.io/posts/happy_ladybug/</link>
      <pubDate>Mon, 23 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/happy_ladybug/</guid>
      <description>&lt;p&gt;
We all love interesting problems. The trouble is that it&amp;#39;s hard to
find suitably interesting problems for students when they&amp;#39;re just
learning the basics. In the very beginning the problems practically
dictate the solution:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
loop over a list and add all the elements or calculate the sum of a
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
list of integers.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Determine if  number is prime
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Convert a word into pig-Latin
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
It&amp;#39;s not that there&amp;#39;s no thought involved in solving these but the
students already know the mechanics of solving these by hand so it&amp;#39;s a
direct translation into a program.
&lt;/p&gt;
&lt;p&gt;
This isn&amp;#39;t a bad thing and it is important but it&amp;#39;s fun when we get to the next
level. I&amp;#39;ve found that a number of the &lt;a href=&#34;http://hackerrank.com&#34;&gt;Hacker Rank&lt;/a&gt; archived
competitions have &amp;#34;easy&amp;#34; problems that can be a good fit for
beginners. One that I found and really like is &lt;a href=&#34;https://www.hackerrank.com/challenges/happy-ladybugs&#34;&gt;Happy Ladybugs&lt;/a&gt; problem.
&lt;/p&gt;
&lt;p&gt;
The problems is basically as follows:
&lt;/p&gt;
&lt;p&gt;
You get a string of letters. Each letter represents a ladybug of a
different color. Each letter also represents a location of the
ladybug.  A space (or underscore in the actual problem) represents a
free space. For example &amp;#34;AABC DDA&amp;#34; is a line of 2 A colored ladybugs
followed by a B colored one, C colored one, a blank space, 2 D colored and then one
more A colored.
&lt;/p&gt;
&lt;p&gt;
You can rearrange the line of ladybugs by swapping any ladybug with a
blank space.
&lt;/p&gt;
&lt;p&gt;
A ladybug is happy if it is next to another ladybug of the same
color. The challenge is to determine if all the ladybugs can be made
happy.
&lt;/p&gt;
&lt;p&gt;
I like this problem because while it is non-trivial it is very
approachable.
&lt;/p&gt;
&lt;p&gt;
To me, the key is that while you can rearrange the list you
don&amp;#39;t have to. You only have to determine if it is possible to make
the ladybugs happy. You don&amp;#39;t actually have to do so.
&lt;/p&gt;
&lt;p&gt;
The edge cases are pretty easy to deal with - a string of length one
or two but then a little thought is required.
&lt;/p&gt;
&lt;p&gt;
The first insight is that if there are no spaces, you can&amp;#39;t rearrange
the ladybugs so all you have to do is scan through the string to test
to see if every ladybug has a neighbor of the same color.
&lt;/p&gt;
&lt;p&gt;
The next insight, and the big one is that if you have at least one
space you can arbitrarily re-order the string. You can show this is
possible  by using a single space to swap any two elements.
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The final insight is that since you can arbitrarily re-order the
ladybugs as long as you have at least 2 of each color, you can make
them all happy.
&lt;/p&gt;
&lt;p&gt;
Since my class is currently just starting dictionaries in Python we
solved this with lists and then transitioned to dictionaries.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a dictionary based solution:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I love problems like these.
&lt;/p&gt;
&lt;p&gt;
I just wish there was an easy way to find all contest problems of a
certain level like &amp;#34;easy&amp;#34; or &amp;#34;medium.&amp;#34; If anybody knows please share
in the comments.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>There&#39;s always something to learn (from your students)</title>
      <link>https://cestlaz.github.io/posts/when-they-change-the-script/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/when-they-change-the-script/</guid>
      <description>&lt;p&gt;
One thing I&amp;#39;ve learned from teaching is that there&amp;#39;s always something
new to learn. For the kids, yes, but I&amp;#39;m talking about for the
teacher.
&lt;/p&gt;
&lt;p&gt;
The other day, I taught a lesson I&amp;#39;ve taught many times. Find the mode
of a data set. That&amp;#39;s the problem that they solve but the lesson is
really about run time complexity, hidden complexity and using data
structures in alternate ways.
&lt;/p&gt;
&lt;p&gt;
I blogged about this &lt;a href=&#34;https://cestlaz.github.io/posts/2013-03-23-Who_won_the_election-Quadratic_to_Linear_Time.md&#34;&gt;before&lt;/a&gt; so you can get an earlier take there
although the code isn&amp;#39;t formatted correctly due to blog conversions.
&lt;/p&gt;
&lt;p&gt;
As with the last time, the students  had already written code to find
the largest value in a list and also to find the frequency of an item
in a list.
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
They had to write mode prior to the class. In the past, students would
generally come up with something like this:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
They&amp;#39;d use their existing knowledge and the &amp;#39;find the largest&amp;#39; idiom
to find the mode by:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
find the frequency of the first item and assume it&amp;#39;s the mode so far
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
for each item in the list
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
find the frequency of that idem
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
if it occurs more than the mode so far then it becomes the new
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
mode so far
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a lot of good in this solution. The kids incrementally develop
a solution, they use and exctend code and concepts they already know
and understand and it&amp;#39;s clear and understandable.
&lt;/p&gt;
&lt;p&gt;
We would then run the code on larger and larger data sets and notice
that it gets slow pretty quickly. This leads to an informal discussion
of run time and the fact that there&amp;#39;s hidden complexity â€“ the call to
&lt;code&gt;freq&lt;/code&gt; in the main loop introduces a linear component so we have a
loop within a loop and an N^2 routine.
&lt;/p&gt;
&lt;p&gt;
The big takeaway is get a feel for run time and to be aware of hidden
complexity. We then move to a linear solution by using a list as
buckets. You can read more about that in the &lt;a href=&#34;https://cestlaz.github.io/posts/2013-03-23-Who_won_the_election-Quadratic_to_Linear_Time.md&#34;&gt;original post&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
What was interesting this time around was that most of the kids came
up with a solution more like this:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Instead of calculating the frequency inside the loop they made a list
of frequencies. &lt;code&gt;freq[0]&lt;/code&gt; had the frequency of &lt;code&gt;l[0]&lt;/code&gt;, &lt;code&gt;freq[1]&lt;/code&gt; the
frequency of &lt;code&gt;l[1]&lt;/code&gt; etc. They then loop through that &lt;code&gt;freq&lt;/code&gt; list to
find the largest element and that&amp;#39;s the index of the mode value in the
original list.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s functionally the same as the first solution but in some ways it&amp;#39;s
very different. They built the data set they needed ahead of time
instead of calculating the data on the fly and they used the concept
of parallel lists.
&lt;/p&gt;
&lt;p&gt;
I like the solution and it didn&amp;#39;t prevent us from getting to the run
time stuff but this did give me something to think about.
&lt;/p&gt;
&lt;p&gt;
Why did this class led them largely to a different solution than the
classes I&amp;#39;ve taught in the class. There are a lot of things to ponder
since it&amp;#39;s a college class that meets twice a week with kids from a
range of backgrounds (CS and otherwise) vs a high school class that
meets 5 days a week and the kids all had the same in class experience
prior to this lesson. Did I do something differently before hand? Some
assignments? Something I modeled?  I&amp;#39;m not sure but it&amp;#39;s something I&amp;#39;m
going to ponder.
&lt;/p&gt;
&lt;p&gt;
It will interesting to see if this was a one shot deal and my current
class will solve problems as I predict moving forward or if I&amp;#39;m going
to get to see a lot of new things.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A test result is just a test result</title>
      <link>https://cestlaz.github.io/posts/ap-results-measure-of-curriculum/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/ap-results-measure-of-curriculum/</guid>
      <description>
&lt;p&gt;
This past weekend was &lt;a href=&#34;http://catskillsconf.com&#34;&gt;Catskillsconf&lt;/a&gt; - my favorite event of the
year. I spent the weekend up in Ulster County with a bunch of my
students. some great friends old and new, and Devorah. It was a great
weekend but I was mostly offline.
&lt;/p&gt;
&lt;p&gt;
As a result I missed a rather heated discussion in the CS Ed Facebook
groups. The debate was over whether or not Strong AP CSP exam results
are indicative of a good curriculum or good professional development (PD).
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
TL;DR - NO!!!!!
&lt;/h2&gt;
&lt;p&gt;
Further, anyone who thinks that a set of exam results can tell you
that a particular PD sequence or curriculum is good shouldn&amp;#39;t be
allowed to call themselves a teacher and I don&amp;#39;t want them anywhere
near my kids.
&lt;/p&gt;
&lt;p&gt;
I guess that language is strong, even for me but it&amp;#39;s true.
&lt;/p&gt;
&lt;p&gt;
Tests are designed to assess students and many tests don&amp;#39;t even do
that well. They shouldn&amp;#39;t be used to measure something further
removed.
&lt;/p&gt;
&lt;p&gt;
The last time this idea made its rounds was using student test results
for teacher evaluation. They do that in NY. A judge called the
practice &amp;#34;capricious&amp;#34; and &amp;#34;arbitrary.&amp;#34; My friend and former
colleague Gary Rubinstein showed a year or so ago that standardized
test scores varied enough from year to year so as to make the ratings
useless [fn::sorry, I just got back from the weekend trip and am too tired
to find the link. You can go to his site and search and while you&amp;#39;re
there, there&amp;#39;s lots of good stuff to read.]
&lt;/p&gt;
&lt;p&gt;
Using test scores to say a PD sequence is good? What if that PD
focused on test prep? What if it did nothing in particular? When I was
at Stuy and when I was at Seward Park the Calc teachers&amp;#39; students had
great AP results. I can tell you that none of those teachers had any
quality PD specific to AP Calc.
&lt;/p&gt;
&lt;p&gt;
Curriculum? My mentor and friend Danny Jaye told me many times - &amp;#34;A
great teacher can save a class from a  horrible curriculum but a great
curriculum will do nothing for a class with a horrible teacher.&amp;#34; He
was right. Again, what if the curriculum encourages test prep. What if
pressure on the teacher encourages them to focus on test prep
regardless of curriculum or PD (see my recent &lt;a href=&#34;http://cestlaz.github.io/posts/standards-who-for&#34;&gt;post&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
An AP test measures one thing - how well the student did on the AP
test. There are so many variables that go into a class:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Is it first period at 8:00am?
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Is it the last class of the day?
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Is it before lunch or right afterwards?
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
What about right after Gym.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
What&amp;#39;s the mix of students - every class is different
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Is the teacher teaching the subject once a day? Two times? Five
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
times?
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
How large is the class
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
How many other classes are the kids taking?
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The list goes on and on. There are so many contributing factors that
you just can&amp;#39;t say &amp;#34;Good test results = good curriculum&amp;#34; or &amp;#34;good test
results = good PD.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
Want to know if a curriculum is good - have experienced teachers who
know their subject run it a few times through and ask them. Same for
PD.
&lt;/p&gt;
&lt;p&gt;
Teachers know education a lot better than test makers, curriculum
developers and PD providers. How about listening to them for a change?
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Standards - Who are they for?</title>
      <link>https://cestlaz.github.io/posts/standards-who-for/</link>
      <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/standards-who-for/</guid>
      <description>&lt;p&gt;
The big push at last year&amp;#39;s CSTA conference was the release of the new
CSTA K12 standards. It seemed that every other session was pushing
them in one way or another. I&amp;#39;ve been meaning to share my thoughts
about them or, more specifically, learning standards in general for a
while but with announcement about federal funding for CS coming from
the White House last week I thought it was time.
&lt;/p&gt;
&lt;p&gt;
Before diving into CS standards lets talk about math.
&lt;/p&gt;
&lt;p&gt;
To start I have yet to meet a math teacher that needs
&amp;#34;the Standards&amp;#34; to know what to teach. Some how or other math teachers know
they&amp;#39;re supposed to teach in an algebra or geometry class. When NY
moved to &amp;#34;integrated math&amp;#34; teachers were able to re-sequence classes
without the benefit of &amp;#34;the standards&amp;#34; and when NY went back to
Algebra, Geometry, then Alg 2 and Trig, teachers had no problem
reorganizing classes again.
&lt;/p&gt;
&lt;p&gt;
New teachers didn&amp;#39;t go to &amp;#34;the Standards&amp;#34; to learn the ropes. Schools
defined syllabi, teachers observed each other, shared resources, used
lesson plan books and in general knew what they were supposed to teach
and at what level.
&lt;/p&gt;
&lt;p&gt;
In my quarter century of teaching, always in a math department we
spent a lot of time talking about what we taught, when we taught it,
how we taught it and at what level but until common core was forced
down our throats we NEVER discussed &amp;#34;the Standards.&amp;#34; We discussed our
students, where we thought we could take them, and how to get them
there. Somehow our students did alright.
&lt;/p&gt;
&lt;p&gt;
More recently, the push has been on &amp;#34;The Standards,&amp;#34; common core in particular.
&lt;/p&gt;
&lt;p&gt;
Common standards sound good - kids in every school will learn the same
things at the same level - but I contend that they aren&amp;#39;t about
learning. They&amp;#39;re about testing.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s look at a few of the math standards. These were pulled directly
from the Common Core:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Derive the equation of a circle of given center and radius using the
Pythagorean Theorem; complete the square to find the center and radius
of a circle given by an equation.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
Use coordinates to prove simple geometric theorems algebraically. For
example, prove or disprove that a figure defined by four given points
in the coordinate plane is a rectangle; prove or disprove that the
point (1, âˆš3) lies on the circle centered at the origin and containing
the point (0, 2).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
Derive using similarity the fact that the length of the arc
intercepted by an angle is proportional to the radius, and define the
radian measure of the angle as the constant of proportionality; derive
the formula for the area of a sector.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
These aren&amp;#39;t about deep thinking and problem solving. They&amp;#39;re about
very specific skills or techniques. They&amp;#39;re also easy to put on a
test. Much easier then assessing a students real problem solving ability.
&lt;/p&gt;
&lt;p&gt;
Common Core comes hand in hand with standardized testing which is then
used to punish students, teachers, and schools.
&lt;/p&gt;
&lt;p&gt;
We keep hearing about individualized instruction - meeting the kids
where they are but the standards tell us that kids MUST know specific
things at specific times. You can&amp;#39;t have both. In the best case, with
&amp;#34;the standards&amp;#34; we can only meet students &amp;#34;where they are&amp;#34; within
annual bands.
&lt;/p&gt;
&lt;p&gt;
What has this led to? Narrowing curriculum for one thing. Since schools are
evaluated based on the standardized exam in core subjects focus
narrows and other subjects fall by the wayside.
&lt;/p&gt;
&lt;p&gt;
Arguably worse is selective teaching within common core subjects.
&lt;/p&gt;
&lt;p&gt;
Take for example, Geometry. The course is really &amp;#34;Logic and Deductive
Reasoning using Euclidean Geometry as a Platform&amp;#34; but it&amp;#39;s generally
called Geometry. This class is supposed to be about getting kids to
think. I&amp;#39;ve already shared a few standards above but let me tell you
about an open secret - many schools don&amp;#39;t really teach proof -
arguably the most important part of the class.
&lt;/p&gt;
&lt;p&gt;
In my last year at Stuy I graded Geometry regents for the city. I
graded exams for two highly regarded unscreened schools. One that was
lauded in a State of the Union address and the other equally hyped. I
graded all of each school&amp;#39;s students geometry regents so it wasn&amp;#39;t
just a sampling. Out of all the papers, only two or three scored more
than 2 out of 9 points for the proof question and most were entirely
left blank.
&lt;/p&gt;
&lt;p&gt;
What happened? Proof is hard to teach and hard to learn but it&amp;#39;s also
only a small part of the standardized exam. It&amp;#39;s critical for a
school&amp;#39;s survival and for the student to graduate that a passing score
is earned. Rather than spending a large amount of time on few points
and probably get a limited return I&amp;#39;ve been told that many schools
spend much more time on topics that area easier to teach and have more
weight on the exam. This makes the school look better and helps the
student graduate but arguably the most important aspect of the course
has been minimized.
&lt;/p&gt;
&lt;p&gt;
High stakes testing leads to gaming the system. Common core standards
come hand in hand with high stakes testing. We see the same with AP
exams - there are schools that force students to take exams even when
they are woefully prepared and mostly fail because this helps the
school shoot up in the ratings.
&lt;/p&gt;
&lt;p&gt;
This is what the common core math standards have given us. They&amp;#39;re not
for teachers - we don&amp;#39;t need them - we know what to teach and only
wish that the bean counters would indeed allow us to meet students
where they are. Standards are about testing.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s move on to CS standards.
&lt;/p&gt;
&lt;p&gt;
It might not be fair to compare CS to math since K12 math education
has been around much longer and is more well defined and in theory
having a set of standards gives us a common language to discuss,
compare, and contrast all the content providers and curriculum
developers out there. On the other hand, I also believe that with well
prepared teachers who understand content and pedagogy the value isn&amp;#39;t
all that great. It&amp;#39;s also worth considering the fact that nothing
really makes the CSTA Standard  writers special. There&amp;#39;s no reason to
think that another group - be they a handful of teachers or a content
provider can&amp;#39;t do a comparable job.
&lt;/p&gt;
&lt;p&gt;
Here are some selections from the CSTA standards:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Design and develop a software artifact working in a team.
&lt;/p&gt;
&lt;p&gt;
Compare and contrast various software licensing schemes (e.g., open source, freeware,
commercial).
&lt;/p&gt;
&lt;p&gt;
Design, develop, and implement a computing artifact that responds to an event (e.g., robot
that responds to a sensor, mobile app that responds to a text message, sprite that responds
to a broadcas
&lt;/p&gt;
&lt;p&gt;
Demonstrate the value of abstraction for managing problem complexity (e.g., using a list
instead of discrete variables).
&lt;/p&gt;
&lt;p&gt;
Design algorithms u sing sequence, selection, and iteration.
&lt;/p&gt;
&lt;p&gt;
Discuss techniques used to store, process, and retrieve different amounts of information
(e.g., files, databases, data warehouses).
&lt;/p&gt;
&lt;p&gt;
Compare and debate the positive and negative impacts of computing on behavior and
culture (e.g., evolution from hitchhiking to ridesharing apps, online accommodation rental
services).
&lt;/p&gt;
&lt;p&gt;
Use simple encryption and decryption algorithms to transmit/receive an encrypted
message.
&lt;/p&gt;
&lt;p&gt;
Decompose a problem by creating new data types, functions, or classes.
&lt;/p&gt;
&lt;p&gt;
Evaluate algorithms (e.g., sorting, searching) in terms of their efficiency, correctness, and
clarity.
&lt;/p&gt;
&lt;p&gt;
Use data analysis to identify significant patterns in complex systems (e.g., take existing data
sets and make sense of them).
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
There&amp;#39;s nothing wrong with these. They aren&amp;#39;t specific enough to
develop lessons from but, they can provide a
consistent framework to discuss different offerings. Were the much
more specific, we&amp;#39;d have the same issue I railed about with the math
standards so this is a good thing.
&lt;/p&gt;
&lt;p&gt;
Actually, in general, I don&amp;#39;t have a problem with these standards. I
might agree with some parts and disagree with others but that&amp;#39;s
neither here nor there.
&lt;/p&gt;
&lt;p&gt;
To me the big concern on standards is what will they actually be used
for. It&amp;#39;s nice to think that it&amp;#39;s a set of guidelines from which we
can develop strong local experiences but I think this is somewhat
naive. As states and the federal government bring CS Education into
the fold there&amp;#39;s no reason to believe that CS will be special. CS Ed
will go the way of other subject areas. That means that whatever
standards governments adopt, they will likely be used for high stakes
tests rather than for true education. If you look to see how the
sausage is made you can see the harm standards and standardized
testing has wrought  in subjects like math. CS Ed won&amp;#39;t be far behind.
&lt;/p&gt;
&lt;p&gt;
While we should be proud of all the work that&amp;#39;s going on in our
community it&amp;#39;s more important now than ever to keep an eye on the
overall big picture and be aware of how work intended for one purpose
within the community can be used very differently by those outside of
it. This is particularly important for advocates  not in public schools. Public
schools educate the majority of American students so CS4All means
public schools. Standardized testing won&amp;#39;t affect private schools (or
private charters in many cases) nor will they affect colleges and in
fact will be a boon to EdTech companies selling there wares. Many of
the loudest voices in CSEd come from these contingents - it&amp;#39;s
important that they look to the greater issues, form their own
opinions, and then act on what they believe is right.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programming Idioms</title>
      <link>https://cestlaz.github.io/posts/programming-idioms/</link>
      <pubDate>Sun, 08 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/programming-idioms/</guid>
      <description>&lt;p&gt;
I just read Jeff Yearout&amp;#39;s recent post titled &lt;a href=&#34;http://k12csteaching.blogspot.com/2017/10/the-beginners-garden-of-concepts.html&#34;&gt;The Beginner&amp;#39;s Garden of
Concepts&lt;/a&gt;. Not directly related but it got me thinking about
programming idioms.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been using the phrase &amp;#34;programming idiom&amp;#34; for years to describe a
short useful recurring code construct. I didn&amp;#39;t realize that it was
officially &amp;#34;a thing&amp;#34; until doing a web search on the phrase years
later.
&lt;/p&gt;
&lt;p&gt;
As our students grow from newbies on I think it&amp;#39;s helpful for them to
see recurring and related patterns and programming idioms gives us a
name to apply to many beginner patterns. An early idiom might be
&amp;#34;finding the smallest in a list:&amp;#34;
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Another is the very similar and more general &amp;#34;do something on every
item in a list:&amp;#34;
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
By talking about constructs like these as idioms it helps students see
and develop coding patterns. It also helps them to build mental
abstractions. Each of the above idioms are a few lines of code but
each are also a single concept. Students learn to think of them as the
concept.
&lt;/p&gt;
&lt;p&gt;
When students learn about list comprehensions in python they&amp;#39;ll
rewrite the &amp;#34;do somethingâ€¦&amp;#34; more like this:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
but the pattern or idea is the same.
&lt;/p&gt;
&lt;p&gt;
Other early idioms might include swapping variables:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and loops until an exit condition are met:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Even more difficult concepts like recursion can be described in an
idiomatic way:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Patterns like these, or idioms, come up over and over again. We don&amp;#39;t
have to explicitly mention them in our teaching but I think it&amp;#39;s
helpful to our students if we do.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Awesome Cs Revisited</title>
      <link>https://cestlaz.github.io/posts/awesome-cs-revisted/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/awesome-cs-revisted/</guid>
      <description>&lt;p&gt;
Saw this tweet the other day so I though I would try to plug the
&lt;a href=&#34;https://github.com/zamansky/awesome-cs-education&#34;&gt;Awesome CS Education&lt;/a&gt; list I started on GitHub:
&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/csteachers?src=hash&#34;&gt;#csteachers&lt;/a&gt;...didn&amp;#39;t I see a list of CS teacher blogs here recently?&lt;/p&gt;&amp;mdash; Pam Whitlock (@PamWhitlock1) &lt;a href=&#34;https://twitter.com/PamWhitlock1/status/910662628757864448&#34;&gt;September 21, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
To answer the tweet, the closet thing I know to a list is &lt;a href=&#34;https://twitter.com/alfredtwo&#34;&gt;Alfred
Thompson&lt;/a&gt;&amp;#39;s blog roll which is actually a post he wrote on his blog
in 2012. Unfortunately his list can be hard to find and is somewhat
out of date.
&lt;/p&gt;
&lt;p&gt;
The idea of an &amp;#34;awesome&amp;#34; list is publicly hosting a simple site that
is community driven and anyone can suggest additions and edits.
&lt;/p&gt;
&lt;p&gt;
I put up a starter &lt;a href=&#34;https://github.com/zamansky/awesome-cs-education&#34;&gt;here&lt;/a&gt; and a few people have contributed but I&amp;#39;d love
to get more people involved. Awesome lists have a number of advantages
over other repositories.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Unlike blog posts, the site is easy to find.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Unlike private mailing lists or Facebook, anyone can see the content.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Anyone can suggest additions (although you need to create a Github
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
account).
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Anyone can download or fork the site.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
It&amp;#39;s essentially plain text and is easy to edit (just read the
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/zamansky/awesome-cs-education/blob/master/contributing.org&#34;&gt;contribution guide&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
So, there you have it. If you have a blog or resource to share please
submit a pull request. Over time this could be a terrific single
starting point for educators to get to a wealth of resources.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Term New Tool - Thonny, a Python IDE</title>
      <link>https://cestlaz.github.io/posts/new-tool-thonny/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/new-tool-thonny/</guid>
      <description>&lt;p&gt;
Last year I &lt;a href=&#34;https://cestlaz.github.io/posts/new-term-new-tool-replit&#34;&gt;wrote about&lt;/a&gt; &lt;a href=&#34;http://repl.it&#34;&gt;repl.it&lt;/a&gt;, an online IDE that supports multiple
languages. At the time it had some rudimentary classroom support and
since I started using it, repl.it has become better and better. I
used it last year with my class because I had to start the year in a
lab where I couldn&amp;#39;t easily install my own software. I&amp;#39;ll continue to
use repl.it - mostly for it&amp;#39;s ability to schedule publish and manage
assignments but when possible, I like having my students work
locally.
&lt;/p&gt;
&lt;p&gt;
This year I&amp;#39;m excited about another tool - &lt;a href=&#34;http://thonny.org&#34;&gt;Thonny&lt;/a&gt;. Thonny&amp;#39;s a simple
Python IDE designed for beginners. I discovered it last year but at a
time when it was impractical for me to use with my students. This
year I can and I&amp;#39;m really liking it. I&amp;#39;m still an Emacs guy and will
continue to use Emacs for my python development (&lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-12-python/&#34;&gt;video 1&lt;/a&gt;, &lt;a href=&#34;http://cestlaz.github.io/posts/using-emacs-13-yasnippet&#34;&gt;video 2&lt;/a&gt;) but
for beginners I think Thonny is the way to go.
&lt;/p&gt;
&lt;p&gt;
Some of Thonny&amp;#39;s highlights:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
An integrated Python 3 virtual environment making for ease of
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
installation and consistency across student installs
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
A debugger that shows how expressions are evaluated
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Great visualizations of function calls that make it easier to
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
understand the call stack and scope
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
The ability to look at memory to understand references.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Rather than go into the gory details in text, I put together this
video:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/lWaCl0WjNZI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>I Believe CS Teachers are Smart and Capable</title>
      <link>https://cestlaz.github.io/posts/cs-teachers-smart/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/cs-teachers-smart/</guid>
      <description>&lt;p&gt;
People sometimes accuse me of being an elitist CS snob that I feel that CS
teachers have to have advanced CS degrees.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s not that at all. Rather, I feel that CS teachers are smart and
capable. Circumstances frequently result in a teacher in front of a CS
class with limited content and pedagogical content knowledge. It&amp;#39;s not
ideal but it&amp;#39;s reality. Of course I feel that we should do everything
to support and encourage these teachers but we should also insist that
after a reasonable period of time, they know their stuff.
&lt;/p&gt;
&lt;p&gt;
This is why I hate it when I hear people in the CS Ed community say
something is too hard. Git&amp;#39;s too hard. The command line is too
hard. Functional programming&amp;#39;s too hard [fn::whether or not any of
these topics are appropriate for a particular course is discussion for
another time]. That&amp;#39;s all nonsense. At last
year&amp;#39;s SIGCSE conference people from a state, I forget which, was
considering not using the Praxis exam for CS teacher certification
even though the state uses the Praxis exam for other subject
areas. They claimed that the praxis was too hard for CS teachers.
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/praxis.jpg&#34; alt=&#34;/img/praxis.jpg&#34; title=&#34;/img/praxis.jpg&#34; align=&#34;center&#34;/&gt;
&lt;p&gt;
I haven&amp;#39;t taken the Praxis exam but some friends have. It doesn&amp;#39;t
appear to be unreasonable at all[fn::although I&amp;#39;m not a big believer
in standardized exams for certification or in general.].
&lt;/p&gt;
&lt;p&gt;
While I can certainly understand a teacher not knowing much when they
start - thrown in due to necessity I think it&amp;#39;s ridiculous not to
insist that they ultimately get to real mastery.
&lt;/p&gt;
&lt;p&gt;
A math teacher generally has to know math beyond calculus. Science
teachers have to have gotten through Orgo. English teachers have to
understand Joyce. &lt;strong&gt;&lt;strong&gt;THIS IS HARD STUFF!!!!&lt;/strong&gt;&lt;/strong&gt;[fn::There are plenty of
lousy teacher prep programs that don&amp;#39;t ensure teachers learn the
subject matter they should but the good ones do.]
&lt;/p&gt;
&lt;p&gt;
I think it&amp;#39;s insulting to say that CS teachers aren&amp;#39;t capable of doing
the same in their subject area.
&amp;#39;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Theseus&#39;s Curriculum</title>
      <link>https://cestlaz.github.io/posts/theseuss-curriculum/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/theseuss-curriculum/</guid>
      <description>&lt;p&gt;
With the school year starting I was originally planning on writing
about my class rules.
&lt;/p&gt;
&lt;p&gt;
Instead I think I&amp;#39;ll riff on &lt;a href=&#34;https://twitter.com/alfredtwo&#34;&gt;Alfred Thompson&lt;/a&gt;&amp;#39;s post today titled
&lt;a href=&#34;http://blog.acthompson.net/2017/09/curriculum-is-hard.html&#34;&gt;Curriculum is Hard&lt;/a&gt;. I&amp;#39;m guessing I found curriculum design and
development daunting decades ago but at this point in my career it&amp;#39;s
something I enjoy. In any event, Alfred got me to thinking - when is a
curriculum your own?
&lt;/p&gt;
&lt;p&gt;
If you grab a curriculum complete with lesson plans, assignments; the
whole kit and caboodle and you use it verbatim it&amp;#39;s clearly not your
curriculum. It probably also isn&amp;#39;t really teaching.
&lt;/p&gt;
&lt;p&gt;
What about the more common case. Math curricula has basically been set
for years. Algebra, Geometry [fn::which is really logic and deductive
reasoning using Euclidean Geometry as platform], and then Algebra 2
and Trigonometry. Most books seem to be sequenced in a similar way
and at least in the schools I know about, the math department has some
document listing a day by day list of topics. This makes sense since
you probably have more than one class of each type and you want some
cross class consistency. Particularly during the first weeks of the
semester when kids can transfer and then also at the end of term or
year.
&lt;/p&gt;
&lt;p&gt;
When a teacher uses that departmental document are they using someone
elses curriculum?
&lt;/p&gt;
&lt;p&gt;
What if they create their own homeworks and assigments?
&lt;/p&gt;
&lt;p&gt;
Most teachers I know use the department&amp;#39;s curriculum but make their
own unit and day to day lesson plans. Most revise them each
semester. Typically these teachers do a little more here or a little
less there depending on a number of factors.
&lt;/p&gt;
&lt;p&gt;
Are they creating their own curriculum?
&lt;/p&gt;
&lt;p&gt;
What if they re-sequence the topics?
&lt;/p&gt;
&lt;p&gt;
How about adding an enrichment topic?
&lt;/p&gt;
&lt;p&gt;
Back when I taught math I used the departmental syllabus, as many
texts as I could find, colleagues lesson plans and whatever I could
find but I always pulled it together to something I could call my
own. If I didn&amp;#39;t, I wouldn&amp;#39;t have been comfortable going in front of
my class. Was it my curriculum? They were certainly my lessons.
&lt;/p&gt;
&lt;p&gt;
Now, when designing a course I start from the end outcomes and work
backwards but when teaching a course, I still look at as many
resources as I can find. I&amp;#39;ll pull a little from here, a little from
there and combine that with whatever I can come up with myself.
&lt;/p&gt;
&lt;p&gt;
So, when is it your curriculum and when is it not?
&lt;/p&gt;
&lt;p&gt;
If you&amp;#39;re just delivering scripted lessons it&amp;#39;s certainly not yours.
&lt;/p&gt;
&lt;p&gt;
If you know your stuff and you  take someone elses material, make it
your own and add it to your bag of tricks, I think it&amp;#39;s now yours as
well.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CS Teachers - we need you to blog</title>
      <link>https://cestlaz.github.io/posts/cs-teachers-blog/</link>
      <pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/cs-teachers-blog/</guid>
      <description>&lt;p&gt;
At this past year&amp;#39;s CSTA conference, a few of us huddled in a corner
voiced a very common lament - &amp;#34;it would be great if more CS teachers
blogged.&amp;#34; It really would be. We&amp;#39;re still a relatively small
community and while there&amp;#39;s some good conversation going on on
mailing lists and on Facebook, those aren&amp;#39;t easily discoverable or
accessible and in the case of Facebook, there&amp;#39;s a question of
ownership and permanence.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been blogging on and off since 2010. Around 300 posts. Not super prolific
but I&amp;#39;ve been doing it long enough to maybe be able to share a bit of
perspective.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not sure exactly why I started. In part I was inspired by my wife
who at the time was blogging about her &lt;a href=&#34;http://squid-knits.blogspot.com/&#34;&gt;knitting&lt;/a&gt;. I was also inspired
to share my thoughts after meeting some fellow CS teachers from across
the country at a &lt;a href=&#34;http://cestlaz.github.io/posts/2010-01-02-welcome.html&#34;&gt;CSTA event in Chicago&lt;/a&gt;. It was stop and go for a while
and then I took a break. I was re-inspired months later after meeting
a couple of CS teachers at another CSTA event - &lt;a href=&#34;https://twitter.com/search?q=ben%2520chun&amp;amp;src=typd&#34;&gt;Ben Chun&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/purplespatula&#34;&gt;Helene
Martin.&lt;/a&gt; Both terrific high school CS teachers at the time who are
unfortunately no longer in the classroom (unfortunate for the kids, I
wish Ben and Helene all happiness and success in all their
endeavors). We all agreed to try to write more and that got me started
again. I&amp;#39;ve been posting around 50 times a year since.
&lt;/p&gt;
&lt;p&gt;
Looking back to when I used blogger, I had 30 - 50 hits on some early
posts and that was mostly just me hitting the site. It didn&amp;#39;t matter.
Writing has let me work through my thoughts. It also creates a record of
my thoughts and on how my thinking evolves over time.
&lt;/p&gt;
&lt;p&gt;
Over time, people have told me that they&amp;#39;ve found some of the things
I&amp;#39;ve written useful or helpful and I&amp;#39;d argue that when people disagree
with something I write, even if they don&amp;#39;t comment and I&amp;#39;ve all I&amp;#39;ve
evoked is a reaction of &amp;#34;Z&amp;#39;s full of crap,&amp;#34; it&amp;#39;s gotten them to
re-evaluate their own thoughts on whatever the subject and if it&amp;#39;s
confirmation of their original beliefs, that&amp;#39;s OK.
&lt;/p&gt;
&lt;p&gt;
The important thing is that by blogging I&amp;#39;m getting my thoughts down
&amp;#34;on paper&amp;#34; and sharing them for the world to take or leave as they
please and the more of us who do this, the more we expand the sum
knowledge of CS teaches.
&lt;/p&gt;
&lt;p&gt;
As a dispersed community of CS teachers across the country, we need
more people blogging on public platforms not in silos like Facebook.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve heard reasons why teachers don&amp;#39;t blog:
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;I&amp;#39;m new and have nothing to write about&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
Sure you do â€“ write a paragraph about your plans for the days lesson
or how it went. Vent your frustrations (but be careful not to get
yourself in trouble). Rave about some students work.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;I don&amp;#39;t have time&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
Yes, this is a tough one. If you have to do PD time, maybe your
supervisor will let you use it for blogging. To be honest, when I&amp;#39;m
writing regularly it doesn&amp;#39;t take that long. When I haven&amp;#39;t written in
a while it takes longer. In any event. It&amp;#39;s important and posts don&amp;#39;t
have to be long
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;I&amp;#39;m not a great writer&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
This blog is proof that you don&amp;#39;t have to be. I&amp;#39;m stilted and ramble
and certainly no Shakespeare. I am the weakest writer in my household
and it&amp;#39;s not even close. Even so, we all have something to share.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;I don&amp;#39;t know how&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
I was thinking about proposing a session at next years CSTA conference
where I&amp;#39;d work the group through creating a github pages based
blog. In the meantime, there are a lot of easy ways to start out.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://blogger.com&#34;&gt;http://blogger.com&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://wordpress.com&#34;&gt;http://wordpress.com&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
and for those who want total control
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; with &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub pages&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
So, there&amp;#39;s my plea. If you&amp;#39;re a CS teacher and you&amp;#39;re reading this
please consider blogging. I assure you, we will all appreciate it and
benefit from it.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching APCS-A for the first time</title>
      <link>https://cestlaz.github.io/posts/teaching-ap-first-time/</link>
      <pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/teaching-ap-first-time/</guid>
      <description>&lt;p&gt;
I got  an email from a friend the other day. Among other things, he
mentioned that he would be teaching APCS-A for the first time this
year. He&amp;#39;s a little trepidatious. He knows his stuff but he hasn&amp;#39;t
really done much using Java.
&lt;/p&gt;
&lt;p&gt;
I was going to respond in an email but thought I might share here
instead.
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
TL;DR - for all you APCS teachers who are new or new to Java - learn
your core CS, lean on your resources and support and it&amp;#39;s OK to tell
your kids &amp;#34;I don&amp;#39;t know, I&amp;#39;ll get back to you.&amp;#34;. Don&amp;#39;t worry, you&amp;#39;ll be great.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The first time I taught APCS was some time around 1991 or 1992. It was at
&lt;a href=&#34;http://www.sewardparkhs.com/Famous-Alumni/&#34;&gt;Seward Park&lt;/a&gt; &lt;a href=&#34;http://www.sewardparkhs.com/History/&#34;&gt;High School&lt;/a&gt;. It was the AB curriculum - that is one
semester of programming in Pascal and one semester of Data Structures
and Algorithms.  Being a computer science major the core material was
never a concern. I had taken APCS the first time it was offered in May
1984 in Pascal and while most of my college and pre-teaching professional work
was in C, my college started it&amp;#39;s CS sequence with Pascal. I was more
concerned with the actual teaching part. I had taught math for a year
and a half at that point but never CS and by any measure I was still
wet behind the ears. I never finished that first experience because I
was excessed to Stuy mid semester. I wasn&amp;#39;t particularly happy with my
performance but looking back, I think I did a pretty good job given
the situation and my experience.
&lt;/p&gt;
&lt;p&gt;
After teaching math for a year and a half I was back in APCS at
Stuy. Still in Pascal. I spent the next few years figuring out how to
teach CS and APCS in particular along with starting a couple of new
classes. When the College Board decided to move the AP class to C++ I
was happy, sad and a little worried. Pascal had a bunch of limitations
but I had never used C++. True, I was a C programmer at heart but I
had never really done the OOP thing. I did, as it turned out, design a
number of my C systems in an Object Typed design: I would use a single
file per &amp;#34;class&amp;#34; where local variables were de facto instance
variables and functions in the file were methods and each file was a
singleton class. I read &lt;a href=&#34;https://www.amazon.com/Object-Oriented-Analysis-Design-Applications-3rd/dp/020189551X/ref=sr_1_1?ie=UTF8&amp;amp;qid=1503519770&amp;amp;sr=8-1&amp;amp;keywords=Grady+Booch&#34;&gt;Booch&lt;/a&gt; and &lt;a href=&#34;https://www.amazon.com/Object-Oriented-Software-Construction-Book-CD-ROM/dp/0136291554/ref=asap_bc?ie=UTF8&#34;&gt;Meyer&lt;/a&gt; on my own but I had no
schooling in OOP and no professional experience.
&lt;/p&gt;
&lt;p&gt;
As it turned out, I didn&amp;#39;t have to worry. I knew my CS and while it
took me a while to become comfortable with OOP, the class, and of
course I knew this from the get go, started from nothing and built
up complexity a step at a time. The worst that might have happened is
that some of my solutions might have been more C-esque than C++.
&lt;/p&gt;
&lt;p&gt;
The move to Java was a little more jarring. Now we had a totally new
language. I couldn&amp;#39;t fall back on C. It removed memory management and
explicit pointers and it had to be used in an Object Oriented
manner. I remember asking Mike Schidlowsky, a former student turned
friend who was the Java consultant on the Java edition of Sedgewick&amp;#39;s
&lt;a href=&#34;https://www.amazon.com/Robert-Sedgewick-Algorithms-Fundamentals-Structures/dp/B008VR3ZH4/ref=sr_1_4?ie=UTF8&amp;amp;qid=1503520269&amp;amp;sr=8-4&amp;amp;keywords=schidlowsky&#34;&gt;Algorithms&lt;/a&gt; book how to do something. It had to do with passing and
modifying arrays. In C there were a number of ways to accomplish what
I wanted to do. In Java, I couldn&amp;#39;t figure out how to do it the way I
wanted. My friend Mike told me &amp;#34;you just don&amp;#39;t do it that way in
Java.&amp;#34; Again, it turned out that I didn&amp;#39;t have to worry. The basic
coding was still the same as were the data structures and
algorithms. The only challenge was that I had to get into a Java OOP
mindset which it turned out wasn&amp;#39;t that hard.
&lt;/p&gt;
&lt;p&gt;
While I never really warmed up to OOP - I find other paradigms more
natural for me, I knew my CS and got more and more comfortable with
the Java (or C++) way of doing things as time wore on. Sometimes I
would say &amp;#34;I don&amp;#39;t know&amp;#34; or &amp;#34;let&amp;#39;s figure it out&amp;#34; but that&amp;#39;s OK.
&lt;/p&gt;
&lt;p&gt;
Nowadays, there are many more resources available for CS teachers. If
you&amp;#39;re new, lean on them. Use the mailing lists, stackexchange,
facebook groups. Online resources like repl.it, codehs.com etc. Yes,
it&amp;#39;s true that you&amp;#39;ll be better next time around and even better years
down the road but right now, you&amp;#39;re probably better than you think.
&lt;/p&gt;
&lt;p&gt;
A number of my former students volunteer for &lt;a href=&#34;https://www.tealsk12.org/&#34;&gt;TEALS&lt;/a&gt; - a really great
program that brings software engineers into the classroom to work with
non-CS teachers to deliver instruction. A number of my kids have
shared the following sentiment:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
I don&amp;#39;t know if I&amp;#39;m really helping
the teacher to become self sufficient or if I&amp;#39;m a great teacher but I
do know one thing - while I&amp;#39;m there, the kids are getting a hell of a
lot more than if I wasn&amp;#39;t there.&amp;#34;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
â€“ Remember that as well.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thoughts on non educator  influences on CS Education</title>
      <link>https://cestlaz.github.io/posts/outside-influences-on-cs-ed/</link>
      <pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/outside-influences-on-cs-ed/</guid>
      <description>&lt;p&gt;
Yesterday &lt;a href=&#34;https://twitter.com/guzdial&#34;&gt;Mark Guzdial&lt;/a&gt; blogged about a NY Times piece discussing
&lt;a href=&#34;https://computinged.wordpress.com/2017/07/28/silicon-valley-pushing-coding-into-american-classrooms-through-code-org-nytimes/&#34;&gt;Silicon Valleys influence on education through Code.org&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Mark questioned the validity of the piece. If you don&amp;#39;t read Mark&amp;#39;s
blog and you&amp;#39;re in CS Ed you probably should.
&lt;/p&gt;
&lt;p&gt;
I tried to leave a comment on Mark&amp;#39;s blog - not about the NY Times
article but rather my thoughts on why I think it&amp;#39;s important that we
remain wary and vigilant to industry and outsiders influence and
impact on CS education and on education in general.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t know if my comment is sitting waiting for Mark to moderate or
if I&amp;#39;m experiencing WordPress weirdness but since it hasn&amp;#39;t shown up
there, I thought I&amp;#39;d share it here:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
While the article might not make a strong case it&amp;#39;s important to be wary of outside influences on education policies.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m a fan of a lot of what code.org does but speaking about outsiders in generalâ€¦
&lt;/p&gt;
&lt;p&gt;
Bill Gates and Co. directly or indirecty gave us such delights like stack ranking teachers, improving, I mean evaluating, I mean firing teachers based on test scores of students they don&amp;#39;t teach, more and more high stakes nonsense testing for kids, and  at least in NY the destruction of neighborhood schools.
&lt;/p&gt;
&lt;p&gt;
They&amp;#39;ve also pushed the current charter movement that, aided by misleading stats appear successful but in truth are no better and frequently worse than public schools while not sharing back a single &amp;#34;best practice.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
Then we have private companies like the College Board and Pearson both of whom have an outsized influence on US Ed policy and curriculum.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t doubt the good intentions of code.org - as I said, I&amp;#39;m a fan. I am concerned when they and others take actions that can affect ed policy. I&amp;#39;m concerned when code.org representative pushes students to take an AP exam - not a great CS course with a great CS teacher but the actual exam. I&amp;#39;m even more concerned when code.org offers free PD when a school signs up for the PSAT8/9 - another high stakes meaningless test at taxpayer expense. For code.org it&amp;#39;s a means to  get more CS ed out there. To me it&amp;#39;s setting up a new cash cow for the college board at my expense and at students expense.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve seen many Ed Tech people, armed with the best intentions, enter the lions den â€“ a school, district, or municipality only to see their best intentions corrupted in the name of cost cutting, profits, or politics.
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>CS Ed advocates should pay attention to greater ed issues</title>
      <link>https://cestlaz.github.io/posts/cs-ed-and-all-ed/</link>
      <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/cs-ed-and-all-ed/</guid>
      <description>&lt;p&gt;
For anyone involved in K12 CS education, the past few years have been
a wild ride. When I first tried to make inroads in the DOE decades ago
I couldn&amp;#39;t get through the door. Now, CS Education is everyone&amp;#39;s
darling. It&amp;#39;s really amazing. It&amp;#39;s been a combination of grass roots
efforts by teachers, non profit education efforts such as &lt;a href=&#34;http://teals12k.org&#34;&gt;TEALS&lt;/a&gt;, advocacy of
groups like &lt;a href=&#34;http://code.org&#34;&gt;Code.org&lt;/a&gt; and amazing individuals like &lt;a href=&#34;http://avc.com/2017/06/bearing-witness/&#34;&gt;Fred Wilson&lt;/a&gt; who has
probably done more to move the needle of CS Ed in NY than any other 10
people combined.
&lt;/p&gt;
&lt;p&gt;
While everyone agrees that to do CS education right at the K12 level
we need great teachers and lots of them, everyone also knows that
teachers voices are often unheard. The voices with the greatest weight
belong to the large non-profits, principals, superintendents and
local politicians.
&lt;/p&gt;
&lt;p&gt;
Today&amp;#39;s post is a plea to those with voices to think about the effects
of their advocacy for CS Ed to the greater education landscape.
&lt;/p&gt;
&lt;p&gt;
I started thinking about this recently as I&amp;#39;ve been developing the
CS teacher certification programs for Hunter College. As I spoke to
people across the nation I found that many of the efforts to
developing teacher certification are what I call the &amp;#34;you take it you
teach it&amp;#34; model. You take an abbreviated version of APCS-A and APCS-P
and you&amp;#39;re a certified CS teacher. Just about every real educator feels
that this is ludicrous. Some feel that this can be a first step - get
these credentials to get in the door and then you have three to five
years to really learn your subject and craft. I&amp;#39;m good with that but I
have a problem with anyone who says &amp;#34;you take it you teach it&amp;#34; is good
enough and I&amp;#39;ve heard of a number of regions that are seriously
considering it.
&lt;/p&gt;
&lt;p&gt;
Why is this so bad and, I&amp;#39;d argue, dangerous? Not merely because we&amp;#39;ll
end up with substandard CS teachers for the foreseeable future but
also because it undermines the teaching profession as a whole.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s no secret that public education is under attack. A number of
states including Wisconsin, Arizona, Oklahoma, New York and Michigan
have considered relaxing the standards to become a teacher to address
a teacher shortage. In their twisted logic, the politicians and
&amp;#34;reformers&amp;#34; say that we can&amp;#39;t find enough qualified teachers because
we&amp;#39;ve made it an untenable career so let&amp;#39;s lower standards. You can
argue that any current state&amp;#39;s requirements are overly cumbersome but
that&amp;#39;s another conversation.
&lt;/p&gt;
&lt;p&gt;
When CS Educators say that all that&amp;#39;s needed to teach CS is to sit in
on a two week APCS institute is saying that to teach any subject you
don&amp;#39;t need content expertise. This is dangerous to education as a
whole and when power players in the CS Ed movement don&amp;#39;t speak up
otherwise or even worse that the stance that &amp;#34;you take it you teach
it&amp;#34; is OK, we&amp;#39;re undermining teaching as a profession.
&lt;/p&gt;
&lt;p&gt;
We need our heavy hitters to publicly and privately say that we need a
short term entry into the profession but we absolutely need plans and
pathways so that at the end of the day we have the best prepared
teachers in our schools for CS and for all subjects.
&lt;/p&gt;
&lt;p&gt;
Another issue is when as CS Educators we don&amp;#39;t pay attention to the
whole child. I was at a meeting of CSTA people  from about thirty
states a few years ago. Someone asked &amp;#34;how can we advocate for CS when
the school might use it as an excuse to get rid of music?&amp;#34; Cameron
Wilson, at the time a lobbyist for the ACM said something to the
effect of &amp;#34;I&amp;#39;m not concerned with other subjects, my concern is
getting CS into the schools.&amp;#34; I get it, he was employed to stump CS
but we have to remember that we&amp;#39;re only a piece of the puzzle. We want
a seat at the table but we have to make sure that the table is
populated with everyone needed to provide a great education for our
kids.
&lt;/p&gt;
&lt;p&gt;
A final issue I&amp;#39;ll mention here is how so many CS educators are so
close to the College Board. It was very disturbing that so many CS Ed
players were pushing for more students to take the APCS exam. Not the
class, not some other CS class but the APCS exam. AP is an extremely
controversial subject among teachers and many of us feel that too many
kids take too many AP classes and certainly too many exams. Remember,
the College Board is the organization that pushes things like the
PSAT8/9 another meaningless but high stakes exam inflicted upon our
kids at taxpayer expense. I understand that AP makes things easy -
they have courses, curricula, etc. but we&amp;#39;ve given the college board
an outsized influence on CS education and we&amp;#39;re not paying attention
to their outsized influence on education in general.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m just a small time teacher. I don&amp;#39;t have a national voice. I&amp;#39;m
urging those that do:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Look into what&amp;#39;s going on in greater education. Look at the way
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
public education has been under attack and why.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Look at the side affects of our choices - who we partner with and
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
what policies we push.
&lt;/p&gt;
&lt;p&gt;
We might not agree on the right path but everyone with a voice in CS
Education should be having hard conversations about this and then
strongly advocating for the positions they feel correct.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A friendly reminder to use the right language when describing CS</title>
      <link>https://cestlaz.github.io/posts/languages-or-cs/</link>
      <pubDate>Mon, 10 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/languages-or-cs/</guid>
      <description>&lt;p&gt;
I was part of this conversation the other day:
&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;When science teachers asked me if I taught AP Java I&amp;#39;d always respond by asking them if they taught AP Microscope.&lt;/p&gt;&amp;mdash; Mike Zamansky (@zamansky) &lt;a href=&#34;https://twitter.com/zamansky/status/883327927831711745&#34;&gt;July 7, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
I always use that line to emphasize that I teach CS - a way of
thinking and problem solving and looking at the world. The languages
we use in our classes are tools to help us communicate ideas not the
ends but rather a means.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve spent the past couple of days at the CSTA conference. It&amp;#39;s been a
lot of fun. I&amp;#39;ve been spending the time with old friends and meeting
new ones and as everyone who knows me knows - I love talking shop.
&lt;/p&gt;
&lt;p&gt;
I overheard a conversation today. One CS teacher describing what they
did to a few others. I overheard:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
We teach Scratch then Swift and C++ and also teach Python
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I heard statements like this describing programs more than a couple of
times. I know we&amp;#39;re at a conference of CS Educators but even in this
community we have everything from beginners getting their feet wet to
hardcore computer scientists to everything in between.
&lt;/p&gt;
&lt;p&gt;
We shouldn&amp;#39;t be teaching languages as an ends unto themselves and the
majority of us don&amp;#39;t.
&lt;/p&gt;
&lt;p&gt;
What many of us do, though, is take the easy path and use the name of
a programming language to describe what we do rather than really
define what we do. This is why we hear &amp;#34;I teach Java&amp;#34; or &amp;#34;I teach a
class in Swift&amp;#34; even when the teacher teaching Java might really be
teaching Object Oriented program design and development or data
structures or something similar just using Java as the language or
tool.
&lt;/p&gt;
&lt;p&gt;
I too fall into this trap but I try to catch myself. I try not to say
&amp;#34;I teach Scheme&amp;#34; but rather I&amp;#39;ll say &amp;#34;I teach Scheme. Actually, we&amp;#39;re
studying functional programming using Scheme as the language but for
convenience, I&amp;#39;ll just say Scheme for the rest of this talkâ€¦.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
The words we use to describe our field set the tone. If we&amp;#39;re sloppy
and say &amp;#34;we teach Java,&amp;#34; it&amp;#39;s just like biology teacher saying &amp;#34;I
teach microscope.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
As we try to define our field in the K12 space and seek equal footing
with established subject areas it&amp;#39;s important that we use the right
language so that other educators and policy makers don&amp;#39;t get the wrong
idea.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Disclosing Bugs - requiring a project roadmap</title>
      <link>https://cestlaz.github.io/posts/disclosing-bugs/</link>
      <pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/disclosing-bugs/</guid>
      <description>&lt;p&gt;
Over on Facebook, a fellow CS educator &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; made a comment on something he
wanted to try with his students this summer: having the students
pre-disclose bugs when they submit their projects.
&lt;/p&gt;
&lt;p&gt;
The post was asking for any links to &amp;#34;the literature.&amp;#34; I can&amp;#39;t speak
to that but I I&amp;#39;ve done something similar to what the post was asking
about so, as per usual, I thought I&amp;#39;d write about it here. It may not
be &amp;#34;research&amp;#34; but I&amp;#39;m more interested in teacher practices than ivory
towers anyway so here goesâ€¦
&lt;/p&gt;
&lt;p&gt;
At a very basic level, I ask my students to provide a roadmap to any
project they submit - usually in a readme file. I basically ask:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
How to use the project
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
What&amp;#39;s cool and I should make sure to check out
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
What doesn&amp;#39;t work, where were the sticking points and what&amp;#39;s the
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
status.
&lt;/p&gt;
&lt;p&gt;
I tell my students that when I test the project, I&amp;#39;m not &amp;#34;out to get
them&amp;#34; and by their telling me how to navigate the project, it makes
sure I see things in the best possible light. I also tell them that I
will be more harsh on bugs that they don&amp;#39;t tell me about -
particularly bugs that only occur some of the time.
&lt;/p&gt;
&lt;p&gt;
I also encourage (and sometimes require) that students maintain a
changelog in their repo and also sometimes encourage them to have a
todo list and list of bugs and for longer projects, I expect to see
these and the readme updated over the course of the project (which
should always be up to date on &lt;a href=&#34;https://cestlaz.github.io/posts/sigcse-2017-github-4&#34;&gt;GitHub&lt;/a&gt;, Dropbox or wherever the project
is living).
&lt;/p&gt;
&lt;p&gt;
When the students provide a good write up it makes evaluating the
project much easier.
&lt;/p&gt;
&lt;p&gt;
When students buy in, they&amp;#39;re hopefully thinking more deeply about
their projects in terms of design and implementation and also from the
point of view of someone else using their product. When they maintain
the readme and other files over time, it also enables me to better
support them.
&lt;/p&gt;
&lt;p&gt;
So, does this work? Yes but with some caveats. It works better once
the class and teacher know each other. If the students trust the
teacher they&amp;#39;re more likely to be open and honest when they write up
the project. On the other hand, there will always be some students to
&amp;#34;phone it in&amp;#34; and do the bare minimum in terms of writing up their
projects.
&lt;/p&gt;
&lt;p&gt;
The bottom line is that having the students do this is has a low cost
and is beneficial to both the students and the teacher. When it works,
it&amp;#39;s great and when it doesn&amp;#39;t, it&amp;#39;s still pretty good.
&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr class=&#34;footnotes-separatator&#34;&gt;
&lt;div class=&#34;footnote-definitions&#34;&gt;
&lt;div class=&#34;footnote-definition&#34;&gt;
&lt;sup id=&#34;footnote-1&#34;&gt;&lt;a href=&#34;#footnote-reference-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;div class=&#34;footnote-body&#34;&gt;
&lt;p&gt;
I&amp;#39;m not sharing names from the Facebook post because it was
made in a semi-private forum and I haven&amp;#39;t asked permission.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A* is born</title>
      <link>https://cestlaz.github.io/posts/a-star-is-born/</link>
      <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/a-star-is-born/</guid>
      <description>&lt;p&gt;
Over on the &lt;a href=&#34;https://cseducators.stackexchange.com/&#34;&gt;CS Educator StachExchange&lt;/a&gt;, which is in private beta for a
few more days, I saw a post asking about how to introduce the &lt;a href=&#34;https://en.wikipedia.org/wiki/A*_search_algorithm&#34;&gt;A*
search algorithm&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I taught A* as part of the APCS class at Stuy so I thought I&amp;#39;d talk
about what I did here.
&lt;/p&gt;
&lt;p&gt;
Some time around mid year, we get to intermediate recursion. This is
about the time, give or take, when we talk about the nlogn sorts.
&lt;/p&gt;
&lt;p&gt;
We also build a recursive maze solver. It&amp;#39;s a nice algorithm and a
nice little program. It&amp;#39;s around 15 lines of code to perform a
recursive depth first search:
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/astar/dfs.gif&#34; alt=&#34;/img/astar/dfs.gif&#34; title=&#34;/img/astar/dfs.gif&#34; align=&#34;center&#34; height=&#34;200px&#34;/&gt;
&lt;p&gt;
The basic algorithm is:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It&amp;#39;s a nice lesson because in addition to all the recursion stuff, we
also get to talk about state space, state space search, backtracking,
efficiency concerns and much more. After we finish the maze solver, we also talk about
other problems that can be similarly examined using state-space search
like the knights tour and N-queens problems.
&lt;/p&gt;
&lt;p&gt;
A month or so later, when we&amp;#39;re learning about stacks and queues as
data structures, we revisit the maze solver. This time we solve the
problem in a more general way. We talk about using a data structure to
hold the set of nodes that we&amp;#39;re aware of and that we want to visit
next.
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
As we write the solution, we see that using a queue for this
data structure yields a breadth first search:
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/astar/bfs.gif&#34; alt=&#34;/img/astar/bfs.gif&#34; title=&#34;/img/astar/bfs.gif&#34; align=&#34;center&#34; height=&#34;200px&#34;/&gt;
&lt;p&gt;
while using a stack yields depth first.
&lt;/p&gt;
&lt;p&gt;
All of this leads to a discussion as to how deciding on which
locations to look at next can greatly influence the steps to the
exit. From here it&amp;#39;s easy to see that you can use a heuristic to order
the nodes in our data structure so that we explore &amp;#34;better&amp;#34;
possibilities first. The data structure becomes a priority queue and
we finally get to both &amp;#34;best first&amp;#34; and A* search:
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/astar/astar.gif&#34; alt=&#34;/img/astar/astar.gif&#34; title=&#34;/img/astar/astar.gif&#34; align=&#34;center&#34; height=&#34;200px&#34;/&gt;
&lt;p&gt;
It&amp;#39;s a nice sequence of lessons, albeit lessons spread out over
months. The end result is that the students see both the need and
motivation for something like A* and they see that it&amp;#39;s not hard to
implement. One basic routine where you can plug in one of three data
structures - stack, queue, or priority queue to get very different
results.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A new first language? What&#39;s the follow up plan?</title>
      <link>https://cestlaz.github.io/posts/first-language-changing/</link>
      <pubDate>Fri, 21 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/first-language-changing/</guid>
      <description>&lt;p&gt;
This morning, &lt;a href=&#34;https://twitter.com/guzdial&#34;&gt;Mark Guzdial&lt;/a&gt; wrote about Stanford possibly &lt;a href=&#34;https://computinged.wordpress.com/2017/04/21/cs-department-updates-introductory-courses-java-is-gone/&#34;&gt;moving away
from Java&lt;/a&gt; as their intro language. This comes on the heels of a
semi-regular thread on one of the lists I&amp;#39;m on asking about what
languages are used at assorted colleges around the country. Invariably
the Pascal -&amp;gt; C++ -&amp;gt; Java progression of APCS turns up in these
threads.
&lt;/p&gt;
&lt;p&gt;
There are plenty of arguments to be made both for and against pretty
much any language or platform. There&amp;#39;s no single best universal
answer. Each choice giveth and each choice taketh away.
&lt;/p&gt;
&lt;p&gt;
What I&amp;#39;m really curious about is who&amp;#39;s looking at intro languages in
the context of complete programs or even complete educations that
could span multiple institutions.
&lt;/p&gt;
&lt;p&gt;
Early language choices can make a big difference in engaging and
exciting newcomers but there are ramifications later on that few seem
to consider.
&lt;/p&gt;
&lt;p&gt;
Take the APCS change from C++ to Java. It removed memory management
from the first year course. It also simplified issues relating to
pass by value vs pass by reference (or, rather, passing address by
value), bought much more strongly into OOP and moved more towards
using built in implementations of data structures like Lists rather
than rolling your own.
&lt;/p&gt;
&lt;p&gt;
Removing memory management from the first year course in and of itself
isn&amp;#39;t a problem as long as it&amp;#39;s taught and taught effectively
somewhere later on. It could be argued that &amp;#34;memory is already covered
in our required systems course.&amp;#34; That could be the case, but there are
many concepts that kids don&amp;#39;t get the first time around. Is an
institution that covered memory management in CS1/2 and then came back
to it in a later Systems course giving their students the same
understanding now that they&amp;#39;ve eliminated the CS1/2 experience?
&lt;/p&gt;
&lt;p&gt;
What about OOP buy in. Personally, I&amp;#39;ve never been a big OOP fan but
that&amp;#39;s neither here nor there. What I have found is that depending on
how a student is exposed to programming in CS1/CS2 can have a big
influence on how they approach problems later. Did the move to Java
cause more of our students to try to use shoehorn OOP into a problem
that really shouldn&amp;#39;t be approached in an OOP manner?
&lt;/p&gt;
&lt;p&gt;
I suspect that the use of built in data structures has had a
negative impact. A few years after the switch to Java, I was talking
to a senior tech worker. He was having a bad day - interviewing
potential internees and full time engineers. My friend was complaining
that the kids couldn&amp;#39;t come up with solutions to what he thought were
pretty straightforward questions. He felt that had the kids actually
implemented algorithms like the nlogn sorts rather than just learning
java .sort method and just talking about the algorithm they&amp;#39;d be
better prepared. I&amp;#39;ve heard this sentiment repeated over and over
throughout the years.
&lt;/p&gt;
&lt;p&gt;
This is not to say that Java is a horrible language or horrible for
teaching - that&amp;#39;s another debate. The point is that you can&amp;#39;t just
look at the intro class and who it draws in. You have to consider how
it will prepare students for the next level and you have to look at
the big picture â€“ will our students get everything they need by the
time they leave us.
&lt;/p&gt;
&lt;p&gt;
Many schools have moved to Python. Will that effect students take on
type systems later on? Will the flexibility and constructs like list
comprehensions make it harder to teach recursion since there are
&amp;#34;easier&amp;#34; ways to do it?
&lt;/p&gt;
&lt;p&gt;
None of these are really problems so long as the CS1/2 (or even CS0)
isn&amp;#39;t taught in a vacuum.
&lt;/p&gt;
&lt;p&gt;
I fear, however that too often we&amp;#39;re paying attention to the intake of
the pipe and not so much the output.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2017 - a path to github part 1</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-github-1/</link>
      <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-github-1/</guid>
      <description>
&lt;p&gt;
Both at and prior to SIGCSE 2017, I promised to write up the steps I
take to introduce and use revision control systems in my classes.
&lt;/p&gt;
&lt;p&gt;
This series is not meant to be a git or &lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt; tutorial. There are
plenty of those already (two of which I&amp;#39;ve linked to below).  This is
about the process I use with my students to get them up to speed.
&lt;/p&gt;
&lt;p&gt;
As with any new tool, there will be some resistance but once git saves
them once, they get religion. There will also be some bumps in the
road but at the end of the day, the students will be using a valuable
and necessary tool.
&lt;/p&gt;
&lt;p&gt;
I was also surprised at the ancillary benefits I got as a teacher by
using GitHub in particular. I&amp;#39;ll talk about that at the end of the
series.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s part one.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m doing this with git and GitHub but there&amp;#39;s no reason why other
systems and hosts can&amp;#39;t be used. I&amp;#39;d also recommend that any educator
or student sign up for the assorted &lt;a href=&#34;https://education.github.com/&#34;&gt;discounts&lt;/a&gt; offered by GitHub.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve followed this basic idea multiple times and done it over the
course of a single semester, a year, and even two years. Regardless of
time frame, the idea is the same. Make each step simple and relevant
and introduce complexity and roadblocks a piece at a time.
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Step 1 - code distribution
&lt;/h2&gt;
&lt;p&gt;
To start, I don&amp;#39;t even talk about version control. We start with code
distribution. For years, I&amp;#39;ve looked for efficient ways of sharing
code with my classes. Both code developed in class and code for
assignments.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve tried things like NFS, Dropbox, online code repositories like the
files section of systems like Moodle or Blackboard.
&lt;/p&gt;
&lt;p&gt;
At Stuy, we&amp;#39;ve always had efficiency problems with NFS and Dropbox has
multiple problems ranging from students not being able to install the
client on school machines to the problems of the network hit when a
room full of kids are syncing at the same time.
&lt;/p&gt;
&lt;p&gt;
Uploading to a CMS system was also problematic - I&amp;#39;m a command line
wonk and hate going through slow web page menus to navigate a
filesystem and upload files. I also had to remember to get the files
off of whatever machine I was working on in class and then transfer
them to the CMS when I had a free moment.
&lt;/p&gt;
&lt;p&gt;
Enter git. Now, of course, if you&amp;#39;re going to use git in the classroom
you have to know it. There are plenty of resources out there. Online
courses, articles, videos, and tutorials. Here are a couple:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://try.github.io/&#34;&gt;https://try.github.io/&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=0fKg7e37bQE&#34;&gt;https://www.youtube.com/watch?v=0fKg7e37bQE&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I also want to point out that I just use raw command line git along
with native GitHub. GitHub has rolled out &lt;a href=&#34;https://classroom.github.com/&#34;&gt;GitHub Classroom&lt;/a&gt; which adds
a layer of support for educators. I don&amp;#39;t use it because, as I said,
I&amp;#39;m an old school command line wonk and also because I figured out a
sequence that worked for me and my students before GitHub Classroom
existed. Were I starting now, I&amp;#39;d take some time to look at their
current offerings before jumping in.
&lt;/p&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Set up
&lt;/h3&gt;
&lt;p&gt;
Before starting, make sure you register your ssh keys. &lt;a href=&#34;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/&#34;&gt;This&lt;/a&gt; help page
has more information. You&amp;#39;ll want to register an ssh key from every
machine you use - home, work, laptop.
&lt;/p&gt;
&lt;p&gt;
Now go over to GitHub and make a new repository. I usually name it
&lt;strong&gt;&lt;strong&gt;classcode&lt;/strong&gt;&lt;/strong&gt;. &lt;strong&gt;&lt;strong&gt;BEGINNER NOTE:&lt;/strong&gt;&lt;/strong&gt; when creating the repo, make sure to
check the &amp;#34;initialize this repository with a README&amp;#34; box. If you don&amp;#39;t
you&amp;#39;ll be given a set of instructions on how to set things up once you
click &lt;strong&gt;&lt;strong&gt;Create repository&lt;/strong&gt;&lt;/strong&gt; but it&amp;#39;s easier and easier to follow if
you start with an initialized repo with a README.
&lt;/p&gt;
&lt;p&gt;
I make the repo public â€“ it&amp;#39;s code I&amp;#39;m distributing â€“ nothing to
hide here. If you aren&amp;#39;t comfortable with that, just make the repo
private. If you&amp;#39;ve registered as a teacher with GitHub, you can set up
an organization and you&amp;#39;ll be able to set up free private repos within
it. The other downside here is that you&amp;#39;ll have to individually give
each student access to the repo. That&amp;#39;s a mild annoyance but it only
has to be done once.
&lt;/p&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Teacher use
&lt;/h3&gt;
&lt;p&gt;
Next, clone out the repo. &lt;strong&gt;&lt;strong&gt;BEGINNER NOTE:&lt;/strong&gt;&lt;/strong&gt; Make sure you check out
the ssh version not the https version. Just make sure that when you
click the &lt;strong&gt;&lt;strong&gt;clone&lt;/strong&gt;&lt;/strong&gt; button, it says &amp;#34;Clone with SSH.&amp;#34; If not, just
click the &amp;#34;Use SSH&amp;#34; link in the same box. Students will clone the
using https.
&lt;/p&gt;
&lt;p&gt;
From the teacher point of view, you can just start using the repo. My
work flow is typically:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;git pull&lt;/strong&gt;&lt;/strong&gt; at the start of class
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
write code throughout class
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;&lt;strong&gt;git add&lt;/strong&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;strong&gt;git commit&lt;/strong&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;strong&gt;git push&lt;/strong&gt;&lt;/strong&gt; at the end of class
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
I use a similar flow when I want to add files in my office or at home.
&lt;/p&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Student use
&lt;/h3&gt;
&lt;p&gt;
From the student point of view, assuming a public repo, they just have to clone the repo and
at the beginning of every class or work session, do a &lt;strong&gt;&lt;strong&gt;git
pull&lt;/strong&gt;&lt;/strong&gt;. That&amp;#39;s all there is to it.
&lt;/p&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
Thoughts
&lt;/h3&gt;
&lt;p&gt;
That&amp;#39;s it. The kids are now using GitHub â€“ they&amp;#39;re probably looking
at and poking around on the web site as well as pulling files to their
machines. You can also, in class, show things like &lt;strong&gt;&lt;strong&gt;git status&lt;/strong&gt;&lt;/strong&gt;,
&lt;strong&gt;&lt;strong&gt;git log&lt;/strong&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;strong&gt;git diff&lt;/strong&gt;&lt;/strong&gt; to set the stage for step 2 of this
process and beyond.
&lt;/p&gt;
&lt;p&gt;
Since the students aren&amp;#39;t adding, committing or pushing, you probably won&amp;#39;t
get any errors.
&lt;/p&gt;
&lt;p&gt;
The only problem that could reasonably occur is if a student places a
file in their local copy of the repo with the same name as something
they haven&amp;#39;t pulled yet. This is pretty easy to address and provides a
nice stepping stone lesson to again, set the stage for more complex
operations.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m happy with this as a first step towards git using GitHub. It
provides a nice way of sharing class code while gently introducing the
students to the tool.
&lt;/p&gt;
&lt;p&gt;
The next step  is having the students add files to a repo. That&amp;#39;s the
next post in this series.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SIGCSE 2017 - Recap</title>
      <link>https://cestlaz.github.io/posts/sigcse-2017-recap/</link>
      <pubDate>Tue, 14 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/sigcse-2017-recap/</guid>
      <description>
&lt;p&gt;
As a high school teacher, I was never able to attend SIGCSE, the
conference of the ACM&amp;#39;s Special Interest Group on Computer Science
Education. Between the number of instructional days I would lose and
the cost, I could never justify going. Instead I looked over the
proceedings and read many of the papers.
&lt;/p&gt;
&lt;p&gt;
Now that I&amp;#39;m at Hunter, I was finally able to attend. This year in
Seattle, the conference ran from Wednesday through Saturday. I was
part of a panel on &amp;#34;Tools we can&amp;#39;t live without.&amp;#34; Over the next few
weeks, I hope to blog about a number of things I thought and talked
with people about over the conference including:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
The path I use to teach git and why GitHub a good teaching tool
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
(my talk).
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
The relationship of different CS Ed stakeholders - teachers,
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
researchers, organizations, etc.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Teaching at the high school level vs college - perceptions and
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
reality.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
The challenges of tech tool adoption in schools.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
What&amp;#39;s going on in K12 CS Certification.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Maybe some other stuff.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Today, some overall thoughts.
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
The good
&lt;/h2&gt;
&lt;p&gt;
As with many conferences, the &amp;#34;hallway track&amp;#34; along with receptions
sponsored by &lt;a href=&#34;https://csnyc.org/our-work/cs4all&#34;&gt;the CS4All consurtium&lt;/a&gt;, &lt;a href=&#34;http://tealsk12.org&#34;&gt;TEALS&lt;/a&gt;, &lt;a href=&#34;http://code.org&#34;&gt;Code.org&lt;/a&gt; were terrific. I
was able to finally meet in person many people who I&amp;#39;ve only known
virtually and got to know many more as well. I left the conference
with a much larger address book and a long list of follow up
items. Being in Seattle, I also enjoyed being able to spend time with
people from &lt;a href=&#34;http://tealsk12.org&#34;&gt;TEALS&lt;/a&gt; and &lt;a href=&#34;http://code.org&#34;&gt;Code.org&lt;/a&gt;, two of the CS Ed groups working hard
to do some real good (yes - I do like and support these guys even
though I call them out on things I disagree with, but that&amp;#39;s the
subject of another post).
&lt;/p&gt;
&lt;p&gt;
I attended sessions on CS certification, teacher preparation,
assessments, POGIL based instruction to name a few. They ranged from
valuable to interesting and to be honest, a couple of &amp;#34;what were they
thinking&amp;#34; but the overall experience was very much worth the trip. I
also got to speak to a number of wonderful students at the
poster sessions.
&lt;/p&gt;
&lt;p&gt;
The keynotes are also well worth a read (sorry if you don&amp;#39;t have ACM
digital library access). &lt;a href=&#34;http://dl.acm.org/citation.cfm?id=3025045&amp;amp;CFID=738971273&amp;amp;CFTOKEN=22106692&#34;&gt;Jeannette Wing&lt;/a&gt; talked about the importance of
probability and statistics in CS Ed, and aspects of  &lt;a href=&#34;http://dl.acm.org/citation.cfm?id=3025047&amp;amp;CFID=738971273&amp;amp;CFTOKEN=22106692&#34;&gt;Gail Chapman&lt;/a&gt;&amp;#39;s talk
&amp;#34;Inspire, Innovate, and Improveâ€¦&amp;#34; keynote and &lt;a href=&#34;http://dl.acm.org/citation.cfm?id=3025046&amp;amp;CFID=738971273&amp;amp;CFTOKEN=22106692&#34;&gt;Mitch Resnick&lt;/a&gt;&amp;#39;s
&amp;#34;Fulfilling Papert&amp;#39;s Dream&amp;#34; both spoke to the educator inside me.
&lt;/p&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The bad
&lt;/h2&gt;
&lt;p&gt;
The biggest downside to me was that I found very little value added in
a number of the paper sessions over just reading the papers. Part of
this is probably because of my own over-inflated expectations given the
number of years I&amp;#39;ve waited to attend. Part of it though, was the fact
that sessions were so tightly packed that I didn&amp;#39;t have time to follow
up with presenters before having to run to the next
thing. Unfortunately, in some
cases, it was because the presenter merely
&amp;#34;read&amp;#34; the paper much as a professor sometimes just reads the slides
or the book to his class.
&lt;/p&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Other thoughts
&lt;/h2&gt;
&lt;p&gt;
One paper presentation I very much liked was &lt;a href=&#34;http://dl.acm.org/citation.cfm?id=3017701&amp;amp;CFID=738971273&amp;amp;CFTOKEN=22106692&#34;&gt;Exam Wrappers: Not a
Silver Bullet&lt;/a&gt; presented by &lt;a href=&#34;https://michellecraig.github.io/&#34;&gt;Michelle Craig&lt;/a&gt; and &lt;a href=&#34;http://pages.cpsc.ucalgary.ca/~bdstephe/&#34;&gt;Ben Stephenson&lt;/a&gt;. I
actually came in late since I was hustling over from the Code.org
lunch. The result was that I didn&amp;#39;t actually know what &amp;#34;Exam Wrappers&amp;#34;
were until well after the talk when I ran into &lt;a href=&#34;https://twitter.com/jkhuggins&#34;&gt;Jim Huggins&lt;/a&gt;. Exam
wrappers, in short, are merely when you require the students fill out something
for some credit when picking up their exams. The funny thing is that
it&amp;#39;s a strategy that high school teachers have used for years without
a special name and we already knew the good and bad of it without the
research but that&amp;#39;s not what I want to get at here. What I loved about
the talk, besides the fact that Ben and Michelle are clearly strong
presenters is that this was a negative result that was being
presented. I also loved the fact that they didn&amp;#39;t present their
research as gospel but rather pointed out the strengths and weaknesses
of their approach - they made a case to what and why we should pay
attention to and what should be taken with a grain of salt.
&lt;/p&gt;
&lt;p&gt;
This was a major breath of fresh air after being exposed to so much
education &amp;#39;research&amp;#39; over the course of my life that the author or
presenter felt was just as strong as a mathematical proof rather than
an indication based on a specific experience or small set of
experiences.
&lt;/p&gt;
&lt;p&gt;
I also felt a little weird at times during the week when west coast people seemed
to know me. I know I&amp;#39;m a loud mouthed curmudgeon and I go on my
periodic ed rants but given the dearth of comments on this blog I was
really surprised to get as many as &amp;#34;great to meet you in person after
reading your blog&amp;#34; or &amp;#34;we know you and your work&amp;#34; all week. It was
weird and somewhat humbling.
&lt;/p&gt;
&lt;p&gt;
Finally, another highlight f`or me was that I got to catch up with
some of family.
&lt;/p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/sigcse-seattle.jpg&#34; alt=&#34;/img/sigcse-seattle.jpg&#34; title=&#34;/img/sigcse-seattle.jpg&#34; align=&#34;center&#34;/&gt;
&lt;p&gt;
Already planning to submit something to present at SIGCSE 2018 in Baltimore.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Whiteboard interviews</title>
      <link>https://cestlaz.github.io/posts/whiteboard-interviews/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/whiteboard-interviews/</guid>
      <description>&lt;p&gt;
A few days ago, I saw a &lt;a href=&#34;https://theoutline.com/post/1166/programmers-are-confessing-their-coding-sins-to-protest-a-broken-job-interview-process%0A&#34;&gt;piece&lt;/a&gt; on &lt;a href=&#34;https://twitter.com/dhh&#34;&gt;David Heinemeier Hansson&amp;#39;s&lt;/a&gt; tweet on
whiteboard interviews:
&lt;/p&gt;
&lt;div class=&#34;html-block&#34;&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Hello, my name is David. I would fail to write bubble sort on a whiteboard. I look code up on the internet all the time. I don&amp;#39;t do riddles.&lt;/p&gt;&amp;mdash; DHH (@dhh) &lt;a href=&#34;https://twitter.com/dhh/status/834146806594433025&#34;&gt;February 21, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;
I&amp;#39;m not a huge fan of the whiteboard interview but I think many of the
tweets missed the point. Most of the whiteboard interviews I&amp;#39;m
aware of involve algorithmic problem solving while the tweets, at
least the ones I&amp;#39;ve seen all refer to things that indeed one would
look up. Things like API calls - not things that whiteboard interviewers
typically care about.
&lt;/p&gt;
&lt;p&gt;
Tim Bray takes that point of view and shared his thoughts in a
&lt;a href=&#34;https://www.tbray.org/ongoing/When/201x/2017/03/04/Whiteboard-Interviews&#34;&gt;recent blog post&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
The idea behind the whiteboard interview isn&amp;#39;t all bad. The
interviewer has an opportunity to see how the candidate thinks and
works through a problem and in an ideal situation the interviewer is,
at least to a point, coaching the candidate to help them through the
process. It seems to me that the problem lies more in the types of
questions asked and the skill of the interviewer rather than the idea
that candidates work through a problem live.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;d imagine that whiteboard interview success skew towards candidates
who work well in isolation in a short period of time, have a good
amount of exposure to these types of algorithmic problems. Also those
who have practiced and trained specifically for the interview will
have a huge edge. For people new to the process, it can be very
stressful.
&lt;/p&gt;
&lt;p&gt;
Once a candidate has accepted a position, they&amp;#39;ll likely be working
with a team, with additional resources, and with time to solve
problems. This is a very different environment.  The whiteboard
interview, much like the SAT is thus something of an arbitrary
gatekeeper that a candidate must prepare for and conquer rather than a
skill that they must develop that will make them a more productive
team member.
&lt;/p&gt;
&lt;p&gt;
This whole process tends to advantage those with the time and
background to prepare - this is one of the places where the argument
that whiteboard interview hurt diversity come from.
&lt;/p&gt;
&lt;p&gt;
I could be totally wrong but I seem to recall that the whiteboard
interview, at least in terms of external visibility grew out of the
legendary Google puzzle interview questions.
&lt;/p&gt;
&lt;p&gt;
A tech giant like Google can interview however they like and they&amp;#39;ll
still get the talent. They go to the most selective institutions where
candidates have already been culled for success. If they then interview 100
candidates and 10 of them would be good fits, as long as a couple
thrive through the whiteboard interview process, they&amp;#39;ll get their
engineer. They&amp;#39;ll miss out on a lot of great talent but they can cast
such a large net they&amp;#39;ll fill there seats with productive employees.
&lt;/p&gt;
&lt;p&gt;
On the other hand, smaller companies will certainly miss out on great
talent if they follow the same approach.
&lt;/p&gt;
&lt;p&gt;
Is there a better way?
&lt;/p&gt;
&lt;p&gt;
Some companies pre-assign mini projects and then discuss that at the
interview. Pairing could also be a lower stress alternative to the
technical interview. Another option would be to look at a candidates
existing projects.
&lt;/p&gt;
&lt;p&gt;
An interesting question is &amp;#34;why do so many companies use the
whiteboard interview?&amp;#34; I can&amp;#39;t say for certain but I wouldn&amp;#39;t be
surprised if it was a simple as &amp;#34;because Google does it.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
For over 100 years, Stuyvesant high school required students study
mechanical drawing (drafting). The relevance of the subject lessened over the
decades and what was taught in many ways has become a joke. A typical
class during the CAD parts of the class might be going over the
&lt;strong&gt;&lt;strong&gt;cylinder&lt;/strong&gt;&lt;/strong&gt; command in CadKey. That&amp;#39;s like spending a day studying
the &lt;strong&gt;&lt;strong&gt;edit&lt;/strong&gt;&lt;/strong&gt; menu in Microsoft Word in an English class. If you can&amp;#39;t
tell, I&amp;#39;m not a fan. Drafting at Stuyvesant is the vestigial organ of
the course of study.
&lt;/p&gt;
&lt;p&gt;
My point isn&amp;#39;t to bash drafting at Stuy but rather that there have
been any number of schools that require their students take drafting
even though it doesn&amp;#39;t prepare students for, nor lead them to anything
else in the schools curriculum (which now can be said for Stuy&amp;#39;s
drafting requirement). I&amp;#39;ve spoken to teachers and principals at these
schools and we go back and forth as I press them for the reason for
the requirement and ultimately, they tell me that their school
requires drafting &amp;#34;because Stuyvesant does.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
Why do so many small companies employ the whiteboard interview?
Because the big kids do. The trouble is that the big kids can get away
with it, the smaller players on the other hand, are hurting
themselves. Even the bigger players would be well served to
try to come up with an interview process that better assesses fit
rather than a course filter that while it does pull in talent misses
talent as well.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quality Devs and Coding Contests</title>
      <link>https://cestlaz.github.io/posts/quality-devs-and-coding-contests/</link>
      <pubDate>Sun, 19 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/quality-devs-and-coding-contests/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been planning to put together a response to &lt;a href=&#34;https://twitter.com/alfredtwo&#34;&gt;Alfred Thompson&lt;/a&gt;&amp;#39;s
recent post - &lt;a href=&#34;http://blog.acthompson.net/2017/02/software-developersquantity-vs-quality.html&#34;&gt;Software Developers - Quantity vs Quality&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
TL;DR, although it isn&amp;#39;t really long and I do encourage you to read
Alfred&amp;#39;s post: a couple of articles talk about how the U.S. has the most
people entering CS competitions like HackerRank but Americans are not
at the top of the leaderboard. does this mean that there&amp;#39;s less talent
in America? Does it even matter?
&lt;/p&gt;
&lt;p&gt;
Before getting to &amp;#34;does it matter,&amp;#34; I looked over at the Kaggle
leaderboards. Looking at their top 10, 2 were from the US - no other
country had more than 1. The 11th placing competitor was also from the
US and then 12 was from China, giving them 2 in the top 12.  I also
looked at recent &lt;a href=&#34;http://stats.ioinformatics.org/delegations/2016?sort=total_desc&#34;&gt;IOI results&lt;/a&gt; and a quick glance seems to indicate that
the USA seems to do reasonably well. In short, if you buy into ranking
a country by these types of individual results on specific
competitions then we&amp;#39;re doing fine.
&lt;/p&gt;
&lt;p&gt;
But, does filling the leaderboard mean a country&amp;#39;s producing the best
tech talent? Probably not.
&lt;/p&gt;
&lt;p&gt;
Coding competitions focus on a specific skill set. There are problem
solving aspects but they also require speed, knowledge of data
structures and algorithms, and, yes, even accurate, fast typing
skills. They also require you work alone. They don&amp;#39;t encourage well
designed, architected, or written code, working on existing code bases
or working with a team.
&lt;/p&gt;
&lt;p&gt;
Over the years, I&amp;#39;ve known some very smart and talented individuals
who&amp;#39;ve excelled at these types of competitions. If you extend the pool
to math and science competitions, I&amp;#39;ve known quite a few. These
individuals have by and large done well for themselves but as a group,
you couldn&amp;#39;t call them more successful than any other subset of my
former students. A number of them have gone on and are doing well as
professors or programmers but, by and large, they&amp;#39;re not the ones
who&amp;#39;ve gone on to found companies and provide jobs for scores or even
hundreds of other people and they&amp;#39;re not necessarily the ones who&amp;#39;ve
led teams that have developed major platforms and projects[fn::Some
are but probably a smaller percent from that group than from the
general pool.]
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t argue that people who populate competition leaderboards are
talented and a necessary part of our tech ecosystem but they&amp;#39;re only a
part. I probably want one of these programmers on my team, but not as
the entire team (see Fake Grimlock&amp;#39;s laws of startups - &lt;a href=&#34;http://www.builtinchicago.org/blog/secret-laws-startups-part-2-build-right-team&#34;&gt;law 9&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
&amp;lt;div align=&amp;#34;center&amp;#34;&amp;gt;
&amp;lt;a href=&amp;#34;&lt;a href=&#34;http://www.builtinchicago.org/blog/secret-laws-startups-part-2-build-right-team&#34;&gt;http://www.builtinchicago.org/blog/secret-laws-startups-part-2-build-right-team&lt;/a&gt;&amp;#34;&amp;gt;
&amp;lt;img width=&amp;#34;30%&amp;#34;,
src=&amp;#34;&lt;img src=&#34;http://media3.cdn.builtinchicago.org/sites/default/files/imagecache/Original/images/BATMAN-THEN-ROBIN.jpg&#34; alt=&#34;http://media3.cdn.builtinchicago.org/sites/default/files/imagecache/Original/images/BATMAN-THEN-ROBIN.jpg&#34; title=&#34;http://media3.cdn.builtinchicago.org/sites/default/files/imagecache/Original/images/BATMAN-THEN-ROBIN.jpg&#34; /&gt;&amp;#34;
/&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/p&gt;
&lt;p&gt;
Competitive programming is a piece of the puzzle as competitive
programmers are a part of the population. So are project based events
like &lt;a href=&#34;https://dreamitcodeitwinit.wordpress.com/&#34;&gt;Dream it. Code it. Win it.&lt;/a&gt;, science fairs, and hackathons, which
can be either cooperative, competitive, or a combination.
&lt;/p&gt;
&lt;p&gt;
What do we want? Balance. I think the Stuy program does it pretty
well. StuyCS graduates who wish to take part in coding competitions
can do so but if they want to excel at it, they have to work at it on
their own time. At the same time, the students learn how to work in
teams and take a project from idea to delivery all the while learning
some good academic CS and software engineering practices. They&amp;#39;ll
learn more in college on the academic side and the rest on the
job. I&amp;#39;d love to see better balance in the colleges between CS
programs preparing kids for graduate programs and CS programs that
prepare kids for industry. I&amp;#39;d also love to see CS minors that were
more targeted towards CS+X rather than half of a CS major targeting
students going to grad schools.
&lt;/p&gt;
&lt;p&gt;
I also think there&amp;#39;s a tremendous opportunity for community colleges
to fill the role currently occupied by code schools. They could more
easily strike a balance between academic depth and practical
preparation.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m working on building Hunter College&amp;#39;s honors CS program and while I
can&amp;#39;t move the Hunter curriculum, I&amp;#39;m seeking that balance in my own
way.
&lt;/p&gt;
&lt;p&gt;
Will we get there? I don&amp;#39;t know. Given the way education works, I
figure at some point people will decide that we have to have more of a
presence on the CS leaderboards and we&amp;#39;ll see programs pop up with
that in mind. I have no doubt that when that happens, we&amp;#39;ll see many
more Americans near the top. We have a large enough population that
talent shouldn&amp;#39;t be in question. This will be great for students to
whom these competitions attract. It won&amp;#39;t do much, however for the
rest of the students. I&amp;#39;m not really concerned one way or
another. Unlike math, where there&amp;#39;s a natural progression through K12
math classes with math team and math competitions being a natural add
on, the driving forces in CS - be they from industry, government, or
academia don&amp;#39;t seem to have partaken in any code competition Kool-Aid
so code competitions won&amp;#39;t become a driving force in CS ed any time
soon.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Starting with scheme</title>
      <link>https://cestlaz.github.io/posts/staring-with-scheme/</link>
      <pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/staring-with-scheme/</guid>
      <description>&lt;p&gt;
Scheme is one of the languages used in Stuy&amp;#39;s intro CS course. Like
any other language, there are pros and cons of using it to introduce
students to CS. Here are some of the reasons why I like Scheme as a
first language and why despite that,  I don&amp;#39;t recommend it in many
cases.
&lt;/p&gt;
&lt;p&gt;
Scheme certainly isn&amp;#39;t mainstream. That&amp;#39;s not the main reason why I
like it but it is a side benefit. It&amp;#39;s less likely kids come into
class knowing it which creates a level playing field. The few times
I&amp;#39;ve had a student with a background in Scheme, they&amp;#39;ve been good,
helpful kids rather than ones that tried to show off and dominate the
class.
&lt;/p&gt;
&lt;p&gt;
I like scheme because it&amp;#39;s simple. It looks different than other
languages but is &lt;code&gt;(+ 3 4)&lt;/code&gt; really that different than &lt;code&gt;add(3,4)&lt;/code&gt; or
&lt;code&gt;3+4&lt;/code&gt;?
&lt;/p&gt;
&lt;p&gt;
We can tell kids &amp;#34;everything&amp;#39;s a function.&amp;#34; While technically not
true, and I tell my students that it isn&amp;#39;t, it&amp;#39;s close enough for our
purposes. Everything&amp;#39;s a function and the way we write a function is:
&lt;/p&gt;
&lt;div class=&#34;src src-scheme&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; a b &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Apply function &lt;strong&gt;&lt;strong&gt;f&lt;/strong&gt;&lt;/strong&gt; on arguments &lt;strong&gt;&lt;strong&gt;b c â€¦&lt;/strong&gt;&lt;/strong&gt;. So we have &lt;code&gt;(+ 2 3)&lt;/code&gt; to
add 2 and 3, &lt;code&gt;(and a b)&lt;/code&gt; for logical and &lt;code&gt;(= 3 4)&lt;/code&gt; to test to see if 3
is equal to 4, etc. We also have the same basic notation for things
like conditionals. In java, we might write:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In scheme, it would be:
&lt;/p&gt;
&lt;div class=&#34;src src-scheme&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;gt; a &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Even though we&amp;#39;re fudging the rules, we can lay out a handful of rules
for the kids such as lambda and define follow a similar form to create and
name functions:
&lt;/p&gt;
&lt;div class=&#34;src src-scheme&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;add2 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; b) (+ a b)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
where &lt;code&gt;(lambda (a b) (+ a b))&lt;/code&gt; returns a function that adds &lt;strong&gt;&lt;strong&gt;a&lt;/strong&gt;&lt;/strong&gt; and
&lt;strong&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/strong&gt; and &lt;code&gt;define&lt;/code&gt; associates it with the identifier &lt;strong&gt;&lt;strong&gt;add2&lt;/strong&gt;&lt;/strong&gt;. Now we
can use the function: &lt;code&gt;(add2 5 10)&lt;/code&gt; which evaluates to 15.
&lt;/p&gt;
&lt;p&gt;
With lambda, define, if, and a few more basics, it&amp;#39;s off to the
races. The simple, consistent syntax makes things easy for the kids
and the constrained tool set lets us focus their way of thinking.
&lt;/p&gt;
&lt;p&gt;
Of course this wouldn&amp;#39;t work had DrScheme (now &lt;a href=&#34;https://racket-lang.org/&#34;&gt;Racket&lt;/a&gt;) not
existed. That gave us a nice learning IDE to work in.
&lt;/p&gt;
&lt;p&gt;
Using Scheme, we can not only cover the basics like conditionals,
abstraction and such but also deeper concepts like recursion, map,
filter, and reduce. When we move on from Scheme, the kids also have a
frame of reference for all the other languages and paradigms they use.
&lt;/p&gt;
&lt;p&gt;
There are downsides, however. Outside help is harder to come by and
there is some pushback from parents and it isn&amp;#39;t as pretty and flashy
as some other tool-sets. Scheme worked at Stuy for a number of
reasons. When I created the class that used it, there were no good
pre-AP classes in the school and I had a pretty good reputation as a
teacher. The class also used multiple tools with &lt;a href=&#34;https://ccl.northwestern.edu/netlogo/&#34;&gt;NetLogo&lt;/a&gt; being the
primary other one and tackled a variety of CS and non CS topics.
First time through, reputation and buzz filled the classes and after
that, the class developed a solid enough reputation to fill itself.
&lt;/p&gt;
&lt;p&gt;
It also didn&amp;#39;t hurt that our program developed from the inside
out. First, we had APCS-AB on the books as a junior year course, then
I added our post AP senior year electives. Since it was easy to show
what the kids were already graduating with, it was easy to diffuse any
pushback from not using mainstream tools in the first class.
&lt;/p&gt;
&lt;p&gt;
Scheme worked at Stuy and I feel that it still does. Would I use
Scheme for a first experience in a drop in program at an after-school
where kids might not come back if they don&amp;#39;t get to a payoff
immediately? Probably not. Would I recommend it at a school where I
want to integrate CS with some of the other subjects quickly, again,
probably not (except for integration with algebra where &lt;a href=&#34;http://www.bootstrapworld.org/&#34;&gt;Bootstrapworld&lt;/a&gt;
is a terrific program).
&lt;/p&gt;
&lt;p&gt;
In any event, if you&amp;#39;re a high school CS teacher and  haven&amp;#39;t played
with scheme  or some other functional language, I highly recommend
it - you might not actually ever teach it or use it but it can really
help develop you as a programmer and an educator.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Selecting a starting language - why not Javascript</title>
      <link>https://cestlaz.github.io/posts/starting-with-js/</link>
      <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/starting-with-js/</guid>
      <description>&lt;p&gt;
I was catching up with the team at Stuy the other day and they
mentioned that they were periodically getting pushback on their choice
of languages, particularly in the intro class. The pushback was mostly
in the form of &amp;#34;why don&amp;#39;t you start them with Javascript?&amp;#34;
&lt;/p&gt;
&lt;p&gt;
Back in the day, when I created our intro class where we use Scheme,
NetLogo and then later Python, I&amp;#39;d get similar pushback but then it
was &amp;#34;why not Java?&amp;#34;, &amp;#34;why not C?&amp;#34;, or &amp;#34;whu not C++?&amp;#34;
&lt;/p&gt;
&lt;p&gt;
We had a good discussion on this and I shared my thoughts as to why I
don&amp;#39;t like Javascript as a first language and I thought I&amp;#39;d share some
of them here. I&amp;#39;ll try to get around to the rationale behind Scheme
and NetLogo in a later post.
&lt;/p&gt;
&lt;p&gt;
To start, let me say that I &lt;strong&gt;&lt;strong&gt;Love&lt;/strong&gt;&lt;/strong&gt; Javascript -
particularly when approaching it as a functional language. I also
think every school and situation is different so there are likely
times when Javascript is the right beginner language for the job.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#39;s dive in.
&lt;/p&gt;
&lt;p&gt;
Why are some of the pluses for Javascript as an intro language.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Ubiquity and availability:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
If you have a browser, you have Javascript - it&amp;#39;s also available
through online IDEs and online lightweight sites like &lt;a href=&#34;https://jsfiddle.net/&#34;&gt;JSFiddle&lt;/a&gt;.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Interactivity:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
You can tweak websites almost live, use the HTML5 canvas pretty
interactively and mode
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
It&amp;#39;s mainstream
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
It&amp;#39;s quick to get up and running
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
This is all true, but there are also downsides.
&lt;/p&gt;
&lt;p&gt;
One of my big problems with Javascript is the lack of simple solid
educational tooling. I love to use tools like &lt;a href=&#34;http://www.drjava.org/&#34;&gt;DrJava&lt;/a&gt;, &lt;a href=&#34;http://drpython.sourceforge.net/&#34;&gt;DrPython&lt;/a&gt;, and
&lt;a href=&#34;https://racket-lang.org/&#34;&gt;Racket&lt;/a&gt; (formerly DrScheme) with beginners. All simple learning
IDEs. True, you can use a simple online IDE but I haven&amp;#39;t found them
to have as strong a learning interface. They also, generally, keep you
in an oversimplified programming sandbox. There&amp;#39;s no clean transition
from the sandbox to the real deal - particularly given the non-trivial
state of js build tools and environments. These simple learning IDEs
set the stage and then we can transition to more powerful development environments.
&lt;/p&gt;
&lt;p&gt;
I also prefer, where possible, to have kids learn locally so that they
can learn something about the underlying operating system even if
only at a user level.
&lt;/p&gt;
&lt;p&gt;
A problem relating to the lack of tooling is the fact that a JS
program can fail to run and not give you any meaningful feedback at
all - this is a problem for a beginner.
&lt;/p&gt;
&lt;p&gt;
Javascript also has all sorts of wonkiness. We have &lt;code&gt;=&lt;/code&gt;, and &lt;code&gt;==&lt;/code&gt;
which is pretty conventional, but then there&amp;#39;s also &lt;code&gt;===&lt;/code&gt;. We have
potentially confusing scoping issues and also some other real
weirdness:
&lt;/p&gt;
&lt;div class=&#34;src src-js&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
For more, check out the this &lt;a href=&#34;https://www.destroyallsoftware.com/talks/wat&#34;&gt;video&lt;/a&gt;. Start watching at about 1:20 -
it&amp;#39;s a riot.
&lt;/p&gt;
&lt;p&gt;
All of this weirdness actually makes sense - just not to a beginner.
&lt;/p&gt;
&lt;p&gt;
Javascript also gives plenty of freedom - there are many ways to do
things. This can be great for the developer but not necessarily ideal
for the learner. Loops, recursion, mapping functions - you name it,
Javascript&amp;#39;s got it. I like simpler languages for beginners because
it&amp;#39;s easier to get them thinking and problem solving in certain ways
when there tool set is somewhat restricted (more on that when I write
about Scheme).
&lt;/p&gt;
&lt;p&gt;
Finally, the fact that Javascript&amp;#39;s a mainstream language can be a
minus. Given its popularity, a beginner class could have at  least a
few kid who&amp;#39;ve at least played with the language. This can lead them
to think they know more than they do and more importantly, this can
be intimidating to the real newbies who develop the impression that
&amp;#34;everyone knows this but me.&amp;#34; A less mainstream language puts everyone
on a level playing field.
&lt;/p&gt;
&lt;p&gt;
Let me say again that I love javascript as a language and before a
student graduates Stuy they can learn all about Javascript, front end
development, some functional programming, and more. It&amp;#39;s just not the
right language to start with - at least not at Stuy.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Should CS Ed be in bed with the College Board</title>
      <link>https://cestlaz.github.io/posts/cs-ed-in-bed-college-board/</link>
      <pubDate>Sat, 04 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/cs-ed-in-bed-college-board/</guid>
      <description>&lt;p&gt;
I&amp;#39;m guessing my views  on this aren&amp;#39;t very popular -that&amp;#39;s OK, every
community needs a curmudgeon.
&lt;/p&gt;
&lt;p&gt;
A few years ago, I cautioned if we weren&amp;#39;t careful, once the big
players got involved, CS Ed would go the way of other disciplines, and
not in a good way. It looks like indeed we&amp;#39;re well on our way down
that road.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve ranted before about things like non-profits, drop in and summer
programs. &lt;a href=&#34;https://cestlaz.github.io/posts/2015-05-07-learning-takes-time.html/#.WJXSS99vHmE&#34;&gt;STEM Oil Salesmen&lt;/a&gt; &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
selling easy fixes, exciting kids and parents, using the Think Method
just like Professor Harold Hill only to send the kids off where they
can blame a future teacher for failure.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve also ranted about teacher preparation and how all the rage is
short term, &lt;a href=&#34;https://cestlaz.github.io/posts/scotland/#.WJXT999vHmE&#34;&gt;Superficial PD and scripted curricula&lt;/a&gt;  and my concern that
once the politicians can say CS is in the schools, &lt;a href=&#34;https://cestlaz.github.io/posts/2015-03-04-expedient-vs-good.html/#.WJXT7d9vHmE&#34;&gt;we&amp;#39;ll be done&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been working towards getting CS to all students for most of my
career and while it&amp;#39;s wonderful to see us getting closer to the goal,
I&amp;#39;m seeing more and more signs that my caution is becoming
reality. and CS Ed is going the way of other Ed - aligned to testing
and more to the whims of the power players and politicians than to
teachers and students.
&lt;/p&gt;
&lt;p&gt;
The other week I noticed, &lt;a href=&#34;http://teacherblog.code.org/post/156278055294/ap-cs-principles-could-make-history-how-can-we&#34;&gt;this post&lt;/a&gt; by Code.org trying to encourage
more students to take the APCSP exam - not encourage more students
take the class or some other class or to have more students be exposed
to CS but to actually sit for the APCSP exam. That post was followed
by &lt;a href=&#34;http://teacherblog.code.org/post/156689658029/ask-your-cs-principles-students-to-star-in-our&#34;&gt;this one&lt;/a&gt; which also highlights actually taking the exam.
&lt;/p&gt;
&lt;p&gt;
This didn&amp;#39;t sit well with me.
&lt;/p&gt;
&lt;p&gt;
What does the exam do for the kid? It doesn&amp;#39;t drive instruction - by
that time, any good teacher knows their student and is better served
by using their own &lt;a href=&#34;https://cestlaz.github.io/posts/ap-we-dont-trust-teachers/#.WJXbA99vHmE&#34;&gt;assessments&lt;/a&gt;. The college credit thing? I&amp;#39;m
skeptical. Fewer and fewer schools are giving credit for APCSA let
alone this new CS0 non major course. Blanket credit? Since full time
students pay for a range of credits, I&amp;#39;m still skeptical
here. Placement? It&amp;#39;s a course for non-majors - what exactly are you
placing out of?
&lt;/p&gt;
&lt;p&gt;
Reasons not to take the exam?
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
If it doesn&amp;#39;t do anything for the kid, why take it
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Stress of taking the exam
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
There are other ways of placing out of courses once in college
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Save the expense
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
As a general rule, I&amp;#39;m against forcing students to sit for
AP exams. At the extreme case, since we&amp;#39;ve been brainwashed to think
that a school that has lots of kids sitting for exams is good, I&amp;#39;ve
seen at least one case of a principal having all his kids sit for, and
just about all &lt;strong&gt;&lt;strong&gt;fail&lt;/strong&gt;&lt;/strong&gt; AP Calculus - that is, get a 1 or 2 on the exam. This
principal had all his students take the exam, and only 2 scores were 3
or higher. This principal then parlayed his success into a higher
profile gig - he&amp;#39;s moved up in the world while setting up his students
to fail.
&lt;/p&gt;
&lt;p&gt;
This follows last year&amp;#39;s announcement that code.org was &lt;a href=&#34;https://cestlaz.github.io/posts/2015-05-19-code-org-college-board.html/#.WJXbm99vHmE&#34;&gt;partnering with
the College Board&lt;/a&gt; - offering PD to teachers for free if the schools
signed up their students for the PSAT 8/9 - another meaningless
exam. So, we get teacher training light [fn::If you think that PD based
teacher training is OK, ask yourself if you want your own child&amp;#39;s
chemistry teacher to be a history teacher with a few weeks summer
training in chemistry] as long as the school pays for
the PSAT8/9 for every kid so that the kid can take yet another test
with really no value[fn::And I&amp;#39;m guessing the exam will be offered
during the day so teachers will proctor for free rather than be
allowed to, you know, teach their students.].
&lt;/p&gt;
&lt;p&gt;
Why should students pay for an AP exam that doesn&amp;#39;t do anything for
them? Why should Jane Q Taxpayer pay for exams that only server to
enrich the College Board.
&lt;/p&gt;
&lt;p&gt;
True, The College Board is a big player. They already have much more
influence of American High School education than they should. It&amp;#39;s
easy to climb on board the AP train for entre into our schools. The
question is, should we use positions of influence to push efforts that
might help our end but leave collateral damage to students and the public.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t doubt code.org&amp;#39;s sincerity in wanting good CS in all schools
nor the efforts or value as an advocate for CS Education. I&amp;#39;m
concerned that the desire to win big and win now is moving us in a
direction that we&amp;#39;ll regret years from now.
&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr class=&#34;footnotes-separatator&#34;&gt;
&lt;div class=&#34;footnote-definitions&#34;&gt;
&lt;div class=&#34;footnote-definition&#34;&gt;
&lt;sup id=&#34;footnote-1&#34;&gt;&lt;a href=&#34;#footnote-reference-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;div class=&#34;footnote-body&#34;&gt;
&lt;p&gt;
Not my term, but I really like it
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>BS? - BA</title>
      <link>https://cestlaz.github.io/posts/ba-bs/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/ba-bs/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;
I didn&amp;#39;t know Hunter College had computer science.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I heard that refrain more than once during my fall visits to high
schools. Part of the reason for this is due to Hunter CS&amp;#39;s low
profile and small size in spite of its high quality.
&lt;/p&gt;
&lt;p&gt;
Part, though, was also because of some misconceptions about Computer
Science programs. I&amp;#39;d hear things like &amp;#34;but they only offer a BA not a
BS,&amp;#34; or &amp;#34;but Hunter isn&amp;#39;t an engineering school.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve come to realize that we have to do a better job educating kids as
to what can come next after high school.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not entirely sure why many assume that CS has to be under
engineering. When I was applying to college, most of my choices were
Arts and Science schools offering BAs in CS. Maybe it&amp;#39;s because people don&amp;#39;t
disagregate STEM subjects. Even though it&amp;#39;s not a computer science
program many schools seem to associate FIRST robotics with computer
science. Likewise any class with even a modicum of coding becomes
computer science and as makerspaces and robotics are a percieved as
easy entry STEM classes that appear to be CS (something I&amp;#39;ll rant
about in a future post), CS becomes associated with engineering.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s easy enough to explain the difference between a BA in CS and a BS
in CS and it&amp;#39;s equally easy to show that you can have tremendous
success either way. All you have to do to show the validity of a BA in
CS is look at succesful people from places like NYU, Courant, Columbia
College (as opposed to Columbia Engineering), Cornell school of Arts
and Sciences, etc to balance successful people from the engineering schools.
&lt;/p&gt;
&lt;p&gt;
As I&amp;#39;m sure you know, I&amp;#39;m pretty high on Hunter CS and it&amp;#39;s certainly
one of the best value CS educations out there. Personally, I&amp;#39;m a big believer in a
liberal arts education but in any case, as a community we have to do a
better job educating the high schools so that graduating seniors are
best informed when deciding on their futures.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>It gets easier (or advent of code 2016 day 19)</title>
      <link>https://cestlaz.github.io/posts/it-gets-easier-advent19/</link>
      <pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/it-gets-easier-advent19/</guid>
      <description>&lt;p&gt;
Today&amp;#39;s &lt;a href=&#34;http://adventofcode.com/2016/day/19&#34;&gt;Advent of Code&lt;/a&gt; problem was a variant on the &lt;a href=&#34;http://mathworld.wolfram.com/JosephusProblem.html&#34;&gt;Josephus
problem&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I recalled that there was a formula to figure out the
sole survivor but I decide to run a simulation rather than looking it
up. I also decided to write it up in C++, well, really C with cout
instead of printf.
&lt;/p&gt;
&lt;p&gt;
Part 1 was the traditional problem. Part 2 was a variant where at each
iteration, you remove the elf opposite the elf being processed (see
the &lt;a href=&#34;http://adventofcode.com/2016/day/19&#34;&gt;problem description&lt;/a&gt; for details).
&lt;/p&gt;
&lt;p&gt;
For both solutions I coded up a circular doubly linked list:
&lt;/p&gt;
&lt;div class=&#34;src src-c&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You can see my complete solutions &lt;a href=&#34;https://github.com/zamansky/advent2016/blob/master/day19.cpp&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I was thinking about how I wrote the code â€“ I just rolled it off the
top of my head. The same was true for the earlier AoC problems where I
had to implement a breadth first search or something similar.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not making a statement about my amazing coding abilities - linked
lists and graph searches are pretty basic, but rather than having done
the CS thing for so long, these fundamentals have become somewhat
routine. I haven&amp;#39;t really written C code in years but other than a
couple of typos (and a stupid mistake in calculating steps) things
worked right off the bat.
&lt;/p&gt;
&lt;p&gt;
I remember a time when I was in college or even a young professional
when I would use an array and an index as a stack or queue - not
because it made more sense but rather, because I wasn&amp;#39;t fully
comfortable with memory manipulation and linked lists. The same could
be said for my first few years working with anything more than the
simplest recursion.
&lt;/p&gt;
&lt;p&gt;
All of this is to say that it does get easier.
&lt;/p&gt;
&lt;p&gt;
Things that seem trivial to us now seemed
insurmountable when we were beginners. Last year, I wrote about an overnight homework
assignment I gave to my class that would have been a final project a
year earlier (the post is &lt;a href=&#34;http://cestlaz.github.io/posts/2015-02-11-taking-stock-self-assess.html/#.WFiGl99iekA&#34;&gt;here&lt;/a&gt; but the homework links are no longer
active) and a few weeks ago I recall a fellow CS teacher talking about
how much longer it takes his students to write a chunk of code than it
takes the teacher.
&lt;/p&gt;
&lt;p&gt;
New things are challenging and take time but with practice and
persistence techniques that were once daunting can become tools ready
at our disposal to use on a whim.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code 2016 - Check your data</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016-check-data/</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016-check-data/</guid>
      <description>&lt;p&gt;
I&amp;#39;m spending the weekend up in Michigan. Visiting my brother and is
family. We&amp;#39;re here to see the &lt;a href=&#34;http://umgass.org&#34;&gt;UMGASS&lt;/a&gt; production of Gilbert and
Sullivan&amp;#39;s &lt;a href=&#34;http://www.umgass.org/current-production&#34;&gt;The Sorcerer&lt;/a&gt;. Batya also came up from Cornell to join us so
the two families are all togehter for the first time in about 10
years.
&lt;/p&gt;
&lt;p&gt;
This hasn&amp;#39;t left much time for &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; but I did manage to
finish yesterday&amp;#39;s challenge this morning.
&lt;/p&gt;
&lt;p&gt;
What took me so long? Much like last year, it was &lt;a href=&#34;http://cestlaz.github.io/posts/2015-12-17-im-an-idiot.html/&#34;&gt;because I&amp;#39;m an
idiot&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
The &lt;a href=&#34;http://adventofcode.com/2016/day/9&#34;&gt;problem&lt;/a&gt; seemed pretty straighforward. I coded a solution and it
worked for all the test cases. I tried it on my data set but
the grader said the answer was wrong. I went through the problem a
number of times as well sa my code. I figured I either mis-interpreted
the question or had some bug. I found neither to be true.
&lt;/p&gt;
&lt;p&gt;
After some frustration, I went over to the Advent of Code &lt;a href=&#34;https://www.reddit.com/r/adventofcode/&#34;&gt;subreddit&lt;/a&gt;
grabbed a couple of posted solutions (trying not to look at them) and
ran both on my data - those solutions got the same answer on my data
set as I did.
&lt;/p&gt;
&lt;p&gt;
This morning, I asked Batya to look over my code and the problem (it&amp;#39;s
always good to have a daughter that&amp;#39;s smarted than you are) but she
saw no problems.
&lt;/p&gt;
&lt;p&gt;
Finally, I emailed my buddy JonAlf since I know he completed the problem. He sent back his answer along
with his data set and I got the same answer as he did on his data.
&lt;/p&gt;
&lt;p&gt;
What could be the problem.
&lt;/p&gt;
&lt;p&gt;
His data set was about 12k characters long, mine was 4k. Something had
to be wrong here. I went back to the Advent of Code site and grabbed
the data set again. This time, I went to the page and did a &amp;#34;save-as&amp;#34;
to save it - last time, I cut and pasted.
&lt;/p&gt;
&lt;p&gt;
The cut and paste version was 4k, the save-as was 12k. This time it
worked and was accepted and I also finished part 2 in short order.
&lt;/p&gt;
&lt;p&gt;
The moral of the story â€“ make sure you check the integrity of your
data set - you&amp;#39;ll never get the right answer if you&amp;#39;re working with
the wrong data.
&lt;/p&gt;
&lt;p&gt;
In case anyone&amp;#39;s interested, you can find my AoC code &lt;a href=&#34;https://github.com/zamansky/advent2016&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2016 #2</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016-2/</link>
      <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016-2/</guid>
      <description>&lt;p&gt;
Today we&amp;#39;re looking at &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; 2016 &lt;a href=&#34;http://adventofcode.com/2016/day/2&#34;&gt;number 2&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
To change things up, I thought I&amp;#39;d do a video where I live code a solution.
&lt;/p&gt;
&lt;p&gt;
The solution I present is pretty straightforward - use a 2D array (or
technically, an array of strings) to represent the keypad, parse the
input, and follow the input instructions to build the code.
&lt;/p&gt;
&lt;p&gt;
One of the things I really like about Advent of Code is that every
problem has two parts and depending on how you solved part 1, you may
or may not have extra work to do for part 2.
&lt;/p&gt;
&lt;p&gt;
A couple of years ago, I wrote about one of the coding techniques I
try to convey to my students. The idea of &lt;a href=&#34;http://cestlaz.github.io/posts/2014-02-26-change-the-data.md&#34;&gt;changing the data&lt;/a&gt; to take
away edge and special cases.
&lt;/p&gt;
&lt;p&gt;
Part two of this problem is a perfect time to use that technique.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the video, I hope you enjoy it:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/EC8gSrYQ11g&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>A Teacher looks at Advent of Code 2016 #1</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016-1/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016-1/</guid>
      <description>&lt;p&gt;
I recently &lt;a href=&#34;http://cestlaz.github.io/posts/advent-of-code-2016/&#34;&gt;posted&lt;/a&gt; about &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; - a series of programming
problems relseased one a day. While they vary in terms of level of
difficulty, a number of them make nice problems for introductory to
mid level programming classes.
&lt;/p&gt;
&lt;p&gt;
I thought I&amp;#39;d share some of my thoughts on a few of them starting with
the first problem from this years competition.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;http://adventofcode.com/2016/day/1&#34;&gt;Take a minute to read it over.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
At first glance, it might seem to a young programmer that this problem
requires a two dimensional array - all about (x,y) coordinates but
then there&amp;#39;s a problem - there are no limits on coordinates and we
can&amp;#39;t make an unlimited size array.
&lt;/p&gt;
&lt;p&gt;
After thinking a bit, hopefully the programmer realizes that all they
need to do is keep track of the how the &lt;strong&gt;&lt;strong&gt;(x,y)&lt;/strong&gt;&lt;/strong&gt; location changes over
time. In the solution below, we start at &lt;strong&gt;&lt;strong&gt;(0,0)&lt;/strong&gt;&lt;/strong&gt; and count the steps as
we update two variables &lt;strong&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;y&lt;/strong&gt;&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;
When we finish processing the moves, we have our current location in
&lt;strong&gt;&lt;strong&gt;(x,y)&lt;/strong&gt;&lt;/strong&gt; and we have the number of steps taken to get there.
&lt;/p&gt;
&lt;p&gt;
The solution below hsa a couple of niceties that a beginning
programmer might not know or use (and I&amp;#39;m not arguing that what&amp;#39;s written is
superior in any way, it&amp;#39;s just what I ended up writing).
&lt;/p&gt;
&lt;p&gt;
I make use of tuple destructuring:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
which assigns &lt;strong&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/strong&gt; to the first item in the tuple and &lt;strong&gt;&lt;strong&gt;y&lt;/strong&gt;&lt;/strong&gt; the
second. I used that a number of times
&lt;/p&gt;
&lt;p&gt;
I also use a list  I call &lt;strong&gt;&lt;strong&gt;dirs&lt;/strong&gt;&lt;/strong&gt; to hold dx and dy values for the
four direcitons:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This made it easier to to update the location based on the 4
directions. I could also have just used if statements.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s all the code:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Overall, a nice little problem for beginning and intermediate
students.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advent of Code 2016</title>
      <link>https://cestlaz.github.io/posts/advent-of-code-2016/</link>
      <pubDate>Sat, 03 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/advent-of-code-2016/</guid>
      <description>&lt;p&gt;
Once again, it&amp;#39;s time for &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; - a series of small
programming problems released once a day.
&lt;/p&gt;
&lt;p&gt;
I wrote a bit about it &lt;a href=&#34;http://cestlaz.github.io/posts/2015-12-15-advent.html/&#34;&gt;last&lt;/a&gt; &lt;a href=&#34;http://cestlaz.github.io/posts/2015-12-17-im-an-idiot.html/#.WEMqBB9ieYQ&#34;&gt;year&lt;/a&gt; and you can still find last years
problems &lt;a href=&#34;http://adventofcode.com/2015/&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s only day three but so far, all of the problems look really nice
for students in APCS-A or any similar intro course. I&amp;#39;m thinking of
looking at a couple of the problems this week with my class at Hunter.
&lt;/p&gt;
&lt;p&gt;
I didn&amp;#39;t think about this much last year but one thing I really like
about the competition is that each problem comes in two parts. You&amp;#39;re
first presented with the problem and the input and once you put in the
correct answer, you&amp;#39;re presented with part two.
&lt;/p&gt;
&lt;p&gt;
This can be annoying at times, particularly when it requires a large
code rewrite but it also means that well designed, not too specific
solutions are rewarded.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s not quite the same as changing the specs on a project mid way but
it does encourage thinking about more than just solving a super
specific problem.
&lt;/p&gt;
&lt;p&gt;
Check out &lt;a href=&#34;http://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; and see if it&amp;#39;s something you or your classes
might enjoy.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Inverted Index Project</title>
      <link>https://cestlaz.github.io/posts/inverted-index/</link>
      <pubDate>Sat, 26 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/inverted-index/</guid>
      <description>&lt;p&gt;
I haven&amp;#39;t spoken much about the class I&amp;#39;ve been teaching this
semester. It&amp;#39;s an intro CS course - a programming heavy intro. I
decided to use Python with a transition at the end to C++. The
transition is to mirror Hunter&amp;#39;s normal first CS course that ends with
a C++ intro to prepare the students for next semester&amp;#39;s CS course
which is a more intense OOP class using C++ - the language we use in
our core courses.
&lt;/p&gt;
&lt;p&gt;
Throughout the semester I&amp;#39;ve tried to use a variety of interesting
application areas so as to try to give the students some idea of the
possibilities that studying CS will open up for them.
&lt;/p&gt;
&lt;p&gt;
After covering Python dictionaries and lists I thought we&amp;#39;d play by
building an inverted Index.
&lt;/p&gt;
&lt;p&gt;
The basic idea is to map a set of words back to source files. For
example, given the following four one line files:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;files&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;&lt;/th&gt;
&lt;th&gt;contents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;file.01&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;if you prick us do we not bleed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;file.02&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;if you tickle us do we not laugh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;file.03&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;if you poison us do we not die and&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;file.04&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;if you wrong us shall we not revenge&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
You could build a data structure mapping each word back to the file(s)
that contain it (partially shown here),
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Word&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;&lt;/th&gt;
&lt;th&gt;Files containing It&amp;#39;s&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;if&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;file.01 file.02 file.03 file.04&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;you&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;file.01 file.02 file.03 file.04&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prick&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;file.01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;us&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;file.01 file.02 file.03 file.04&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;do&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td&gt;file.01 file.02 file.03&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
You can, of course, store more information - how many times a word
appears in a file, where it appears, etc.
&lt;/p&gt;
&lt;p&gt;
This is a fairly easy structure to build. A dictionary where the keys
are the words in the file and the values are lists of the documents
containing the words.
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In addition to letting us work with dictionaries and lists, we can
also review file access and even the python CSV module if we want.
&lt;/p&gt;
&lt;p&gt;
We can immediately write simple queries â€“ &amp;#34;what document(s) contain
the word &amp;#39;prick,&amp;#39; but things get more interesting if you write
functions to perform &lt;strong&gt;&lt;strong&gt;and&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;or&lt;/strong&gt;&lt;/strong&gt; queries - &amp;#34;what document(s)
contain the words &amp;#39;prick&amp;#39; &lt;strong&gt;&lt;strong&gt;or&lt;/strong&gt;&lt;/strong&gt; &amp;#39;do&amp;#39;&amp;#34; for instance.
&lt;/p&gt;
&lt;p&gt;
Why are we building this (besides as a data structure and programming
exercise)? I&amp;#39;ve seen a number of references to using an inverted index
when building a web search engine. In fact, I think that&amp;#39;s something
you do early on in the Udacity Mooc. I just wanted to play with
information retrieval.
&lt;/p&gt;
&lt;p&gt;
I remembered that there was a collection of information, including
last statements from &lt;a href=&#34;https://www.tdcj.state.tx.us/death_row/dr_executed_offenders.html&#34;&gt;executed offenders in Texas&lt;/a&gt;. Someone conveniently
converted it into a &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1HAjZTtPriClY-X3n9whTkA4i5D7bn3bmtHnLoaVICvI/edit#gid=1&#34;&gt;Google Spreadsheet&lt;/a&gt;. The format&amp;#39;s a little
different from our simple four file example but then there&amp;#39;s more
data. It&amp;#39;s straightforward enough to download the spreadsheet as a CSV
file and then read it with a Python program that builds it into an
inverted index.
&lt;/p&gt;
&lt;p&gt;
Now we have some interesting data to play with.
&lt;/p&gt;
&lt;p&gt;
How many offenders used words like &amp;#34;sorry&amp;#34; or &amp;#34;apologize?&amp;#34; How about
references to religion? We can do all sorts of &lt;strong&gt;&lt;strong&gt;and&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;or&lt;/strong&gt;&lt;/strong&gt;
queries.
&lt;/p&gt;
&lt;p&gt;
We just played with this a bit but I could see all sorts of
explorations. What about taking some great work of literature and
turning it into an inverted index by chapter. You could query
characters or certain words and see where and when they appear in the
book. A new and different way of exploring literature.
&lt;/p&gt;
&lt;p&gt;
So, there you have it - an interesting little project we played with
this past semester. We did it in an intro Python course but I could
see it as an interesting project in AP CS A using hashmaps and lists.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cornell Technion Project Studio</title>
      <link>https://cestlaz.github.io/posts/cornell-tech-proj-studio/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/cornell-tech-proj-studio/</guid>
      <description>&lt;p&gt;
I spent this evening as a crit advisor for this semesters &lt;a href=&#34;http://tech.cornell.edu/studio/curriculum/product-studio&#34;&gt;Project
Studio&lt;/a&gt;. The class is basically a finishing class for their Masters
students. The class forms teams that work with a &amp;#34;company champion&amp;#34;
that acts an advisor to build a product.
&lt;/p&gt;
&lt;p&gt;
As a Crit Advisor, I, along with two other people from the tech
industry have a give and take with three groups and hopefully we can
provide useful feedback.
&lt;/p&gt;
&lt;p&gt;
As a &amp;#34;tech industry person&amp;#34; I feel a bit like an outsider since I&amp;#39;m
really the &amp;#34;teacher guy,&amp;#34; but I think I had some worthwhile things to
share with the groups.  Besides,
I&amp;#39;d like to think I&amp;#39;m sufficiently in touch with the tech industry
through &amp;#34;the family&amp;#34; to be a reasonably sound advisor.
&lt;/p&gt;
&lt;p&gt;
As it turns out, two of the groups I worked with had an education bent
so at least in terms of product they were in my wheelhouse.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t want to talk specifically about the student products since I
didn&amp;#39;t ask permission but I did want to share a few thoughts.
&lt;/p&gt;
&lt;p&gt;
The products reminded me very much of the projects my Stuy kids
produced in their senior SoftDev class. This is not to belittle the
Cornell Tech people but rather noting how advanced the work of the
Stuy kids is. Beyond that, I liked the composition of the groups I
talked to - nice combinations of skill sets and backgrounds.
&lt;/p&gt;
&lt;p&gt;
I love the idea of the mentoring company which had an interesting effect on
the groups. In all cases, the mentoring company helped provide the
teams with an idea framework but in one case, I think the company&amp;#39;s point of
view actually limited the groups vision a bit. This came up in our
discussions and I&amp;#39;m hoping that the students got something out of
that.
&lt;/p&gt;
&lt;p&gt;
I also liked the crit review I was part of - bringing in outsiders to
show your work to and to get feedback from. It would probably hard
logistically at Stuy, but I&amp;#39;ll talk to the guys there about the
concept.
&lt;/p&gt;
&lt;p&gt;
I shared my contact info with the two groups that asked and if they
follow up, I&amp;#39;d love to be a resource for them.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m also looking forward to taking part in more events like this in
the future.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Computational Thinkers in Scotland</title>
      <link>https://cestlaz.github.io/posts/scotland/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/scotland/</guid>
      <description>&lt;p&gt;
I&amp;#39;m way behind on my &lt;a href=&#34;http://cacm.acm.org/&#34;&gt;Communications of the ACM&lt;/a&gt;. I generally only read
them when I use my trainer in the mornings and with summer running and
outside riding, I&amp;#39;m still on the December 2015 issue.
&lt;/p&gt;
&lt;p&gt;
This morning, I read a viewpoint by Jeremy Scott and Alan Bundy on &lt;a href=&#34;http://cacm.acm.org/magazines/2015/12/194638-creating-a-new-generation-of-computational-thinkers/abstract&#34;&gt;a
program in Scotland&lt;/a&gt;. If you&amp;#39;re an ACM member, and if you&amp;#39;re a CS
practitioner, student, academic, or teacher you should be, you can read the piece for details.
&lt;/p&gt;
&lt;p&gt;
Me? I noticed a number of similarities between what Bundy and Scott
described and efforts here in the USA including some of the red flags.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not here to talk about the program described in detail or their
successes and failures. I don&amp;#39;t have enough information to fairly
comment on that. I&amp;#39;m here in my usual role of curmudgeon to highlight
common red flags that if unheeded could cost all of us the opportunity
to get really great CS Ed to all of our students.
&lt;/p&gt;
&lt;p&gt;
One red flag right away were a number of references to the program
being curriculum and materials driven, not teacher driven. The
viewpoint states that materials &amp;#34;were designed to be used by even
non-specialist teachers.&amp;#34; We see the same thing here in the USA and
not just in CS Ed. Teaching overall is being devalued with the elite
pushing programs that handcuff good teachers to a script (which leads
students towards &amp;#34;success&amp;#34; in passing a nonsense standardized exam)
all the while sending their own kids to elite private schools with
knowledgeable teachers.
&lt;/p&gt;
&lt;p&gt;
I know i didn&amp;#39;t want my kids to be taught chemistry history or any
other subject by a teacher that hasn&amp;#39;t studied the content yet here we
go saying it&amp;#39;s okay for CS.
&lt;/p&gt;
&lt;p&gt;
The counter argument is that we have to do something now and we&amp;#39;ll do
better later. We all go in with the best of intentions but more often
than not, once a politician has their sound bite and once a cheap
apparent solution is in place, it&amp;#39;s good enough and we&amp;#39;re done. I
ranted about that a while back both &lt;a href=&#34;http://cestlaz.github.io/posts/2015-03-04-expedient-vs-good.html/#.V-5UqN9vGAk&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://cestlaz.github.io/posts/2015-05-07-learning-takes-time.html/#.V-5Uot9vGAk&#34;&gt;here&lt;/a&gt;. To their credit,
Bundy and Scott talk a bit about this concern in the piece.
&lt;/p&gt;
&lt;p&gt;
The piece also said &amp;#34;It is also necessary to employ a pedagogy that is
informed by the latest research into the most effective ways to teach
computing.&amp;#34; This sounds good but the truth is, education research
doesn&amp;#39;t have the best reputation among educators. Last month, I
asked one of the best math teachers around what was being bandied
about as best practices in math education according to &amp;#34;the
research?&amp;#34; He basically said &amp;#34;the research says do &lt;strong&gt;&lt;strong&gt;fad du jour&lt;/strong&gt;&lt;/strong&gt;
but that doesn&amp;#39;t work for me so I just do &lt;strong&gt;&lt;strong&gt;actually good technique&lt;/strong&gt;&lt;/strong&gt;.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
Over the years, I&amp;#39;ve spoken to many teachers and by and large the best
ones discredit &amp;#34;the research.&amp;#34; Of course, my comment will be
discredited by ed researchers saying that &amp;#34;you&amp;#39;re just giving
anecdotes&amp;#34; but then, if I did the same thing while employed as a
researcher, did a couple of surveys and submitted it for publication,
then it would be &amp;#34;research.&amp;#34; So much of teaching is a craft and the
truth is, practitioners know best.
&lt;/p&gt;
&lt;p&gt;
Related to this is authentication by citing authority. Particularly
dangerous in our field because many people with little to no real
background in teaching CS are anointed as experts and thought leaders
(see this post: &lt;a href=&#34;http://cestlaz.github.io/posts/2015-10-26-self-appointed-experts.html/&#34;&gt;here&lt;/a&gt;). In this case, the viewpoint cites Cameron
Fadjo. I&amp;#39;ve only met Cameron once or twice and he seems like a sharp
guy but when he was given the post of Director of Software Engineering
for NYC, according to his linked in profile, he had neither taught k12
nor had any real CS background.  This is of course the profile of many
CS Education thought leaders.
&lt;/p&gt;
&lt;p&gt;
My overall take. It sounds like just like here, Scotland has people
trying to make a difference and trying to do good. It also sounds like
they&amp;#39;re falling into the same traps and pitfalls as we are on this
side of the Atlantic.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Can NYCIST become in leader in CS Education?</title>
      <link>https://cestlaz.github.io/posts/nycist/</link>
      <pubDate>Sat, 24 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/nycist/</guid>
      <description>&lt;p&gt;
I only learned about NYCIST last spring. They&amp;#39;re the &amp;#34;New York
Consortium for Independent School Technologists.&amp;#34; They had something
of an open house that I attended. I heard about them from friend
and fellow CS educator &lt;a href=&#34;https://twitter.com/ed_saber&#34;&gt;Saber Khan&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Last Thursday I spent an afternoon and evening with NYCIST members for
a discussion of the state of K12 Computer Science Education in the
City.
&lt;/p&gt;
&lt;p&gt;
Most of my work has been with public schools and most of the teachers
I know, public school teachers so it was great to make new friends in
the Independent school community.
&lt;/p&gt;
&lt;p&gt;
One thing I realized during the evening was that NYCIST has a real
opportunity to do something special.
&lt;/p&gt;
&lt;p&gt;
In some ways, the public schools are leading the way in computer
science education as a result of this administrations CS4All
initiative but at the same time, public schools face some real
challenges. While some &amp;#34;early adopters&amp;#34; have developed their own take
on computer science education, by and large, CS4All is being defined
and driven by few for all and, at least right now, the model seems to
be the &amp;#34;a little PD and you&amp;#39;re a CS teacher&amp;#34; model.
&lt;/p&gt;
&lt;p&gt;
At the same time, standardized testing and teacher evaluations are
pressuring schools, particularly schools of our most vulnerable
students to push resources towards test prep in tested subjects rather
than real education, including CS.
&lt;/p&gt;
&lt;p&gt;
In this particular instance, NYCIST and independent schools can be
what charter schools were supposed to be before they were corrupted.
&lt;/p&gt;
&lt;p&gt;
Laboratories of innovation.
&lt;/p&gt;
&lt;p&gt;
NYCIST has already gathered together interested parties and the
independent schools aren&amp;#39;t burdened by the weight of politically
driven testing and teacher evaluation. At the same time, small class
sizes and flexible models allow for innovation.
&lt;/p&gt;
&lt;p&gt;
If they wanted to, they could probably create curricular and
instructional frameworks for CS education and. dare I say it, share it
back to the public schools.
&lt;/p&gt;
&lt;p&gt;
I know I&amp;#39;m ignoring independent school politics and other issues that
would prevent this from happening, but I just feel that if there&amp;#39;s a
desire to do so from a group like NYCIST, it could happen.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m looking forward to continuing to work with my new friends and if
any of you are interested in finding out more about NYCIST, just tweet
to &lt;a href=&#34;https://twitter.com/ed_saber&#34;&gt;Saber&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#39;t know if my idea here will take root but if it does, I&amp;#39;d love
to work with NYCIST to make something happen.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>