<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>learning on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/learning/</link>
    <description>C&#39;est la Z (learning)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Jan 2018 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/learning/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Using Emacs 40 - Atomic Chrome</title>
      <link>https://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</link>
      <pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-40-atomic-chrome/</guid>
      <description>
&lt;p&gt;
Thanks to everyone who voted for topics or commented with suggestions
for videos. I&amp;#39;ll try to get to them in the coming months.
&lt;/p&gt;
&lt;p&gt;
Today is just a quick hit on Atomic Chrome - an Emacs package and
browser extension that allows you to edit web form inputs with Emacs.
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
UPDATE
&lt;/h2&gt;
&lt;p&gt;
I forgot to mention that you can set a shortcut key, at least in chrome rather than
clicking on the icon. This makes things much smoother.
&lt;/p&gt;
&lt;p&gt;
All you have to do is:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Go to &lt;strong&gt;&lt;strong&gt;chrome://extensions&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
On the bottom of the page you&amp;#39;ll see a button to set &lt;strong&gt;&lt;strong&gt;keyboard shortcuts&lt;/strong&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Set the shortcut for Atomic Chrome
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Enjoy:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wyPZws66Sic&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 39 - mu4e</title>
      <link>https://cestlaz.github.io/posts/using-emacs-39-mu4e/</link>
      <pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-39-mu4e/</guid>
      <description>
&lt;p&gt;
I generally use three email accounts. My personal one, work one, and
one for my non-profit. For a couple of years, I&amp;#39;ve been using mu4e
under Emacs for both my work and non-profit email accounts and gmail
for my personal account.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve had lots of requests for a video on what I do but I&amp;#39;ve been
hesitant for two reasons:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
There are parts of my configuration that are copied from others and
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
I really don&amp;#39;t understand.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
I wasn&amp;#39;t happy with the complexity and some of the tooling.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
While there are still parts of my configuration that I&amp;#39;m not 100%
clear on I&amp;#39;ve cleaned up the tooling and complexity by using mu4e only
for my work email for the time being and by switching to mbsync.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s a writeup on configuring things with video at the end.
&lt;/p&gt;
&lt;p&gt;
Unless you run an email server on your local machine using mu4e can be
thought of as three parts.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Get the email from the server to the local machine using IMAP.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Setting up mu.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Access the email locally from Emacs.
&lt;/p&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Part 1 Getting the email to your local machine using mbsync
&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
I found his terrific blog post by &lt;a href=&#34;https://twitter.com/robstewartUK&#34;&gt;Rob Stewart&lt;/a&gt; on setting up &lt;a href=&#34;http://www.macs.hw.ac.uk/~rs46/posts/2014-01-13-mu4e-email-client.html&#34;&gt;mbsync and
mu4e&lt;/a&gt;. Read it over. I basically followed his directions for setting up
&lt;a href=&#34;https://sourceforge.net/p/isync/isync/ci/master/tree/&#34;&gt;mbsync&lt;/a&gt;. To build from source under Linux, I used the sequence:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./autogen.sh
./configure
make
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I followed Rob&amp;#39;s instructions basically verbatim for the password and
authentication stuff so I suggest you do the same.
&lt;/p&gt;
&lt;p&gt;
You&amp;#39;ll also have to make sure to make the necessary email directories
manually. I describe all of this in the video.
&lt;/p&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Part 2 - setting up mu.
&lt;/h3&gt;
&lt;p&gt;
To set up mu, clone it from git://github.com/djcb/mu.git and build
it. You can find dependencies &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html&#34;&gt;here&lt;/a&gt; and then follow the same sequence
used to build mbsync listed above.
&lt;/p&gt;
&lt;p&gt;
Since I store my local email under a folder &lt;code&gt;Maildir&lt;/code&gt;  which is what
mu defaults to I can start using it by indexing my emails:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mu index&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video shows some examples of using mu from the command line and
you can look at the mu cheatsheet &lt;a href=&#34;http://www.djcbsoftware.nl/code/mu/cheatsheet.html&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Setting up mu4e in emacs
&lt;/h3&gt;
&lt;p&gt;
Finally, you can set up mu4e in emacs. Take a look at Rob&amp;#39;s
configuration in his post or my &lt;a href=&#34;https://github.com/zamansky/using-emacs/blob/master/mu4econfig-sample.el&#34;&gt;sample&lt;/a&gt; config. You&amp;#39;ll have to take a
few minutes to go through either and make the appropriate changes but
the required changes should be cleared.
&lt;/p&gt;
&lt;p&gt;
The video goes through all of this and then a brief demo of how I use
mu4e.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m very happy with it and plan to integrate my non-profit email and
maybe even personal email into it soon.
&lt;/p&gt;
&lt;p&gt;
Enjoy:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/newRHXKm4H4&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allow=&#34;encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 38 - dired</title>
      <link>https://cestlaz.github.io/posts/using-emacs-38-dired/</link>
      <pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-38-dired/</guid>
      <description>&lt;p&gt;
The 38th installment of Using Emacs is about &lt;strong&gt;&lt;strong&gt;dired&lt;/strong&gt;&lt;/strong&gt;, Emacs&amp;#39; built
in mode for navigating and working with directories.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not a dired power user and in fact am just now making a real
effort to explore it and work it into my daily workflow and
with that in mind, I&amp;#39;d love to hear some configuration and
use suggestions from people who use it regularly.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s the configuration I use:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package dired+
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config (require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dired+&lt;/span&gt;)
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
which merely adds dired+ into the mix.
&lt;/p&gt;
&lt;p&gt;
I also started playing with &lt;a href=&#34;https://github.com/joddie/pcre2el&#34;&gt;pcre2el&lt;/a&gt; which allows me to use the more
usual regex syntax in place of Emacs regex syntax in both dired and
other places. This is a big win for me since I never remember all the
escaping rules for Emacs regex.
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package pcre2el
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
:config
(pcre-mode)
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Finally, abo-abo and jcs have both written about new features in ,
Ivy/Swiper/Counsel that allow you to use ivy-occur to dump results
into a dired buffer (&lt;a href=&#34;http://irreal.org/blog/?p=6760&#34;&gt;link&lt;/a&gt;, &lt;a href=&#34;https://oremacs.com/2017/11/18/dired-occur/&#34;&gt;link&lt;/a&gt;) but to get that to work, I needed to
install &lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep&#34;&gt;wgrep&lt;/a&gt; and also had to install and setup &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; which looks to be
useful.
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(use-package wgrep
:ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
)

(setq counsel-fzf-cmd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/zamansky/.fzf/bin/fzf -f %s&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
To help get started here are links to a couple of cheat sheets:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf&#34;&gt;dired reference card&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://harryrschwartz.com/assets/documents/dired-cheatsheet.pdf&#34;&gt;another dired cheat sheet&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I&amp;#39;ll probably use dired more frequently but again, would love to hear
how other people are using it.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Fg7HmmRYWy8&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 37 - Treemacs file browser</title>
      <link>https://cestlaz.github.io/posts/using-emacs-37-treemacs/</link>
      <pubDate>Sun, 24 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-37-treemacs/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been meaning to get back to making Emacs videos but I&amp;#39;ve been
having trouble figuring out what to record.
&lt;/p&gt;
&lt;p&gt;
People have asked for &lt;a href=&#34;https://github.com/magit/magit&#34;&gt;Magit&lt;/a&gt; but I only use the basics and I think
there are already some great videos on it out there. I&amp;#39;d also like to
get more comfortable with DIRED mode and then do a video on it but I&amp;#39;m
not there yet. I&amp;#39;ve also been looking into packages that manage
workspaces like Eyebrowse and Persp-mode but neither are really doing
it for my workflow.
&lt;/p&gt;
&lt;p&gt;
This morning I saw an post on the &lt;a href=&#34;https://www.reddit.com/r/emacs/comments/7249jt/introducing_treemacs_a_modern_file_project/&#34;&gt;Emacs subreddit&lt;/a&gt; about &lt;a href=&#34;https://github.com/Alexander-Miller/treemacs#treemacs---a-tree-layout-file-explorer-for-emacs&#34;&gt;Treemacs&lt;/a&gt; - a
sidebar file browser similar to what the Atom editor has. It&amp;#39;s pretty
slick. I particularly like the integration with &lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;projectile&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I suspect I won&amp;#39;t integrate a file browser side bar into my workflow -
I&amp;#39;ve probably spent too many years with Emacs built in buffer commands
but if like that type of interface, definitely check Treemacs out.
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ACg6RnVdw8k&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 36 - A Touch of Elisp</title>
      <link>https://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/</link>
      <pubDate>Sun, 30 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-36-touch-of-elisp/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been working on a vue.js project this summer. During the school
year I really can&amp;#39;t dive into code so it&amp;#39;s been fun.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve already showed you most of the Emacs tools I use for
development. Projectile, Ace-Window, IBuffer, Swiper / Ivy and
all. One thing I couldn&amp;#39;t easily do was arrange windows the way I
wanted.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve been setting up Emacs with one large window and a couple of
smaller ones:
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/touch-elisp.png&#34; alt=&#34;/img/touch-elisp.png&#34; title=&#34;/img/touch-elisp.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;
I can easily switch the buffer in the window and I can easily switch
windows but what I wanted to do was swap the buffer in the large
window with one of the smaller buffers and leave focus in the larger
buffer:
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://cestlaz.github.io/img/touch-elisp2.png&#34; alt=&#34;/img/touch-elisp2.png&#34; title=&#34;/img/touch-elisp2.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;
I started looking at perspective mode and persp mode but neither work
with the latest Emacs. After poking around at other packages I
realized that ace-window does most of what I wanted. Ace-window has a
function that swaps the buffers in two windows named
&lt;code&gt;ace-swap-window&lt;/code&gt;. The only problem is that it leaves the focus on the
window you swap to not the one you started in. Ace-window also has
&lt;code&gt;aw-flip-window&lt;/code&gt; which then returns the cursor to the previous window.
&lt;/p&gt;
&lt;p&gt;
With a little elisp, we get the behavior I was looking for which I
then bound to &lt;code&gt;C-1 z&lt;/code&gt;:
&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(defun z/swap-windowsn ()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
(interactive)
(ace-swap-window)
(aw-flip-window)
)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;define-key&lt;/span&gt; z-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z/swap-windows&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The video goes into more details but it shows that if you&amp;#39;re not
afraid to explore a bit you can pretty much get Emacs to do whatever
you want.
&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/NQhud2ZNd1w&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Emacs 35 - Blogging</title>
      <link>https://cestlaz.github.io/posts/using-emacs-35-blogging/</link>
      <pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/using-emacs-35-blogging/</guid>
      <description>&lt;p&gt;
Very little new Emacs in today&amp;#39;s episode of Using Emacs. The video
shows my old blogging workflow and what I&amp;#39;m playing with now.
&lt;/p&gt;
&lt;p&gt;
The only new Emacs covered is the &lt;a href=&#34;https://github.com/rejeep/prodigy.el&#34;&gt;prodigy&lt;/a&gt; package which lets you run
services under Emacs. I use it to run &lt;a href=&#34;https://getnikola.com/blog/index.html&#34;&gt;Nikola&lt;/a&gt;&amp;#39;s development server but
I think prodigy will also be useful when I start writing that knitting
application I promised my wife.
&lt;/p&gt;
&lt;p&gt;
When I started this blog, I used Jekyll. It was simple and worked with
GitHub pages. I wrote about why I transitioned to Nikola &lt;a href=&#34;https://cestlaz.github.io/posts/2016-04-14-i-hate-ruby/&#34;&gt;here&lt;/a&gt; and
&lt;a href=&#34;https://cestlaz.github.io/posts/2016-04-17-emacs-jekyll-nikola/&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s not much more to say here so enjoy the video:
&lt;/p&gt;
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wSeTic9obKw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
  </channel>
</rss>