<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>workflow on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/workflow/</link>
    <description>C&#39;est la Z (workflow)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Apr 2018 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/workflow/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Unit Tests Grading Workflow</title>
      <link>https://cestlaz.github.io/posts/unit-tests-grading-workflow/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/unit-tests-grading-workflow/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve talked before about unit testing (&lt;a href=&#34;http://cestlaz.github.io/posts/testing-testing&#34;&gt;here&lt;/a&gt;, and &lt;a href=&#34;http://cestlaz.github.io/posts/testing-part2&#34;&gt;here&lt;/a&gt;). My premise is
that in addition to being an important industry technique, it&amp;#39;s a
sound practice for students studying CS. I also contend that it can
make grading easier on the teacher. Maybe not as easy as an
auto-grader but those have &lt;a href=&#34;https://cestlaz.github.io/posts/2015-10-16-graders.html/#.WtplHHXwZhE&#34;&gt;their own problems&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Since I spent most of today grading I thought I&amp;#39;d share my current
workflow and how unit tests have made me more efficient.
&lt;/p&gt;
&lt;p&gt;
I have each student make a single GitHub repo for all individual
homeworks, labs and small projects. They&amp;#39;ll make additional repos for
larger and group projects. They fill out a Google form to give me the
repo link. I download the form and end up with a CSV file something like this:
&lt;/p&gt;
&lt;div class=&#34;src src-csv&#34;&gt;
&lt;pre&gt;&lt;code class=&#34;language-csv&#34; data-lang=&#34;csv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csv&#34; data-lang=&#34;csv&#34;&gt;Doe, John, git@github.com:johndoe/mymoework.git
Doe, Jane, git@github.com:janedoe/labs.git
etc.&lt;/code&gt;&lt;/pre&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
My goal is to clone each students repo into a directory and then
throughout the term, they add assignments to their own repos using the
names and specifications I give them. For example, after assigning
three assignments, I could pull everything from their repos and I
would have a directory structure something like this:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
hw
├── doe_jane
│   ├── hw_01
│   ├── hw_02
│   └── hw_03
│
└── doe_john
├── hw_01
└── hw_02
&lt;/pre&gt;
&lt;p&gt;
To get there, I have to change the csv file to a small shell script:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone git@github.com:johndoe/mymoework.git doe_john
git clone git@github.com:janedoe/labs.git doe_jane
etc.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I usually do this in Emacs with a macro.
&lt;/p&gt;
&lt;p&gt;
Now I&amp;#39;m ready to go.
&lt;/p&gt;
&lt;p&gt;
Whenever there&amp;#39;s a new assignment, I just have to update all the
repos. I go into the root hw directory and loop through all the
subdirectoryes:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cs /path/to/hw_root
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;ls&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
cd /path/to/hw_root/$i
git pull
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
At this point I could go into each repo but we can do better. Since I
have all of my students submit a Makefile with a default target to
build an executable named &lt;code&gt;main&lt;/code&gt; and also a target named &lt;code&gt;tests&lt;/code&gt; which
will build an executable to run the unit tests named &lt;code&gt;tests&lt;/code&gt; I do this
instead of a straight pull:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cs /path/to/hw_root
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;ls&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
cd /path/to/hw_root/$i
git pull
cd hw_03 &lt;span style=&#34;color:#75715e&#34;&gt;# or whatever assignment I&amp;#39;m grading&lt;/span&gt;
make tests
make
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now, if I want, I can go into each directory, run the tests by typing
&lt;code&gt;./tests&lt;/code&gt;  and the hw or project with &lt;code&gt;./main&lt;/code&gt;. I can also add a
couple of lines to the for loop above like:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$i&lt;span style=&#34;color:#e6db74&#34;&gt; Test Report\n----------------\n&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /path/to/hw_root/test_report
./tests &amp;gt;&amp;gt; /path/to/hw_root/test_rport
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;----------------------\n\n&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This gives me a single file with everyone&amp;#39;s test results. Either by
doing this or by running the tests in each folder manually I can
quickly see what works and what doesn&amp;#39;t.
&lt;/p&gt;
&lt;p&gt;
While I&amp;#39;m doing this, I have Emacs up and with &lt;strong&gt;dired mode&lt;/strong&gt; and more
specifically &lt;strong&gt;ag-dired-regexp&lt;/strong&gt; which lets me easily
navigate to any student&amp;#39;s files. Combined with the test results I can
quickly evaluate the entire assignment.
&lt;/p&gt;
&lt;p&gt;
Put all of this together and it makes grading somewhat bearable. I can
work through well written, correct assignments extremely quickly and
drill down into the other projects efficiently as well.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>