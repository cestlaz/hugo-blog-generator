<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software engineering on C&#39;est la Z</title>
    <link>https://cestlaz.github.io/tags/software-engineering/</link>
    <description>C&#39;est la Z (software engineering)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Sep 2019 12:34:04 -0400</lastBuildDate>
    
    <atom:link href="https://cestlaz.github.io/tags/software-engineering/rss.xml" rel="self" type="application/rss" />
    
    
    <item>
      <title>Teaching techniques - industry to classroom and classroom to industry</title>
      <link>https://cestlaz.github.io/post/industry-techniques-in-class/</link>
      <pubDate>Fri, 27 Sep 2019 12:34:04 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/industry-techniques-in-class/</guid>
      <description>&lt;p&gt;
There are things we do in school and there are things we do in
industry and they&amp;#39;re not always the same. In school we might use a
learning language or an IDE which gives additional support and at
times even take away language features while at work you might you
might make heavy use of continuous integration tools. 
&lt;/p&gt;
&lt;p&gt;
On the other hand, sometimes we use the same things. Java is used in
schools and in industry, StackOverflow consulted in both and many
schools use professional IDEs like Eclipse.
&lt;/p&gt;
&lt;p&gt;
While the things I mentioned above, whether the same or different are
on the tooling side, there are also things on the technique side that
are used both in school and in industry.
&lt;/p&gt;
&lt;p&gt;
The most well publicized concept is probably &lt;a href=&#34;https://en.wikipedia.org/wiki/Pair_programming&#34;&gt;Pair Programming&lt;/a&gt; - the
idea of having two programmers develop using a shared
computer. There&amp;#39;s more to it than that and tons of variations but
that&amp;#39;s the crux of the idea. Proponents claim it increases programmer
efficiency and lowers error rates but others would rather not follow
the practice. Some feel that it&amp;#39;s great in certain environments like
when onboarding a new team member.
&lt;/p&gt;
&lt;p&gt;
We hear CS Teachers talk about pairing in their classes all the time -
&amp;#34;It&amp;#39;s an industry technique&amp;#34; but to me the interesting thing is that I
think many teachers, particularly more senior ones came up with pair
programming independent of it as an industry technique. It came out of
not having enough computers. This invariably leads to kids pairing
up. Now, you&amp;#39;ll say &amp;#34;but pair programming isn&amp;#39;t just two kids sharing
a computer.&amp;#34; I agree but when good teachers do group work it isn&amp;#39;t
just kids left to their own devices working in a group. Over time,
teachers who &amp;#34;discover&amp;#34; pair programming come up with ways to make it
effective in their classrooms.
&lt;/p&gt;
&lt;p&gt;
The other interesting thing is that pair programming serves different
purposes at work vs in schoo. At work it&amp;#39;s supposed to increase
programming efficiency and help them develop better code more
quickly. In the classroom, besides addressing the lack of computers,
it&amp;#39;s used as a tool to provide feedback to students, have them support
each other, and create a cooperative supportive environment.
&lt;/p&gt;
&lt;p&gt;
Another technique CS teachers use is subgoal labeling. The gist here
is that you write down or label smaller goals within your
program. It&amp;#39;s an idea I used for years but only relatively recently
learned its name.
&lt;/p&gt;
&lt;p&gt;
The interesting thing here is that I used this idea as a professional
programming well before I ever taught and I don&amp;#39;t recall it ever being
used in any of my classes. 
&lt;/p&gt;
&lt;p&gt;
The idea just made sense. I&amp;#39;d write a function and pepper it with
comments indicating the parts s or subgoals I&amp;#39;d need to write code for
to complete the function. I don&amp;#39;t know if subgoal labelling is or ever
was a prevelent technique in professional programming but the related
idea of writing function stubs is. The idea here is that as you
develop your program write out an empty placeholder function, a stub,
when you realize you need it and fill it in later. This is something
of a subgoal but at the function level.
&lt;/p&gt;
&lt;p&gt;
So, here we have two practices. One that is certainly used in both
the classroom and in industry and one that likely is. The practices
seem to be examples of convergent evolution. Developed independently
but with similar albeit somewhat different benefits.
&lt;/p&gt;
&lt;p&gt;
There have to me more practices like this. If you know any, please
share.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring Complex Projects</title>
      <link>https://cestlaz.github.io/post/exploring-complex-projects/</link>
      <pubDate>Wed, 07 Aug 2019 19:20:17 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/exploring-complex-projects/</guid>
      <description>
&lt;p&gt;
A couple of weeks ago there were some discussions about students
working on and in larger projects. Most CS educators think it&amp;#39;s a good
idea to expose students to large projects even if we don&amp;#39;t all agree
as to what the best time is.
&lt;/p&gt;
&lt;p&gt;
Regardless of when, figuring out a large project can be a bear and
that&amp;#39;s not just true for students. I saw this on my Tweetstream about
onboarding software engineers:
&lt;/p&gt;
  &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Leaving them alone with their laptop and telling them to look at the codebase. No purpose, directionless, no assistance or context or perspective. Show me a codebase that is documented exstensively enough to support that and Iâ€™ll be stunned. &lt;a href=&#34;https://twitter.com/hashtag/devdiscuss?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#devdiscuss&lt;/a&gt;&lt;/p&gt;&amp;mdash; Laurie (@laurieontech) &lt;a href=&#34;https://twitter.com/laurieontech/status/1158911795341529088?ref_src=twsrc%5Etfw&#34;&gt;August 7, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;
If we&amp;#39;re lucky enough to use a large project specifically designed for
students there might be sufficient documentation but don&amp;#39;t count on
it so here are some suggestions and tools that might be helpful in
figuring out a complex project. 
&lt;/p&gt;
&lt;h3 id=&#34;headline-1&#34;&gt;
Description and Documentation
&lt;/h3&gt;
&lt;p&gt;
Even if there isn&amp;#39;t a huge amount of documentation the project might
have a description or a Readme file. There also might be a build file -
something like a Makefile that could give some indication as to the
lay of the land. With a Readme or description you at least know what
the project is supposed to do and if the build file isn&amp;#39;t too complex
you might get some clue as to code organization. 
&lt;/p&gt;
&lt;p&gt;
Another thing to look at is if there&amp;#39;s consistent documentation. A
Java project might follow the &lt;a href=&#34;http://www.mcs.csueastbay.edu/~billard/se/cs3340/ex7/javadoctutorial.html&#34;&gt;Javadoc&lt;/a&gt; specification and if so, the
build system can probably build a web site that allows you to navigate
through all the classes. Other languages support similar tools. Check
out Doxygen which is like Javadoc but sypports a wide range of languages.
&lt;/p&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Tests
&lt;/h3&gt;
&lt;p&gt;
Another thing to look for are a project&amp;#39;s unit tests. If they exist
they can give you some good insights into the project. You&amp;#39;ll see how
aspects of the code are used and also entry points to start looking at
the code. 
&lt;/p&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Logging
&lt;/h3&gt;
&lt;p&gt;
Next up - logging. You can add logging statements using your languages
logging facilities or just print to stderr or a file. Put in a bunch
of output statements along with time and location stamps and run the
program. Then use one of the tools mentioned below to help parse the
output. This can give an idea of what&amp;#39;s running when and can
eventually help you to understand the code. 
&lt;/p&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Debugging 
&lt;/h3&gt;
&lt;p&gt;
Last up here is using a debugger. Load the project up in a debugger,
set a breakpoint somewhere and let-er-rip. When you hit the breakpoint
you can check the state of the application. Another idea is to set
watchpoints. When you set a watchpoint you tell the debugger to watch
until a variable is set to a particular value (or is greater or less
than) and it breaks your program when that happens. Set a watchpoint
and you can likewise check the programs state when your program
breaks.
&lt;/p&gt;
&lt;p&gt;
Another think to look at is the stack trace under the debugger when
you hit those watchpoint breaks. That will tell you the sequence of
function calls when the watchpoint tripped.
&lt;/p&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Tools 
&lt;/h2&gt;
&lt;p&gt;
Most programming environments also have some tools to make all of the
above explorations a bit easier. Here are a few of my favorites.
&lt;/p&gt;
&lt;p&gt;
For the examples, we&amp;#39;ll work in small three file project I set up. A
small linked list in Java. It has three files:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Node.java
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
myLinkedList.java
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Driver.java
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
but it could have any number of files in any number of directories.
&lt;/p&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
Ctags
&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Ctags&#34;&gt;Ctags&lt;/a&gt; goes way back. I first used ctags for C programs. Now there are
a bunch of implementations for a bunch of languages. The idea is you
run ctags (or etags or gtags etc.) and it creates an index if all your
functions, classes, methods or whatever. Your editor can then easily
jump from a call to a definition and back. Most editors support some
version of ctags and some don&amp;#39;t even need the ctags indexing
engine. Here&amp;#39;s an example of dumb-jump in Emacs which performs tag
like searching without the indexing. We move our cursor to the add
method, hit the magic key and we&amp;#39;re taken to the definition:
&lt;/p&gt;
&lt;p&gt;
&lt;figure class=&#34;z_image_center&#34;&gt;
    &lt;img src=&#34;https://cestlaz.github.io/img/dumb-jump.gif&#34;/&gt; 
&lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;
This can be HUGE in understanding code.
&lt;/p&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
Grep
&lt;/h3&gt;
&lt;p&gt;
Grep is a pretty ancient tool going back to the 1970s.
&lt;/p&gt;
 &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/NTfOnGZUZDk&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;
Bascially, it can search through a file or files for text. Most
versions can use &lt;a href=&#34;https://www.janmeppe.com/blog/regex-for-noobs/&#34;&gt;Regular Expressions&lt;/a&gt; for wild card searches. 
&lt;/p&gt;
&lt;p&gt;
While ctags is great for navigating function and method calls
sometimes you&amp;#39;re just looking for a string. For example, if you&amp;#39;re
looking for the string &amp;#34;hello world&amp;#34; in your code  you can run &lt;code&gt;grep
&amp;#34;hello world&amp;#34; *java&lt;/code&gt;. The problem here is that it will only work in
one directory. That brings us to:
&lt;/p&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
Ripgrep
&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;Ripgrep&lt;/a&gt; is grep on steroids. There are a number of similar programs -
Silver Searcher, Ack, and Git Grep to name three. They all are much
faster than grep, can focus on files based on type, omit files based
on various criteria, and more. Currently I&amp;#39;ve been using Ripgrep.
&lt;/p&gt;
&lt;p&gt;
I wanted to find the code I used in my blog to embed an code sample
but couldn&amp;#39;t remember exactly how to do it. Here&amp;#39;s how I used ripgrep
to help:
&lt;/p&gt;
&lt;p&gt;
&lt;figure class=&#34;z_image_center&#34;&gt;
    &lt;img src=&#34;https://cestlaz.github.io/img/rg.gif&#34;/&gt; 
&lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;
First I typed &lt;code&gt;rg -t org python&lt;/code&gt;. This looks at all the .org files in
the project hierarchy for lines with the word &lt;code&gt;python&lt;/code&gt;. From there I
saw that what the highlight code started with so I ran ripgrep
again this time adding the &lt;code&gt;-A5&lt;/code&gt; which printed out 5 lines after each
match so I could see a complete example.
&lt;/p&gt;
&lt;p&gt;
This just scratches the surface but I&amp;#39;m hoping you get the idea. The
other cool thing is that most editors integrate in ripgrep/silver
searcher/ack functionality so you can do the search right in your
editor and jump right over to the code in question.
&lt;/p&gt;
&lt;p&gt;
&lt;figure class=&#34;z_image_center&#34;&gt;
    &lt;img src=&#34;https://cestlaz.github.io/img/rg-emacs.gif&#34;/&gt; 
&lt;/figure&gt;

&lt;/p&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
There&amp;#39;s more
&lt;/h2&gt;
&lt;p&gt;
I&amp;#39;m sure there are more tips out there but these are my go to
techniques. Hope some of you find them helpful either for your own
work of for your students.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Big Code And Case Studies</title>
      <link>https://cestlaz.github.io/post/big-code-and-case-studies/</link>
      <pubDate>Wed, 24 Jul 2019 11:22:12 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/big-code-and-case-studies/</guid>
      <description>&lt;p&gt;
I&amp;#39;m enjoying reading about Ria Galanos&amp;#39; new chapter on her blog. In
her &lt;a href=&#34;https://cscheerleader.com/putting-it-all-together&#34;&gt;most recent post&lt;/a&gt; Ria briefly talks about the fact that very few
professional developers start from scratch and most work in existing
large code bases. She wonders why the College Board got rid of the
APCS-A case study and talked about how it gave students an opportunity
to work on a multi-file complex system. Over the past few years others
have wondered if the College Board should bring it back.
&lt;/p&gt;
&lt;p&gt;
While I agree that students should learn to work in a large code base
at some point in time and there are a whole bunch of software
engineering skills that would better serve the vast majority of CS
students than what is taught in full undergraduate programs I have to
disagree that bringing back the APCS-A case study is the way to go.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not against case studies and large complex CS projects in APCS-A
per se but rather that tying a specific large project to the AP exam
forces teachers to teach in a way that might not suit them or their
students. The case study never worked for me. It never fit in with the
way I liked to develop my classes. As a result it was merely a time
sink. To be honest, most of the time I just paid it lip service with
minimal coverage. It never seemed to affect my student&amp;#39;s scores so it
wasn&amp;#39;t something I had to worry about. I also used to use a few texts
over the years that integrated a large project throughout their
chapters and since those also didn&amp;#39;t mesh with the class it made large
swaths of the books more difficult to work through when trying to use
them to understand core concepts.
&lt;/p&gt;
&lt;p&gt;
I haven&amp;#39;t looked at all the newly released materials yet but I did
like the recent trend of making labs available that you could use to
cover core concepts but you didn&amp;#39;t have to. The same could be done for
case studies. Nothing stops the College Board or independent providers
from releasing things like Grid World or other case studies. Make them
available for teachers who&amp;#39;s classes are structured in ways that those
case studies support the class rather than are a forced add on.
&lt;/p&gt;
&lt;p&gt;
Beyond this, we also have the issue with exposing kids to larger
sometimes partially opaque code bases. This is pretty important but
many students don&amp;#39;t learn this until their on the job. 
&lt;/p&gt;
&lt;p&gt;
At Hunter, we do have a capstone project course where students do
indeed create some large team application using multiple technologies
but they do it largely on their own having not formally been prepared
in their earlier classes for development in the large. In my
experience, huge numbers of students from a wide array of well
respected institutions do little better at this. Many students do have
to work in a professors framework - write a &amp;#34;player&amp;#34; for the game and
such but that&amp;#39;s much more limited.
&lt;/p&gt;
&lt;p&gt;
So, we should be doing a better job at this but I&amp;#39;m also not sure if
APCS-A is the place. While it might work well at a TJ, where Ria
taught or Stuy where I spent most of my career, my gut tells me that
this is something for a course later in the undergraduate sequence.
&lt;/p&gt;
&lt;p&gt;
Regardless of when this is covered (if it&amp;#39;s covered at all) it&amp;#39;s
certainly worth teaching kids the common tooling to help them
along. Back in the day I used &lt;a href=&#34;https://en.wikipedia.org/wiki/Ctags&#34;&gt;Ctags&lt;/a&gt; to navigate large complex C code
bases. Ctags still exists in more modern forms and it and similar
tools work for a variety of languages. Coding standards like those
published by &lt;a href=&#34;https://google.github.io/styleguide/javaguide.html&#34;&gt;Google&lt;/a&gt; can make for an easier code based to understand
and tools like &lt;a href=&#34;https://www.oracle.com/technetwork/java/javase/documentation/index-jsp-135444.html&#34;&gt;Javadoc&lt;/a&gt; and similar for other languages can create web
based documentation where students can click through complex
hierarchies and relationships. Tools like &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;Ripgrep&lt;/a&gt; and &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;Silver Searcher&lt;/a&gt;
can also be lifesavers in finding code across complex directory
structures. Most if not all of these tools are directly supported in
many editors and ides.
&lt;/p&gt;
&lt;p&gt;
So, where am I at on this. Let&amp;#39;s not require any specific case study
in APCS-A but let&amp;#39;s make things like them available. On the other
hand, it would be great if our students did indeed all have the
opportunity to learn how to work in large complex pre-existing code
bases but that&amp;#39;s an issue well beyond just APCS-A and high school.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Give me a break (and a continue)</title>
      <link>https://cestlaz.github.io/post/break-continue/</link>
      <pubDate>Wed, 01 May 2019 08:39:41 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/break-continue/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;
What can I do to discourage my students from using the &amp;#34;break&amp;#34;
statement?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
That was more or less the gist of the comment and it elicited some
good responses. This time the conversation was on Facebook but I&amp;#39;ve
seen this one and participated in it many times before. I never liked
the question when presented as a &amp;#34;how can I stop them&amp;#34; one.  I equally
dislike when the offered advice is basically &amp;#34;never use break no
matter what&amp;#34; or something similar. When writing code the best advice
is rarely to never or always do something. The question should really
be &amp;#34;when is it appropriate for my students to use a break statement
and how can I steer them  towards using it correctly.&amp;#34; The answer, of
course is &amp;#34;it depends.&amp;#34;
&lt;/p&gt;
&lt;p&gt;
For those unfamiliar with the statements, &lt;code&gt;break&lt;/code&gt; jumps to the end and
exits the loop or switch statement that encloses it. The &lt;code&gt;continue&lt;/code&gt;
statement jumps up to the next iteration of its enclosing loop. I&amp;#39;ll
show some examples below.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s true that you never &lt;strong&gt;need&lt;/strong&gt; to use break but in my opinion, if
used correctly it can create clearer code. Let&amp;#39;s look at a related
situation. Suppose you write a function to find and return some item
from  a data set (in pseudocode):
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
You could tighten it up a bit but there are two things that I don&amp;#39;t
like about the above solution. First, it goes through the entire data
set even if the item you&amp;#39;re searching for is near the beginning. You
could fix that by putting in a more complex loop boolean:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; numitems &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;found &lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
Second. you&amp;#39;ve got the conditional after the loop. I find the
following much clearer:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
To me this is perfectly clear. Look for an item, if and when we find
it, we&amp;#39;re done so let&amp;#39;s get out of here. If not, the loop finishes and
we return the not found stuff at the end. It&amp;#39;s clean, easy to
understand, and potentially a little faster.
&lt;/p&gt;
&lt;p&gt;
You have a similar situation with &lt;code&gt;break&lt;/code&gt;. Without it you might have
code like this:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And with:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Not significantly different. 
&lt;/p&gt;
&lt;p&gt;
People who don&amp;#39;t like the break statement usually adhere to a very
strict interpretation of structured programming - one entry point, one
exit point but I&amp;#39;d argue that break (and continue) are not like
arbitrary jumps. They&amp;#39;re well defined and don&amp;#39;t introduce spaghetti
code. They either specifically exit a bounding language construct or
jump to the next iteration. Actually, now that I think about it,
&lt;code&gt;exceptions&lt;/code&gt; can be used in a way that mucks with clear code in a much
more dangerous way than break and continue can.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s an example with continue:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
as opposed to:
&lt;/p&gt;
&lt;div class=&#34;src src-java&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Which is better? It&amp;#39;s purely subjective. Nothing wrong with either.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ll share a final example. This one lifted from an &lt;a href=&#34;https://cestlaz.github.io/post/globals-breaks-and-returns/&#34;&gt;older post&lt;/a&gt; on
&amp;#34;best practices.&amp;#34; If you&amp;#39;re writing an event handler, you could put
the exit event in the loop boolean but I find including it
as a case using a &lt;code&gt;break&lt;/code&gt; to be cleaner:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
At the end of the day, &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;, like most langauge
constructs can be used for either good or evil. There have been times
when they&amp;#39;ve led me to cleaner code so I&amp;#39;ve used them. At other times,
using them would have been forced.
&lt;/p&gt;
&lt;p&gt;
If we agree that &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; can be appropriate, the other
question is when to introduce them. One comment from the most recent
Facebook thread on this (name withheld since that&amp;#39;s a semi-private
forum) was that it shouldn&amp;#39;t be right off the bat but rather after
they&amp;#39;re comfortable with loops, conditionals and booleans so that they
can use the new constructs when they make sense and not willy-nilly. I
tend to agree with this.
&lt;/p&gt;
&lt;p&gt;
Personally, I think it&amp;#39;s important to show our kids constructs like
&lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; and it&amp;#39;s also important for us to talk about
good code and &lt;a href=&#34;https://cestlaz.github.io/posts/best-practices-cli/&#34;&gt;best practices&lt;/a&gt; but the important thing is that we don&amp;#39;t
have our kids blindly follow any practice but empower them to make good
decisions based on their situations.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code Review Revisited or research - the teacher version</title>
      <link>https://cestlaz.github.io/post/code-review-2/</link>
      <pubDate>Tue, 16 Apr 2019 11:36:27 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/code-review-2/</guid>
      <description>&lt;p&gt;
Last semester I wrote about how I was introducing my students to &lt;a href=&#34;https://cestlaz.github.io/post/code-review/&#34;&gt;code
review&lt;/a&gt;. I thought it worked pretty well and was anxious to try it
again.
&lt;/p&gt;
&lt;p&gt;
Well, I did the lesson(s) again this past week and it looks like it&amp;#39;s
a keeper. The setup was pretty much the same with some hiccups due to
using a new platform. Last semester I used plain GitHub public
repos. This time, I&amp;#39;ve been using GitHub classroom which I like very
much but I forgot that I made this assignment use private repos which
turned out to be a hassle.
&lt;/p&gt;
&lt;p&gt;
If you didn&amp;#39;t read the previous post the short version was:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
group the kids in two&amp;#39;s
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Each does a written (no talking) code review on the others previous
lab. Very little guidance was given as to what the review should
look like.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
We then did two parings where one person talked through a live code
review with the other.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Finally, we did one more written session. 
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
This left person with three reviews. 
&lt;/p&gt;
&lt;p&gt;
This took the whole class since we had to finish some other material
before starting the reviews.
&lt;/p&gt;
&lt;p&gt;
During the next class we discussed the review, what was important,
what wasn&amp;#39;t etc. We also talked about coding standards and things like
&lt;a href=&#34;https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines&#34;&gt;The C++ Core Guidelines&lt;/a&gt; and Google&amp;#39;s &lt;a href=&#34;https://google.github.io/styleguide/cppguide.html&#34;&gt;C++ Style Guide&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
As a follow up assignment, they&amp;#39;re going to add a feature to another
student&amp;#39;s solution to the lab they reviewed.
&lt;/p&gt;
&lt;p&gt;
It seems that the class was effective when I taught it last
semester. I&amp;#39;ve come to that conclusion because I&amp;#39;m teaching that group
again in their Data Structures class and they seem to do better with
Pair Programming (which I related to a live, real-time code review)
and it does seem that they&amp;#39;re paying at least a bit more attention to
the issues we highlighted in the code review lesson. 
&lt;/p&gt;
&lt;p&gt;
I won&amp;#39;t get the same chance to follow up with this group but I can at
least see in the next few weeks if it had any positive affect. One of
the things I&amp;#39;m curious about has to do with the student&amp;#39;s backgrounds.
Last semester&amp;#39;s students all had a year of APCS-A under their belts
before coming to Hunter. This semester&amp;#39;s students had a range from
APCS-P to a summer or after school program to nothing and their last
semester class with me was in my opinion a much lighter programming
class than a year of APCS-A. I&amp;#39;m wondering if the current crop, having
written fewer large programs will have a different appreciation for
the topics we discussed during the code reviews. 
&lt;/p&gt;
&lt;p&gt;
All of this got me to thinking about some of the things I saw both at
SIGCSE and on some of the posts that followed. Specifically about
teacher vs researchers and also, although not mentioned, K12 teachers,
teachers at the college level and researchers.
&lt;/p&gt;
&lt;p&gt;
I was thinking about the fact that this is one of the ways I work to
improve at my craft. I try something, evaluate and reflect on the
results, then repeat, tweak etc. Not everything I try is a winner but
overall I think I&amp;#39;ve made a pretty steady progression as a
teacher. 
&lt;/p&gt;
&lt;p&gt;
I was also thinking that had I done this while in High School I would
have taught the lessons two to five times to similar but different
groups of students within a short period of days. I would also have
been able to iterate, possibly with variations, each semester. It
might not be instant but that&amp;#39;s a lot of potential feedback. At
college, I&amp;#39;m only teaching one section of each class and I&amp;#39;m guessing
that most full time faculty members might only teach two of a
particular class (although I could be very wrong - I just based this
on looking up a few schedules). I also don&amp;#39;t see my kids every
day. This makes for a slower, less effective feedback loop. On the
other hand, I&amp;#39;m not running pillar to post every day so can actually
take the time to evaluate what&amp;#39;s been happening in each class in
arguably a more meaningful way.
&lt;/p&gt;
&lt;p&gt;
All of this is to say that most teachers I know trust other teacher&amp;#39;s
experiences rather than &amp;#34;the research&amp;#34; and that was also what was born
out in this University of Colorado &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3287420&#34;&gt;survey&lt;/a&gt;. While there are plenty of
bad teachers who know that &amp;#34;it&amp;#39;s always been done this way and it&amp;#39;s
worked well enough&amp;#34; I&amp;#39;ll always consider my most trusted education
resource to be a thoughtful, reflective, experienced teacher who
actively works on improving at their craft.  
&lt;/p&gt;
&lt;p&gt;
This is not to say that there isn&amp;#39;t merit in research. I saw
presentations at SIGCSE and on the one had said to myself &amp;#34;ok, so he
discovered something that any moderately experienced K12 teacher
already knows&amp;#34; and at the same time thinking &amp;#34;but it&amp;#39;s great that
they&amp;#39;re now formalizing and documenting it.&amp;#34; There are also things
that can be researched that a single classroom teacher just can&amp;#39;t
approach and finally, to paraphrase a line from Mark Guzdial&amp;#39;s talk
where he specifically addressed other CS Ed researchers - we can build
things and they need things built - a teacher / researcher partnership
can open a lot of yet unexplored doors for educators.
&lt;/p&gt;
&lt;p&gt;
It&amp;#39;s all a reminder that we&amp;#39;re all playing different
roles. Researchers aren&amp;#39;t teachers, college teachers aren&amp;#39;t K12
teachers, K12 teachers subdivide further and of course the same holds
for the reverse direction. Sure there are similarities in our goals
and our roles but there are some important differences.
&lt;/p&gt;
&lt;p&gt;
With that in mind, I&amp;#39;ll leave this with a quote form one of the all
time great screwball comedies:
&lt;/p&gt;
&lt;p&gt;
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34;
src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/Hl9OzCY9fVE?start=116&#34;&gt;https://www.youtube.com/embed/Hl9OzCY9fVE?start=116&lt;/a&gt;&amp;#34;
frameborder=&amp;#34;0&amp;#34; allow=&amp;#34;accelerometer; autoplay; encrypted-media;
gyroscope; picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An experiment with code review</title>
      <link>https://cestlaz.github.io/post/code-review/</link>
      <pubDate>Thu, 15 Nov 2018 17:09:58 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/code-review/</guid>
      <description>&lt;p&gt;
Sometimes professional practices don&amp;#39;t work well in the classroom and
sometimes they do. One professional practice that does work well is
code review - reading and reflecting on other peoples code.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve had my students do code reviews in the past but this time I did
things differently. Here&amp;#39;s what I did and here&amp;#39;s how it went
&lt;/p&gt;
&lt;p&gt;
Two weeks ago my students completed a lab. The lab involved reading
in a poorly indented C++ program and spit out a properly indented
one. This was the platform for the reviews.
&lt;/p&gt;
&lt;p&gt;
First we paired everyone off. They forked each others labs and then
did a code review on each others assignment. Each student would read
their partner&amp;#39;s code, decide what to focus on - the whole thing, a
single function or something in between, and write up a code
review. They couldn&amp;#39;t talk during this process. 
&lt;/p&gt;
&lt;p&gt;
I was intentionally a little vague in the details of the assignment.
&lt;/p&gt;
&lt;p&gt;
Afterwards, each student got a new partner and we did the review again
but this time one student would review the other&amp;#39;s code and they would
talk through the process while they took notes. 
&lt;/p&gt;
&lt;p&gt;
Next, we changed pairs a third time and this time the student that did
the talking review last time got their code reviewed in the same way.
&lt;/p&gt;
&lt;p&gt;
Finally, we repeated the whole thing again.
&lt;/p&gt;
&lt;p&gt;
This left each student with four code reviews. Two done in silence and
two that were interactive.
&lt;/p&gt;
&lt;p&gt;
This took the entire hour fifteen of class so we didn&amp;#39;t get to discuss
the review until the following week.
&lt;/p&gt;
&lt;p&gt;
The first thing I asked when we debriefed was which review was more
valuable? The written or the interactive one. They universally liked the
latter. This led to a spin-off discussion on pair programming. I love
pair programming as a pedagogical tool but students don&amp;#39;t always buy
all in. Some don&amp;#39;t communicate as much as the should and don&amp;#39;t get as
much value out of the process as they could. On the other hand, they
all seemed to see the value in the interactive code review but if you
think about it, pair programming is really a real time interactive
code review. I&amp;#39;m hoping this process helps with pair programming buy
in. I think it will.
&lt;/p&gt;
&lt;p&gt;
Next we talked about takeaways from all their reviews. There were good
comments on, well, commenting, also on function length. This led to
talk about self commenting code, good variable and function names,
style guides, function header comments and all sorts
of good coding stuff.
&lt;/p&gt;
&lt;p&gt;
All this was great but I think more than the recap, the reviews
themselves might have had the greatest impact.
&lt;/p&gt;
&lt;p&gt;
One student commented that he found the code he reviewed much easier
to read and understand that his own code because it did indeed use
better function and variable names and was better laid out and
commented. 
&lt;/p&gt;
&lt;p&gt;
Another student noted that for a couple of programs he reviewed he had
a hard time understanding what the programmer was doing. During the
interactive review it was apparent that the author also no longer
understood their own code. I think that, at least for these students,
it really drove home the idea of writing good code. We talked about
how the real world would be different. In class they work on a project
in a concentrated short period of time. In the real world, they&amp;#39;ll be
working on multiple projects or at least multiple segments of projects
on and off over a long period of time. Remembering your own code is
super critical.
&lt;/p&gt;
&lt;p&gt;
Overall, I&amp;#39;m very happy with the way these lessons played out. I
already thought that the actual code reviews had value but doing it
this way led to more student discovery some great discussions and
reflections. I think it was a big win.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Compile Each Concept</title>
      <link>https://cestlaz.github.io/post/compile-each-concept/</link>
      <pubDate>Tue, 09 Oct 2018 14:46:59 -0400</pubDate>
      
      <guid>https://cestlaz.github.io/post/compile-each-concept/</guid>
      <description>
&lt;p&gt;
We&amp;#39;ve all been there:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Student: Teacher, I need help
Teacher (comes over)
Student (shows screen listing three bazillion errors)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The student has just written pages of code and finally decided to try
to run it only to end up with pages of errors.
&lt;/p&gt;
&lt;p&gt;
Error messages can at times be hard to read for beginners but to see
and truth be told, they frequently don&amp;#39;t even read them but over the
years I&amp;#39;ve developed a practice that I&amp;#39;ve found helpful as a software
developer and if students adopt the same practice it can save them a
lot of time and effort.
&lt;/p&gt;
&lt;p&gt;
The idea is very simple. 
&lt;/p&gt;
&lt;p&gt;
Compile and test one concept at a time.
&lt;/p&gt;
&lt;p&gt;
It might seem silly, but if I&amp;#39;m writing a a program, my first compile
might be code that looks like this:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  using std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout;
  using std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
  {
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
or 
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloWorld&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

      &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
	
      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
This might seem silly but it really doesn&amp;#39;t take any effort. I have a
key sequence to do this under Emacs and if I&amp;#39;m using an interactive
language like Python or Clojure I just have to hit &lt;code&gt;c-c c-c&lt;/code&gt; 
&lt;/p&gt;
&lt;p&gt;
This might seem silly but I do it out of muscle memory and it
immediately tells me I don&amp;#39;t have any syntax errors and my build system
works.
&lt;/p&gt;
&lt;p&gt;
Going further, I compile and test every time I code up what I call a
concept. What&amp;#39;s a concept? Let&amp;#39;s look at some code. A student might
write something like this to find prime number up to n:
&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
There&amp;#39;s a lot going on there. To me, a concept is
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
A loop
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A complex calculation
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
a conditional
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
All of these can have other concepts within.
&lt;/p&gt;
&lt;p&gt;
In the above code, I&amp;#39;d probable write it as follows, adding in tests
and print statements throughout the process:
&lt;/p&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
Step 1:
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Step 2
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i,j)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Step 3
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is not prime&amp;#34;&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Step 4 
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i,i_isPrime)
  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Step 5
&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prime_list&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,n):
        i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; :
                i_isPrime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i_isPrime:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
It might not play out exactly this way but if not it would be something
similar. The idea is that if you test every time you add one concept
or construct there are fewer places where you can introduce an error.
&lt;/p&gt;
&lt;p&gt;
If you enter 100 lines before you test there are 100 places where
things can go wrong. If you type 10, there are only 10. On top of
that, if you&amp;#39;ve added 100 lines, conecptually you&amp;#39;ve probably added a
lot and the error can be anywhere. While it&amp;#39;s not always the case,
most of the time, if you just added an &lt;strong&gt;if&lt;/strong&gt;, the problem will be in the
&lt;strong&gt;if&lt;/strong&gt; or as a result of the if. Same with a &lt;strong&gt;loop&lt;/strong&gt; or any other construct.
&lt;/p&gt;
&lt;p&gt;
Once you get in the habit, it&amp;#39;s easy and doesn&amp;#39;t really take any
time. A couple of keystrokes to compile and a couple more to run. 
&lt;/p&gt;
&lt;p&gt;
All too often students try to write everything at once and it&amp;#39;s so
rare that it works. If we can get them to develop incrementally
they&amp;#39;ll be able to write much more complex systems and write them with
much less frustration.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pull Requests and Other People&#39;s Code</title>
      <link>https://cestlaz.github.io/posts/pull-requests/</link>
      <pubDate>Thu, 26 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/pull-requests/</guid>
      <description>&lt;p&gt;
One of the things I&amp;#39;ve heard for years from former students - both
those looking for jobs and those looking to hire is that colleges
don&amp;#39;t really do a good job preparing students for careers in
tech. Sure they teach the algorithms and the theory but ther are a lot
of missing pieces, particularly on the practical end. I&amp;#39;m certainly
not advocating turning CS programs into coding schools but there are
many low cost opportunities to bring practical real world best
practices in to the CS classroom. I most recently wrote about &lt;a href=&#34;http://cestlaz.github.io/posts/testing-part2%0A&#34;&gt;unit
testing&lt;/a&gt; and had earlier about using &lt;a href=&#34;https://cestlaz.github.io/posts/sigcse-2017-github-4&#34;&gt;GitHub as an educational
tool&lt;/a&gt;. I&amp;#39;ve been happy with the way I introduce students to Git and
how we use GitHub in my classes but I&amp;#39;ve never found a smooth way to
introduce Pull Requests. A pull request is basically a mechanism by
which one can suggest a change to a project even if you don&amp;#39;t own
it. The project owner can then decide to merge it in or not.
&lt;/p&gt;
&lt;p&gt;
Being comfortable with the pull request work flow is an important part
of contributing to open source projects. The basic process is that you
make a copy of the project you want to work on by forking it, make
your changes, then issue a pull request back to the project. For a
beginner, there are a lot of moving parts. Instead, I teach my
students branching and merging within a project. It&amp;#39;s much easier and
arguably more useful for day to day projects. I&amp;#39;d like my kid to learn the
pull request mechanics but I haden&amp;#39;t thought of a good way to do it.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve also wanted to give kids more real world experiences in class and
one experience they rarely get is working in other people&amp;#39;s code
bases. In school you largely write your own projects be they group or
solo or work off a hopefully tried and true code base provided by the
instructor. In the real world you&amp;#39;re frequently working off of someone
elses code and it&amp;#39;s rarely in a polished state.
&lt;/p&gt;
&lt;p&gt;
I finally found a way to kill both birds with one stone. A couple of
weeks ago my class&amp;#39; lab was rather lengthy. It involved reading in a
source file and reformating it in a sensible way. I knew most of the
students wouldn&amp;#39;t finish it in the allotted time and even if they did,
this was an easy assignment to extend. On lab day I had students
create a new repo for this lab (normally they just add a folder in a
their &amp;#34;labs&amp;#34; repo) and get as much done as they could. The rule was
simple - push what you&amp;#39;ve got up to GitHub at the end of class and
then you can&amp;#39;t push anything else. I also made it clear that I didn&amp;#39;t
expect a completed lab..
&lt;/p&gt;
&lt;p&gt;
We continued the lab in the next class session. This time. I randomly
assigned repos to students so that they would fork someone elses
lab. They then had to complete the lab on the other students code base
and then issue a pull request back to the original
&lt;/p&gt;
&lt;p&gt;
This was the first time I&amp;#39;ve tried this so it was a little
klunky. I&amp;#39;ll do a much better job specifying the assignment and
instructions next time around but even so I think the class went
well. By the end of the class the students had sucesfully forked a
project, issued a pull request, and merged one in to their own
project. The only think I wasn&amp;#39;t happy with was that many of the
merges happened automatically. I have to figure out how to set things
up so that there are merge conflicts since I want my students to
experience that.
&lt;/p&gt;
&lt;p&gt;
Overall,  I was very happy with the way things worked out. The
students were able to experience important real workd software
engineering techniques without removing any of the academic CS in the
class.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do It The Dumb Way</title>
      <link>https://cestlaz.github.io/posts/do-it-the-dumb-way/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/do-it-the-dumb-way/</guid>
      <description>&lt;p&gt;
There&amp;#39;s so much to like in the shape drawing lessons I talked about
in my &lt;a href=&#34;http://cestlaz.github.io/posts/refactoring/&#34;&gt;refactoring&lt;/a&gt; post that I thought I&amp;#39;d share a little more here.
&lt;/p&gt;
&lt;p&gt;
It can be argued that the most important things for a program to do is work. The
most clever, elegant, creative program is worthless if it doesn&amp;#39;t
produce the desired result. All too often, beginners and hot shot beginners in particular try to
be too clever too early and get themselves into trouble.
&lt;/p&gt;
&lt;p&gt;
When doing the shape drawing lessons the first couple of shape are
pretty easy
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;

| ****            |    | *               |
| ****            |    | **              |
| ****            |    | ***             |
| ****            |    | ****            |
| ****            |    |                 |
|                 |    |                 |
&lt;/pre&gt;
&lt;p&gt;
but things get more interesting with the right justified triangle:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
----*       *
---**      **
--***     ***
-****    ****
*****   *****
&lt;/pre&gt;
&lt;p&gt;
For this triangle, students want to come up with the formula for the
number of spaces. They usually figure out something like this with
&lt;code&gt;h-i-1&lt;/code&gt; spaces and &lt;code&gt;i+1&lt;/code&gt; stars:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The formulas become harder to figure out as the shapes become more
complex and sometimes students get stymied.
&lt;/p&gt;
&lt;p&gt;
The truth is that while they&amp;#39;re struggling to find the perfect
solution, it&amp;#39;s sometimes better to do it the dumb way.
&lt;/p&gt;
&lt;p&gt;
Consider drawing a trapezoid like this example of height 5 and
starting width 12:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
************
**********
********
******
****
&lt;/pre&gt;
&lt;p&gt;
A student could come up with the &amp;#34;formulas&amp;#34; for spaces and stars but
sometimes there&amp;#39;s a more straightforward way.
&lt;/p&gt;
&lt;p&gt;
Consider the number of spaces on each line on the left hand side of
the shape. First line is 0 then 1, 2 etc. Why not start a variable
&lt;code&gt;spaces&lt;/code&gt; at 0 and increment it on each loop iteration.
&lt;/p&gt;
&lt;p&gt;
For the number of stars, it&amp;#39;s starting at the width and being reduced
by 2 each time.
&lt;/p&gt;
&lt;p&gt;
This leads to a solution similar to this (using the line routine from
the earlier refactoring post):
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This solution is simple to construct, simple to understand, and quite
frankly, hard to get wrong.
&lt;/p&gt;
&lt;p&gt;
It can also lead a student to discovering a pattern or &amp;#34;formula&amp;#34; such
as what was used to solve the earlier problems.
&lt;/p&gt;
&lt;p&gt;
This might seem to some as a cheap way out, the dumb approach -
creating extra variables and have them count along the way but I
don&amp;#39;t. There&amp;#39;s nothing wrong with simple and straightforward. Yes, you
could come up with an elegant formula but the bottom line is you need
something to count 0,1,2,3â€¦ so create a variable to do it. You need
something to count 12,10,8,â€¦ create one for that as well.
&lt;/p&gt;
&lt;p&gt;
Now, I&amp;#39;m not advocating writing 100 if statements rather than a loop
but I think you get the idea.
&lt;/p&gt;
&lt;p&gt;
The best solution is one that works and Sometimes the &amp;#34;dumb&amp;#34; approach is the best approach.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing Part 2</title>
      <link>https://cestlaz.github.io/posts/testing-part2/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/testing-part2/</guid>
      <description>&lt;p&gt;
A few weeks ago I wrote about &lt;a href=&#34;https://cestlaz.github.io/posts/testing-testing/#.Wq7Ud3XwZhE&#34;&gt;introducing testing&lt;/a&gt; in CS classes,
specifically using a testing framework. In that post I talked about
the plan but now I can talk about the results.
&lt;/p&gt;
&lt;p&gt;
My class interleaves with Hunter&amp;#39;s CSCI 13500 - Software Analysis and
Design I class. One day each week, my students have complete a hands
on lab focusing on whatever is being covered in the 13500 class. I
decided to use one of those labs as a first foray into testing.
&lt;/p&gt;
&lt;p&gt;
I had each student use a classmates lab solution. They were to examine
their solution and write a test suite for the lab using the &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt;
C++ testing framework.
&lt;/p&gt;
&lt;p&gt;
I think this proved to be a valuable exercise.
&lt;/p&gt;
&lt;p&gt;
Partway into the exercise, a few students independently had an issue -
they couldn&amp;#39;t even build the tests.
&lt;/p&gt;
&lt;p&gt;
The code looked right. Something like this:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It looked like at textbook example of a test case but it wouldn&amp;#39;t even
compile.
&lt;/p&gt;
&lt;p&gt;
In all cases, the original student code compiled and ran and gave the
correct result. All the students had code similar to this:
&lt;/p&gt;
&lt;div class=&#34;src src-c++&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This stumped everyone for a while - why wouldn&amp;#39;t the test even
compile.
&lt;/p&gt;
&lt;p&gt;
The answer was &amp;#34;data types.&amp;#34; The lab specification required that
getValue was supposed to return a &lt;code&gt;double&lt;/code&gt; but in all the problem
cases, the student returned a &lt;code&gt;std::string&lt;/code&gt;. The lab appeared to work
since &lt;code&gt;std::cout&lt;/code&gt; handles strings as well as numeric data types but
once they put it in to a test case that actually checked types the
problem was apparent and easy to fix.
&lt;/p&gt;
&lt;p&gt;
As it turns out, I was pretty excited about this â€“ even before
finishign the tests, the act of writing tests revealed a problem. This
is a good thing.
&lt;/p&gt;
&lt;p&gt;
From there, it was pretty easy for students to finish writing the
tests for their classmates labs.
&lt;/p&gt;
&lt;p&gt;
Fast forward a week. This was the first lab where I required
the students to submit their own test suite as part of their lab. This
didn&amp;#39;t seem to slow anyone down by an appreciable and time will tell
if this leads to better development practices but it certainly made my
life easier. I was able to quickly move from repo to repo and type:
&lt;/p&gt;
&lt;div class=&#34;src src-bash&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make tests
./tests -s
... watch the tests run
make
./main
--- watch the program run&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Easy peasy.
&lt;/p&gt;
&lt;p&gt;
Not only did it make it faster for me, it also gave me insights into
their programs by seeing their decisions in terms of test writing.
&lt;/p&gt;
&lt;p&gt;
Is it a win?
&lt;/p&gt;
&lt;p&gt;
At the very worst, they&amp;#39;re learning an
industry practice and at best, it&amp;#39;s going to help them improve as
software engineers. Add on the fact that it&amp;#39;s making my life as a
teacher easier both in terms of understanding the students work and in
terms of speed of evaluation. Sounds like a win to me.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing, Testing</title>
      <link>https://cestlaz.github.io/posts/testing-testing/</link>
      <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cestlaz.github.io/posts/testing-testing/</guid>
      <description>&lt;p&gt;
With CS4All being the buzzword of the day we&amp;#39;re paying a lot of
attention to the fact that when we teach a CS class for all students,
most of them won&amp;#39;t end up studying CS or going directly
into a tech heavy field.
&lt;/p&gt;
&lt;p&gt;
Among those that do study CS though, there is another division. Those
studying CS as an academic exercise or to go on to graduate studies
and those who are going in to the tech sector. For those going into
the tech field, it&amp;#39;s important that they&amp;#39;re prepared in terms of
software development, design, and all those goodies not covered in CS
classes.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not advocating removing the good stuff currently in most colleg CS
curricua, although I will say that most CS programs I&amp;#39;ve reveiwed could benefit by
trimming some requriements and adding some electives. I am advocating
doing more than telling your students &amp;#34;comment your code,&amp;#34; - a refrain
many undergrads have heard frequently with little guidance.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m advocating to begin by bringing in tools and practices that either
don&amp;#39;t detract from current CS classes or in fact can add to or
streamline them.
&lt;/p&gt;
&lt;p&gt;
Last year I wrote about &lt;a href=&#34;https://cestlaz.github.io/posts/sigcse-2017-github-4/&#34;&gt;using Git and GitHub&lt;/a&gt; in my classes. Students
have to submit projects anyway and frequently have to work in teams so
using Git and a Git hosting service can actually make both student&amp;#39;s
and instructor&amp;#39;s class experiences better while introducing them to an
industry best practice.
&lt;/p&gt;
&lt;p&gt;
Today I want to talk about testing.
&lt;/p&gt;
&lt;p&gt;
Students are always told to test their code but frequently not given
tremendous guidance. The results can be:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
projects that don&amp;#39;t compile
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
projects that compile and run but not the way they&amp;#39;re supposed to.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
wonky input or interfaces
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
projects that don&amp;#39;t work for all cases
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
On the instructor side, we have to evaluate the student&amp;#39;s
submissions and deal with all of this. Some teachers use auto graders
to help. I have mixed feelings on them. On the one hand they can speed
up grading but on the other hand it&amp;#39;s important for me as the teacher
to actually dive into the student&amp;#39;s code. In any case, using an auto grader
is actually somewhat similar to running a test suite.
&lt;/p&gt;
&lt;p&gt;
Why not have the students create their own test suites? If done right,
this should encourage students to evaluate their own code more
carefully and also cut down on the time it takes the intructor to
evaluate a given submission.
&lt;/p&gt;
&lt;p&gt;
This means that we have to use a testing framework with a very low
cost of entry.
&lt;/p&gt;
&lt;p&gt;
I ended up finding &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt; for C++. It&amp;#39;s really simple and just a
single include file. This means that students don&amp;#39;t have to actually
install anything on their machines. Here&amp;#39;s the example from the
project page:
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://github.com/onqtam/doctest/raw/master/scripts/data/using_doctest_888px_wide.gif&#34; alt=&#34;https://github.com/onqtam/doctest/raw/master/scripts/data/using_doctest_888px_wide.gif&#34; title=&#34;https://github.com/onqtam/doctest/raw/master/scripts/data/using_doctest_888px_wide.gif&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;
Basically, the students can just start writing tests.
&lt;/p&gt;
&lt;p&gt;
Python also has a couple of low friction testing options. One is to
use the built in &lt;a href=&#34;https://docs.python.org/3/library/doctest.html&#34;&gt;doctest&lt;/a&gt; facility. Basically you put sample runs in the doc
string at the top of a function with the expected output:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This might seem a little cumbersome, particularly if you look at the
example at the link. It also requires the tests go on top of each
function and that the tests will print out as part of the docstring.
&lt;/p&gt;
&lt;p&gt;
The other easy Python option is the built in &lt;a href=&#34;https://docs.python.org/3/library/unittest.html&#34;&gt;unittest&lt;/a&gt; module.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s an example of testing strings from the link above:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I havn&amp;#39;t played with Java testing in years but I&amp;#39;d guess there&amp;#39;s
something similarly light weight.
&lt;/p&gt;
&lt;p&gt;
Tomorrow I&amp;#39;m hoping to finish the groundwork on using C++ doctest with
my class and I&amp;#39;ll write another post afterwards. Probably after SIGCSE
since I&amp;#39;ll be attending that from Wednesday on.
&lt;/p&gt;
&lt;p&gt;
We&amp;#39;ll see how this goes but I&amp;#39;m guessing it will work well. If it
does, it should make my life as a grader easier and also get the kids
on track to using test frameworks - something they&amp;#39;ll need wherever
they end up.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>